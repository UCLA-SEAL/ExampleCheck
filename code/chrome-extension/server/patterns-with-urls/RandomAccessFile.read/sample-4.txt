results[https://github.com/monaaco/monaaco/blob/07c74613e43316b75f782c3a8192b58205776d93/Proyecto/src/javazoom/jl/converter/RiffFile.java][Read][17] = -> TRY { -> file.read(Data,0,NumBytes,)@ }
results[https://github.com/stephenc/java-iso-tools/blob/9d5f66aa912a60a756fa71de619b06d546d2f760/loopy/loopy-core/src/main/java/net/didion/loopy/AbstractFileSystem.java][read][31] = -> TRY {  -> return this.channel.read(buffer,offset,length,)@ } CATCH(IOException) {}
results[https://github.com/bhaviksingh/CS162/blob/9163b5a0359470884c2f76148886d226b0da29c7/machine/StubFileSystem.java][read][2] = -> TRY { -> file.seek(pos,)@ -> return Math.max(0,file.read(buf,offset,length,),)@ }
results[https://github.com/tulskiy/musique/blob/500f8156562eaccd3f3a46ce1ece63dd2f191ca4/musique-core/src/main/java/com/tulskiy/musique/audio/formats/flac/oggflac/OggFlacDecoder.java][getData][1] = -> index=oy.buffer(CHUNKSIZE,)@ -> TRY { -> bytes=input.read(buffer,index,CHUNKSIZE,)@ } -> oy.wrote(bytes,)@
results[https://github.com/SiteView/NEWECC9.2/blob/141f3f132d2656f94f5ee62a3054d27162e8e5ad/com.siteview.kernel.core/src/COM/dragonflow/Utils/Braf.java][fillBuffer][5] = -> TRY {  -> i=file.read(buffer,0,BUF_SIZE,)@ } CATCH(java.io.IOException) {}
results[https://github.com/mirror/jpcsp/blob/32b141ef80cee0774e3ccc43f859646841fe00e5/src/jpcsp/filesystems/umdiso/ISOFileSectorDevice.java][readSectors][52] = -> TRY {  -> fileAccess.seek((long) sectorLength*sectorNumber,)@ -> length=fileAccess.read(buffer,offset,numberSectors*sectorLength,)@ } CATCH(IOException) {}
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/545cb5012cfeafb13506fc1ac1e5e8d8f32a7df1/src/servers/src/org/xtreemfs/sandbox/tests/ReplicationStressTest/ReplicationStressTestReader.java][readFromXtreemFS][2] = -> TRY {  -> in.seek(startOffset,)@ -> in.read(buffer,0,buffer.length,)@ } CATCH(Exception) {}
results[https://github.com/besuikerd/vip/blob/1422545fbba21088b2df7c530de7754a1c0ab4f7/shared/src/net/majorkernelpanic/streaming/mp4/MP4Parser.java][findBoxAvcc][4] = -> TRY { -> fis.seek(pos+8,)@ -> LOOP { -> fis.read(buffer,0,3,)@ } }
results[https://github.com/tijuca/icedove/blob/4920dca05eb3b6daa968edb29fd558ff8d2a423a/directory/sdks/java-sdk/ietfldap/org/ietf/ldap/util/ByteBuf.java][read][8] = -> TRY {  -> ensureCapacity(count+max_bytes,)@ -> i=file.read(value,count,max_bytes,)@ } CATCH(IOException) {}
results[https://github.com/mirror/jpcsp/blob/f8e523cb7aaeb28b4f04513de0e74c9dd3b0e62f/src/jpcsp/media/FileProtocolHandler.java][read][2] = -> TRY { -> return stream.read(buf,0,size,)@ } CATCH(IOException) { -> log.error(e,)@ }
results[https://github.com/arekinath/jop/blob/f9c3a15861d0271335b0ee50de886d61a3cf99b6/java/pc/src/yaffs2/utils/emulation/FileEmulationUnix.java][read][2] = -> TRY { -> return fildes.read(buf,bufIndex,nbyte,)@ } CATCH(IOException) { -> throw new HiddenException()@ }
results[https://github.com/copperflake/SAT/blob/2c1140df0cff3f33586e27f05129654dcea55754/src/sat/file/SegmentableFile.java][getSegment][1] = -> TRY {  -> file.read(bytes,offset*SEGMENT_SIZE,SEGMENT_SIZE,)@ -> return new FileSegment(bytes,)@ } CATCH(IOException) {}
results[https://github.com/blitz-research/monkey/blob/30c0bdf2e7784b2d5954315c70962bd2fba2c127/modules/brl/native/filestream.java][Read][1] = -> IF { -> return 0@_stream==null } -> TRY { -> n=_stream.read(buffer._data.array(),offset,count,)@!(_stream==null) }
results[https://github.com/mballance/sveditor/blob/b494b29b4aa349ce7c14d9f20a754d6ac2dc5819/sveditor/plugins/net.sf.sveditor.core/src/net/sf/sveditor/core/db/index/cache/file/SVDBFileSystem.java][readBlock][1] = -> TRY {  -> rw=fFileRWList.get(writer_id,)@!(writer_id>=fFileRWList.size()) -> rw.seek(BLK_SIZE*writer_blk_id,)@!(writer_id>=fFileRWList.size()) -> rw.read(data,0,BLK_SIZE,)@!(writer_id>=fFileRWList.size()) } CATCH(IOException) {}
results[https://github.com/bpow/picard/blob/98c85de99c4df8ebc708ffba33963d0f1c8ae92b/src/java/net/sf/samtools/apps/TimeRandomAccessFile.java][readBytes][18] = -> TRY {  -> LOOP { -> count=file.read(buffer,offset+bytesRead,length-bytesRead,)@bytesRead<length } } CATCH(IOException) {}
results[https://github.com/bslund/jetty-maven-plugin/blob/85784ca8b48afe764fce4da939f2bb49bf04faab/server/jetty/src/main/java/org/mortbay/io/nio/RandomAccessFileBuffer.java][peek][17] = -> TRY { -> _file.seek(index,)@ -> return _file.read(b,offset,length,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/freenet/plugin-Spider-official/blob/353fb9a18f7752c88b3656811c58758a74ee5fa7/org/garret/perst/impl/OSFile.java][read][8] = -> TRY { -> file.seek(pos,)@ -> return file.read(buf,0,buf.length,)@ } CATCH(IOException) { -> throw new StorageError(StorageError.FILE_ACCESS_ERROR,x,)@ }
results[https://github.com/ttron/lab/blob/49a303aebf708b2d1318bf9e09c8868e101b1f07/nexus-oss/components/nexus-core/src/main/java/org/sonatype/nexus/util/LockFile.java][readBytes][4] = -> TRY {  -> Preconditions.checkState(randomAccessFile!=null,"No lock obtained, cannot read file contents.",)@ -> randomAccessFile.seek(0,)@ -> randomAccessFile.read(buffer,0,buffer.length,)@ } CATCH(IOException) {}
results[https://github.com/xored/f4/blob/82d3c126f014bec0b060a0a2d66793d45041c562/com.xored.f4.fantom/fantom/src/sys/java/fan/sys/FileBuf.java][getBytes][1] = -> TRY { -> fp.seek(pos,)@ -> fp.read(dst,off,len,)@ } CATCH(IOException) { -> throw IOErr.make(e,)@ }
results[https://github.com/frostwire/frostwire-desktop/blob/90eacf1ef657a5664fd9b5e2e84d819091f9ea3c/lib/jars-src/jaudiotagger/src/org/jaudiotagger/audio/aiff/AiffUtil.java][readPascalString][1] = -> TRY {  -> len=raf.read()@ -> raf.read(buf,1,len,)@ -> buf[0]=(byte) len@ -> return bytesToPascalString(buf,)@ } CATCH(IOException) {}
results[https://github.com/orcc/orcc/blob/ea67a6a35b6c7e81ee3c1470d0d497804d91cbc1/eclipse/plugins/net.sf.orcc.simulators/src/std/stdio/impl/Source.java][source_readNBytes][2] = -> TRY { -> in.read(outTable,0,nbTokenToRead.intValue(),)@ } CATCH(IOException) { -> throw new RuntimeException(msg,e,)@ }
results[https://github.com/artclarke/humble-video/blob/6e0c88c2734ae09f802018c957dea74b2c3c01bf/src/main/java/io/humble/video/customio/FileProtocolHandler.java][read][3] = -> TRY { -> ret=stream.read(buf,0,size,)@ } CATCH(IOException) { -> log.error("Got IO exception reading from file: {}",file,)@ -> e.printStackTrace()@ }
results[https://github.com/dschanoeh/Kayak/blob/53eb0604d2f90f3c4c3bdade2e438e89f4a1fe77/Kayak-core/src/main/java/com/github/kayak/core/BufferedLineReader.java][seek][1] = -> TRY {  -> newFile.seek(pos,)@ -> read=newFile.read(buffer,0,BUFFLEN,)@ -> string=new String(buffer,"ASCII",)@ } CATCH(IOException) {}
results[https://github.com/orcc/orcc/blob/0854743b38a38221c443311730f9ad5d04a2d759/eclipse/plugins/net.sf.orcc.simulators/src/net/sf/orcc/simulators/runtime/std/stdio/impl/Source.java][source_readNBytes][1] = -> TRY { -> in.read(outTable,0,nbTokenToRead.intValue(),)@ } CATCH(IOException) { -> throw new OrccRuntimeException(msg,e,)@ }
results[https://github.com/olas/bioclipse.structuredb/blob/c8f31e3b63678031e58ce9e73fc444f93f99321a/cdk-externals/trunk/org.openscience.cdk.extra/src/org/openscience/cdk/io/random/RandomAccessReader.java][readContent][1] = -> TRY {  -> raFile.seek(index[record][0],)@!(record<0||record>=records) -> length=(int) index[record][1]@!(record<0||record>=records) -> raFile.read(b,0,length,)@!(record<0||record>=records) -> return new String(b,0,length,)@!(record<0||record>=records) } CATCH(Exception) {}
results[https://github.com/openspim/3rdpartypublic/blob/92e4ec5234bd9d8c33590e22dce3047bdd889d16/sourceext/imagej/ij/plugin/AVI_Reader.java][<init>][13] = -> TRY {  -> IF { -> bufferLength=Math.min(BUFFERSIZE-HUFFMAN_LENGTH,readableSize,)@ -> bufferLength=rFile.read(buffer,0,bufferLength,)@ } } CATCH(IOException) {}
results[https://github.com/wikimedia/openzim/blob/1b1e08691a30380af927240ec20c8e2ea0f19aa9/zimreader-java/src/org/openzim/util/RandomAcessFileZIMInputStream.java][readFourLittleEndianBytesValue][1] = -> TRY {  } ELSE { -> mRAFReader.read(buffer,0,4,)@ -> return Utilities.toFourLittleEndianInteger(buffer,)@ } CATCH(IOException) {}
results[https://github.com/elms1990/mc715/blob/0ffed87e754f484c54e93b9c0e36c731cdb4960b/projeto02/zookeeper-3.4.5/contrib/loggraph/src/java/org/apache/zookeeper/graph/RandomAccessFileReader.java][fill][9] = -> TRY {  -> read=file.read(buffer,0,buffer.length,)@ -> IF { -> buf=new String(buffer,0,40,"UTF-8",)@ } } CATCH(IOException) {}
results[https://github.com/hamo26/SchdedulingAndFunStuff/blob/85561736c92622fe8a64a9004ac7d80b8a5d99c6/nanork/nano-RK/avrora/src/cck/elf/ELFStringTable.java][read][4] = -> TRY {  -> f.seek(entry.sh_offset,)@ -> LOOP { -> read+=f.read(data,read,data.length-read,)@read<data.length } } CATCH(IOException) {}
results[https://github.com/DominicWatson/open-bluedragon/blob/7a0bc66077007b1125edcf6de803ac15b6f284f8/src/org/farng/mp3/lyrics3/FieldBodyUnsupported.java][read][2] = -> TRY {  -> file.read(buffer,0,5,)@ -> size=Integer.parseInt(new String(buffer,0,5,),)@ -> file.read(this.value,)@ } CATCH(IOException) {}
results[https://github.com/apache/harmony/blob/cfad25367437aa4d561ad52e9ed05453c96469fa/classlib/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/io/RandomAccessFileTest.java][test_read_$BII_IOException][8] = -> TRY {  -> raf=new java.io.RandomAccessFile(fileName,"r",)@ -> raf.close()@ -> read=raf.read(rbuf,0,0,)@ -> assertEquals(0,read,)@ } CATCH(IOException) {}
results[https://github.com/uKev/knipsX/blob/95d284f17f3efd8d12cab1e2c0f7e5246dcc7447/src/main/java/org/knipsX/utils/exifAdapter/jexifviewer/JIfd.java][readIFDTag][2] = -> TRY { -> m_offset=file.getFilePointer()@ -> file.read(buf,0,2,)@ -> m_count=JDataFormatHelper.buf2ToInt(buf,0,bIntel,)@ } CATCH(IOException) { -> ex.printStackTrace()@ }
results[https://github.com/wikimedia/openzim/blob/1b1e08691a30380af927240ec20c8e2ea0f19aa9/zimreader-java/src/org/openzim/util/RandomAcessFileZIMInputStream.java][readTwoLittleEndianBytesValue][1] = -> TRY {  } ELSE { -> mRAFReader.read(buffer,0,2,)@ -> return Utilities.toTwoLittleEndianInteger(buffer,)@ } CATCH(IOException) {}
results[https://github.com/YongJiang/org.eclipse.birt.common/blob/a70673f105d3281b26ad0b011e0fd5a38594aac1/plugins/org.eclipse.birt.core/src/org/eclipse/birt/core/archive/RAFileInputStream.java][readToBuffer][1] = -> TRY {  -> IF { -> len=(int) availableSize@!(availableSize<=0) && len>availableSize } -> parent.seek(parentPos,)@!(availableSize<=0) -> bufLen=parent.read(buf,0,len,)@!(availableSize<=0) } CATCH(IOException) {}
results[https://github.com/wikimedia/openzim/blob/1b1e08691a30380af927240ec20c8e2ea0f19aa9/zimreader-java/src/org/openzim/util/RandomAcessFileZIMInputStream.java][readEightLittleEndianBytesValue][1] = -> TRY {  } ELSE { -> mRAFReader.read(buffer,0,8,)@ -> return Utilities.toEightLittleEndianInteger(buffer,)@ } CATCH(IOException) {}
results[https://github.com/frostwire/frostwire-android/blob/1c169f39ddd65545c8391442fc7a5dd456e7ba12/vuze/azureus3/src/com/aelitis/azureus/core/download/DiskManagerFileInfoStream.java][read][6] = -> TRY {  -> IF { -> raf.seek(offset,)@raf.length()>offset -> return raf.read(buffer,0,length,)@raf.length()>offset } } CATCH(IOException) {}
results[https://github.com/jgzornoza/SistemaVotacion/blob/161b6e54ca97f210962ca7a341dd2ba745c541a4/VotingToolAndroidProject/libraries/bc/src/main/java/javax/mail/util/SharedFileInputStream.java][fill][13] = -> TRY {  -> in.seek(bufpos+pos,)@ -> IF { -> len=(int) datalen-bufpos-start+pos@bufpos-start+pos+len>datalen } -> n=in.read(buf,pos,len,)@ } CATCH(IOException) {}
results[https://github.com/eswartz/emul/blob/8cc1c3663d5f894210c949aebfc4f62318ca6c88/v9t9/v9t9-java/v9t9-common/src/v9t9/common/files/NativeTextFile.java][readContents][1] = -> TRY {  -> raf=new RandomAccessFile(file,"r",)@ -> raf.seek(offset,)@ -> ret=raf.read(contents,contentOffset,length,)@ -> raf.close()@ } CATCH(IOException) {}
results[https://github.com/xored/f4/blob/82d3c126f014bec0b060a0a2d66793d45041c562/com.xored.f4.fantom/fantom/src/sys/java/fan/sys/MemBuf.java][pipeFrom][1] = -> TRY {  -> len=(int) lenLong@ -> grow(pos+len,)@ -> read=src.read(buf,pos,len,)@ -> IF { -> return -1@read<0 } } CATCH(IOException) {}
results[https://github.com/wikimedia/openzim/blob/1b1e08691a30380af927240ec20c8e2ea0f19aa9/zimreader-java/src/org/openzim/util/RandomAcessFileZIMInputStream.java][readSixteenLittleEndianBytesValue][1] = -> TRY {  } ELSE { -> mRAFReader.read(buffer,0,16,)@ -> return Utilities.toSixteenLittleEndianInteger(buffer,)@ } CATCH(IOException) {}
results[https://github.com/aurelf/avrora/blob/5b2c2c7cf1334b607c18e682977e71623b4b0cb2/src/avrora/syntax/elf/ELFDataInputStream.java][read_section][3] = -> TRY {  -> file.seek(off,)@ -> LOOP { -> cntr+=file.read(buffer,cntr,length-cntr,)@cntr<length } } CATCH(IOException) {}
results[https://github.com/YongJiang/org.eclipse.birt.common/blob/a0bc8d627844ba2ec29eeee5601e24f402d69153/plugins/org.eclipse.birt.core/src/org/eclipse/birt/core/archive/RAFolderInputStream.java][readToBuffer][1] = -> TRY {  -> availableSize=randomFile.length()-randomFile.getFilePointer()@ -> len=(int) Math.min(buf.length,availableSize,)@!(availableSize<=0) -> bufLen=randomFile.read(buf,0,len,)@!(availableSize<=0) } CATCH(IOException) {}
results[https://github.com/eswartz/emul/blob/8cc1c3663d5f894210c949aebfc4f62318ca6c88/v9t9/v9t9-java/v9t9-common/src/v9t9/common/files/NativeFDRFile.java][readContents][1] = -> TRY {  -> raf=new RandomAccessFile(file,"r",)@ -> raf.seek(offset+fdr.getFDRSize(),)@ -> len=raf.read(contents,contentOffset,length,)@ -> raf.close()@ } CATCH(IOException) {}
results[https://github.com/aurelf/avrora/blob/810ddb7de065cf51721eb3f5f574b177415459a1/src/cck/elf/ELFHeader.java][read][3] = -> TRY {  -> IF { -> throw new FormatError()@fs.length()<EI_NIDENT } -> LOOP { -> index+=fs.read(e_ident,index,EI_NIDENT-index,)@!(fs.length()<EI_NIDENT) && index<EI_NIDENT } -> is=new ELFDataInputStream(this,fs,)@!(fs.length()<EI_NIDENT) } CATCH(IOException,FormatError) {}
results[https://github.com/faux123/android_frameworks_base/blob/50a6b6151165b457de8bd82a850d8ac61aed5949/core/java/com/android/internal/widget/LockPatternUtils.java][checkPattern][10] = -> TRY { -> raf=new RandomAccessFile(sLockPatternFilename,"r",)@ -> got=raf.read(stored,0,stored.length,)@ -> raf.close()@ -> IF { -> return true@got<=0 } -> return Arrays.equals(stored,LockPatternUtils.patternToHash(pattern,),)@!(got<=0) }
results[https://github.com/goodow/j2objc/blob/f33bcb131ceaa35061b81bfbb4ae361db3da43f1/jre_emul/android/libcore/harmony-tests/src/test/java/org/apache/harmony/tests/java/io/RandomAccessFileTest.java][test_read_$BII_NullPointerException][8] = -> TRY {  -> raf=new RandomAccessFile(f,"r",)@ -> TRY { -> raf.read(rbuf,0,-1,)@ } -> raf.close()@ } CATCH(IOException) {}
results[https://github.com/atteroTheGreatest/laughing-archer/blob/afaae02da41b6b76f1c401b958f3b0b2f03fa7a6/src/mobireader/Mobi.java][parseMobiHeader][1] = -> TRY {  -> fp=new RandomAccessFile(file,"r",)@ -> fp.seek(offset,)@ -> fp.read(buff,0,headers.mobiHeaderSize,)@ -> mobiHeader=Codecs.decode(codec,buff,)@ -> fp.close()@ } CATCH(IOException,DecodingException) {}
results[https://github.com/CyanMobile/android_frameworks_base_cyanmobile/blob/77a8c4e1be2ba86dcce284c1d259a8c953cfd92c/core/java/com/android/internal/widget/LockPatternUtils.java][checkPassword][6] = -> TRY { -> raf=new RandomAccessFile(sLockPasswordFilename,"r",)@ -> got=raf.read(stored,0,stored.length,)@ -> raf.close()@ -> IF { -> return true@got<=0 } -> return Arrays.equals(stored,passwordToHash(password,),)@!(got<=0) }
results[https://github.com/mirror/jpcsp/blob/32b141ef80cee0774e3ccc43f859646841fe00e5/src/jpcsp/filesystems/umdiso/ISOFileSectorDevice.java][readSector][1] = -> TRY {  -> fileAccess.seek((long) sectorLength*sectorNumber,)@ -> length=fileAccess.read(buffer,offset,sectorLength,)@ -> IF { -> Arrays.fill(buffer,length,sectorLength,(byte) 0,)@length<sectorLength } } CATCH(IOException) {}
results[https://github.com/uvalbbu/dalvik_test/blob/e595037cf49109e9e20b47e6e191eda45e414008/luni/src/test/java/org/apache/harmony/luni/tests/java/io/RandomAccessFileTest.java][test_read_$BII_IndexOutOfBoundsException][8] = -> TRY {  -> raf=new java.io.RandomAccessFile(fileName,"r",)@ -> raf.close()@ -> TRY { -> raf.read(rbuf,-1,0,)@ } } CATCH(IOException) {}
results[https://github.com/charleso/naca/blob/9fe1dd7b410a08e36c346ee9711baefd5bb116fc/JLib/src/jlib/misc/DataFileReadWrite.java][read][1] = -> IF { -> TRY { -> byteBuffer=getByteBuffer(nSize,)@!(m_rw!=null) -> nNBytesRead=m_rw.read(byteBuffer,0,nSize,)@m_rw!=null -> return byteBuffer@m_rw!=null } CATCH(IOException) { -> e.printStackTrace()@!(m_rw!=null) } }
results[https://github.com/copperflake/SAT/blob/e4764bce9c6580a6186273727cff2afe0a7fc1b4/src/sat/utils/file/SegmentableFile.java][getSegment][2] = -> TRY {  -> file.seek(offset*SEGMENT_SIZE,)@ -> bytesRead=file.read(bytes,0,SEGMENT_SIZE,)@ -> IF { -> bytes=Arrays.copyOfRange(bytes,0,bytesRead,)@bytesRead<SEGMENT_SIZE } } CATCH(IOException) {}
results[https://github.com/munjeni/miui_sony_xperia/blob/67e248c12c5d2d1a5010a9ef8c90585f8bb91beb/miui/src/frameworks/base/core/java/com/android/internal/widget/LockPatternUtils.java][checkPassword][2] = -> TRY { -> raf=new RandomAccessFile(sLockPasswordFilename,"r",)@ -> got=raf.read(stored,0,stored.length,)@ -> raf.close()@ -> IF { -> return true@got<=0 } -> return Arrays.equals(stored,passwordToHash(stored,password,),)@!(got<=0) }
results[https://github.com/asascience/THREDDS/blob/d9e7d7fe80f19fbebb6cd808b4ef6281d56b8f13/grib/src/ucar/jpeg/jj2000/j2k/io/BufferedRandomAccessFile.java][readNewBuffer][5] = -> TRY {  -> IF { -> throw new EOFException()@isReadOnly&&off>=theFile.length() } -> theFile.seek(offset,)@!(isReadOnly&&off>=theFile.length()) -> maxByte=theFile.read(byteBuffer,0,byteBuffer.length,)@!(isReadOnly&&off>=theFile.length()) } CATCH(IOException) {}
results[https://github.com/dkomanov/fizteh-java-2013/blob/7a5510e00f5d08019714622e9496ce9aa4080899/src/ru/fizteh/fivt/students/eltyshev/filemap/base/FilemapReader.java][readValue][3] = -> TRY {  -> currentOffset=file.getFilePointer()@ -> file.seek(offset,)@ -> file.read(bytes,0,valueLength,)@ -> file.seek(currentOffset,)@ -> return new String(bytes,AbstractStorage.CHARSET,)@ } CATCH(IOException) {}
results[https://github.com/victoryckl/android-demos/blob/33ef4be7269c12678b8e3406c6a0a7298328b2ad/LockPattern/src/com/way/pattern/LockPasswordUtils.java][checkPassword][1] = -> TRY { -> raf=new RandomAccessFile(sLockPasswordFilename,"r",)@ -> got=raf.read(stored,0,stored.length,)@ -> raf.close()@ -> IF { -> return true@got<=0 } -> return Arrays.equals(stored,passwordToHash(password,),)@!(got<=0) }
results[https://github.com/vinukn/domainmath-ide/blob/da93a541a92a112d8dff319e46d0d3a62713fef3/Jalview 2.8/src/com/stevesoft/pat/wrap/RandomAccessFileWrap.java][charAt][1] = -> IF { -> return (char) buf[i-i0]@i>=i0&&i<iend } -> TRY { -> raf.seek(i0+offset,)@!(i>=i0&&i<iend) -> iend=i0+raf.read(buf,0,buf.length,)@!(i>=i0&&i<iend) -> IF { -> return (char) buf[i-i0]@i>=i0&&i<iend } } -> throw new ArrayIndexOutOfBoundsException("Out of bounds for file:"+" i="+i+", Final Buffer: i0="+i0+" iend="+iend,)@!(i>=i0&&i<iend)
results[https://github.com/sisbell/jxta/blob/c3fca172c3a10625d70c7d11232c481fbfe6af34/j2se/tutorials/src/main/java/tutorial/message/MessageTutorial.java][byteArrayExample][3] = -> TRY { -> raf=new RandomAccessFile(file,"rw",)@ -> raf.setLength(1024*4,)@ -> raf.read(buf,0,size,)@ -> addByteArrayToMessage(message,"TutorialNameSpace","byte test",buf,true,)@ } CATCH(IOException) { -> io.printStackTrace()@ }
results[https://github.com/syapse/bigdata/blob/463d63129947bfb8f7341535e0ae6ed54134aafc/bigdata/src/test/com/bigdata/io/TestManagedReads.java][unmanagedReads][1] = -> LOOP { -> TRY { -> m_raf.seek(rec.pos,)@ -> m_raf.read(rdbuf,0,rec.size,)@ } CATCH(IOException) { -> e.printStackTrace()@ } }
results[https://github.com/victoryckl/android-demos/blob/33ef4be7269c12678b8e3406c6a0a7298328b2ad/LockPattern/src/com/way/view/LockPatternUtils.java][checkPattern][1] = -> TRY { -> raf=new RandomAccessFile(sLockPatternFilename,"r",)@ -> got=raf.read(stored,0,stored.length,)@ -> raf.close()@ -> IF { -> return true@got<=0 } -> return Arrays.equals(stored,LockPatternUtils.patternToHash(pattern,),)@!(got<=0) }
results[https://github.com/atteroTheGreatest/laughing-archer/blob/afaae02da41b6b76f1c401b958f3b0b2f03fa7a6/src/mobireader/Mobi.java][parseEXTHHeader][1] = -> TRY {  -> fp=new RandomAccessFile(file,"r",)@ -> fp.seek(offset,)@ -> fp.read(buff,0,headers.exthHeaderSize,)@ -> exthHeader=Codecs.decode(codec,buff,)@ -> fp.close()@ } CATCH(IOException,DecodingException) {}
results[https://github.com/atteroTheGreatest/laughing-archer/blob/afaae02da41b6b76f1c401b958f3b0b2f03fa7a6/src/mobireader/Mobi.java][parsePalmDOCHeader][1] = -> TRY {  -> fp=new RandomAccessFile(file,"r",)@ -> fp.seek(offset,)@ -> fp.read(buff,0,headers.palmDocHeaderSize,)@ -> palmDocHeader=Codecs.decode(codec,buff,)@ -> fp.close()@ } CATCH(IOException,DecodingException) {}
results[https://github.com/YongJiang/org.eclipse.birt.common/blob/5e4069d8b64d6ee03189b1aa094ce5014f1511da/plugins/org.eclipse.birt.core/src/org/eclipse/birt/core/archive/RAStreamBuffer.java][read][1] = -> TRY {  -> LOOP { -> count=randomFile.read(b,off+n,len-n,)@ -> IF { -> return n@count<0 } } } CATCH(IOException) {}
results[https://github.com/ucb-bar/riscv-gcc/blob/c57740cef52139a7e763a4c17cd17ceebd233d09/gcc-4.6.1/libjava/classpath/javax/imageio/stream/FileCacheImageOutputStream.java][read][38] = -> TRY {  -> num=cache.read(data,offset,len,)@ } CATCH(IOException) {}
results[https://github.com/frostwire/frostwire-android/blob/ce7e8bd97222ff405a02440c4c2cca7e99139182/src/medialib/com/frostwire/mp3/Mp3File.java][preScanFile][11] = -> TRY { -> file.seek(0,)@ -> bytesRead=file.read(bytes,0,AbstractID3v2Tag.HEADER_LENGTH,)@ -> IF { -> TRY { -> ID3v2TagFactory.sanityCheckTag(bytes,)@!(bytesRead==AbstractID3v2Tag.HEADER_LENGTH) -> return AbstractID3v2Tag.HEADER_LENGTH+BufferTools.unpackSynchsafeInteger(bytes[AbstractID3v2Tag.DATA_LENGTH_OFFSET],bytes[AbstractID3v2Tag.DATA_LENGTH_OFFSET+1],bytes[AbstractID3v2Tag.DATA_LENGTH_OFFSET+2],bytes[AbstractID3v2Tag.DATA_LENGTH_OFFSET+3],)@bytesRead==AbstractID3v2Tag.HEADER_LENGTH } } }
results[https://github.com/gpothier/zz.utils/blob/fe15605092a48af95d6c1b7fd49615bd76d651f8/src/zz/utils/RandomAccessInputStream.java][read][29] = -> TRY {  -> return itsFile.read()@ } CATCH(IOException) {}
results[https://github.com/Icy-imaging/Icy-App/blob/063fa92491059e52323abe28983d5df4b0f10d96/ij/plugins/Input-Output/DM3_Reader.java][readString][4] = -> TRY {  -> IF { -> throw new IOException("Can't handle strings longer than 2000 chars, n = "+n+" at pos = "+f.getFilePointer(),)@n>2000 } -> f.read(temp,0,n,)@!(n>2000) -> return new String(temp,)@!(n>2000) } CATCH(IOException) {}
results[https://github.com/jeyboy/MUSIC/blob/c68427295b2827ab15affe084eecc72ed47ea199/lib/audiotagger/org/jaudiotagger/tag/lyrics3/AbstractLyrics3v2FieldFrameBody.java][readHeader][9] = -> TRY {  -> file.read(buffer,0,5,)@ -> size=Integer.parseInt(new String(buffer,0,5,),)@ -> IF { -> throw new InvalidTagException("Lyircs3v2 Field has size of zero.",)@size==0&&!(TagOptionSingleton.getInstance().isLyrics3KeepEmptyFieldIfRead()) } } CATCH(InvalidTagException,IOException) {}
results[https://github.com/LeeMinWoo/android_dalvik/blob/b99b5cd0be8ab0d9791768c21ffd0d637b564df8/libcore/archive/src/main/java/java/util/zip/ZipFile.java][read][55] = -> TRY {  -> mSharedRaf.seek(mOffset,)@ -> IF { -> len=(int) mLength-mOffset@len>mLength-mOffset } -> count=mSharedRaf.read(b,off,len,)@ } ELSE { -> return -1@!(count>0) } CATCH(IOException) {}
results[https://github.com/penSecIT/commons-vfs/blob/50421355d646c1b1019928095d0afc9fd8cf20bf/tags/vfs-1.0-RC1/src/java/org/apache/commons/vfs/provider/local/LocalFileRandomAccessContent.java][read][11] = -> TRY {  -> return raf.read(b,off:int,len:int,)@ } CATCH(IOException) {}
results[https://github.com/aptana/studio2/blob/0905925e7efa7e473e7c2b3d69a618e19056ed31/plugins/com.aptana.ide.logging/src/com/aptana/ide/logging/impl/LocalLineBasedLogWatcher.java][readData][1] = -> IF { -> return @file==null } -> TRY { -> file.seek(startPos,)@!(file==null) -> gotBytes=file.read(buffer.array(),0,maxBytesToRead,)@!(file==null) -> IF { -> buffer.limit(gotBytes,)@gotBytes>0 && !(file==null) } }
results[https://github.com/stapler/stapler/blob/13eef378b7c980afef1968dd550f596d9213b174/core/src/main/java/org/kohsuke/stapler/framework/io/LargeText.java][read][12] = -> TRY {  -> return file.read(buf,)@ } CATCH(IOException) {}
results[https://github.com/mwladysiak/vtm-honeycomb/blob/aa26095e942b3d4d527cc2f35f738747ce96f3a1/src/org/oscim/database/mapfile/ReadBuffer.java][readFromFile][14] = -> TRY {  -> IF { -> IF { -> LOG.warning("invalid read length: "+length,)@mBufferData==null||mBufferData.length<length && length>MAXIMUM_BUFFER_SIZE -> return false@mBufferData==null||mBufferData.length<length && length>MAXIMUM_BUFFER_SIZE } } -> return mInputFile.read(mBufferData,0,length,)==length@!(mBufferData==null||mBufferData.length<length) } CATCH(IOException) {}
results[https://github.com/ttron/lab/blob/037989fda2d28fb0d21ff98a90b69984399033bf/Hadoop-2/hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/WriteCtx.java][loadData][4] = -> TRY {  -> raf.seek(dumpFileOffset,)@ -> size=raf.read(rawData,0,count,)@ -> IF { -> throw new IOException("Data count is "+count+", but read back "+size+"bytes",)@size!=count } -> data=ByteBuffer.wrap(rawData,)@!(size!=count) } CATCH(IOException) {}
results[https://github.com/gaffo/jgit/blob/ff09f7e201c285af38fd1293fe5ac08019ae45dc/org.spearce.jgit/src/org/spearce/jgit/fetch/IndexPack.java][fillFromFile][3] = -> TRY {  -> IF { -> next=packOut.read(buf,0,buf.length,)@!(bAvail==0) -> IF { -> throw new EOFException("Packfile is truncated.",)@next<=0 && bAvail==0 } } } CATCH(IOException) {}
results[https://github.com/mbien/jake2/blob/8e9cfb3081da27d55219360771d69265829bc9eb/src/jake2/qcommon/FS.java][Read][1] = -> LOOP { -> block=Math.min(remaining,MAX_READ,)@remaining!=0 -> TRY { -> read=f.read(buffer,offset,block,)@ } CATCH(IOException) { -> Com.Error(Defines.ERR_FATAL,e.toString(),)@ } }
results[https://github.com/olanto/MYCAT/blob/188206ac8618d132c62a1ac055a9a15cc34c806a/prog/coreidx/src/org/olanto/idxvli/IdxIO.java][loadPosChar][2] = -> TRY { -> pcf.seek(glue.rdnposchar[d],)@ -> length=glue.getLengthOfD(d,)@ -> pcf.read(byteidx,0,length*4,)@ -> byteToint(seq,length*4,byteidx,)@ } CATCH(Exception) { -> System.err.println("IO error LoadPosChar vector",)@ -> e.printStackTrace()@ }
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/ba3583c3fdb92050e88960eb18b0e3a6d55424b3/java/servers/test/org/xtreemfs/test/osd/rwre/RWReplicationTest.java][testReplicationWithClient][1] = -> TRY {  -> raf=f.open("rw",0444,)@ -> raf.write(data,0,data.length,)@ -> raf.seek(1024,)@ -> raf.forceReplica(1,)@ -> raf.read(data,0,data.length,)@ -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/WSN-2012/BPF-Gateway-Service/blob/724161d929c927e2e9204bbb87342083f517585b/src/DirWatcher/PeriodicFileWatcher.java][onChange][1] = -> TRY { -> raf=new RandomAccessFile(file,"r",)@ -> raf.seek(previousFileSize,)@ -> raf.read(buf,0,(int) raf.length()-previousFileSize,)@ -> Service.send(buf,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/goodow/j2objc/blob/8de126a9fcd35ae86ebc7bfed52b87984deda004/jre_emul/android/libcore/luni/src/main/java/java/util/zip/ZipFile.java][read][1] = -> TRY {  -> IF { -> byteCount=(int) length@byteCount>length } -> sharedRaf.seek(offset,)@ -> count=sharedRaf.read(buffer,byteOffset,byteCount,)@ } ELSE { -> return -1@!(count>0) } CATCH(IOException) {}
results[https://github.com/olanto/MYCAT/blob/188206ac8618d132c62a1ac055a9a15cc34c806a/prog/coreidx/src/org/olanto/idxvli/IdxIO.java][loadBag][1] = -> TRY { -> bf.seek(glue.rdnbag[d],)@ -> length=bf.readInt()@ -> bf.read(byteidx,0,length*4,)@ -> byteToint(bag,length*4,byteidx,)@ } CATCH(Exception) { -> System.err.println("IO error LoadBag vector",)@ -> e.printStackTrace()@ }
results[https://github.com/sbliven/biojava/blob/b6d10827009c4d656de9540540060e34c4b62d87/src/org/biojava/utils/io/RandomAccessReader.java][fill][1] = -> TRY {  -> IF { -> throw new IOException("Random access file closed",)@raf==null } -> b=raf.read(bytes,0,DEFAULT_BUFFER_SIZE,)@!(raf==null) -> LOOP { -> buffer[i]=(char) bytes[i]@--i>=0 && !(raf==null) } } CATCH(IOException) {}
results[https://github.com/mcm46/lab2/blob/87a713453f5a521d08c163334654fca4402e4a23/Lab3/virtualdisk/VirtualDisk.java][readBlock][1] = -> TRY {  -> seekLen=buf.getBlockID()*Constants.BLOCK_SIZE@ -> IF { -> return -1@_maxVolSize<seekLen+Constants.BLOCK_SIZE } -> _file.seek(seekLen,)@!(_maxVolSize<seekLen+Constants.BLOCK_SIZE) -> return _file.read(buf.getBuffer(),0,Constants.BLOCK_SIZE,)@!(_maxVolSize<seekLen+Constants.BLOCK_SIZE) } CATCH(IOException) {}
results[https://github.com/freenet/contrib-official/blob/0761aa2d2de2fbf23bd3f3dee72d1f57164caf12/db4o/src/db4oj/core/src/com/db4o/io/RandomAccessFileAdapter.java][read][1] = -> TRY {  -> TRY { -> return _delegate.read(bytes,0,length,)@ } CATCH(IOException) { -> throw new Db4oIOException(e,)@ } } CATCH(Db4oIOException) {}
results[https://github.com/jdeolive/geotools-old/blob/1d467bb2db89df3f146af474a9828eb77f20663e/geotools2/geotools-src/vpf/src/org/geotools/vpf/io/VPFInputStream.java][readTripletId][1] = -> TRY {  -> tripletDef=(byte) input.read()@ -> dataSize=TripletId.calculateDataSize(tripletDef,)@ -> IF { -> input.read(tripletData,1,dataSize,)@dataSize>0 } -> return new TripletId(tripletData,)@ } CATCH(IOException) {}
results[https://github.com/jpfx1342/mlparch/blob/115152ba2d8762050cd466a6a5ca1a82c1c6ba56/src/mlparch/MLPArch.java][unpackFile][1] = -> TRY {  -> archRead.seek(entry.startOffset,)@!(!(compatFullPaths)&&!(isAncestorOf(destFile,destFolder,))) -> LOOP { -> rem=entry.size()-pos@!(!(compatFullPaths)&&!(isAncestorOf(destFile,destFolder,))) -> read=archRead.read(buffer,0,(rem<compatWriteBufferSize)?(int) rem:compatWriteBufferSize,)@!(!(compatFullPaths)&&!(isAncestorOf(destFile,destFolder,))) -> os.write(buffer,0,read,)@!(!(compatFullPaths)&&!(isAncestorOf(destFile,destFolder,))) } } CATCH(FileNotFoundException,IOException) {}
results[https://github.com/joninvski/Appia/blob/53ff457583d07297f7afae83ed0879d11b268585/tags/release_4_0_RC4/appia/src/net/sf/appia/test/perf/PerfSession.java][writePayload][20] = -> TRY { -> LOOP { -> r=payload.read(mbuf.data,mbuf.off+i,mbuf.len-i,)@i<mbuf.len -> IF { -> payload.seek(0,)@ } } } CATCH(IOException) { -> e.printStackTrace()@ }
results[https://github.com/ganboing/COMP4321/blob/91ea254ea30f8d625df0e2b8d53448906fdd08b6/jdbm-1.0/src/main/jdbm/recman/RecordFile.java][read][6] = -> TRY {  -> file.seek(offset,)@ -> LOOP { -> read=file.read(buffer,pos,remaining,)@remaining>0 -> IF { -> System.arraycopy(cleanData,0,buffer,pos,remaining,)@remaining>0 } } } CATCH(IOException) {}
results[https://github.com/atteroTheGreatest/laughing-archer/blob/afaae02da41b6b76f1c401b958f3b0b2f03fa7a6/src/mobireader/Mobi.java][readRawRecord][1] = -> TRY {  -> IF { -> len=(int) recordsInfo.get(index+1,).recordDataOffset-offset@index+1<recordsInfo.size() } -> raf=new RandomAccessFile(file,"rw",)@ -> raf.seek(offset,)@ -> raf.read(buff,0,len,)@ -> raf.close()@ } CATCH(IOException) {}
results[https://github.com/jmchilton/SnpEffect/blob/5ffe12b4510920b854bf410c89edb427c1feed7a/src/main/java/ca/mcgill/mcb/pcingola/vcf/FileIndexChrPos.java][dump][2] = -> TRY { -> file.seek(start,)@ -> LOOP { -> len=Math.min(BUFF_SIZE,end-curr+1,)@curr<=end -> read=file.read(buff,0,(int) len,)@ -> out=new String(buff,0,read,)@ } } CATCH(Exception) { -> throw new RuntimeException("Error reading file '"+fileName+"' from position "+start+" to "+end,)@ }
results[https://github.com/mauricio/jai-imageio/blob/d56a6c4742961f9cbd1dada2ac02ec4289b81e17/src/share/classes/jj2000/j2k/image/input/ImgReaderPGM.java][getInternCompData][4] = -> TRY { -> LOOP { -> in.seek(offset+i*w+blk.ulx,)@i<mi -> in.read(buf,0,blk.w,)@ -> LOOP { -> barr[k]=(int) buf[j]&0xFF-DC_OFFSET@j>=0 } } } CATCH(IOException) { -> JJ2KExceptionHandler.handleException(e,)@ }
results[https://github.com/klwork-social/main/blob/c5fe64c9758c7139184d0fa9950717129fad30d0/src/main/java/com/vdisk/net/ComplexUploadInputStreamEntity.java][writeTo][1] = -> TRY {  -> IF { -> throw new IllegalArgumentException("Output stream may not be null",)@outstream==null } -> LOOP { -> read=randomAccessFile.read(buffer,0,buffer.length,)@!(outstream==null) -> judgeTransfer(outstream,buffer,read,)@!(outstream==null) } } CATCH(IOException) {}
results[https://github.com/molgenis/systemsgenetics/blob/a99c65688df938089f7c486cf98bb85180a4de4a/genetica-libraries/src/main/java/umcg/genetica/io/trityper/SNPLoader.java][loadGenotypes][2] = -> TRY {  -> seekLoc=(long) snp.getId()*(long) bytesize@ -> IF { -> m_genotypehandle.seek(seekLoc,)@m_genotypehandle.getFilePointer()!=seekLoc } -> m_genotypehandle.read(alleles,0,bytesize,)@ -> System.arraycopy(alleles,0,allele1,0,m_numIndividuals,)@ -> System.arraycopy(alleles,m_numIndividuals,allele2,0,m_numIndividuals,)@ } CATCH(IOException) {}
results[https://github.com/sangamon/sneer/blob/56e31abf4f171bdaf8eec7dcc8935209e1426d6d/code/spikes/src/spikes/gandhi/dirsync/FilePartIterator.java][next][3] = -> TRY {  -> ram=new RandomAccessFile(_file,"r",)@ -> ram.seek(_offset,)@ -> readed=ram.read(data,)@ -> LOOP { -> readed=ram.read(data,total,data.length-total,)@readed!=-1&&total!=data.length } -> return new FilePart(_info,data,start,)@ } CATCH(FileNotFoundException,IOException) {}
results[https://github.com/nathanielsherry/Libraries/blob/23dec8c99c2ef726995b314550a136ff76d1ab44/Scratch/src/scratch/AbstractScratchList.java][get][1] = -> IF { -> return null@index>=elementPositions.size() } -> IF { -> return null@!(index>=elementPositions.size()) && position==null } -> length=position.getStop()-position.getStart()+1@!(index>=elementPositions.size()) && !(position==null) -> TRY { -> raf.seek(offset,)@!(index>=elementPositions.size()) && !(position==null) -> raf.read(data,0,length,)@!(index>=elementPositions.size()) && !(position==null) -> return decodeObject(data,)@!(index>=elementPositions.size()) && !(position==null) }
results[https://github.com/tingletech/xtf-strap/blob/c1dc053258cd5101196e31f1c77055bd109b1a38/WEB-INF/src/org/cdlib/xtf/saxonExt/pipe/BufferedRandomAccessFile.java][read][1] = -> TRY {  -> toCopy=Math.min(bufferLength-bufferPos,len,)@ -> IF { -> System.arraycopy(buffer,bufferPos,b,off,toCopy,)@toCopy>0 } -> IF { -> nRead=baseFile.read(b,off,len,)@len>0 } } CATCH(IOException) {}
results[https://github.com/atteroTheGreatest/laughing-archer/blob/afaae02da41b6b76f1c401b958f3b0b2f03fa7a6/src/mobireader/Mobi.java][parseRecordInfoList][1] = -> TRY {  -> LOOP { -> fp=new RandomAccessFile(file,"r",)@ -> fp.seek(myoffset,)@ -> fp.read(buff,0,len,)@ -> recordInfo=Codecs.decode(codec,buff,)@ -> fp.close()@ } } CATCH(DecodingException,IOException) {}
results[https://github.com/syapse/bigdata/blob/463d63129947bfb8f7341535e0ae6ed54134aafc/bigdata/src/test/com/bigdata/io/TestManagedReads.java][managedReads][1] = -> LOOP { -> LOOP { -> TRY { -> m_raf.seek(rec.pos,)@ -> m_raf.read(rdbuf,0,rec.size,)@ } CATCH(IOException) { -> e.printStackTrace()@ } } }
results[https://github.com/smartfeeling/smartly/blob/c1ccf67727ca4dfb9a5735c70ff98920087aa967/smartly_core/src/org/apache/commons/imaging/common/BinaryFunctions.java][getRAFBytes][1] = -> TRY {  -> raf.seek(pos,)@ -> LOOP { -> count=raf.read(result,read,length-read,)@read<length -> IF { -> throw new IOException(exception,)@count<0 && read<length } } } CATCH(IOException) {}
results[https://github.com/apache/thrift/blob/2897d4825c5350e295605155f7a619d71973e3bc/lib/java/src/org/apache/thrift/transport/TSimpleFileTransport.java][read][1] = -> TRY {  -> TRY { -> iBytesRead=file.read(buf,off,len,)@ } CATCH(IOException) { -> throw new TTransportException(ioe.getMessage(),)@ } } CATCH(TTransportException) {}
