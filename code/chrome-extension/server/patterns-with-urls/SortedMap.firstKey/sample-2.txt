results[https://github.com/uditrugman/openjdk8-jdk/blob/d3f90dea8d0e0b8fe3a64c235f8f7ae9512c7bd0/src/solaris/classes/sun/awt/X11/XToolkit.java][getNextTaskTime][3] = -> TRY { -> IF { -> return -1L@timeoutTasks==null||timeoutTasks.isEmpty() } -> return (Long) timeoutTasks.firstKey()@!(timeoutTasks==null||timeoutTasks.isEmpty()) } FINALLY { -> awtUnlock()@!(timeoutTasks==null||timeoutTasks.isEmpty()) }
results[https://github.com/freenet/plugin-Freemail-v0.1/blob/b1127dbb831b616f7e87a246a49284ae1c400c7f/src/fnmail/imap/IMAPHandler.java][handle_fetch][1] = -> msgs=this.mb.listMessages()@ -> IF { -> return @msgs.size()==0 } } ELSE { -> IF { -> to=msgs.size()@!(msgs.size()==0) && parts[1].equals("*",) } ELSE { -> CATCH(NumberFormatException) { -> return @!(msgs.size()==0) && !(parts[1].equals("*",)) } } -> IF { -> return @!(msgs.size()==0) && from==0||to==0||from>msgs.size()||to>msgs.size() } -> LOOP { -> current=(Integer) msgs.firstKey()@msgs.size()>0 && !(msgs.size()==0) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) -> IF { -> msgs=msgs.tailMap(new Integer(current.intValue()+1,),)@msgs.size()>0 && !(msgs.size()==0) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) } -> IF { -> return @msgs.size()>0 && !(msgs.size()==0) && !(this.fetch_single((MailMessage) msgs.get(msgs.firstKey(),),i,msg.args,1,false,)) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) } -> msgs=msgs.tailMap(new Integer(current.intValue()+1,),)@msgs.size()>0 && !(msgs.size()==0) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) && !(!(this.fetch_single((MailMessage) msgs.get(msgs.firstKey(),),i,msg.args,1,false,))) }
results[https://github.com/axDev-JDK/jdk/blob/f3d3b57687e28b2805bdb70087a6e2ccd982c8d1/src/solaris/classes/sun/awt/X11/XToolkit.java][callTimeoutTasks][3] = -> IF { -> timeoutTaskLog.finer("XToolkit.callTimeoutTasks(): current time={0}"+";  tasks={1}",Long.valueOf(System.currentTimeMillis(),),timeoutTasks,)@timeoutTaskLog.isLoggable(PlatformLogger.FINER,) } -> time=(Long) timeoutTasks.firstKey()@!(timeoutTasks==null||timeoutTasks.isEmpty()) -> LOOP { -> tasks=(java.util.List) timeoutTasks.remove(time,)@time.compareTo(currentTime,)<=0 && !(timeoutTasks==null||timeoutTasks.isEmpty()) -> LOOP { -> CATCH(ThreadDeath) { -> throw td@time.compareTo(currentTime,)<=0 && !(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() } CATCH(Throwable) { -> processException(thr,)@!(time.compareTo(currentTime,)<=0) && !(iter.hasNext()) && !(timeoutTasks==null||timeoutTasks.isEmpty()) } } -> time=(Long) timeoutTasks.firstKey()@time.compareTo(currentTime,)<=0 && !(iter.hasNext()) && !(timeoutTasks==null||timeoutTasks.isEmpty()) }
