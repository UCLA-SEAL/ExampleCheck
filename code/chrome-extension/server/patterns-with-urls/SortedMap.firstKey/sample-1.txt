results[https://github.com/joliebig/featurehouse/blob/294b965bef0a440c2790ad6626700e9c0943dc70/fstcomp/examples/Java/BerkeleyDB/base/src/com/sleepycat/je/recovery/Checkpointer.java][flushDirtyNodes][4] = -> TRY {  -> LOOP { -> currentLevel=(Integer) dirtyMap.firstKey()@dirtyMap.size()>0 -> logProvisionally=currentLevel.intValue()!=highestFlushLevel@ -> nodeSet=(Set) dirtyMap.get(currentLevel,)@dirtyMap.size()>0 -> LOOP { -> this.hook546(dirtyMap,allowDeltas,checkpointStart,currentLevel,logProvisionally,targetRef,)@dirtyMap.size()>0 } -> dirtyMap.remove(currentLevel,)@dirtyMap.size()>0 } } CATCH(DatabaseException) {}
results[https://github.com/freenet/plugin-Freemail-v0.1/blob/b1127dbb831b616f7e87a246a49284ae1c400c7f/src/fnmail/imap/IMAPHandler.java][handle_fetch][1] = -> msgs=this.mb.listMessages()@ -> IF { -> return @msgs.size()==0 } } ELSE { -> IF { -> to=msgs.size()@!(msgs.size()==0) && parts[1].equals("*",) } ELSE { -> CATCH(NumberFormatException) { -> return @!(msgs.size()==0) && !(parts[1].equals("*",)) } } -> IF { -> return @!(msgs.size()==0) && from==0||to==0||from>msgs.size()||to>msgs.size() } -> LOOP { -> current=(Integer) msgs.firstKey()@msgs.size()>0 && !(msgs.size()==0) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) -> IF { -> msgs=msgs.tailMap(new Integer(current.intValue()+1,),)@msgs.size()>0 && !(msgs.size()==0) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) } -> IF { -> return @msgs.size()>0 && !(msgs.size()==0) && !(this.fetch_single((MailMessage) msgs.get(msgs.firstKey(),),i,msg.args,1,false,)) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) } -> msgs=msgs.tailMap(new Integer(current.intValue()+1,),)@msgs.size()>0 && !(msgs.size()==0) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) && !(!(this.fetch_single((MailMessage) msgs.get(msgs.firstKey(),),i,msg.args,1,false,))) }
results[https://github.com/freenet/plugin-Freemail-v0.1/blob/b1127dbb831b616f7e87a246a49284ae1c400c7f/src/fnmail/imap/IMAPHandler.java][handle_uid][1] = -> msgs=this.mb.listMessages()@!(!(this.verify_auth(msg,))) -> IF { -> return @!(!(this.verify_auth(msg,))) && msgs.size()==0 } } ELSE { -> IF { -> tmp=(Integer) msgs.lastKey()@!(msgs.size()==0) && parts[1].equals("*",) && !(!(this.verify_auth(msg,))) } ELSE { -> CATCH(NumberFormatException) { -> return @!(msgs.size()==0) && !(parts[1].equals("*",)) && !(!(this.verify_auth(msg,))) } } -> IF { -> msgs=msgs.tailMap(new Integer(from,),)@!(msgs.size()==0) && !(!(this.verify_auth(msg,))) -> LOOP { -> curuid=(Integer) msgs.firstKey()@msgs.size()>0 && !(msgs.size()==0) && !(!(this.verify_auth(msg,))) -> IF { -> return @msgs.size()>0 && !(msgs.size()==0) && !(this.fetch_single((MailMessage) msgs.get(msgs.firstKey(),),msgnum,msg.args,2,true,)) && !(!(this.verify_auth(msg,))) } -> msgs=msgs.tailMap(new Integer(curuid.intValue()+1,),)@msgs.size()>0 && !(msgs.size()==0) && !(!(this.fetch_single((MailMessage) msgs.get(msgs.firstKey(),),msgnum,msg.args,2,true,))) && !(!(this.verify_auth(msg,))) } } ELSE { -> IF { -> msgs=msgs.tailMap(new Integer(from,),)@!(msgs.size()==0) && !(!(this.verify_auth(msg,))) -> msgs=msgs.headMap(new Integer(to+1,),)@!(msgs.size()==0) && !(!(this.verify_auth(msg,))) -> LOOP { -> targetmsgs[i]=(MailMessage) msgs.values().toArray()[i]@!(msgs.size()==0) && !(!(this.verify_auth(msg,))) && i<targetmsgs.length } } }
results[https://github.com/freenet/plugin-Freemail-v0.1/blob/b1127dbb831b616f7e87a246a49284ae1c400c7f/src/fnmail/imap/IMAPHandler.java][handle_select][1] = -> IF { -> msgs=this.mb.listMessages()@ -> numexists=msgs.size()@ -> LOOP { -> current=(Integer) msgs.firstKey()@msgs.size()>0 -> m=(MailMessage) msgs.get(msgs.firstKey(),)@msgs.size()>0 -> m.storeFlags()@ -> msgs=msgs.tailMap(new Integer(current.intValue()+1,),)@msgs.size()>0 } }
