results[https://github.com/uditrugman/openjdk8-jdk/blob/d3f90dea8d0e0b8fe3a64c235f8f7ae9512c7bd0/src/solaris/classes/sun/awt/X11/XToolkit.java][getNextTaskTime][3] = -> TRY { -> IF { -> return -1L@timeoutTasks==null||timeoutTasks.isEmpty() } -> return (Long) timeoutTasks.firstKey()@!(timeoutTasks==null||timeoutTasks.isEmpty()) } FINALLY { -> awtUnlock()@!(timeoutTasks==null||timeoutTasks.isEmpty()) }
results[https://github.com/Unidata/thredds/blob/e8e5ce0a3615aad58f81851163c788ca8b67840f/cdm/src/main/java/thredds/util/PathMatcher.java][match][2] = -> tail=treeMap.tailMap(path,)@ -> IF { -> return null@tail.isEmpty() } -> after=(String) tail.firstKey()@!(tail.isEmpty()) -> IF { -> return treeMap.get(after,)@path.startsWith(after,) && !(tail.isEmpty()) } -> iter=tail.keySet().iterator()@!(tail.isEmpty()) && !(path.startsWith(after,)) -> LOOP { -> IF { -> return treeMap.get(key,)@!(tail.isEmpty()) && path.startsWith(key,) && !(path.startsWith(after,)) && iter.hasNext() } }
results[https://github.com/lemmy/SecuredSLP/blob/4c5c4f1d4323e6aae411a59318441e352af12ce4/ch.ethz.iks.slp/src/main/java/ch/ethz/iks/slp/impl/SLPDaemonImpl.java][run][2] = -> TRY { -> LOOP { -> IF { -> serviceDisposalQueue.wait()@serviceDisposalQueue.isEmpty() } ELSE { -> LOOP { -> service=(ServiceURL) serviceDisposalQueue.get(nextActivity,)@!(serviceDisposalQueue.isEmpty()) && !(serviceDisposalQueue.isEmpty())&&(nextActivity=(Long) serviceDisposalQueue.firstKey()).longValue()<=System.currentTimeMillis() -> serviceDisposalQueue.remove(nextActivity,)@!(serviceDisposalQueue.isEmpty()) && !(serviceDisposalQueue.isEmpty())&&(nextActivity=(Long) serviceDisposalQueue.firstKey()).longValue()<=System.currentTimeMillis() } -> IF { -> nextActivity=(Long) serviceDisposalQueue.firstKey()@!(serviceDisposalQueue.isEmpty()) -> waitTime=nextActivity.longValue()-System.currentTimeMillis()@ -> IF { -> serviceDisposalQueue.wait(waitTime,)@!(serviceDisposalQueue.isEmpty()) && waitTime>0 } } } } }
results[https://github.com/jerrevds/ODS/blob/540bba0e3a2f5516142f8377f7caf2a94a3ac454/version1/rosgi/src/main/java/ch/ethz/iks/util/Scheduler.java][run][1] = -> TRY { -> LOOP { -> IF { -> expirationQueue.wait()@expirationQueue.isEmpty() } ELSE { -> LOOP { -> object=expirationQueue.remove(nextActivity,)@!(expirationQueue.isEmpty()) && !(expirationQueue.isEmpty())&&(nextActivity=(Long) expirationQueue.firstKey()).longValue()<=System.currentTimeMillis()+10 -> listener.due(Scheduler.this,nextActivity.longValue(),object,)@!(expirationQueue.isEmpty())&&(nextActivity=(Long) expirationQueue.firstKey()).longValue()<=System.currentTimeMillis()+10 } -> IF { -> nextActivity=(Long) expirationQueue.firstKey()@!(expirationQueue.isEmpty()) -> next=nextActivity.longValue()-System.currentTimeMillis()-10@ -> IF { -> expirationQueue.wait(next,)@!(expirationQueue.isEmpty()) && next>0 } } } } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/freenet/plugin-Freemail-v0.1/blob/b1127dbb831b616f7e87a246a49284ae1c400c7f/src/fnmail/imap/IMAPHandler.java][handle_fetch][1] = -> msgs=this.mb.listMessages()@ -> IF { -> return @msgs.size()==0 } } ELSE { -> IF { -> to=msgs.size()@!(msgs.size()==0) && parts[1].equals("*",) } ELSE { -> CATCH(NumberFormatException) { -> return @!(msgs.size()==0) && !(parts[1].equals("*",)) } } -> IF { -> return @!(msgs.size()==0) && from==0||to==0||from>msgs.size()||to>msgs.size() } -> LOOP { -> current=(Integer) msgs.firstKey()@msgs.size()>0 && !(msgs.size()==0) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) -> IF { -> msgs=msgs.tailMap(new Integer(current.intValue()+1,),)@msgs.size()>0 && !(msgs.size()==0) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) } -> IF { -> return @msgs.size()>0 && !(msgs.size()==0) && !(this.fetch_single((MailMessage) msgs.get(msgs.firstKey(),),i,msg.args,1,false,)) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) } -> msgs=msgs.tailMap(new Integer(current.intValue()+1,),)@msgs.size()>0 && !(msgs.size()==0) && !(from==0||to==0||from>msgs.size()||to>msgs.size()) && !(!(this.fetch_single((MailMessage) msgs.get(msgs.firstKey(),),i,msg.args,1,false,))) }
results[https://github.com/axDev-JDK/jdk/blob/f3d3b57687e28b2805bdb70087a6e2ccd982c8d1/src/solaris/classes/sun/awt/X11/XToolkit.java][callTimeoutTasks][3] = -> IF { -> timeoutTaskLog.finer("XToolkit.callTimeoutTasks(): current time={0}"+";  tasks={1}",Long.valueOf(System.currentTimeMillis(),),timeoutTasks,)@timeoutTaskLog.isLoggable(PlatformLogger.FINER,) } -> time=(Long) timeoutTasks.firstKey()@!(timeoutTasks==null||timeoutTasks.isEmpty()) -> LOOP { -> tasks=(java.util.List) timeoutTasks.remove(time,)@time.compareTo(currentTime,)<=0 && !(timeoutTasks==null||timeoutTasks.isEmpty()) -> LOOP { -> CATCH(ThreadDeath) { -> throw td@time.compareTo(currentTime,)<=0 && !(timeoutTasks==null||timeoutTasks.isEmpty()) && iter.hasNext() } CATCH(Throwable) { -> processException(thr,)@!(time.compareTo(currentTime,)<=0) && !(iter.hasNext()) && !(timeoutTasks==null||timeoutTasks.isEmpty()) } } -> time=(Long) timeoutTasks.firstKey()@time.compareTo(currentTime,)<=0 && !(iter.hasNext()) && !(timeoutTasks==null||timeoutTasks.isEmpty()) }
