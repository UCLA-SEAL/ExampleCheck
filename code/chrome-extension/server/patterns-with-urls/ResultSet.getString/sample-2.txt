results[https://github.com/marleau/cs122b_p3/blob/c73aa7686da77d2bb6bf76eda2e075ac3071cb83/WebContent/WEB-INF/sources/Fabflix/ShoppingCart.java][getMovieTitle][4] = -> TRY { -> rs=statement.executeQuery(query,)@ -> IF { -> return rs.getString("title",)@rs.next() } }
results[https://github.com/miserani/paodequeijo/blob/7e57fb3d6a56fcd5c451ef35d722e44b311fa935/src/persistencia/ConsultaFormaPagamentoCompraMySQL.java][buscarNomeForma][5] = -> TRY { -> rs=stmt.executeQuery()@ -> LOOP { -> return rs.getString("descricao",)@rs.next() } }
results[https://github.com/isaacmadan/freezing-octo-bear/blob/17274ca68ce5a54b3e6a44cbf248abcc2ee3e22d/hw6/src/site/AccountManager.java][getSalt][4] = -> TRY { -> rs=stmt.executeQuery("SELECT * FROM users WHERE username='"+username+"'",)@ -> LOOP { -> return rs.getString("salt",)@rs.next() } }
results[https://github.com/Ramblurr/CyberGame/blob/1facad2b466ddb9799698b09972bb222738ac2d7/src/yao/gameweb/util/Database.java][getUsername][2] = -> TRY { -> rs=prep.executeQuery()@ -> IF { -> name=rs.getString("username",)@rs.next() } }
results[https://github.com/mixxit/npcx/blob/90ec89ff3922dd2f28a2ab4c4fcd1d70048edc2c/src/net/gamerservices/npcx/npcx.java][dbGetNPCname][1] = -> TRY { -> rs11=s11.getResultSet()@ -> LOOP { -> name=rs11.getString("name",)@rs11.next() -> return name@rs11.next() } }
results[https://github.com/JCPP/GestionaleMagazzino/blob/54dbc829ee612a6022b72f1d343b2ddf239eeb7a/src/modelsCancelleria/Dipendente.java][validateResponsabile][2] = -> rs=que.eseguiQuery(query,)@ -> TRY { -> LOOP { -> risultato=rs.getString("tipo",)@rs.next() } }
results[https://github.com/CubeIsland/AuctionHouse/blob/1d7135042d0b08e7ea6b91b915b078aa2c80208f/src/main/java/de/cubeisland/AuctionHouse/Database.java][getBidderString][2] = -> TRY { -> set=this.query("SELECT * from `bidder` where `id`=? LIMIT 1;",id,)@ -> IF { -> return set.getString("name",)@set.next() } }
results[https://github.com/MercuryGroup/Project/blob/886fcf6750322e1c8c7c46066d38f217de9edb13/src/AdminPanel.java][actionPerformed][2] = -> dbResult=database.doQuery("SELECT * FROM admin WHERE Username='"+username+"' AND Password='"+password+"' LIMIT 1",)@ -> TRY { -> IF { -> currentUser=dbResult.getString("Username",)@dbResult!=null&&dbResult.next() } }
results[https://github.com/acmsl/queryj/blob/6f0514f40019e4ce808e80b9b42bf031748afd94/src/main/java/org/acmsl/queryj/metadata/engines/AbstractJdbcMetadataManagerOld.java][extractComment][4] = -> TRY {  -> IF { -> result=resultSet.getString("REMARKS",)@resultSet.next() } } CATCH(SQLException) {}
results[https://github.com/cis470teamA/business_project/blob/63c599582639c6b2c0fcb8c04ad89bb32b6202b5/src/wsc_application/Employee.java][getOrders][2] = -> rs=mysql.doQuery(query,)@ -> TRY { -> LOOP { -> temp=rs.getString("ORDERID",)@rs.next() -> orders.add(temp,)@ } }
results[https://github.com/korpling/ANNIS/blob/64b45fd815475d8a6c2424ad4717b0ba55455e03/annis-service/src/main/java/annis/dao/SpringAnnisDao.java][extractData][1] = -> TRY {  -> LOOP { -> return rs.getString("filename",)@rs.next() } } CATCH(SQLException,DataAccessException) {}
results[https://github.com/kiniry-teaching/UCD/blob/160f3f6879b60b6ec505152b6bbe97481065909d/COMP30050-2008/groups/Music Comparison Software/MusicComparison/MusicComparison/src/ie/ucd/music/comparison/Database/Query.java][getBitRate][1] = -> TRY { -> rs1=stmt.executeQuery("SELECT Bit_Rate FROM "+lib+" WHERE Id = "+ident,)@ -> LOOP { -> temp=rs1.getString("Bit_Rate",)@rs1.next() -> returnedValue=Integer.parseInt(temp,)@ } }
results[https://github.com/liquidJbilling/LT-Jbilling-MsgQ-3.1/blob/892a2e7bd96620c7294b24824349c08e419d8d61/src/java/com/sapienter/jbilling/server/mediation/cache/NANPACallIdentificationFinder.java][extractData][4] = -> TRY {  -> IF { -> return rs.getString("description",)@rs.next() } } CATCH(SQLException,DataAccessException) {}
results[https://github.com/hackerdude/JSqlIde/blob/98ff2c1a3d3ebabf7cbb7c94108f73f9f1be6cd8/src/com/hackerdude/apps/sqlide/plugins/pgsql/storedproc/StoredProcedureEditor.java][readStoredProcedureSource][1] = -> TRY { -> result=statement.executeQuery()@ -> LOOP { -> procedureSource=result.getString("prosrc",)@result.next() -> editorPanel.area.setText(procedureSource,)@ } }
results[https://github.com/jalkanen/Priha/blob/0c99283d17c91ec8868cebf6ae6ea09716c6f0d3/src/java/org/jspwiki/priha/providers/JdbcProvider.java][listWorkspaces][1] = -> TRY { -> rs=ps.executeQuery()@ -> LOOP { -> wsname=rs.getString("name",)@rs.next() -> workspaces.add(wsname,)@ } }
results[https://github.com/JessedeDoes/ImpactIR/blob/41174faa61a5c22375570b28e7353f0f86c4ebca/src/util/Database.java][tableExists][2] = -> TRY { -> res=meta.getTables(null,null,null, new String[],)@ -> LOOP { -> name=res.getString("TABLE_NAME",)@res.next() } -> res.close()@ }
results[https://github.com/miriankapanadze/oop/blob/263d22f0a184bce05a2f2fc3153894859792c880/OopProject/src/Model/User.java][getIdByName][1] = -> TRY { -> res=stat.executeQuery()@ -> IF { -> id=Integer.parseInt(res.getString("USER_ID",),)@res.next() } }
results[https://github.com/Sniperlocked/projstats/blob/e9bfa88b81e8f2a099544aad6d94183c493e4299/cs108finalproject/src/database/Database.java][removeQuizzesCreated][1] = -> TRY { -> rs=pstmt.executeQuery()@ -> LOOP { -> removeQuiz(rs.getString("quizName",),)@rs.next() } }
results[https://github.com/NCIP/lexevs/blob/9f630d706a6fd62ab01ab2bfdb9f8bbae2a7743a/lgConverter/src/edu/mayo/informatics/lexgrid/convert/directConversions/UmlsCommon/UMLSBaseCode.java][getSourceVersionString][1] = -> TRY { -> results=getSource_.executeQuery()@ -> IF { -> result=results.getString("EXPL",)@results.next() } -> results.close()@ }
results[https://github.com/cml220/Cybernetic-Tiger/blob/ef9571e4f2c2a4e2227843c9c630a1e2e1a3dd5b/newbuild/dbprocess/GetterProcess.java][getUserPassWord][4] = -> TRY {  -> rs=stmt.executeQuery("SELECT PassWord FROM "+"tblUser WHERE UserName = \""+userName+"\"",)@ -> IF { -> return rs.getString("PassWord",)@rs.next() } } CATCH(SQLException) {}
results[https://github.com/Snorremd/AndroidInfo331/blob/d6290299d2bb308eb727129cd426b22b6796def6/GeoMusic/src/de/umass/lastfm/cache/DatabaseCache.java][load][6] = -> TRY { -> result=stmt.executeQuery()@ -> IF { -> s=result.getString("response",)@result.next() -> return new ByteArrayInputStream(s.getBytes("UTF-8",),)@result.next() } }
results[https://github.com/mvsaturno/WebCarStore/blob/07ada07b6025d0086d0153c4d4299c74f487c77f/src/java/dao/UsuarioDAO.java][pesquisarPermissaoId][10] = -> TRY {  -> rs=pstmt.executeQuery()@ -> LOOP { -> desc=rs.getString("descricao",)@rs.next() } } CATCH(SQLException) {}
results[https://github.com/anycook/anycook-core/blob/f0dfccece095c2eafd1e500e52dabac55b577599/src/main/java/de/anycook/db/mysql/DBSocial.java][getDefaultBlog][2] = -> TRY {  -> data=pStatement.executeQuery()@ -> IF { -> return data.getString("default_blog",)@data.next() } } CATCH(SQLException,TumblrNotFoundException) {}
results[https://github.com/Sniperlocked/projstats/blob/04322257b71dd6f6032f09c20ff8b7a1a6be159c/cs108finalproject/src/entities/User.java][getFriends][1] = -> rs=Database.getFriends(userName,)@ -> TRY { -> LOOP { -> friend=new User(rs.getString("userB",),)@rs.next() -> friendsList.add(friend,)@ } }
results[https://github.com/Pluckerpluck/MultiInv/blob/3cf83c48db785392bc075f6a9d7740f54998a4da/uk/co/tggl/pluckerpluck/multiinv/mysql/SqlConnector.java][getInventory][1] = -> TRY { -> rs=st.executeQuery("SELECT * FROM "+prefix+"multiinv WHERE inv_player='"+player+"' AND inv_group='"+group+"'",)@ -> IF { -> inventoryString=rs.getString("inv_"+inventoryName.toLowerCase(),)@rs.next() -> inventory=new MIInventory(inventoryString,)@ } }
results[https://github.com/sinuni/Fellesprosjektet/blob/b32413ef0fd479d11cfdcf1a00829d71bb8aa0ea/database/DBParticipants.java][getParticipants][1] = -> rs=Interact.execute(query,)@ -> TRY { -> LOOP { -> user=DBUser.getUser(rs.getString("brukerNavn",),)@rs.next() -> users.add(user,)@ } }
results[https://github.com/anycook/anycook-core/blob/097208a4415ef745a4208c32e1f5ca8d7a3aaf63/src/main/java/de/anycook/db/mysql/DBUser.java][getUserImage][2] = -> TRY {  -> data=pStatement.executeQuery()@ -> IF { -> return data.getString("image",)@data.next() } } CATCH(SQLException,UserNotFoundException) {}
results[https://github.com/axDev-JDK/jdk/blob/ea6d1df312ecbfdfb8f7074150ddf9a0865d8628/src/share/classes/com/sun/rowset/internal/CachedRowSetWriter.java][insertNewRow][2] = -> TRY {  -> rs2=dbmd.getPrimaryKeys(null,null,table,)@ -> LOOP { -> pkcolname=rs2.getString("COLUMN_NAME",)@rs2.next() } } CATCH(SQLException) {}
results[https://github.com/OpenLMIS/open-lmis/blob/87768f82a8741ce170944e1cca81efc0abcad825/test-modules/test-core/src/main/java/org/openlmis/UiUtils/DBWrapper.java][getAttributeFromTable][1] = -> TRY {  -> resultSet=query("select * from %s where %s in ('%s');",tableName,queryColumn,queryParam,)@ -> IF { -> returnValue=resultSet.getString(attribute,)@resultSet.next() } } CATCH(SQLException) {}
results[https://github.com/EDACC/edacc_gui/blob/2458b8bf4accac05f63d38ee7fe5a932c4bcdd41/src/edacc/model/InstanceDAO.java][getBenchmarkType][1] = -> TRY {  -> rs=ps.executeQuery()@ -> IF { -> return rs.getString("name",)@rs.next() } } CATCH(NoConnectionToDBException,SQLException) {}
results[https://github.com/anycook/anycook-api/blob/f58b56099cf33b039e83b5d659b6bac3f0a69819/src/main/java/de/anycook/db/mysql/DBApps.java][getAppSecret][6] = -> TRY {  -> data=pStatement.executeQuery()@ -> IF { -> return data.getString("secret",)@data.next() } } CATCH(SQLException,AppNotFoundException) {}
results[https://github.com/yudis/h2database/blob/135f716686c97b88cbcac31e043cde89d2b5348d/h2/src/test/org/h2/test/db/TestLob.java][testLobDrop][11] = -> TRY {  -> rs=stat.executeQuery("SELECT * FROM TEST",)@ -> LOOP { -> rs.getString("C",)@rs.next() } } CATCH(SQLException) {}
results[https://github.com/goobi/goobi-production/blob/41d3d0b853ade5b5c3eb49c6dfbb9b0b567559e0/goobi1.9/src/org/goobi/production/importer/FireburnDataImport.java][getProcessId][4] = -> TRY {  -> rs=this.stmt.executeQuery(sqlstring,)@ -> LOOP { -> retString=rs.getString("ProzesseID",)@rs.next() } } CATCH(ClassNotFoundException,SQLException) {}
results[https://github.com/joseflavio/kit-transactionserver/blob/27acbb8623ddc2345e9901960da6485ae1feefb5/kit-transactionserver-dbconnectiontest/src/com/kit/util/dbconnectiontest/TestDabaseConnectionPool.java][adaptResultSet][2] = -> TRY {  -> LOOP { -> clientId=rs.getString("KTClientId",)@rs.next() -> result.add(clientId,)@ } } CATCH(SQLException) {}
results[https://github.com/mixxit/npcx/blob/90ec89ff3922dd2f28a2ab4c4fcd1d70048edc2c/src/net/gamerservices/npcx/myUniverse.java][hasResearchInProgress][2] = -> TRY { -> rs1=s1.executeQuery()@ -> LOOP { -> status=Integer.parseInt(rs1.getString("value",),)@rs1.next() } -> rs1.close()@ }
results[https://github.com/dfleischhacker/goldminer/blob/b447aa93a3582f3e980fda232113e548c0a7e25c/src/main/java/de/uni_mannheim/informatik/dws/goldminer/database/TerminologyExtractor.java][getClassID][4] = -> TRY {  -> results=m_database.query(sQuery,)@ -> IF { -> return results.getString("id",)@results.next() } } CATCH(Exception) {}
results[https://github.com/Sen-Word-Builder/Word-Builder/blob/899ab56511ea1088c28d230f9f4675092c72f28b/src/database/DatabaseOperations.java][getJoinDate][1] = -> TRY {  -> rs=stmt.executeQuery("SELECT DOJ from user_details "+"where user_id='"+uid+"'",)@ -> LOOP { -> date=rs.getString("doj",)@rs.next() } } CATCH(SQLException,ClassNotFoundException) {}
results[https://github.com/OpenLMIS/open-lmis/blob/87768f82a8741ce170944e1cca81efc0abcad825/test-modules/test-core/src/main/java/org/openlmis/UiUtils/DBWrapper.java][getSupplyFacilityName][4] = -> TRY {  -> rs=query("select name from facilities where id="+"(select supplyingFacilityId from supply_lines where supervisoryNodeId="+"(select id from supervisory_nodes where code='"+supervisoryNode+"') and programId = "+"(select id from programs where code='"+programCode+"'));",)@ -> IF { -> facilityName=rs.getString("name",)@rs.next() } } CATCH(SQLException) {}
results[https://github.com/Pluckerpluck/MultiInv/blob/7d1d74dc4a0f45266df9adbcb6becdebaed8d9d2/src/uk/co/tggl/pluckerpluck/multiinv/mysql/SqlConnector.java][getEnderchestInventory][1] = -> TRY { -> rs=st.executeQuery("SELECT * FROM "+prefix+"enderchestinv WHERE chest_player='"+player+"' AND inv_group='"+group+"'",)@ -> IF { -> inventoryString=rs.getString("chest_"+inventoryName.toLowerCase(),)@rs.next() -> inventory=new MIEnderchestInventory(inventoryString,)@ } }
results[https://github.com/maurodim/siderconCapaDeDatos/blob/9a8477646c31e6d296af4c0446bdd861c7be6d09/src/config/Formularios.java][getConsolidado][4] = -> TRY {  -> rs=st.getResultSet()@ -> LOOP { -> ruta=rs.getString("direccion",)@rs.next() } } CATCH(SQLException) {}
results[https://github.com/OpenIotOrg/openiot/blob/ab006c734941776297172389f1bc1d67fd7f17ea/modules/x-gsn/src/main/java/org/openiot/gsn/http/ac/ConnectToDB.java][getValueForOneColumnUnderTwoConditions][1] = -> TRY {  -> rs=this.selectOneColumnUnderTwoConditions(col,tableName,firstCond,secondCond,)@ -> LOOP { -> value=rs.getString(col.columnLabel,)@rs.next() } } CATCH(SQLException) {}
results[https://github.com/isaacmadan/freezing-octo-bear/blob/2afb4d75c86bcc76e22fba018b9261072d6049f8/hw6/src/site/CatTagManager.java][getTagsFromQuiz][3] = -> tags=new ArrayList<String>()@ -> TRY { -> set=stmt.executeQuery(execution,)@ -> LOOP { -> tags.add(set.getString("string",),)@set.next() } }
results[https://github.com/anycook/anycook-core/blob/f0dfccece095c2eafd1e500e52dabac55b577599/src/main/java/de/anycook/db/mysql/DBRecipe.java][getName][2] = -> TRY {  -> data=pStatement.executeQuery()@ -> IF { -> return data.getString("name",)@data.next() } } CATCH(SQLException,RecipeNotFoundException) {}
results[https://github.com/enonic/cms-ce/blob/1cb9bf30086e4c18757b59f2c10f28498e28cfe2/modules/cms-core/src/main/java/com/enonic/cms/upgrade/task/UpgradeModel0212.java][extractData][1] = -> TRY {  -> LOOP { -> id=rs.getString(idColumn,)@rs.next() -> ids.add(id,)@ } } CATCH(SQLException,DataAccessException) {}
results[https://github.com/tOgg1/PotentialNinja/blob/7f51aae12511cf325679ef825976de213e1de794/src/db/DatabaseHandler.java][getFarmerEmail][3] = -> TRY {  -> rs=query.executeQuery()@ -> IF { -> return null@!(rs.next()) } -> return rs.getString("email",)@!(!(rs.next())) } CATCH(SQLException) {}
results[https://github.com/CTSIatUCSF/shindigorng/blob/c7a773800490a961decb29f2a682069ff5bbf032/java/vivo-connector/src/main/java/edu/ucsf/profiles/shindig/spi/ProfilesAppDataService.java][getData][3] = -> TRY {  -> rs=ps.executeQuery()@ -> IF { -> return rs.getString("value",)@rs.next() } } CATCH(SQLException) {}
results[https://github.com/crossbear/Crossbear/blob/e90d4bbb4917ea9546239eb507706f47c9689cb6/server/fourhundredfourtythree/src/crossbear/CertificateManager.java][getCertIDs][1] = -> TRY {  -> rs=db.executeQuery("SELECT array_to_string(array_agg(DISTINCT Id),', ') AS IDs FROM ServerCerts WHERE SHA256DERHash = ?",params,)@ -> IF { -> return ""@!(rs.next()) } -> return rs.getString("IDs",)@!(!(rs.next())) } CATCH(InvalidParameterException,SQLException) {}
results[https://github.com/OpenLMIS/open-lmis/blob/a68f3b29081af682c4cba3bc3d4c5fc5499cfe67/service-tests/src/main/java/org/openlmis/UiUtils/DBWrapper.java][getFacilityIDDB][2] = -> TRY {  -> rs=dbWrapper.dbConnection("select id from facilities order by modifiedDate DESC limit 1","select",)@ -> IF { -> id=rs.getString("id",)@rs.next() } } CATCH(IOException,SQLException) {}
results[https://github.com/iomodo/FreeuniRestaurant/blob/28cb13af1ff3d67aba49ea26125f93476d28d7c0/src/ge/edu/freeuni/restaurant/logic/shekveta.java][getOrderTime][1] = -> TRY {  -> rs=db.selectFromShekvetaByUserName(name,)@ -> LOOP { -> time=rs.getString("reserve_time",)@rs.next() } } CATCH(NumberFormatException,SQLException) {}
results[https://github.com/OpenLMIS/open-lmis/blob/87768f82a8741ce170944e1cca81efc0abcad825/test-modules/test-core/src/main/java/org/openlmis/UiUtils/DBWrapper.java][getRequisitionLineItemFieldValue][1] = -> TRY {  -> rs=query("SELECT %s FROM requisition_line_items WHERE rnrId = %d AND productCode = '%s'",field,requisitionId,productCode,)@ -> IF { -> value=rs.getString(field,)@rs.next() } } CATCH(SQLException) {}
results[https://github.com/sandersiim/evalimine/blob/14872dc5aeb5ddeb7e5c5de0a24a3260515ede4d/jettyproject/src/ee/ut/cs/veebirakendus2013/kurivaim/jettytest/mysql/MysqlQueryAdminInfo.java][fillSingleDataFromResults][1] = -> TRY {  -> IF { -> userId=results.getInt("id",)@results.next() -> username=results.getString("username",)@results.next() -> return this@results.next() } } CATCH(SQLException) {}
results[https://github.com/swaroopsm/TagAvatar/blob/9e360aca3bf290cc33a2e00f3fbfbafcef733bc9/TagAvatar/src/local/tagavatar/server/Users.java][update_avatar][1] = -> TRY { -> rs=st2.executeQuery(sql2,)@ -> LOOP { -> old_pic=rs.getString("avatar",)@rs.next() -> file1=new File(filepath+old_pic,)@ -> file2=new File(thumbpath+old_pic,)@ } }
results[https://github.com/Sniperlocked/projstats/blob/04322257b71dd6f6032f09c20ff8b7a1a6be159c/cs108finalproject/src/entities/SiteCommunication.java][getPopularQuizzes][1] = -> rs=Database.getPopularQuizzes(20,)@ -> TRY { -> LOOP { -> quiz=new Quiz(rs.getString("quizName",),)@rs.next() -> popQuizzes.add(quiz,)@ } }
results[https://github.com/biosemantics/charaparser/blob/ab6fbea2f4dc4c441c6c108fefe372267f4f08cc/src/main/java/edu/arizona/biosemantics/semanticmarkup/markupelement/description/ling/learn/lib/OTOLearner.java][populateCurationList][1] = -> TRY {  -> rs=stmt.executeQuery("select category from "+this.glossaryTable+" where term ='"+word+"'",)@ -> IF { -> cat=rs.getString("category",)@rs.next() } } CATCH(Exception) {}
results[https://github.com/Sniperlocked/projstats/blob/04322257b71dd6f6032f09c20ff8b7a1a6be159c/cs108finalproject/src/entities/SiteCommunication.java][getUsersFromSearch][1] = -> rs=Database.search(name,)@ -> TRY { -> LOOP { -> user=new User(rs.getString("userName",),)@rs.next() -> users.add(user,)@ } }
results[https://github.com/hygeia/Hygeia/blob/6a725be503fe15088e40ae3a30a043cc3c82e9f9/WEB-INF/src/hygeia/User.java][getUsername][2] = -> rs=this.db.execute("select username from users where uid = "+this.uid+";",)@!(this.username!=null) -> TRY { -> IF { -> return null@!(this.username!=null) && rs==null } -> IF { -> username=rs.getString("username",)@!(this.username!=null) && !(rs==null) && rs.next() } }
results[https://github.com/anycook/anycook-core/blob/f0dfccece095c2eafd1e500e52dabac55b577599/src/main/java/de/anycook/db/mysql/DBRecipe.java][getFullIngredientName][1] = -> TRY {  -> data=pStatement.executeQuery()@ -> IF { -> return data.getString("name",)@data.next() } } CATCH(SQLException,DBIngredient.IngredientNotFoundException) {}
results[https://github.com/anycook/anycook-core/blob/f0dfccece095c2eafd1e500e52dabac55b577599/src/main/java/de/anycook/db/mysql/DBTag.java][get][1] = -> TRY {  -> data=pStatement.executeQuery()@ -> IF { -> return data.getString("name",)@data.next() } } CATCH(SQLException,TagNotFoundException) {}
results[https://github.com/Sniperlocked/projstats/blob/04322257b71dd6f6032f09c20ff8b7a1a6be159c/cs108finalproject/src/entities/SiteCommunication.java][getRecentlyCreatedQuizzes][1] = -> rs=Database.getRecentlyCreatedQuizzes(20,)@ -> TRY { -> LOOP { -> quiz=new Quiz(rs.getString("quizName",),)@rs.next() -> recQuizzes.add(quiz,)@ } }
results[https://github.com/anycook/anycook-core/blob/e26dea66b29f19c52b9bc860241f68ccfccdc31c/src/main/java/de/anycook/db/mysql/DBCategory.java][get][1] = -> TRY {  -> data=pStatement.executeQuery()@ -> IF { -> return data.getString("name",)@data.next() } } CATCH(SQLException,CategoryNotFoundException) {}
results[https://github.com/OpenIotOrg/openiot/blob/ab006c734941776297172389f1bc1d67fd7f17ea/modules/x-gsn/src/main/java/org/openiot/gsn/http/ac/ConnectToDB.java][getValueForOneColumnUnderOneConditions][1] = -> TRY {  -> rs=this.selectOneColumnUnderOneCondition(col,tableName,cond,)@ -> LOOP { -> value=rs.getString(col.columnLabel,)@rs.next() } } CATCH(SQLException) {}
results[https://github.com/LibraryDB/LibraryDB/blob/185318c39c4b289057f94150f6991e8e43f8f1c9/LibraryDatabase/src/jdbc/JDBCManager.java][getCallNumberByCoAuthor][1] = -> result=new ArrayList<String>()@ -> TRY { -> rs=ps.executeQuery()@ -> LOOP { -> result.add(rs.getString("callnumber",),)@rs.next() } }
results[https://github.com/ppretki/lastentarvike/blob/8aa9207f011ecf18f63475b3f681c6c89dd02f83/online.shop.datamodel/src/test/java/pl/com/itsense/ecommerce/datamodel/impl/EntityTest.java][testH2ConnectionManagement][2] = -> TRY {  -> rs=stat.executeQuery("select * from test",)@ -> LOOP { -> System.out.println(rs.getString("name",),)@rs.next() } } CATCH(Exception) {}
results[https://github.com/angusmacdonald/h2o/blob/7763bd04c5ea5e21f6e794c198fd802ac04e43e4/src/test/org/h2/samples/SecurePassword.java][main][1] = -> TRY {  -> rs=prep.executeQuery()@ -> LOOP { -> System.out.println(rs.getString("name",),)@rs.next() } } CATCH(Exception) {}
results[https://github.com/ChampionsDev/Champions/blob/e439b390ab726a0a95d906570f2980b3b20abc77/library/src/main/java/com/github/championsdev/champions/library/database/helper/SQLHelper.java][getStrings][1] = -> strings=new ArrayList<>()@ -> TRY { -> rs=connection.createStatement().executeQuery(query,)@ -> LOOP { -> strings.add(rs.getString(name,),)@rs.next() } }
results[https://github.com/jidc28/SEP/blob/2f8bd2d9dad9d17082f05b8e24a7f571545a6df3/src/java/DBMS/DBMS.java][obtenerCodigoDecanato][3] = -> TRY { -> rs=ps.executeQuery()@ -> LOOP { -> return rs.getString("codigo",)@rs.next() } } CATCH(SQLException) { -> ex.printStackTrace()@ }
results[https://github.com/MineAndCraft/MnC_SERVER_MOD/blob/e4ef103d67859e3004038cb0e6c214981355ae69/me/Guga/Guga_SERVER_MOD/Residences/ResidenceHandler.java][getResidenceOwner][1] = -> TRY { -> result=stat.executeQuery()@ -> IF { -> return result.getString("username",)@result.next() } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/BelieveROM/android_libcore/blob/21643b11ea824e0e4e65a5437a57abed2052ff7a/luni/src/test/java/libcore/sqlite/OldDatabaseTest.java][testBusy_timeout][14] = -> TRY {  -> userTabs=conn.getMetaData().getTables(null,null,null,null,)@ -> LOOP { -> tableName=userTabs.getString("TABLE_NAME",)@userTabs.next() } } CATCH(Exception,SQLException) {}
results[https://github.com/rowboat/libcore/blob/e595037cf49109e9e20b47e6e191eda45e414008/luni/src/test/java/tests/java/sql/DatabaseMetaDataTest.java][checkSchemas][14] = -> TRY {  -> LOOP { -> schema=rs.getString("TABLE_SCHEM",)@rs.next() -> assertNotNull(schema,)@ } -> rs.close()@ } CATCH(SQLException) {}
results[https://github.com/phoenixrom/android_libcore/blob/21643b11ea824e0e4e65a5437a57abed2052ff7a/luni/src/test/java/libcore/sqlite/OldDatabaseTest.java][testBusy_handler][6] = -> TRY {  -> userTabs=conn.getMetaData().getTables(null,null,null,null,)@ -> LOOP { -> tableName=userTabs.getString("TABLE_NAME",)@userTabs.next() } } CATCH(SQLException,Exception) {}
results[https://github.com/RICJ2/CJ2/blob/5b2c493d2fbb8ad68dd63a1737d6e5b34adeb6c5/NetBeansProjects/LoginScreen/src/loginscreen/Student.java][getMajor][1] = -> TRY { -> rs=prestmt.executeQuery()@ -> IF { -> result=rs.getString("degree_desc",)@rs.next() } } CATCH(SQLException) { -> JOptionPane.showMessageDialog(null,e,)@ }
results[https://github.com/PauloFerreira25/RelatorioPMA/blob/d88e4a68b26bdd06ef117eba2a8c0b035617dfe0/RelatoriosPMAEjb/ejbModule/br/com/paxtecnologia/pma/relatorio/dao/ClienteDAO.java][getLogoCliente][2] = -> rs=connection.executaQuery(pstmt,)@ -> TRY { -> LOOP { -> retorno=rs.getString("logo",)@rs.next() } } CATCH(SQLException) { -> e.printStackTrace()@ }
results[https://github.com/wyona/wiki-parser/blob/9e65ae775df4782efcfb2bfde52745a324cc74c8/jspwiki-parser/src/jspwiki-original-and-patches/JSPWiki-2.4.71/src/com/ecyrd/jspwiki/auth/authorize/JDBCGroupDatabase.java][populateGroup][1] = -> TRY { -> rs=ps.executeQuery()@ -> LOOP { -> memberName=rs.getString(m_member,)@rs.next() -> IF { -> principal=new WikiPrincipal(memberName,WikiPrincipal.UNSPECIFIED,)@memberName!=null } } }
results[https://github.com/magictowers/bluefinder/blob/987dc845c4c9b82e8c4d9adc3fe0dc3e5242e614/BlueFinderRS/src/knn/KNNTestComplete.java][getListOfPathQueries][1] = -> TRY {  -> resultSet=st.executeQuery(query,)@ -> LOOP { -> pathQuery=resultSet.getString("path",)@resultSet.next() -> genPath=cg.generalizePathQuery(pathQuery,)@ } } CATCH(SQLException) {}
results[https://github.com/NCIP/catissue-advanced-query/blob/0637875a6442741bad8e8d25c797e8f1f89bfc5a/software/AdvancedQuery/WEB-INF/src/edu/wustl/query/querysuite/metadata/InsertPaths.java][insertPath][2] = -> TRY {  -> resultSet=dao.getQueryResultSet(sql,)@ -> LOOP { -> interPath=resultSet.getString("INTERMEDIATE_PATH",)@resultSet.next() } -> dao.closeStatement(resultSet,)@ } CATCH(DAOException,SQLException,IOException) {}
results[https://github.com/biosemantics/charaparser/blob/19a8c8614f04ae872554a9206e8623412d57a57b/charaparser/src/semanticMarkup/io/input/lib/db/PerlDBVolumeReader.java][read][1] = -> TRY {  -> resultSet=statement.executeQuery("select source from "+this.databasePrefix+"_sentence",)@ -> LOOP { -> source=resultSet.getString("source",)@resultSet.next() -> sourceIds=source.split(".txt-",)@ } } CATCH(Exception) {}
results[https://github.com/korpling/ANNIS/blob/3218c2bf822ad21e64ea4eca0f79002a94d8aceb/annis-service/src/main/java/annis/sqlgen/RawTextSqlHelper.java][extractData][1] = -> TRY {  -> resultBuffer=new ArrayList<String>()@ -> LOOP { -> resultBuffer.add(rs.getString("text",),)@rs.next() } } CATCH(SQLException,DataAccessException) {}
results[https://github.com/anycook/anycook-core/blob/ac5c8eb656520b816090df551b3f16a43739d9f3/src/anycook/mysql/DBGericht.java][getGericht][3] = -> TRY { -> data=pStatement.executeQuery()@ -> IF { -> return data.getString("name",)@data.next() } } CATCH(SQLException) { -> logger.error("execute MySQL-query failed at getGericht.",e,)@ }
results[https://github.com/chris-martin/h2/blob/96c73c3345c3decc89e9c81cfb8dccfc93263f8d/h2/src/main/org/h2/bnf/context/DbContents.java][getDefaultSchemaName][2] = -> TRY { -> rs=meta.getSchemas()@ -> index=rs.findColumn("IS_DEFAULT",)@ -> LOOP { -> IF { -> defaultSchemaName=rs.getString("TABLE_SCHEM",)@rs.getBoolean(index,) && rs.next() } } }
results[https://github.com/ScootrNova/ClassyGames/blob/e20fc300db7311be608d1daea3192ab67a9ca5e0/projects/server/classygamesserver/src/edu/selu/android/classygames/GCMUtilities.java][grabUserRegId][1] = -> TRY { -> sqlResult=sqlStatement.executeQuery()@ -> IF { -> reg_id=sqlResult.getString(Utilities.DATABASE_TABLE_USERS_COLUMN_REG_ID,)@sqlResult.next() } } FINALLY { -> Utilities.closeSQLStatement(sqlStatement,)@ }
results[https://github.com/europeana/contrib/blob/759082a635815ec98ce72e4a4030c17552dd0ff1/ntua/mint2/src/main/java/gr/ntua/ivml/mint/concurrent/RepoxQueryCache.java][getInstance][1] = -> TRY {  -> rs=ps.executeQuery()@ -> LOOP { -> count=new Integer(rs.getString("count",),)@rs.next() } } CATCH(SQLException) {}
results[https://github.com/Hidendra/LWC/blob/22716a7ef79b63073a7bacb772cc760bf6228bea/src/main/com/griefcraft/sql/MemDB.java][getLockPassword][1] = -> TRY { -> set=statement.executeQuery()@ -> LOOP { -> password=set.getString("password",)@set.next() } } CATCH(Exception) { -> printException(e,)@ }
results[https://github.com/angusmacdonald/h2o/blob/d526c604cf8fa3349a5839da4d2990f767e5607c/src/test/org/h2/test/db/TestCases.java][testAllSizes][1] = -> TRY {  -> rs=stat.executeQuery("SELECT * FROM TEST",)@ -> LOOP { -> id=rs.getInt(1,)@rs.next() -> s=rs.getString("DATA",)@rs.next() } } CATCH(SQLException,IOException) {}
results[https://github.com/roselone/FootWith/blob/5ea16b80be66db7d6e407e3ef5e9e3857ffd75c9/PC/src/test/java/DBUtilTest.java][testDB][1] = -> TRY {  -> rs=DB.executeQuery(SQLCOM2,)@ -> LOOP { -> System.out.println(rs.getString("siteName",),)@rs.next() } } CATCH(SQLException,UnsupportedEncodingException) {}
results[https://github.com/t-morita/DODDLE-OWL/blob/9cae5fb231a3d05f887f2d9eaaace0ee0c3b7d68/src/main/java/jp/ac/keio/ae/comp/yamaguti/doddle/ui/DBManagerDialog.java][loadBaseURI][1] = -> TRY { -> rs=stmt.executeQuery(sql,)@ -> LOOP { -> baseURI=rs.getString("Base_URI",)@rs.next() } } CATCH(SQLException) { -> e.printStackTrace()@ }
results[https://github.com/Slayjay78/android_libcore/blob/38fc00ddece5f7d8941fecb01c7bcc2b45208496/luni/src/test/java/libcore/sqlite/OldDatabaseTest.java][setUp][10] = -> TRY {  -> userTab=meta.getTables(null,null,null,null,)@ -> LOOP { -> tableName=userTab.getString("TABLE_NAME",)@userTab.next() -> this.statement.execute("drop table "+tableName,)@ } } CATCH(java.lang.Exception) {}
results[https://github.com/MercuryGroup/Project/blob/886fcf6750322e1c8c7c46066d38f217de9edb13/src/AdminPanel.java][updateRestaurantOwnerList][1] = -> restaurantOwnerList.removeAllItems()@ -> restaurantOwnerList.addItem(" - Chose Owner -",)@ -> dbResult=database.doQuery("SELECT * FROM owner WHERE RestaurantID IS NULL",)@ -> TRY { -> LOOP { -> restaurantOwnerList.addItem(dbResult.getString("Mail",),)@dbResult!=null&&dbResult.next() } }
results[https://github.com/tfreese/misc/blob/312de64492e0993610183a443e03ec58b8064487/spring-test/src/main/java/de/freese/spring/config/dao/UserDAO.java][startup][1] = -> TRY {  -> resultSet=metaData.getTables(null,null,null, new String[],)@ -> LOOP { -> tableName=resultSet.getString("TABLE_NAME",)@resultSet.next() -> this.logger.info(tableName,)@ } } CATCH(SQLException) {}
results[https://github.com/gothfox/Tiny-Tiny-IRC/blob/cbd26d3ad34c0844a32c5c73a6a230648cdc10fb/src/org/fox/ttirc/NativeConnectionHandler.java][getConnectCmd][1] = -> TRY {  -> rs=ps.getResultSet()@ -> IF { -> rv=rs.getString("connect_cmd",).split(";",)@rs.next() } } CATCH(SQLException) {}
results[https://github.com/maurodim/siderconCapaDeDatos/blob/9a8477646c31e6d296af4c0446bdd861c7be6d09/src/config/Formularios.java][getDetallado][1] = -> TRY {  -> rs=st.getResultSet()@ -> LOOP { -> ruta=rs.getString("direccion",)@rs.next() -> System.out.println("RUTA /////////////////////////////////////"+ruta,)@ } } CATCH(SQLException) {}
results[https://github.com/xtnm/Aion-Unique-API-Server/blob/aca6649074ce2c1336cf20ce0c4b8655506da237/AE-go_GameServer/data/scripts/system/database/mysql5/MySQL5PlayerMacrossesDAO.java][handleRead][1] = -> TRY {  -> LOOP { -> order=rset.getInt("order",)@rset.next() -> text=rset.getString("macro",)@rset.next() -> macrosses.put(order,text,)@ } } CATCH(SQLException) {}
results[https://github.com/araqne/logdb/blob/cda7c087422e3275d34d56e3c9058010e4a141c4/araqne-logdb-jdbc/src/main/java/org/araqne/logdb/jdbc/Test.java][main][1] = -> TRY {  -> rs=stmt.executeQuery("table limit=10 iis",)@ -> LOOP { -> System.out.println(rs.getString("line",),)@rs.next() } } CATCH(SQLException,ClassNotFoundException) {}
results[https://github.com/EnderDom/Eddie/blob/c4606ee78e1d897911eb1ec61e8f7009ebc33e7f/com.github.enderdom.eddie/src/databases/bioSQL/mysql/MySQL_BioSQL.java][getSequence][1] = -> TRY { -> set=st.executeQuery("SELECT seq FROM biosequence WHERE bioentry_id="+bioentry_id,)@ -> LOOP { -> str=set.getString("seq",)@set.next() } } CATCH(SQLException) { -> logger.error("Failed to get sequence for contig id "+bioentry_id,e,)@ }
results[https://github.com/Switajski/FlexibleOrders/blob/e725de6dc9652f634e84a3ba5d1c2d40f2193d57/src/main/java/de/switajski/priebes/flexibleorders/domain/PriebesJoomlaImporterService.java][getSingleResult][1] = -> TRY {  -> as=stmt.executeQuery(query,)@ -> LOOP { -> toReturn=as.getString(column,)@as.next() } -> as.close()@ } CATCH(SQLException) {}
results[https://github.com/kaiquan/ReUnite/blob/4b8e06abc8eeda6124b731d4b6760709284d934f/src/Model/Entertainment.java][CREATE_ENTERTAINMENT][1] = -> TRY { -> rs=DB.readRequest(sqlQuery,)@ -> LOOP { -> entertainmentID=rs.getString("entertainmentID",)@rs.next() } } CATCH(Exception) { -> System.out.println("Failed to Retrieve Entertainment ID",)@ }
results[https://github.com/BenObiWan/yapto/blob/f8ccfffff4b7934f8162133cf6d18dd3b4572c77/src/yapto_core/src/yapto/picturebank/sqlfile/SQLFilePictureBank.java][loadPictureIdList][1] = -> TRY {  -> resLoad=_fileListConnection.loadPictureList()@ -> LOOP { -> strId=resLoad.getString(SQLFileListConnection.PICTURE_ID_COLUMN_NAME,)@resLoad.next() -> _pictureIdList.add(strId,)@ } } CATCH(SQLException) {}
results[https://github.com/yukoff/concourse-connect/blob/2ac3fe97b16f7fee7d23cc4e1fc8230d07ff1a0e/src/main/java/com/concursive/connect/web/modules/login/dao/User.java][getEmailAddressById][1] = -> TRY {  -> rs=pst.executeQuery()@ -> IF { -> email=rs.getString("email",)@rs.next() } -> rs.close()@ } CATCH(SQLException) {}
results[https://github.com/mrdon/jforum-cvs/blob/5a53b34b519c9aaba6e9dcea4f325e610659f762/src/net/jforum/drivers/generic/UserModel.java][hasUsernameChanged][1] = -> TRY {  -> rs=p.executeQuery()@ -> IF { -> dbUsername=rs.getString("username",)@rs.next() } -> rs.close()@ } CATCH(Exception) {}
results[https://github.com/bbcf/bbcfutils/blob/748aac3225373f34e7e228d2e45b3646ca0ec2a3/JAVA/src/ch/epfl/bbcf/bbcfutils/sqlite/SQLiteAccess.java][getAttribute][1] = -> TRY {  -> rs=prep.executeQuery()@ -> LOOP { -> result=rs.getString("value",)@rs.next() } -> rs.close()@ } CATCH(SQLException) {}
results[https://github.com/nuodb/migration-tools/blob/d0e4e14dec80e61ff647a5131fa0a08076984447/core/src/main/java/com/nuodb/migrator/jdbc/metadata/inspector/SimpleCatalogInspector.java][processResultSet][1] = -> TRY {  -> inspectionResults=inspectionContext.getInspectionResults()@ -> LOOP { -> addCatalog(inspectionResults,catalogs.getString("TABLE_CAT",),)@catalogs.next() } } CATCH(SQLException) {}
