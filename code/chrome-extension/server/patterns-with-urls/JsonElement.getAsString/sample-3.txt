results[https://github.com/eclipse/stardust.ui.web/blob/b04014956ea123d48bfb21e8f0ead85a000d44ce/web-modeler/src/main/java/org/eclipse/stardust/ui/web/modeler/marshaling/GsonUtils.java][safeGetAsString][2] = -> IF { -> member=jsonObject.get(memberName,)@jsonObject.has(memberName,) -> IF { -> return member.getAsString()@jsonObject.has(memberName,) && member.isJsonPrimitive() } }
results[https://github.com/continuuity/weave/blob/135b1c6d1c68b7c023852b3188d4c7008799496d/core/src/main/java/com/continuuity/weave/internal/json/JsonUtils.java][getAsString][1] = -> jsonElement=json.get(property,)@ -> IF { -> return null@jsonElement.isJsonNull() } -> IF { -> return jsonElement.getAsString()@jsonElement.isJsonPrimitive() && !(jsonElement.isJsonNull()) } -> return jsonElement.toString()@!(jsonElement.isJsonPrimitive()) && !(jsonElement.isJsonNull())
results[https://github.com/eclipse/stardust.ui.web/blob/b04014956ea123d48bfb21e8f0ead85a000d44ce/web-modeler/src/main/java/org/eclipse/stardust/ui/web/modeler/service/XsdSchemaUtils.java][updateImports][1] = -> model=ModelUtils.findContainingModel(schema,)@ -> LOOP { -> element=entry.getValue()@ -> IF { -> updateReferences(facade,model,element.getAsString(),)@element.isJsonPrimitive() } }
results[https://github.com/always-on/always/blob/c77e2f0e1568eb522504725d146d40eeb53e2a91/core/agent/java/edu/wpi/always/cm/ragclient/UIMessagingJson.java][parse][2] = -> t=o.get(MSG_TYPE,)@ -> IF { -> throw new JsonMessageFormatException("Json message missing a type",)@t==null } -> IF { -> body=(b!=null&&b.isJsonObject())?b.getAsJsonObject():null@!(t.isJsonPrimitive()) && !(t==null) -> return new Message(t.getAsString(),body,)@!(t==null) && t.isJsonPrimitive() }
results[https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/blob/ebbc7209aa12a9c52c685e066a675a5c52c341f0/openid-connect-common/src/main/java/org/mitre/discovery/util/JsonUtils.java][getAsString][1] = -> IF { -> e=o.get(member,)@o.has(member,) -> IF { -> return e.getAsString()@e!=null&&e.isJsonPrimitive() && o.has(member,) } ELSE { -> return null@!(e!=null&&e.isJsonPrimitive()) && o.has(member,) } } ELSE { -> return null@!(o.has(member,)) }
results[https://github.com/DM2E/dm2e-ws/blob/d74d0ee9770a50544ceae50bda5aa20e8ef55039/src/main/java/eu/dm2e/ws/services/file/FileService.java][compare][1] = -> arg0Prop=arg0.get(this.compareProp,)@ -> arg1Prop=arg1.get(this.compareProp,)@ -> IF { -> return 0@null==arg0Prop&&null==arg1Prop } -> IF { -> return -1@!(null==arg0Prop&&null==arg1Prop) && null!=arg0Prop&&null==arg1Prop } -> IF { -> return +1@!(null==arg0Prop&&null==arg1Prop) && !(null!=arg0Prop&&null==arg1Prop) && null==arg0Prop&&null!=arg1Prop } -> return arg0Prop.getAsString().compareTo(arg1Prop.getAsString(),)@!(null==arg0Prop&&null==arg1Prop) && !(null!=arg0Prop&&null==arg1Prop) && !(null==arg0Prop&&null!=arg1Prop)
results[https://github.com/wikimedia/analytics-kraken/blob/b79a140d0d369ff66c34cc9713d7512a82924693/src/main/java/org/wikimedia/analytics/kraken/funnel/UserActionNode.java][<init>][2] = -> LOOP { -> value=json.get(type.toString().toLowerCase(),)@ -> IF { -> valueString=value.getAsString()@value!=null&&value.isJsonPrimitive() -> componentValues.putAll(splitProject(valueString,),)@ -> componentValues.put(type,valueString,)@ } }
results[https://github.com/Aleks-Ya/hh-java-api/blob/668eae99a19f36240d8ae56961ea6fc6f00b72c5/src/ru/yaal/project/hhapi/parser/deserializer/SalaryDeserializer.java][deserialize][2] = -> TRY { -> currencyElement=object.get("currency",)@ -> IF { -> currencyId=currencyElement.getAsString()@currencyElement.isJsonPrimitive() -> currency=Currency.CURRENCIES.getById(currencyId,)@ } } CATCH(Exception) { -> LOG.error(e.getMessage(),e,)@ -> throw new JsonParseException(e,)@ }
results[https://github.com/cloudsmith/geppetto/blob/412eb5a8aec4ed34d977a49a90149b57568d492a/org.cloudsmith.geppetto.forge.api/src/main/java/org/cloudsmith/geppetto/forge/v2/service/ForgeService.java][toQueryMap][4] = -> result=new HashMap<String, String>()@ -> IF { -> IF { -> LOOP { -> element=entry.getValue()@ -> IF { -> result.put(entry.getKey(),element.getAsString(),)@element.isJsonPrimitive() } } } }
results[https://github.com/SpigotMC/BungeeCord/blob/38f12840ca16f8ee0930d91db7e0865c1c0e2dd9/api/src/main/java/net/md_5/bungee/chat/ComponentSerializer.java][deserialize][2] = -> TRY {  -> IF { -> return new TextComponent(json.getAsString(),)@json.isJsonPrimitive() } -> object=json.getAsJsonObject()@!(json.isJsonPrimitive()) -> IF { -> return context.deserialize(json,TranslatableComponent.class,)@!(json.isJsonPrimitive()) && object.has("translate",) } -> return context.deserialize(json,TextComponent.class,)@!(object.has("translate",)) && !(json.isJsonPrimitive()) } CATCH(JsonParseException) {}
results[https://github.com/facebook/buck/blob/8d60bbb7523cdaeabba7e4a1434d74ad2b6087eb/src/com/facebook/buck/httpserver/TracesHelper.java][parseCommandFrom][1] = -> TRY { -> nameEl=json.get("name",)@ -> IF { -> return Optional.absent()@nameEl==null||!(nameEl.isJsonPrimitive()) } -> IF { -> return Optional.absent()@!(nameEl==null||!(nameEl.isJsonPrimitive())) && argsEl==null||!(argsEl.isJsonObject())||argsEl.getAsJsonObject().get("command_args",)==null||!(argsEl.getAsJsonObject().get("command_args",).isJsonPrimitive()) } -> name=nameEl.getAsString()@!(argsEl==null||!(argsEl.isJsonObject())||argsEl.getAsJsonObject().get("command_args",)==null||!(argsEl.getAsJsonObject().get("command_args",).isJsonPrimitive())) && !(nameEl==null||!(nameEl.isJsonPrimitive())) } CATCH(IOException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/lucmoreau/ProvToolbox/blob/516e3e312a5dd85a6eb2086a63617ea49d76404c/prov-json/src/main/java/org/openprovenance/prov/json/ProvDocumentDeserializer.java][decodeInternationalizedString][1] = -> iString=pf.getObjectFactory().createInternationalizedString()@ -> IF { -> iString.setValue(element.getAsString(),)@element.isJsonPrimitive() } ELSE { -> struct=element.getAsJsonObject()@!(element.isJsonPrimitive()) -> iString.setValue(value,)@ -> IF { -> iString.setLang(lang,)@ } }
results[https://github.com/carrotsearch/randomizedtesting/blob/cc8eb71ee943de6f6b6f90a75bfa510011b4ccc9/integration-ant/ant-junit4/src/main/java/com/carrotsearch/ant/tasks/junit4/events/json/JsonDescriptionAdapter.java][deserialize][3] = -> TRY {  -> IF { -> id=json.getAsString()@json.isJsonPrimitive() -> key=identifiersInverse.get(id,)@json.isJsonPrimitive() -> IF { -> throw new JsonParseException("No such reference: "+id,)@json.isJsonPrimitive() && key==null } -> return key.description@!(key==null) && json.isJsonPrimitive() } ELSE { -> o=json.getAsJsonObject()@!(json.isJsonPrimitive()) -> return description@!(json.isJsonPrimitive()) } } CATCH(JsonParseException) {}
results[https://github.com/0xdata/h2o/blob/d8e2baae1de0f0813815df1f6b721159cebd75c8/src/main/java/water/util/RString.java][replace][3] = -> LOOP { -> v=obj.getValue()@ -> IF { -> replace(obj.getKey(),v.getAsString(),)@v.isJsonPrimitive()&&(JsonPrimitive) v.isString() } ELSE { } ELSE { -> replace(obj.getKey(),v,)@!(v.isJsonPrimitive()&&(JsonPrimitive) v.isString()) && !(v.isJsonArray()) } }
results[https://github.com/eclipse/stardust.ui.web/blob/b04014956ea123d48bfb21e8f0ead85a000d44ce/web-modeler/src/main/java/org/eclipse/stardust/ui/web/modeler/marshaling/ModelElementUnmarshaller.java][updateActivity][1] = -> IF { -> return @null==activityJson } } ELSE { -> participantIdJson=activityJson.get(ModelerConstants.PARTICIPANT_FULL_ID,)@!(null==activityJson) -> IF { } ELSE { -> IF { -> participantFullId=participantIdJson.getAsString()@!(participantIdJson.isJsonNull()) && participantIdJson.isJsonPrimitive()&&participantIdJson.getAsJsonPrimitive().isString() && !(null==activityJson) && participantIdJson!=null -> performer=getModelBuilderFacade().findParticipant(participantFullId,)@!(null==activityJson) } }
results[https://github.com/dakusui/symfonion/blob/15fcdefaafee5c8ba4026705c9cf5dfc509a8373/src/main/java/com/github/dakusui/json/JsonException.java][summary][2] = -> IF { -> return "null"@actualJSON==null||actualJSON.isJsonNull() } -> IF { -> return actualJSON.getAsString()+"(primitive)"@actualJSON.isJsonPrimitive() && !(actualJSON==null||actualJSON.isJsonNull()) } -> IF { -> return "array(size="+actualJSON.getAsJsonArray().size()+")"@!(actualJSON==null||actualJSON.isJsonNull()) && !(actualJSON.isJsonPrimitive()) && actualJSON.isJsonArray() } -> IF { -> return "object("+actualJSON.getAsJsonObject().entrySet().size()+" entries)"@!(actualJSON.isJsonArray()) && !(actualJSON==null||actualJSON.isJsonNull()) && !(actualJSON.isJsonPrimitive()) && actualJSON.isJsonObject() } -> return actualJSON.toString()+"(unknown)"@!(actualJSON.isJsonArray()) && !(actualJSON==null||actualJSON.isJsonNull()) && !(actualJSON.isJsonObject()) && !(actualJSON.isJsonPrimitive())
results[https://github.com/testmycode/tmc-netbeans/blob/eb0dcbfa2c0627866382ab772b6ecf60741ba8eb/src/fi/helsinki/cs/tmc/utilities/ByteArrayGsonSerializer.java][deserialize][3] = -> TRY {  -> IF { -> return Base64.decodeBase64(je.getAsString(),)@je.isJsonPrimitive()&&(JsonPrimitive) je.isString() } ELSE { -> IF { -> return null@je.isJsonNull() && !(je.isJsonPrimitive()&&(JsonPrimitive) je.isString()) } ELSE { -> throw new JsonParseException("Not a base64 string.",)@!(je.isJsonNull()) && !(je.isJsonPrimitive()&&(JsonPrimitive) je.isString()) } } } CATCH(JsonParseException) {}
results[https://github.com/Floobits/floobits-intellij/blob/c3e28ff1502a65c99dfc475e5b64105ba6673422/src/floobits/common/protocol/receive/RoomInfoTree.java][<init>][2] = -> this.bufs=new HashMap<String, Integer>()@ -> LOOP { -> key=entry.getKey()@ -> value=entry.getValue()@ -> IF { -> this.bufs.put(key,Integer.parseInt(value.getAsString(),),)@value.isJsonPrimitive() } ELSE { -> this.folders.put(key,new RoomInfoTree(value.getAsJsonObject(),),)@!(value.isJsonPrimitive()) } }
results[https://github.com/Double-U/XenMaster/blob/225b69c779fa534f9b3b607a7f6b1f8a80be98a3/src/main/java/org/xenmaster/web/APICallDecoder.java][deserialize][1] = -> IF { -> return json.getAsString()@json.isJsonPrimitive() } ELSE { -> IF { -> return deserializeToMap(json.getAsJsonObject(),)@json.isJsonObject() && !(json.isJsonPrimitive()) } ELSE { -> IF { -> return deserializeToArray(json.getAsJsonArray(),)@!(json.isJsonPrimitive()) && json.isJsonArray() && !(json.isJsonObject()) } } }
results[https://github.com/Floobits/floobits-intellij/blob/64cb0082b25f842aca2ebd024aa0432a74a56370/src/floobits/common/protocol/Tree.java][<init>][1] = -> this.bufs=new HashMap<String, Integer>()@ -> LOOP { -> key=entry.getKey()@ -> value=entry.getValue()@ -> IF { -> this.bufs.put(key,Integer.parseInt(value.getAsString(),),)@value.isJsonPrimitive() } ELSE { -> this.folders.put(key,new Tree(value.getAsJsonObject(),),)@!(value.isJsonPrimitive()) } }
results[https://github.com/ubee/funf-open-sensing-framework/blob/1867866f944f1c1300d3b1a6939f81b4df642c1e/src/edu/mit/media/funf/config/DefaultRuntimeTypeAdapterFactory.java][read][1] = -> TRY {  -> el=Streams.parse(in,)@ -> runtimeType=getRuntimeType(el,type,)@ -> IF { -> throw new ParseException("RuntimeTypeAdapter: Unable to parse runtime type.",)@runtimeType==null } -> IF { -> typeObject=new JsonObject()@!(runtimeType==null) -> typeObject.addProperty(TYPE,el.getAsString(),)@!(runtimeType==null) && el.isJsonPrimitive()&&el.getAsJsonPrimitive().isString() } -> return delegate.read(new JsonTreeReader(el,),)@!(runtimeType==null) } CATCH(IOException) {}
results[https://github.com/eclipse/stardust.ui.web/blob/b04014956ea123d48bfb21e8f0ead85a000d44ce/web-modeler/src/main/java/org/eclipse/stardust/ui/web/modeler/service/XsdSchemaUtils.java][createElement][1] = -> element=document.createElementNS(NS_URI,PREFIX+entry.getKey(),)@ -> IF { -> element.setAttributeNS(XMLConstants.XMLNS_ATTRIBUTE_NS_URI,XMLNS_CARNOT,NS_URI,)@ } -> value=entry.getValue()@ -> IF { -> element.appendChild(document.createTextNode(value.getAsString(),),)@value.isJsonPrimitive() } ELSE { -> IF { -> addChildren(document,element,(JsonObject) value,false,)@value.isJsonObject() && !(value.isJsonPrimitive()) } }
results[https://github.com/constretto/constretto-core/blob/7fbc73c5352418c168064a935dd07fb1f39fe67d/constretto-core/src/main/java/org/constretto/model/GsonParser.java][handle][1] = -> IF { -> return null@json.isJsonNull() } ELSE { -> IF { -> return new CPrimitive(json.getAsString(),)@json.isJsonPrimitive() && !(json.isJsonNull()) } ELSE { -> IF { -> return handleArray(json.getAsJsonArray(),)@!(json.isJsonPrimitive()) && json.isJsonArray() && !(json.isJsonNull()) } ELSE { -> return handleObject(json.getAsJsonObject(),)@!(json.isJsonArray()) && !(json.isJsonPrimitive()) && !(json.isJsonNull()) } } }
results[https://github.com/Hurricaaane/Presence-Footsteps/blob/f3f3173e13de4d38eda5fe28518c43d0c16e0279/pf-src/eu/ha3/mc/presencefootsteps/parsers/JasonAcoustics_Engine0.java][solveAcoustic][2] = -> TRY {  -> IF { -> ret=solveAcousticsCompound(unsolved.getAsJsonObject(),)@unsolved.isJsonObject() } ELSE { -> IF { -> a=new BasicAcoustic()@ -> prepareDefaults(a,)@ -> setupSoundName(a,unsolved.getAsString(),)@unsolved.isJsonPrimitive()&&unsolved.getAsJsonPrimitive().isString() && !(unsolved.isJsonObject()) } } -> IF { -> throw new UnexpectedDataException()@ret==null } } CATCH(UnexpectedDataException) {}
results[https://github.com/spebbe/cryson/blob/3ca1a4e2f575f5d7184a7ebff55024b548794132/server/src/main/java/se/sperber/cryson/repository/CrysonRepository.java][findByNamedQueryJson][1] = -> query=sessionFactory.getCurrentSession().getNamedQuery(queryName,).setResultTransformer(DistinctRootEntityResultTransformer.INSTANCE,).setCacheable(true,)@ -> LOOP { -> key=element.getKey()@ -> value=element.getValue()@ -> IF { -> parametersArray=value.getAsJsonArray()@value.isJsonArray() -> query.setParameterList(key,parameterList,)@ } ELSE { -> IF { -> query.setParameter(key,value.getAsString(),)@value.isJsonPrimitive() && !(value.isJsonArray()) } } } -> return query.list()@
results[https://github.com/DesignAndDeploy/dnd/blob/97ec4cd3f18e653828d12ac1ba3db4d6a2d743a1/DND/src/edu/teco/dnd/util/InetSocketAddressAdapter.java][deserialize][1] = -> TRY {  -> IF { -> throw new JsonParseException("not a JSON object",)@!(json.isJsonObject()) } -> address=obj.get("address",)@!(!(json.isJsonObject())) -> port=obj.get("port",)@!(!(json.isJsonObject())) -> IF { -> throw new JsonParseException("address/port missing",)@!(!(json.isJsonObject())) && address==null||port==null } -> IF { -> throw new JsonParseException("address is not a string",)@!(!(json.isJsonObject())) && !(address.isJsonPrimitive())||!((JsonPrimitive) address.isString()) && !(address==null||port==null) } -> IF { -> throw new JsonParseException("port is not a number",)@!(!(json.isJsonObject())) && !(port.isJsonPrimitive())||!((JsonPrimitive) port.isNumber()) && !(address==null||port==null) && !(!(address.isJsonPrimitive())||!((JsonPrimitive) address.isString())) } -> isa=new InetSocketAddress(address.getAsString(),port.getAsInt(),)@!(!(json.isJsonObject())) && !(address==null||port==null) && !(!(address.isJsonPrimitive())||!((JsonPrimitive) address.isString())) && !(!(port.isJsonPrimitive())||!((JsonPrimitive) port.isNumber())) -> LOGGER.exit(isa,)@!(!(json.isJsonObject())) && !(address==null||port==null) && !(!(address.isJsonPrimitive())||!((JsonPrimitive) address.isString())) && !(!(port.isJsonPrimitive())||!((JsonPrimitive) port.isNumber())) } CATCH(JsonParseException) {}
results[https://github.com/cgueret/LinkedIDS/blob/fba98634a905e0309a8ba17ca2245766ce9ec2cd/server/IDSWrapper/src/uk/ac/ids/util/DataHarvester.java][parseElement][1] = -> IF { -> obj=element.getAsJsonObject()@element.isJsonObject() } ELSE { -> IF { -> array=element.getAsJsonArray()@element.isJsonArray() && !(element.isJsonObject()) } ELSE { -> IF { -> IF { -> list=results.get(key,)@results.containsKey(key,) } ELSE { -> list=new ArrayList<String>()@ -> results.put(key,list,)@!(results.containsKey(key,)) } -> IF { -> list.add(element.getAsString(),)@!(element.getAsString().equals("",)) && !(element.isJsonArray()) && element.isJsonPrimitive() && !(element.isJsonObject()) } } } }
results[https://github.com/Double-U/XenMaster/blob/1df036048d18b9cdbac9ce0e37c68d88ef9bd2b6/src/main/java/net/wgr/xenmaster/web/APICallDecoder.java][deserialize][1] = -> TRY {  -> LOOP { -> IF { -> args=new ArrayList<>(arr.size(),)@ -> LOOP { -> value=arr.get(i,)@i<arr.size() -> IF { -> args.add(value.getAsString(),)@value.isJsonPrimitive() } ELSE { -> IF { -> args.add(deserializeToMap(value.getAsJsonObject(),),)@value.isJsonObject() && !(value.isJsonPrimitive()) } } } -> apic.args=args.toArray()@ } } } CATCH(JsonParseException) {}
results[https://github.com/eclipse/stardust.ui.web/blob/b04014956ea123d48bfb21e8f0ead85a000d44ce/stardust-web-reporting/src/main/java/org/eclipse/stardust/ui/web/bpm_reporting/service/ReportingService.java][convertJsonPrimitiveToObject][1] = -> IF { -> return null@jsonElement.isJsonNull() } ELSE { -> IF { -> IF { -> return jsonElement.getAsString()@jsonElement.getAsJsonPrimitive().isString() && jsonElement.isJsonPrimitive() && !(jsonElement.isJsonNull()) } ELSE { -> IF { -> return jsonElement.getAsBoolean()@!(jsonElement.getAsJsonPrimitive().isString()) && jsonElement.getAsJsonPrimitive().isBoolean() && jsonElement.isJsonPrimitive() && !(jsonElement.isJsonNull()) } ELSE { -> IF { -> return jsonElement.getAsNumber()@!(jsonElement.getAsJsonPrimitive().isString()) && jsonElement.isJsonPrimitive() && jsonElement.getAsJsonPrimitive().isNumber() && !(jsonElement.isJsonNull()) && !(jsonElement.getAsJsonPrimitive().isBoolean()) } ELSE { -> throw new RuntimeException("JSON entry "+jsonElement+" has an unknown primitive type.",)@!(jsonElement.getAsJsonPrimitive().isString()) && jsonElement.isJsonPrimitive() && !(jsonElement.isJsonNull()) && !(jsonElement.getAsJsonPrimitive().isBoolean()) && !(jsonElement.getAsJsonPrimitive().isNumber()) } } } } ELSE { -> throw new RuntimeException("JSON entry "+jsonElement+" is not a primitive.",)@!(jsonElement.isJsonPrimitive()) && !(jsonElement.isJsonNull()) } }
results[https://github.com/vega113/WaveInCloud/blob/1f8340c7ff8093fad6dcdbfb9714d16a6a59014c/src/org/waveprotocol/wave/communication/gson/GsonUtil.java][extractJsonObject][1] = -> TRY {  -> IF { -> object.fromGson(valueObj.getAsJsonObject(),gson,raw,)@valueObj.isJsonObject() } ELSE { -> IF { -> primitive=valueObj.getAsJsonPrimitive()@valueObj.isJsonPrimitive() && !(valueObj.isJsonObject()) -> IF { -> throw new GsonException("Decoding "+valueObj+" as object "+object.getClass()+" with no RawStringData given",)@valueObj.isJsonPrimitive() && raw==null||!(primitive.isString()) && !(valueObj.isJsonObject()) } -> s=raw.getString(valueObj.getAsString(),)@valueObj.isJsonPrimitive() && !(raw==null||!(primitive.isString())) && !(valueObj.isJsonObject()) -> GsonUtil.parseJson(object,gson,s,raw,)@valueObj.isJsonPrimitive() && valueObj.isJsonObject() && !(raw==null||!(primitive.isString())) } ELSE { -> throw new GsonException("Cannot decode valueObject "+valueObj.getClass()+" as object "+object.getClass(),)@!(valueObj.isJsonPrimitive()) && !(valueObj.isJsonObject()) } } } CATCH(GsonException) {}
results[https://github.com/lucmoreau/ProvToolbox/blob/516e3e312a5dd85a6eb2086a63617ea49d76404c/prov-json/src/main/java/org/openprovenance/prov/json/ProvDocumentDeserializer.java][decodeAttributeValue][1] = -> IF { -> o=decodeJSONPrimitive(element.getAsString(),)@element.isJsonPrimitive() -> type=vconv.getXsdType(o,)@element.isJsonPrimitive() -> return pf.newAttribute(elementName,o,type,)@element.isJsonPrimitive() } ELSE { -> struct=element.getAsJsonObject()@!(element.isJsonPrimitive()) -> IF { -> return pf.newAttribute(elementName,iString,name.PROV_LANG_STRING,)@!(element.isJsonPrimitive()) && struct.has("lang",) } ELSE { -> IF { -> IF { -> return pf.newAttribute(elementName,ns.stringToQualifiedName(value,pf,),xsdType,)@xsdType.equals(name.XSD_QNAME,) && !(element.isJsonPrimitive()) && !(struct.has("lang",)) && struct.has("type",) } ELSE { -> return pf.newAttribute(elementName,value,xsdType,)@!(xsdType.equals(name.XSD_QNAME,)) && !(element.isJsonPrimitive()) && !(struct.has("lang",)) && struct.has("type",) } } ELSE { -> return pf.newAttribute(elementName,iString,name.PROV_LANG_STRING,)@!(struct.has("type",)) && !(element.isJsonPrimitive()) && !(struct.has("lang",)) } } }
results[https://github.com/droolsjbpm/jbpm/blob/ad56b6b1e8d448ff0af0c16263f3efa0e8fef7e5/jbpm-services/form-services/src/main/java/org/jbpm/form/builder/services/encoders/FormRepresentationDecoderImpl.java][fromJsonValue][1] = -> IF { -> return elem.getAsString()@elem.isJsonPrimitive()&&elem.getAsJsonPrimitive().isString() } ELSE { -> IF { -> return elem.getAsNumber()@elem.isJsonPrimitive()&&elem.getAsJsonPrimitive().isNumber() && !(elem.isJsonPrimitive()&&elem.getAsJsonPrimitive().isString()) } ELSE { -> IF { -> return asList(elem.getAsJsonArray(),)@elem.isJsonArray() && !(elem.isJsonPrimitive()&&elem.getAsJsonPrimitive().isNumber()) && !(elem.isJsonPrimitive()&&elem.getAsJsonPrimitive().isString()) } ELSE { -> IF { -> return null@!(elem.isJsonArray()) && !(elem.isJsonPrimitive()&&elem.getAsJsonPrimitive().isNumber()) && elem.isJsonNull() && !(elem.isJsonPrimitive()&&elem.getAsJsonPrimitive().isString()) } ELSE { -> IF { -> return asMap(elem.getAsJsonObject(),)@elem.isJsonObject() && !(elem.isJsonArray()) && !(elem.isJsonPrimitive()&&elem.getAsJsonPrimitive().isNumber()) && !(elem.isJsonNull()) && !(elem.isJsonPrimitive()&&elem.getAsJsonPrimitive().isString()) } ELSE { -> return ""@!(elem.isJsonArray()) && !(elem.isJsonPrimitive()&&elem.getAsJsonPrimitive().isNumber()) && !(elem.isJsonNull()) && !(elem.isJsonObject()) && !(elem.isJsonPrimitive()&&elem.getAsJsonPrimitive().isString()) } } } } }
results[https://github.com/Farata/ClearJS/blob/cd10e3b035d8f334f55854ddd69155064c8e0353/clear-djn/src/com/softwarementors/extjs/djn/router/processor/standard/json/JsonRequestProcessor.java][isValidJsonTypeForJavaType][1] = -> IF { -> return !(parameterType.isPrimitive())@jsonElement.isJsonNull() } -> IF { -> return jsonElement.isJsonPrimitive()&&(JsonPrimitive) jsonElement.isBoolean()@!(jsonElement.isJsonNull()) } ELSE { -> IF { -> IF { -> return jsonElement.getAsString().length()==1@jsonElement.isJsonPrimitive()&&(JsonPrimitive) jsonElement.isString() && !(jsonElement.isJsonNull()) } } ELSE { -> IF { -> return jsonElement.isJsonPrimitive()&&(JsonPrimitive) jsonElement.isString()@!(jsonElement.isJsonNull()) } ELSE { -> IF { -> return jsonElement.isJsonPrimitive()&&(JsonPrimitive) jsonElement.isNumber()@!(jsonElement.isJsonNull()) } } } }
results[https://github.com/USGS-CIDA/coastal-hazards/blob/8717f0438edc324d490c3adc7125c2be7f29a42c/coastal-hazards-portal/src/main/java/gov/usgs/cida/coastalhazards/gson/adapter/ItemAdapter.java][deserialize][1] = -> TRY {  -> IF { -> IF { -> IF { -> LOOP { -> childItem=iterator.next()@!(children instanceof JsonArray) && !(defaultObj instanceof Item) && iterator.hasNext() && !(json instanceof JsonObject) -> TRY { -> IF { -> childItemObj=new Item()@!(children instanceof JsonArray) && !(defaultObj instanceof Item) && !(iterator.hasNext()) && !(json instanceof JsonObject) && childItem.isJsonPrimitive() -> childItemObj.setId(childItem.getAsString(),)@!(children instanceof JsonArray) && !(defaultObj instanceof Item) && !(iterator.hasNext()) && !(json instanceof JsonObject) && childItem.isJsonPrimitive() } ELSE { -> IF { -> childItemObj=(Item) context.deserialize(childItem,Item.class,)@!(childItem.isJsonPrimitive()) && childItem.isJsonObject() && !(children instanceof JsonArray) && !(defaultObj instanceof Item) && !(iterator.hasNext()) && !(json instanceof JsonObject) } ELSE { -> throw new JsonParseException("Need a list of primatives or objects",)@!(childItem.isJsonPrimitive()) && json instanceof JsonObject && iterator.hasNext() && !(childItem.isJsonObject()) && children instanceof JsonArray && defaultObj instanceof Item } } -> childrenList.add(childItemObj,)@!(children instanceof JsonArray) && !(defaultObj instanceof Item) && !(iterator.hasNext()) && !(json instanceof JsonObject) && childItem.isJsonPrimitive() } CATCH(JsonParseException) { -> log.debug("Problem deserializing children",ex,)@!(children instanceof JsonArray) && !(defaultObj instanceof Item) && !(iterator.hasNext()) && !(json instanceof JsonObject) } } } } } } CATCH(JsonParseException) {}
results[https://github.com/IKANOW/Infinit.e/blob/e8d3c98b0eee44a0979bec9a0118986205683bac/core/infinit.e.data_model/src/com/ikanow/infinit/e/data_model/custom/InfiniteFileInputJsonParser.java][getKey][2] = -> TRY { -> metaObj=meta.getAsJsonObject()@ -> LOOP { -> meta=metaObj.get(comp,)@ -> IF { -> return null@null==meta } ELSE { -> IF { -> metaObj=meta.getAsJsonObject()@!(null==meta) && meta.isJsonObject() } ELSE { -> IF { -> return meta.getAsString()@!(null==meta) && meta.isJsonPrimitive() && !(meta.isJsonObject()) } ELSE { -> IF { -> return null@!(meta.isJsonPrimitive()) && !(null==meta) && !(meta.isJsonObject()) } ELSE { -> array=meta.getAsJsonArray()@!(meta.isJsonPrimitive()) && !(null==meta) && !(meta.isJsonObject()) -> meta=array.get(0,)@!(meta.isJsonPrimitive()) && !(null==meta) && !(meta.isJsonObject()) -> IF { -> metaObj=meta.getAsJsonObject()@!(meta.isJsonPrimitive()) && !(null==meta) && meta.isJsonObject() && !(meta.isJsonObject()) } } } } } } -> IF { -> IF { -> return "[Object]"@null!=metaObj } } }
results[https://github.com/shilad/wikAPIdia/blob/8d3a2d200d1aa152c5893facfef39a9c33409e9f/wikAPIdia-wikidata/src/main/java/org/wikapidia/wikidata/WikidataParser.java][parseEntity][1] = -> TRY {  -> IF { -> array=value.getAsJsonArray()@value.isJsonArray() } ELSE { } ELSE { -> throw new WpParseException("in parseEntity expected item or property, found "+value,)@!(s.equals("property",)) && !(s.equals("item",)) && value.isJsonArray() } ELSE { -> IF { -> id=value.getAsString().toLowerCase()@value.isJsonPrimitive()&&value.getAsJsonPrimitive().isString() && !(value.isJsonArray()) -> IF { -> entityId=Integer.valueOf(id.substring(1,),)@value.isJsonPrimitive()&&value.getAsJsonPrimitive().isString() && id.startsWith("q",) && value.isJsonArray() } ELSE { -> IF { -> entityId=Integer.valueOf(id.substring(1,),)@id.startsWith("p",) && !(id.startsWith("q",)) && value.isJsonPrimitive()&&value.getAsJsonPrimitive().isString() && value.isJsonArray() } ELSE { -> throw new WpParseException("Invalid entity id: "+id,)@!(id.startsWith("q",)) && value.isJsonPrimitive()&&value.getAsJsonPrimitive().isString() && !(id.startsWith("p",)) && !(value.isJsonArray()) } } } ELSE { -> throw new WpParseException("in parseEntity expected array, found "+value,)@!(value.isJsonPrimitive()&&value.getAsJsonPrimitive().isString()) && !(value.isJsonArray()) } } } CATCH(WpParseException) {}
results[https://github.com/nicogiard/pisteur/blob/91ebec9d6e5a0fe6ee7629006938eac6c153e6d1/app/utils/BEncode.java][encodeDictionary][1] = -> sb=new StringBuilder().append("d",)@ -> LOOP { -> sb.append(entry.getKey().length(),).append(":",).append(entry.getKey(),)@ -> value=entry.getValue()@ -> IF { -> primitive=value.getAsJsonPrimitive()@value.isJsonPrimitive() -> IF { -> sb.append(encodeString(value.getAsString(),),)@value.isJsonPrimitive() } ELSE { -> IF { -> sb.append(encodeNumber(value.getAsNumber(),),)@value.isJsonPrimitive() } } } ELSE { -> IF { -> sb.append(encodeDictionary(value.getAsJsonObject(),),)@value.isJsonObject() && !(value.isJsonPrimitive()) } } } -> return sb.append("e",).toString()@
results[https://github.com/orcc/orcc/blob/8109b69033bbc5ba86c666f1060306fda78aef40/plugins/net.sf.orcc.core/src/net/sf/orcc/ir/serialize/IRParser.java][parseExpr][1] = -> TRY {  -> IF { -> primitive=element.getAsJsonPrimitive()@element.isJsonPrimitive() -> IF { -> return new BoolExpr(primitive.getAsBoolean(),)@primitive.isBoolean() && element.isJsonPrimitive() } ELSE { -> IF { -> IF { -> return new IntExpr(primitive.getAsBigInteger(),)@number instanceof BigInteger && !(primitive.isBoolean()) && element.isJsonPrimitive() && primitive.isNumber() } ELSE { -> IF { -> return new FloatExpr(primitive.getAsFloat(),)@number instanceof BigDecimal && !(number instanceof BigInteger) && !(primitive.isBoolean()) && element.isJsonPrimitive() && primitive.isNumber() } } } ELSE { -> IF { -> return new StringExpr(element.getAsString(),)@primitive.isString() && !(primitive.isNumber()) && !(primitive.isBoolean()) && element.isJsonPrimitive() } } } } ELSE { -> IF { -> array=element.getAsJsonArray()@element.isJsonArray() && !(element.isJsonPrimitive()) -> IF { -> return new VarExpr(var,)@element.isJsonArray() && name.equals(EXPR_VAR,) && !(element.isJsonPrimitive()) } ELSE { -> IF { -> return parseExprUnary(array,)@element.isJsonArray() && !(name.equals(EXPR_VAR,)) && name.equals(EXPR_UNARY,) && !(element.isJsonPrimitive()) } ELSE { -> IF { -> return parseExprBinary(array,)@name.equals(EXPR_BINARY,) && element.isJsonArray() && !(name.equals(EXPR_VAR,)) && !(name.equals(EXPR_UNARY,)) && !(element.isJsonPrimitive()) } ELSE { -> IF { -> return parseExprList(array,)@element.isJsonArray() && !(name.equals(EXPR_VAR,)) && name.equals(EXPR_LIST,) && !(name.equals(EXPR_UNARY,)) && !(element.isJsonPrimitive()) && !(name.equals(EXPR_BINARY,)) } ELSE { -> throw new OrccException("Invalid expression kind: "+name,)@element.isJsonArray() && !(name.equals(EXPR_VAR,)) && !(name.equals(EXPR_LIST,)) && !(name.equals(EXPR_UNARY,)) && !(element.isJsonPrimitive()) && !(name.equals(EXPR_BINARY,)) } } } } } } -> throw new OrccException("Invalid expression: "+element,)@element.isJsonPrimitive() } CATCH(OrccException) {}
results[https://github.com/DesignAndDeploy/dnd/blob/550e2538b0811521bd3702f5e3e45a713379a206/DND/src/edu/teco/dnd/module/messages/infoReq/BlockIDAdapter.java][deserialize][1] = -> TRY {  -> IF { -> throw new JsonParseException("not a JSON object",)@!(json.isJsonObject()) } -> blockUUID=obj.get("blockUUID",)@!(!(json.isJsonObject())) -> appUUID=obj.get("appID",)@!(!(json.isJsonObject())) -> IF { -> throw new JsonParseException("blockUUID/appID missing",)@!(!(json.isJsonObject())) && blockUUID==null||appUUID==null } -> IF { -> throw new JsonParseException("blockUUID is not a string",)@!(!(json.isJsonObject())) && !(blockUUID.isJsonPrimitive())||!((JsonPrimitive) blockUUID.isString()) && !(blockUUID==null||appUUID==null) } -> IF { -> throw new JsonParseException("appID is not a string",)@!(!(json.isJsonObject())) && !(!(blockUUID.isJsonPrimitive())||!((JsonPrimitive) blockUUID.isString())) && !(appUUID.isJsonPrimitive())||!((JsonPrimitive) appUUID.isString()) && !(blockUUID==null||appUUID==null) } -> applicationBlockID=new ApplicationBlockID(UUID.fromString(blockUUID.getAsString(),),UUID.fromString(appUUID.getAsString(),),)@!(!(json.isJsonObject())) && !(!(blockUUID.isJsonPrimitive())||!((JsonPrimitive) blockUUID.isString())) && !(!(appUUID.isJsonPrimitive())||!((JsonPrimitive) appUUID.isString())) && !(blockUUID==null||appUUID==null) -> LOGGER.exit(applicationBlockID,)@!(!(json.isJsonObject())) && !(!(blockUUID.isJsonPrimitive())||!((JsonPrimitive) blockUUID.isString())) && !(!(appUUID.isJsonPrimitive())||!((JsonPrimitive) appUUID.isString())) && !(blockUUID==null||appUUID==null) } CATCH(JsonParseException) {}
results[https://github.com/animoto/animoto_api_client_java/blob/9414491251c0cead920e4d4066aabe507d09b57d/src/main/java/com/animoto/api/gson/deserializer/PostrollDeserializer.java][deserialize][1] = -> TRY {  -> IF { -> throw new JsonParseException("Postroll value is not expected type (Object)",)@!(json.isJsonObject()) } -> jsonTemplate=jsonPostroll.get("template",)@!(!(json.isJsonObject())) -> IF { -> throw new JsonParseException("Postroll value \"template\" is not expected type (String)",)@!(!(json.isJsonObject())) && jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString()) } -> template=jsonTemplate.getAsString()@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) -> IF { -> postroll=new CustomFootagePostroll()@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && template.equals("custom_footage",) -> jsonSourceUrl=jsonPostroll.get("source_url",)@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && template.equals("custom_footage",) -> IF { -> throw new JsonParseException("Postroll value \"source_url\" is not expected type (String)",)@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && jsonSourceUrl==null||!(jsonSourceUrl.isJsonPrimitive()&&jsonSourceUrl.getAsJsonPrimitive().isString()) && template.equals("custom_footage",) } -> postroll.setSourceUrl(jsonSourceUrl.getAsString(),)@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && !(jsonSourceUrl==null||!(jsonSourceUrl.isJsonPrimitive()&&jsonSourceUrl.getAsJsonPrimitive().isString())) && template.equals("custom_footage",) -> return postroll@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && !(jsonSourceUrl==null||!(jsonSourceUrl.isJsonPrimitive()&&jsonSourceUrl.getAsJsonPrimitive().isString())) && template.equals("custom_footage",) } ELSE { -> postroll=new BasicPostroll()@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && template.equals("custom_footage",) -> postroll.setTemplate(template,)@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && !(template.equals("custom_footage",)) -> return postroll@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && !(template.equals("custom_footage",)) } } CATCH(JsonParseException) {}
results[https://github.com/DesignAndDeploy/dnd/blob/38b685ab1194df7428d790c7046877f9de57d6bf/DND/src/edu/teco/dnd/module/messages/infoReq/ApplicationBlockIDAdapter.java][deserialize][1] = -> TRY {  -> IF { -> throw new JsonParseException("not a JSON object",)@!(json.isJsonObject()) } -> blockID=obj.get("blockID",)@!(!(json.isJsonObject())) -> applicationID=obj.get("applicationID",)@!(!(json.isJsonObject())) -> IF { -> throw new JsonParseException("blockID/applicationID missing",)@!(!(json.isJsonObject())) && blockID==null||applicationID==null } -> IF { -> throw new JsonParseException("blockID is not a string",)@!(!(json.isJsonObject())) && !(blockID==null||applicationID==null) && !(blockID.isJsonPrimitive())||!((JsonPrimitive) blockID.isString()) } -> IF { -> throw new JsonParseException("applicationID is not a string",)@!(!(blockID.isJsonPrimitive())||!((JsonPrimitive) blockID.isString())) && !(applicationID.isJsonPrimitive())||!((JsonPrimitive) applicationID.isString()) && !(!(json.isJsonObject())) && !(blockID==null||applicationID==null) } -> applicationBlockID=new ApplicationBlockID(new FunctionBlockID(UUID.fromString(blockID.getAsString(),),),new ApplicationID(UUID.fromString(applicationID.getAsString(),),),)@!(!(blockID.isJsonPrimitive())||!((JsonPrimitive) blockID.isString())) && !(!(json.isJsonObject())) && !(blockID==null||applicationID==null) && !(!(applicationID.isJsonPrimitive())||!((JsonPrimitive) applicationID.isString())) -> LOGGER.exit(applicationBlockID,)@!(!(blockID.isJsonPrimitive())||!((JsonPrimitive) blockID.isString())) && !(!(json.isJsonObject())) && !(blockID==null||applicationID==null) && !(!(applicationID.isJsonPrimitive())||!((JsonPrimitive) applicationID.isString())) } CATCH(JsonParseException) {}
results[https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/blob/3b52ce82019b1e2c917c91d4d01b153039ccf297/openid-connect-server/src/main/java/org/mitre/openid/connect/web/ClientAPI.java][deserialize][1] = -> TRY {  -> IF { -> return JWEEncryptionMethodEmbed.getForAlgorithmName(json.getAsString(),)@json.isJsonPrimitive() } ELSE { -> return null@!(json.isJsonPrimitive()) } } CATCH(JsonParseException) {}
results[https://github.com/IKANOW/Infinit.e/blob/a33540980ff8d3065c33e0ebf85b7582dfc365b2/core/infinit.e.harvest.library/src/com/ikanow/infinit/e/harvest/extraction/document/file/JsonToMetadataParser.java][convertJsonObjectToLinkedHashMap][1] = -> LOOP { -> jsonEl=jsonKeyEl.getValue()@ -> IF { -> list.put(jsonKeyEl.getKey(),handleJsonArray(jsonEl.getAsJsonArray(),bHtmlUnescape,size,),)@jsonEl.isJsonArray() } ELSE { -> IF { -> list.put(jsonKeyEl.getKey(),convertJsonObjectToLinkedHashMap(jsonEl.getAsJsonObject(),bHtmlUnescape,size,),)@!(jsonEl.isJsonArray()) && jsonEl.isJsonObject() } ELSE { -> IF { -> IF { -> val=StringEscapeUtils.unescapeHtml(jsonEl.getAsString(),)@!(jsonEl.isJsonArray()) && !(jsonEl.isJsonObject()) && jsonEl.isJsonPrimitive() } ELSE { -> val=jsonEl.getAsString()@!(jsonEl.isJsonArray()) && !(jsonEl.isJsonObject()) && jsonEl.isJsonPrimitive() } -> IF { -> size.memory+=val.length()@ } -> list.put(jsonKeyEl.getKey(),val,)@ } } } }
results[https://github.com/IKANOW/Infinit.e/blob/e8d3c98b0eee44a0979bec9a0118986205683bac/core/infinit.e.data_model/src/com/ikanow/infinit/e/data_model/custom/InfiniteFileInputJsonParser.java][convertJsonObjectToBson][1] = -> list=new BasicDBObject(capacity(length,),)@ -> LOOP { -> jsonEl=jsonKeyEl.getValue()@ -> IF { -> list.put(jsonKeyEl.getKey(),handleJsonArray(jsonEl.getAsJsonArray(),bHtmlUnescape,),)@jsonEl.isJsonArray() } ELSE { -> IF { -> list.put(jsonKeyEl.getKey(),convertJsonObjectToBson(jsonEl.getAsJsonObject(),bHtmlUnescape,),)@!(jsonEl.isJsonArray()) && jsonEl.isJsonObject() } ELSE { -> IF { -> IF { -> list.put(jsonKeyEl.getKey(),StringEscapeUtils.unescapeHtml(jsonEl.getAsString(),),)@!(jsonEl.isJsonArray()) && jsonEl.isJsonPrimitive() && !(jsonEl.isJsonObject()) } ELSE { -> list.put(jsonKeyEl.getKey(),jsonEl.getAsString(),)@!(jsonEl.isJsonArray()) && jsonEl.isJsonPrimitive() && !(jsonEl.isJsonObject()) } } } } }
results[https://github.com/dlazerka/em/blob/042defee67dcf8f78b34d0990d2644921b093ff6/src/com/epam/memegen/MemeDao.java][create][1] = -> TRY {  -> TRY { -> topJE=jsonObject.get("top",)@ -> centerJE=jsonObject.get("center",)@ -> bottomJE=jsonObject.get("bottom",)@ -> blobKeyJE=jsonObject.get("blobKey",)@ -> IF { -> top=topJE.getAsString()@topJE!=null&&topJE.isJsonPrimitive() } -> IF { -> center=centerJE.getAsString()@centerJE!=null&&centerJE.isJsonPrimitive() } -> IF { -> bottom=bottomJE.getAsString()@bottomJE!=null&&bottomJE.isJsonPrimitive() } -> IF { -> blobKey=blobKeyJE.getAsString()@blobKeyJE!=null&&blobKeyJE.isJsonPrimitive() } } CATCH(JsonParseException) { -> throw new IllegalArgumentException(e,)@ } CATCH(ClassCastException) { -> throw new IllegalArgumentException(e,)@ } CATCH(IllegalStateException) { -> throw new IllegalArgumentException(e,)@ } CATCH(UnsupportedOperationException) { -> throw new IOException(e,)@ } -> IF { -> throw new IllegalArgumentException("No 'blobKey' param",)@blobKey==null } -> return create(blobKey,top,center,bottom,)@!(blobKey==null) } CATCH(IOException) {}
