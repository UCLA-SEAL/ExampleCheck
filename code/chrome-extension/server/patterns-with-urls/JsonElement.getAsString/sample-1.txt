results[https://github.com/asakusafw/asakusafw/blob/c925d9197fd0798df82cf8403db452e8b3baf079/testing-project/asakusa-test-data-provider/src/main/java/com/asakusafw/testdriver/json/JsonObjectDriver.java][stringProperty][2] = -> TRY {  -> prop=property(context,name,)@ -> builder.add(name,prop.getAsString(),)@!(prop==null) } CATCH(IOException) {}
results[https://github.com/Collabinate/Collabinate/blob/677e577b6942686e0f2c542886e2a1221e955796/collabinate-server/src/main/java/com/collabinate/server/activitystreams/ActivityStreamsObject.java][getStringValue][1] = -> IF { -> return null@null==key||null==container } -> element=container.get(key,)@!(null==key||null==container) -> IF { -> TRY { -> value=element.getAsString()@!(null==key||null==container) && null!=element } }
results[https://github.com/Collabinate/Collabinate/blob/677e577b6942686e0f2c542886e2a1221e955796/collabinate-server/src/main/java/com/collabinate/server/activitystreams/ActivityStreamsObject.java][getPublished][2] = -> element=jsonObject.get(PUBLISHED,)@ -> TRY { -> IF { -> publishedString=element.getAsString()@null!=element -> published=DateTime.parse(publishedString,ISODateTimeFormat.dateTimeParser().withZoneUTC(),)@ } }
results[https://github.com/TomTasche/netCrawler/blob/4fdf3a357ff782810104edad08e8018206fc1d5f/src/at/netcrawler/io/json/JsonTopologyInterfaceAdapter.java][deserialize][1] = -> TRY {  -> interfaceNameElement=object.get(INTERFACE_NAME_PROPERTY,)@ -> IF { -> return interfaze@interfaceNameElement==null } -> interfaceName=interfaceNameElement.getAsString()@!(interfaceNameElement==null) -> return topologyDevice.getInterfaceByName(interfaceName,)@!(interfaceNameElement==null) } CATCH(JsonParseException) {}
results[https://github.com/zhouxiaoxiaoxujian/gson/blob/506d43a0fba93d00a6cec5d09dca7ec3829880a0/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java][deserialize][6] = -> TRY {  -> jsonElement=jsonObj.get("data",)@ -> IF { -> return new DataHolder(null,)@jsonElement==null||jsonElement.isJsonNull() } -> return new DataHolder(jsonElement.getAsString(),)@!(jsonElement==null||jsonElement.isJsonNull()) } CATCH(JsonParseException) {}
results[https://github.com/asakusafw/asakusafw/blob/c925d9197fd0798df82cf8403db452e8b3baf079/testing-project/asakusa-test-data-provider/src/main/java/com/asakusafw/testdriver/json/JsonObjectDriver.java][datetimeProperty][6] = -> TRY {  -> prop=property(context,name,)@ -> string=prop.getAsString()@!(prop==null) -> matcher=DATETIME.matcher(string,)@!(prop==null) -> IF { -> throw new IOException(MessageFormat.format("invalid time property \"{0}\", must be \"{2}\" form, but was \"{1}\"",name,string,"yyyy-mm-dd hh:mm:ss",),)@matcher.matches()==false && !(prop==null) } } CATCH(IOException) {}
results[https://github.com/facebook/buck/blob/8d60bbb7523cdaeabba7e4a1434d74ad2b6087eb/src/com/facebook/buck/httpserver/TracesHelper.java][parseCommandFrom][1] = -> TRY { -> nameEl=json.get("name",)@ -> IF { -> return Optional.absent()@nameEl==null||!(nameEl.isJsonPrimitive()) } -> IF { -> return Optional.absent()@!(nameEl==null||!(nameEl.isJsonPrimitive())) && argsEl==null||!(argsEl.isJsonObject())||argsEl.getAsJsonObject().get("command_args",)==null||!(argsEl.getAsJsonObject().get("command_args",).isJsonPrimitive()) } -> name=nameEl.getAsString()@!(argsEl==null||!(argsEl.isJsonObject())||argsEl.getAsJsonObject().get("command_args",)==null||!(argsEl.getAsJsonObject().get("command_args",).isJsonPrimitive())) && !(nameEl==null||!(nameEl.isJsonPrimitive())) } CATCH(IOException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/rinde/RinSim/blob/42a7e76cc71a7de91356b54b1e318be52f76e5ca/core/src/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java][read][2] = -> TRY {  -> labelJsonElement=jsonElement.getAsJsonObject().remove(typeFieldName,)@ -> IF { -> throw new JsonParseException("cannot deserialize "+baseType+" because it does not define a field named "+typeFieldName,)@labelJsonElement==null } -> label=labelJsonElement.getAsString()@!(labelJsonElement==null) -> delegate=(TypeAdapter<T>) labelToDelegate.get(label,)@!(labelJsonElement==null) -> IF { -> throw new JsonParseException("cannot deserialize "+baseType+" subtype named "+label+"; did you forget to register a subtype?",)@!(labelJsonElement==null) && delegate==null } } CATCH(IOException) {}
results[https://github.com/ybonnel/gson/blob/ba5cd8bf3bce0c5c6a1f885f7ea4fb6a4cfd45f8/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapter.java][deserialize][1] = -> TRY {  -> labelJsonElement=json.getAsJsonObject().remove(typeFieldName,)@ -> IF { -> throw new JsonParseException("cannot deserialize "+typeOfT+" because it does not define a field named "+typeFieldName,)@labelJsonElement==null } -> label=labelJsonElement.getAsString()@!(labelJsonElement==null) -> subtype=labelToSubtype.get(label,)@!(labelJsonElement==null) -> IF { -> throw new JsonParseException("cannot deserialize "+baseType+" subtype named "+label+"; did you forget to register a subtype?",)@!(labelJsonElement==null) && subtype==null } } CATCH(JsonParseException) {}
results[https://github.com/Ecwid/ecwid-mailchimp/blob/d180eb2477e21fd55fcf434fd5036e28a1c06649/src/main/java/com/ecwid/mailchimp/MailChimpClient.java][execute][1] = -> TRY {  -> IF { -> error=result.getAsJsonObject().get("error",)@result.isJsonObject() -> IF { -> code=result.getAsJsonObject().get("code",)@result.isJsonObject() && !(error!=null) -> throw new MailChimpException(code.getAsInt(),error.getAsString(),)@result.isJsonObject() && error!=null } } } CATCH(IOException,MailChimpException) {}
results[https://github.com/ezterry/TTRSS_android_ezterry/blob/807add7244a98101276ff5b415c699f2ea3c677f/src/org/fox/ttrss/FeedsFragment.java][onPostExecute][2] = -> IF { -> TRY { -> iconsUrl=result.getAsJsonObject().get("icons_dir",)@result!=null -> IF { -> iconsStr=iconsUrl.getAsString()@iconsUrl!=null -> IF { -> baseUrl=m_prefs.getString("ttrss_url","",)+"/"+iconsStr@!(iconsStr.contains("://",)) } } } CATCH(Exception) { -> Log.d(TAG,"Error receiving icons configuration",)@ -> e.printStackTrace()@ } }
results[https://github.com/apache/incubator-tajo/blob/bc6359b834ebf67d212efc4fb785c186dc4d2a27/tajo-common/src/main/java/org/apache/tajo/gson/DataTypeAdapter.java][deserialize][2] = -> TRY {  -> builder=DataType.newBuilder()@ -> builder.setType(type,)@ -> IF { -> builder.setLength(len.getAsInt(),)@len!=null } -> code=obj.get("code",)@ -> IF { -> builder.setCode(code.getAsString(),)@code!=null } -> return builder.build()@ } CATCH(JsonParseException) {}
results[https://github.com/IISI/cdic/blob/77d44bd9910d1d7feeff23f010f821999a09ae68/client/Aquarius/src/platform/aquarius/tree/TreeView.java][doubleClick][1] = -> url=jo.getAsJsonObject().get("url",)@ -> IF { -> IF { -> TRY { -> part=page.openEditor(editorInput,BrowserEditorPart.ID,)@page!=null -> IF { -> (BrowserEditorPart) part.browser.forceFocus()@part instanceof BrowserEditorPart -> (BrowserEditorPart) part.browser.setUrl(url.getAsString(),)@part instanceof BrowserEditorPart && url!=null } } CATCH(PartInitException) { -> e.printStackTrace()@ } } }
results[https://github.com/gothfox/Tiny-Tiny-RSS-for-Honeycomb/blob/f0a29f9bcba46c09a750f19b715a730fcc74eb02/src/org/fox/ttrss/FeedsFragment.java][onPostExecute][1] = -> IF { -> TRY { -> iconsUrl=result.getAsJsonObject().get("icons_dir",)@result!=null -> IF { -> iconsStr=iconsUrl.getAsString()@iconsUrl!=null -> IF { -> baseUrl=m_prefs.getString("ttrss_url","",).trim()+"/"+iconsStr@!(iconsStr.contains("://",)) } } } CATCH(Exception) { -> Log.d(TAG,"Error receiving icons configuration",)@ -> e.printStackTrace()@ } }
results[https://github.com/proofpoint/kairosdb/blob/7bade49a287884f59210dd33b0ad6218aff9ba79/src/main/java/org/kairosdb/core/http/rest/json/GsonParser.java][parseAggregators][1] = -> TRY {  -> LOOP { -> name=jsAggregator.get("name",)@!(J<aggregators.size()) -> IF { -> throw new BeanValidationException(new SimpleConstraintViolation("aggregators["+J+"]","must have a name",),context,)@name==null||name.getAsString().isEmpty() && J<aggregators.size() } -> aggName=name.getAsString()@!(name==null||name.getAsString().isEmpty()) && !(J<aggregators.size()) -> aggregator=m_aggregatorFactory.createAggregator(aggName,)@!(name==null||name.getAsString().isEmpty()) && !(J<aggregators.size()) -> IF { -> throw new BeanValidationException(new SimpleConstraintViolation(aggName,"invalid aggregator name",),aggContext,)@aggregator==null && !(name==null||name.getAsString().isEmpty()) && J<aggregators.size() } -> deserializeProperties(context+".aggregator["+J+"]",jsAggregator,aggName,aggregator,)@!(name==null||name.getAsString().isEmpty()) && !(aggregator==null) && J<aggregators.size() } } CATCH(QueryException,BeanValidationException) {}
results[https://github.com/andfRa/Saga/blob/eb16ba3e73bb5fa162a1ebf726134bae0f9c25e3/src/org/saga/utility/CustomDeserializer.java][deserialize][1] = -> TRY {  -> IF { -> throw new JsonParseException("ProfessionDeserializer JsonElement is not JsonObject!",)@!(je.isJsonObject()) } -> classElement=jo.get("_className",)@!(!(je.isJsonObject())) -> IF { -> return gson.fromJson(je,type,)@!(!(je.isJsonObject())) && classElement==null } -> className=classElement.getAsString()@!(!(je.isJsonObject())) && !(classElement==null) -> TRY { -> newType=Class.forName(className,)@!(!(je.isJsonObject())) && !(classElement==null) } CATCH(ClassNotFoundException) { -> throw new JsonParseException("Class "+className+" not found!",)@!(!(je.isJsonObject())) && !(classElement==null) } } CATCH(JsonParseException) {}
results[https://github.com/proofpoint/kairosdb/blob/7bade49a287884f59210dd33b0ad6218aff9ba79/src/main/java/org/kairosdb/core/http/rest/json/GsonParser.java][parseGroupBy][1] = -> TRY {  -> LOOP { -> nameElement=jsGroupBy.get("name",)@!(J<groupBys.size()) -> IF { -> throw new BeanValidationException(new SimpleConstraintViolation(groupContext,"must have a name",),context,)@J<groupBys.size() && nameElement==null||nameElement.getAsString().isEmpty() } -> name=nameElement.getAsString()@!(nameElement==null||nameElement.getAsString().isEmpty()) && !(J<groupBys.size()) -> groupBy=m_groupByFactory.createGroupBy(name,)@!(nameElement==null||nameElement.getAsString().isEmpty()) && !(J<groupBys.size()) -> IF { -> throw new BeanValidationException(new SimpleConstraintViolation(groupContext+"."+name,"invalid group_by name",),context,)@!(nameElement==null||nameElement.getAsString().isEmpty()) && J<groupBys.size() && groupBy==null } -> deserializeProperties(context+"."+groupContext,jsGroupBy,name,groupBy,)@!(nameElement==null||nameElement.getAsString().isEmpty()) && !(J<groupBys.size()) && !(groupBy==null) } } CATCH(QueryException,BeanValidationException) {}
results[https://github.com/andfRa/Saga/blob/b7546f60771068efc9ada9fc695a5cdb22328a85/src/org/saga/saveload/SagaCustomSerializer.java][deserialize][1] = -> TRY {  -> IF { -> throw new JsonParseException("JsonElement is not JsonObject",)@!(je.isJsonObject()) } -> classElement=jo.get("_className",)@!(!(je.isJsonObject())) -> IF { -> throw new JsonParseException("missing _className field",)@!(!(je.isJsonObject())) && classElement==null } -> className=classElement.getAsString()@!(!(je.isJsonObject())) && !(classElement==null) -> TRY { -> type=Class.forName(className,)@!(!(je.isJsonObject())) && !(classElement==null) } CATCH(ClassNotFoundException) { -> throw new JsonParseException("class "+className+" not found",)@!(!(je.isJsonObject())) && !(classElement==null) } } CATCH(JsonParseException) {}
results[https://github.com/impetus-opensource/Kundera/blob/123a84661596222974eeaa79b30de0d44491277a/src/kundera-couchdb/src/main/java/com/impetus/client/couchdb/CouchDBClient.java][getColumnsById][1] = -> foreignKeys=new ArrayList<E>()@ -> TRY { -> LOOP { -> value=element.getAsJsonObject().get("value",).getAsJsonObject().get(inverseJoinColumnName,)@ -> IF { -> foreignKeys.add((E) PropertyAccessorHelper.fromSourceToTargetClass(columnJavaType,String.class,value.getAsString(),),)@value!=null } } } CATCH(Exception) { -> log.error("Error while fetching column by id {}, Caused by {}.",pKeyColumnValue,e,)@ -> throw new KunderaException(e,)@ } FINALLY { -> closeContent(response,)@ }
results[https://github.com/DesignAndDeploy/dnd/blob/97ec4cd3f18e653828d12ac1ba3db4d6a2d743a1/DND/src/edu/teco/dnd/util/InetSocketAddressAdapter.java][deserialize][1] = -> TRY {  -> IF { -> throw new JsonParseException("not a JSON object",)@!(json.isJsonObject()) } -> address=obj.get("address",)@!(!(json.isJsonObject())) -> port=obj.get("port",)@!(!(json.isJsonObject())) -> IF { -> throw new JsonParseException("address/port missing",)@!(!(json.isJsonObject())) && address==null||port==null } -> IF { -> throw new JsonParseException("address is not a string",)@!(!(json.isJsonObject())) && !(address.isJsonPrimitive())||!((JsonPrimitive) address.isString()) && !(address==null||port==null) } -> IF { -> throw new JsonParseException("port is not a number",)@!(!(json.isJsonObject())) && !(port.isJsonPrimitive())||!((JsonPrimitive) port.isNumber()) && !(address==null||port==null) && !(!(address.isJsonPrimitive())||!((JsonPrimitive) address.isString())) } -> isa=new InetSocketAddress(address.getAsString(),port.getAsInt(),)@!(!(json.isJsonObject())) && !(address==null||port==null) && !(!(address.isJsonPrimitive())||!((JsonPrimitive) address.isString())) && !(!(port.isJsonPrimitive())||!((JsonPrimitive) port.isNumber())) -> LOGGER.exit(isa,)@!(!(json.isJsonObject())) && !(address==null||port==null) && !(!(address.isJsonPrimitive())||!((JsonPrimitive) address.isString())) && !(!(port.isJsonPrimitive())||!((JsonPrimitive) port.isNumber())) } CATCH(JsonParseException) {}
results[https://github.com/brooklyncentral/brooklyn/blob/a74b09c2a3079d009c735d8a197630451c423fbd/software/base/src/main/java/brooklyn/entity/chef/ChefAttributeFeed.java][onSuccess][1] = -> LOOP { -> sensor=attribute.getValue()@ -> log.trace("Finding value for attribute sensor "+sensor.getName(),)@ -> LOOP { -> TRY { -> elementForSensor=getElementByPath(jsonElement.getAsJsonObject(),prefixedPath,)@ } CATCH(IllegalArgumentException) { -> log.error("Entity {}: bad Chef attribute {} for sensor {}: {}", new Object[],)@ -> throw Throwables.propagate(e,)@ } } -> IF { -> entity.setAttribute(sensor,TypeCoercions.coerce(elementForSensor.getAsString(),sensor.getType(),),)@elementForSensor!=null } ELSE { -> entity.setAttribute(sensor,null,)@ } }
results[https://github.com/impetus-opensource/Kundera/blob/123a84661596222974eeaa79b30de0d44491277a/src/kundera-couchdb/src/main/java/com/impetus/client/couchdb/CouchDBClient.java][findIdsByColumn][1] = -> foreignKeys=new ArrayList()@ -> m=KunderaMetadataManager.getEntityMetadata(kunderaMetadata,entityClazz,)@ -> TRY { -> IF { -> return foreignKeys.toArray()@ } -> LOOP { -> value=element.getAsJsonObject().get("value",).getAsJsonObject().get(pKeyName,)@ -> IF { -> foreignKeys.add(PropertyAccessorHelper.fromSourceToTargetClass(m.getIdAttribute().getBindableJavaType(),String.class,value.getAsString(),),)@value!=null } } } CATCH(Exception) { -> log.error("Error while fetching ids for column where column name is"+columnName+" and column value is {} , Caused by {}.",columnValue,e,)@ -> throw new KunderaException(e,)@ } FINALLY { -> closeContent(response,)@ } -> return foreignKeys.toArray()@
results[https://github.com/0xdata/h2o/blob/990bfbba5fdb316db3381f50746130416480a874/src/main/java/water/persist/PersistHdfs.java][addFolder][1] = -> TRY { -> IF { -> return @fs==null } -> LOOP { } ELSE { -> IF { -> IF { -> throw new RuntimeException("Missing version",)@!(fs==null) && v==null && pfs.getName().endsWith(Extensions.JSON,) && fs.listStatus(p,) } -> type=json.get(Constants.TYPE,)@!(fs==null) && !(fs.listStatus(p,)) && !(v==null) && !(pfs.getName().endsWith(Extensions.JSON,)) -> IF { -> throw new RuntimeException("Missing type",)@!(fs==null) && type==null && !(v==null) && pfs.getName().endsWith(Extensions.JSON,) && fs.listStatus(p,) } -> c=Class.forName(type.getAsString(),)@!(fs==null) && !(fs.listStatus(p,)) && !(v==null) && !(pfs.getName().endsWith(Extensions.JSON,)) && !(type==null) -> model=(OldModel) c.newInstance()@!(fs==null) && !(fs.listStatus(p,)) && !(v==null) && !(pfs.getName().endsWith(Extensions.JSON,)) && !(type==null) } } } CATCH(Exception) { -> Log.err(e,)@ -> o=new JsonObject()@ -> o.addProperty(Constants.FILE,p.toString(),)@ -> o.addProperty(Constants.ERROR,e.getMessage(),)@ -> failed.add(o,)@ }
results[https://github.com/IKANOW/Infinit.e/blob/a33540980ff8d3065c33e0ebf85b7582dfc365b2/core/infinit.e.harvest.library/src/com/ikanow/infinit/e/harvest/extraction/document/file/JsonToMetadataParser.java][getKey][2] = -> TRY { -> metaObj=meta.getAsJsonObject()@ -> LOOP { -> meta=metaObj.get(comp,)@ -> IF { -> return null@null==meta } ELSE { -> IF { -> metaObj=meta.getAsJsonObject()@!(null==meta) && meta.isJsonObject() } ELSE { -> IF { -> return meta.getAsString()@!(null==meta) && meta.isJsonPrimitive() && !(meta.isJsonObject()) } ELSE { -> IF { -> return null@!(meta.isJsonPrimitive()) && !(null==meta) && !(meta.isJsonObject()) } ELSE { -> array=meta.getAsJsonArray()@!(meta.isJsonPrimitive()) && !(null==meta) && !(meta.isJsonObject()) -> meta=array.get(0,)@!(meta.isJsonPrimitive()) && !(null==meta) && !(meta.isJsonObject()) -> IF { -> metaObj=meta.getAsJsonObject()@!(meta.isJsonPrimitive()) && !(null==meta) && meta.isJsonObject() && !(meta.isJsonObject()) } } } } } } -> IF { -> IF { -> return "[Object]"@null!=metaObj } } }
results[https://github.com/bbytes/DAAS/blob/13998eac1a8ade34975b52de73fad9e6a660ef23/daas-client/src/main/java/com/bbytes/daas/client/SerializerUtil.java][deserialize][1] = -> TRY {  -> IF { -> TRY { -> date=new Date(json.getAsLong(),)@json!=null } CATCH(NumberFormatException) { -> dateFormat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss",)@!(json!=null) -> TRY { -> date=dateFormat.parse(json.getAsString(),)@json!=null } CATCH(ParseException) { -> throw new JsonParseException(exp,)@json!=null } } } } CATCH(JsonParseException) {}
results[https://github.com/samuelclay/NewsBlur/blob/ebb505e3f2caea4db2218f6f1a6a817b786021e6/clients/android/NewsBlur/src/com/newsblur/serialization/DateStringTypeAdapter.java][deserialize][2] = -> TRY {  -> TRY { -> IF { -> return new Date()@element==null||TextUtils.isEmpty(element.getAsString(),) } ELSE { -> dateString=element.getAsString()@!(element==null||TextUtils.isEmpty(element.getAsString(),)) -> IF { -> dateString=dateString.substring(0,19,)@element==null||TextUtils.isEmpty(element.getAsString(),) && dateString.length()>19 } -> return df.parse(dateString,)@!(element==null||TextUtils.isEmpty(element.getAsString(),)) } } CATCH(ParseException) { -> Log.e("DateTypeAdapter",e.getLocalizedMessage(),)@ -> return new Date()@ } } CATCH(JsonParseException) {}
results[https://github.com/dgowpers/glowing-meme/blob/1f33642d68cb2b7c1a7ead8d463795d8c5df0f3b/stuffsystem/web/src/main/java/com/stuffsystem/rest/MongoInventoryDAL.java][convertIdToObjectId][1] = -> IF { -> IF { -> TRY { -> idStr=idElement.getAsString()@null!=idElement && idElement.isJsonPrimitive() } } -> IF { -> TRY { -> idElementObj=idElement.getAsJsonObject()@null!=idElement } -> IF { -> idObj=idElementObj.get("$oid",)@null!=idElementObj -> IF { -> TRY { -> idStr=idObj.getAsString()@null!=idObj && null==idStr } } } } -> IF { -> oid=new ObjectId(idStr,)@null!=idStr } }
results[https://github.com/DesignAndDeploy/dnd/blob/550e2538b0811521bd3702f5e3e45a713379a206/DND/src/edu/teco/dnd/module/messages/infoReq/BlockIDAdapter.java][deserialize][1] = -> TRY {  -> IF { -> throw new JsonParseException("not a JSON object",)@!(json.isJsonObject()) } -> blockUUID=obj.get("blockUUID",)@!(!(json.isJsonObject())) -> appUUID=obj.get("appID",)@!(!(json.isJsonObject())) -> IF { -> throw new JsonParseException("blockUUID/appID missing",)@!(!(json.isJsonObject())) && blockUUID==null||appUUID==null } -> IF { -> throw new JsonParseException("blockUUID is not a string",)@!(!(json.isJsonObject())) && !(blockUUID.isJsonPrimitive())||!((JsonPrimitive) blockUUID.isString()) && !(blockUUID==null||appUUID==null) } -> IF { -> throw new JsonParseException("appID is not a string",)@!(!(json.isJsonObject())) && !(!(blockUUID.isJsonPrimitive())||!((JsonPrimitive) blockUUID.isString())) && !(appUUID.isJsonPrimitive())||!((JsonPrimitive) appUUID.isString()) && !(blockUUID==null||appUUID==null) } -> applicationBlockID=new ApplicationBlockID(UUID.fromString(blockUUID.getAsString(),),UUID.fromString(appUUID.getAsString(),),)@!(!(json.isJsonObject())) && !(!(blockUUID.isJsonPrimitive())||!((JsonPrimitive) blockUUID.isString())) && !(!(appUUID.isJsonPrimitive())||!((JsonPrimitive) appUUID.isString())) && !(blockUUID==null||appUUID==null) -> LOGGER.exit(applicationBlockID,)@!(!(json.isJsonObject())) && !(!(blockUUID.isJsonPrimitive())||!((JsonPrimitive) blockUUID.isString())) && !(!(appUUID.isJsonPrimitive())||!((JsonPrimitive) appUUID.isString())) && !(blockUUID==null||appUUID==null) } CATCH(JsonParseException) {}
results[https://github.com/animoto/animoto_api_client_java/blob/9414491251c0cead920e4d4066aabe507d09b57d/src/main/java/com/animoto/api/gson/deserializer/PostrollDeserializer.java][deserialize][1] = -> TRY {  -> IF { -> throw new JsonParseException("Postroll value is not expected type (Object)",)@!(json.isJsonObject()) } -> jsonTemplate=jsonPostroll.get("template",)@!(!(json.isJsonObject())) -> IF { -> throw new JsonParseException("Postroll value \"template\" is not expected type (String)",)@!(!(json.isJsonObject())) && jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString()) } -> template=jsonTemplate.getAsString()@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) -> IF { -> postroll=new CustomFootagePostroll()@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && template.equals("custom_footage",) -> jsonSourceUrl=jsonPostroll.get("source_url",)@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && template.equals("custom_footage",) -> IF { -> throw new JsonParseException("Postroll value \"source_url\" is not expected type (String)",)@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && jsonSourceUrl==null||!(jsonSourceUrl.isJsonPrimitive()&&jsonSourceUrl.getAsJsonPrimitive().isString()) && template.equals("custom_footage",) } -> postroll.setSourceUrl(jsonSourceUrl.getAsString(),)@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && !(jsonSourceUrl==null||!(jsonSourceUrl.isJsonPrimitive()&&jsonSourceUrl.getAsJsonPrimitive().isString())) && template.equals("custom_footage",) -> return postroll@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && !(jsonSourceUrl==null||!(jsonSourceUrl.isJsonPrimitive()&&jsonSourceUrl.getAsJsonPrimitive().isString())) && template.equals("custom_footage",) } ELSE { -> postroll=new BasicPostroll()@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && template.equals("custom_footage",) -> postroll.setTemplate(template,)@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && !(template.equals("custom_footage",)) -> return postroll@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && !(template.equals("custom_footage",)) } } CATCH(JsonParseException) {}
results[https://github.com/DesignAndDeploy/dnd/blob/38b685ab1194df7428d790c7046877f9de57d6bf/DND/src/edu/teco/dnd/module/messages/infoReq/ApplicationBlockIDAdapter.java][deserialize][1] = -> TRY {  -> IF { -> throw new JsonParseException("not a JSON object",)@!(json.isJsonObject()) } -> blockID=obj.get("blockID",)@!(!(json.isJsonObject())) -> applicationID=obj.get("applicationID",)@!(!(json.isJsonObject())) -> IF { -> throw new JsonParseException("blockID/applicationID missing",)@!(!(json.isJsonObject())) && blockID==null||applicationID==null } -> IF { -> throw new JsonParseException("blockID is not a string",)@!(!(json.isJsonObject())) && !(blockID==null||applicationID==null) && !(blockID.isJsonPrimitive())||!((JsonPrimitive) blockID.isString()) } -> IF { -> throw new JsonParseException("applicationID is not a string",)@!(!(blockID.isJsonPrimitive())||!((JsonPrimitive) blockID.isString())) && !(applicationID.isJsonPrimitive())||!((JsonPrimitive) applicationID.isString()) && !(!(json.isJsonObject())) && !(blockID==null||applicationID==null) } -> applicationBlockID=new ApplicationBlockID(new FunctionBlockID(UUID.fromString(blockID.getAsString(),),),new ApplicationID(UUID.fromString(applicationID.getAsString(),),),)@!(!(blockID.isJsonPrimitive())||!((JsonPrimitive) blockID.isString())) && !(!(json.isJsonObject())) && !(blockID==null||applicationID==null) && !(!(applicationID.isJsonPrimitive())||!((JsonPrimitive) applicationID.isString())) -> LOGGER.exit(applicationBlockID,)@!(!(blockID.isJsonPrimitive())||!((JsonPrimitive) blockID.isString())) && !(!(json.isJsonObject())) && !(blockID==null||applicationID==null) && !(!(applicationID.isJsonPrimitive())||!((JsonPrimitive) applicationID.isString())) } CATCH(JsonParseException) {}
results[https://github.com/commoncrawl/commoncrawl-crawler/blob/e49379fa0757caac902d182b85efe32fcbac03a9/src/org/commoncrawl/mapred/ec2/postprocess/crawldb/LinkGraphDataEmitter.java][emitLinksFromHTMLContent][2] = -> TRY {  -> TRY { -> IF { -> return @contentObject==null } ELSE { } ELSE { -> LOOP { -> href=linkObject.get("href",)@!(contentObject==null) -> IF { -> fp=URLUtils.getURLFPV2FromURL(href.getAsString(),)@!(contentObject==null) && href!=null } ELSE { -> IF { -> key=CrawlDBKey.generateLinkKey(fp,CrawlDBKey.Type.KEY_TYPE_HTML_LINK,md5Hash,)@!(contentObject==null) && !(hashSet.contains(fp.getUrlHash(),)) && !(fp==null) -> hashSet.add(fp.getUrlHash(),)@!(contentObject==null) && !(hashSet.contains(fp.getUrlHash(),)) && !(fp==null) } } } } } CATCH(Exception) { -> LOG.error(CCStringUtils.stringifyException(e,),)@ -> reporter.incrCounter(Counters.FAILED_TO_GET_LINKS_FROM_HTML,1,)@ } } CATCH(IOException) {}
results[https://github.com/OurGrid/commune/blob/000702b5f1f327e493748654df7436718e9f0c0e/src/main/java/br/edu/ufcg/lsd/commune/message/JsonMessageUtil.java][parse][1] = -> TRY {  -> msgStr=new String(bytes,ENCODING,)@ -> msg=new Message(source,destination,functionName,null,procType,)@ -> extractParameters(msgJson,msg,)@ -> IF { -> msg.setSession(sessionJson.getAsLong(),)@sessionJson!=null } -> msg.setSequence(msgJson.get("seq",).getAsLong(),)@ -> senderPKJson=msgJson.get("senderPK",)@ -> IF { -> msg.getSource().getContainerID().setPublicKey(senderPKJson.getAsString(),)@senderPKJson!=null } -> senderCertJson=msgJson.get("senderCert",)@ -> IF { -> msg.setSenderCertificatePath((X509CertPath) deserialize(senderCertJson.getAsString(),),)@senderCertJson!=null } -> signJson=msgJson.get("signature",)@ -> IF { -> msg.setSignature(signJson.getAsString().getBytes(ENCODING,),)@signJson!=null } } CATCH(IOException,ClassNotFoundException) {}
results[https://github.com/dlazerka/em/blob/042defee67dcf8f78b34d0990d2644921b093ff6/src/com/epam/memegen/MemeDao.java][create][1] = -> TRY {  -> TRY { -> topJE=jsonObject.get("top",)@ -> centerJE=jsonObject.get("center",)@ -> bottomJE=jsonObject.get("bottom",)@ -> blobKeyJE=jsonObject.get("blobKey",)@ -> IF { -> top=topJE.getAsString()@topJE!=null&&topJE.isJsonPrimitive() } -> IF { -> center=centerJE.getAsString()@centerJE!=null&&centerJE.isJsonPrimitive() } -> IF { -> bottom=bottomJE.getAsString()@bottomJE!=null&&bottomJE.isJsonPrimitive() } -> IF { -> blobKey=blobKeyJE.getAsString()@blobKeyJE!=null&&blobKeyJE.isJsonPrimitive() } } CATCH(JsonParseException) { -> throw new IllegalArgumentException(e,)@ } CATCH(ClassCastException) { -> throw new IllegalArgumentException(e,)@ } CATCH(IllegalStateException) { -> throw new IllegalArgumentException(e,)@ } CATCH(UnsupportedOperationException) { -> throw new IOException(e,)@ } -> IF { -> throw new IllegalArgumentException("No 'blobKey' param",)@blobKey==null } -> return create(blobKey,top,center,bottom,)@!(blobKey==null) } CATCH(IOException) {}
results[https://github.com/JackDanger/google-wave-samples/blob/dde0bd9dd4a9ba86e4950eca5831df6c446f1138/extensions/robots/java/buggy/src/com/google/wave/api/event/EventSerializer.java][deserialize][2] = -> TRY {  -> IF { -> throw new EventSerializationException("Trying to deserialize event JSON with unknown "+"type: "+json,json,)@type==EventType.UNKNOWN } -> TRY { -> event=ctor.newInstance()@!(type==EventType.UNKNOWN) -> setField(event,rootClass.getDeclaredField(WAVELET,),wavelet,)@!(type==EventType.UNKNOWN) -> setField(event,rootClass.getDeclaredField(MODIFIED_BY,),modifiedBy,)@!(type==EventType.UNKNOWN) -> setField(event,rootClass.getDeclaredField(TIMESTAMP,),timestamp,)@!(type==EventType.UNKNOWN) -> setField(event,rootClass.getDeclaredField(TYPE,),type,)@!(type==EventType.UNKNOWN) -> setField(event,rootClass.getDeclaredField(BUNDLE,),bundle,)@!(type==EventType.UNKNOWN) -> blipId=properties.get(BLIP_ID,)@!(type==EventType.UNKNOWN) -> IF { -> setField(event,rootClass.getDeclaredField(BLIP_ID,),blipId.getAsString(),)@!(type==EventType.UNKNOWN) && blipId!=null&&!(blipId instanceof JsonNull) } -> LOOP { -> IF { -> setField(event,field,context.deserialize(properties.get(fieldName,),field.getGenericType(),),)@!(type==EventType.UNKNOWN) && properties.has(fieldName,) } } } CATCH(NoSuchMethodException) { -> throw new EventSerializationException("Unable to deserialize event JSON: "+json,json,)@!(type==EventType.UNKNOWN) } CATCH(NoSuchFieldException) { -> throw new EventSerializationException("Unable to deserialize event JSON: "+json,json,)@!(type==EventType.UNKNOWN) } CATCH(InstantiationException) { -> throw new EventSerializationException("Unable to deserialize event JSON: "+json,json,)@!(type==EventType.UNKNOWN) } CATCH(IllegalAccessException) { -> throw new EventSerializationException("Unable to deserialize event JSON: "+json,json,)@!(type==EventType.UNKNOWN) } CATCH(InvocationTargetException) { -> throw new EventSerializationException("Unable to deserialize event JSON: "+json,json,)@!(type==EventType.UNKNOWN) } CATCH(JsonParseException) { -> throw new EventSerializationException("Unable to deserialize event JSON: "+json,json,)@!(type==EventType.UNKNOWN) } } CATCH(EventSerializationException) {}
results[https://github.com/proofpoint/kairosdb/blob/7bade49a287884f59210dd33b0ad6218aff9ba79/src/main/java/org/kairosdb/core/http/rest/json/GsonParser.java][parseQueryMetric][1] = -> TRY {  -> IF { -> throw new BeanValidationException(new SimpleConstraintViolation("metric[]","must have a size of at least 1",),"query",)@metricsArray==null } -> LOOP { -> TRY { -> validateObject(metric,context,)@!(metricsArray==null) && !(I<metricsArray.size()) -> queryMetric=new QueryMetric(startTime,query.getCacheTime(),metric.getName(),)@!(metricsArray==null) && !(I<metricsArray.size()) -> queryMetric.setExcludeTags(metric.isExcludeTags(),)@!(metricsArray==null) && !(I<metricsArray.size()) -> queryMetric.setLimit(metric.getLimit(),)@!(metricsArray==null) && !(I<metricsArray.size()) -> IF { -> queryMetric.setEndTime(endTime,)@!(metricsArray==null) && !(I<metricsArray.size()) && endTime>-1 } -> IF { -> throw new BeanValidationException(new SimpleConstraintViolation("end_time","must be greater than the start time",),context,)@!(metricsArray==null) && queryMetric.getEndTime()<startTime && I<metricsArray.size() } -> queryMetric.setCacheString(sb.toString(),)@!(queryMetric.getEndTime()<startTime) && !(metricsArray==null) && !(I<metricsArray.size()) -> IF { -> IF { -> throw new BeanValidationException(new SimpleConstraintViolation("aggregators[]","must have a size of at least 1",),context,)@!(queryMetric.getEndTime()<startTime) && !(metricsArray==null) && asJsonArray.size()<1 && aggregators!=null && I<metricsArray.size() } -> parseAggregators(context,queryMetric,asJsonArray,)@!(queryMetric.getEndTime()<startTime) && !(metricsArray==null) && !(asJsonArray.size()<1) && !(I<metricsArray.size()) && !(aggregators!=null) } -> IF { -> parseGroupBy(context,queryMetric,groupBys,)@!(queryMetric.getEndTime()<startTime) && !(metricsArray==null) && !(I<metricsArray.size()) && !(aggregators!=null) } -> order=jsMetric.get("order",)@!(queryMetric.getEndTime()<startTime) && !(metricsArray==null) && !(I<metricsArray.size()) && !(aggregators!=null) -> IF { -> queryMetric.setOrder(Order.fromString(order.getAsString(),context,),)@!(queryMetric.getEndTime()<startTime) && !(metricsArray==null) && order!=null && !(I<metricsArray.size()) && !(aggregators!=null) } -> queryMetric.setTags(metric.getTags(),)@!(queryMetric.getEndTime()<startTime) && !(metricsArray==null) && !(I<metricsArray.size()) && !(aggregators!=null) -> ret.add(queryMetric,)@!(queryMetric.getEndTime()<startTime) && !(metricsArray==null) && !(I<metricsArray.size()) && !(aggregators!=null) } CATCH(ContextualJsonSyntaxException) { -> throw new BeanValidationException(new SimpleConstraintViolation(e.getContext(),e.getMessage(),),context,)@!(metricsArray==null) && I<metricsArray.size() } } } CATCH(QueryException,BeanValidationException) {}
results[https://github.com/impetus-opensource/Kundera/blob/123a84661596222974eeaa79b30de0d44491277a/src/kundera-couchdb/src/main/java/com/impetus/client/couchdb/CouchDBObjectMapper.java][getEntityFromJson][1] = -> TRY { -> entity=entityClass.newInstance()@ -> rowKey=jsonObj.get((AbstractAttribute) m.getIdAttribute().getJPAColumnName(),)@ -> IF { -> return null@rowKey==null } -> metaModel=(MetamodelImpl) kunderaMetadata.getApplicationMetadata().getMetamodel(m.getPersistenceUnit(),)@!(rowKey==null) -> idClass=m.getIdAttribute().getJavaType()@!(rowKey==null) -> IF { -> javaType=m.getIdAttribute().getBindableJavaType()@!(rowKey==null) && metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType(),) -> PropertyAccessorHelper.setId(entity,m,getObjectFromJson(rowKey.getAsJsonObject(),javaType,metaModel.embeddable(javaType,).getAttributes(),),)@!(rowKey==null) && metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType(),) } ELSE { -> PropertyAccessorHelper.setId(entity,m,PropertyAccessorHelper.fromSourceToTargetClass(idClass,String.class,rowKey.getAsString(),),)@!(metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType(),)) && !(rowKey==null) } -> LOOP { -> IF { -> IF { -> onViaEmbeddable(entityType,column,m,entity,metaModel.embeddable(javaType,),jsonObj,)@metaModel.isEmbeddable(javaType,) && !(column.equals(m.getIdAttribute(),))&&!((AbstractAttribute) column.getJPAColumnName().equals(discriminatorColumn,))&&value!=null&&!(value.equals(JsonNull.INSTANCE,)) && !(rowKey==null) } ELSE { -> IF { -> setFieldValue(entity,column,value,)@!(column.equals(m.getIdAttribute(),))&&!((AbstractAttribute) column.getJPAColumnName().equals(discriminatorColumn,))&&value!=null&&!(value.equals(JsonNull.INSTANCE,)) && !(rowKey==null) } ELSE { -> IF { -> IF { -> colValue=jsonObj.get((AbstractAttribute) column.getJPAColumnName(),)@!(rowKey==null) -> IF { -> colFieldName=m.getFieldName(fieldName,)@!(column.equals(m.getIdAttribute(),))&&!((AbstractAttribute) column.getJPAColumnName().equals(discriminatorColumn,))&&value!=null&&!(value.equals(JsonNull.INSTANCE,)) && !(rowKey==null) && relations.contains(fieldName,)&&!(fieldName.equals((AbstractAttribute) m.getIdAttribute().getJPAColumnName(),)) -> relationMetadata=KunderaMetadataManager.getEntityMetadata(kunderaMetadata,attribute.getJavaType(),)@!(rowKey==null) -> colVal=PropertyAccessorHelper.fromSourceToTargetClass(relationMetadata.getIdAttribute().getJavaType(),String.class,colValue.getAsString(),)@colValue!=null && !(rowKey==null) -> relationValue.put(fieldName,colVal,)@!(rowKey==null) && relations.contains(fieldName,)&&!(fieldName.equals((AbstractAttribute) m.getIdAttribute().getJPAColumnName(),)) } } } } } } } -> IF { -> e=new EnhanceEntity(entity,PropertyAccessorHelper.getId(entity,m,),relationValue,)@relationValue!=null&&!(relationValue.isEmpty()) && !(rowKey==null) -> return e@relationValue!=null&&!(relationValue.isEmpty()) && !(rowKey==null) } ELSE { -> return entity@!(rowKey==null) && !(relationValue!=null&&!(relationValue.isEmpty())) } } CATCH(Exception) { -> log.error("Error while extracting entity object from json, caused by {}.",e,)@ -> throw new KunderaException(e,)@ }
