results[https://github.com/commoncrawl/commoncrawl-crawler/blob/fdcf6f99fe9bd1b4d1b5fe66f65debcdf652ecdc/src/org/commoncrawl/util/JSONUtils.java][safeSetStringFromElement][1] = -> IF { -> jsonObj.addProperty(property,stringElement.getAsString(),)@stringElement!=null }
results[https://github.com/fathomdb/cloud/blob/a979d1ef211f9c520921afdada2719115903893c/autonomous/auto-conf-openstack/src/main/java/io/fathom/auto/openstack/metadata/Metadata.java][findTopLevel][3] = -> element=data.get(key,)@ -> IF { -> return null@element==null } -> return element.getAsString()@!(element==null)
results[https://github.com/wso2/enterprise-store/blob/ea75cb299e37f4e5fed3daf33bd5904e4ca800ff/modules/components/social/src/main/java/org/wso2/carbon/social/Activity.java][getVerb][1] = -> verb=body.get("verb",)@ -> IF { -> return verb.getAsString()@verb!=null }
results[https://github.com/puppetlabs/geppetto/blob/412eb5a8aec4ed34d977a49a90149b57568d492a/org.cloudsmith.geppetto.catalog/src/org/cloudsmith/geppetto/catalog/impl/CatalogEdgeImpl.java][getString][19] = -> json=jsonObj.get(key,)@ -> IF { -> return null@json==null } -> value=json.getAsString()@!(json==null) -> return (value.length()==0)?null:value@!(json==null)
results[https://github.com/thucydides-webtests/thucydides/blob/8a80df61b4cfb7524dda7fe1489e1aa0c53fadeb/thucydides-core/src/main/java/net/thucydides/core/reports/json/TestOutcomeSerializer.java][readManualTest][1] = -> manualTestAttribute=jsonObject.get(MANUAL,)@ -> IF { -> isManualTest=Boolean.valueOf(manualTestAttribute.getAsString(),)@manualTestAttribute!=null }
results[https://github.com/fracturedatlas/ATHENA/blob/285dca4e3c624dd9fa201a2eda91d23f497d1ee7/athena-web-resources/src/main/java/org/fracturedatlas/athena/web/util/JsonUtil.java][nullSafeGetAsString][2] = -> IF { -> return null@e==null } ELSE { -> return e.getAsString()@!(e==null) }
results[https://github.com/commoncrawl/commoncrawl-crawler/blob/fdcf6f99fe9bd1b4d1b5fe66f65debcdf652ecdc/src/org/commoncrawl/util/JSONUtils.java][safeGetHttpDate][1] = -> element=jsonObj.get(property,)@ -> IF { -> return HttpHeaderInfoExtractor.getTime(element.getAsString(),)@element!=null }
results[https://github.com/bangiamanu/t8rpwgf/blob/b220f616c8b4c56610919c3833b04a4e493bd178/src/java/uk/tripbrush/service/PDFService.java][stringify][1] = -> IF { -> return ob.getAsString()@ob!=null } ELSE { -> return ""@!(ob!=null) }
results[https://github.com/0xdata/h2o/blob/28add6ef9e83aa2d20ae8104eeab8c5bc16659a3/src/main/java/water/api/RequestBuilders.java][trunc][1] = -> je=obj.get(fld,)@ -> IF { -> return "<br>"@je==null||je instanceof JsonNull } -> s1=je.getAsString()@!(je==null||je instanceof JsonNull) -> s2=(s1.length()>n)?s1.substring(0,n,):s1@!(je==null||je instanceof JsonNull)
results[https://github.com/TMCee/TMCeeTestRunner/blob/7cc7c595c281a0839027adf66bf9fcd1b7136d4e/src/fi/helsinki/cs/tmc/testrunner/StackTraceSerializer.java][getStringOrNull][2] = -> e=obj.get(property,)@ -> IF { -> return e.getAsString()@e!=null&&!(e.isJsonNull()) } ELSE { -> return null@!(e!=null&&!(e.isJsonNull())) }
results[https://github.com/fathomdb/cloud/blob/a979d1ef211f9c520921afdada2719115903893c/autonomous/auto-conf-openstack/src/main/java/io/fathom/auto/openstack/metadata/Metadata.java][findMeta][1] = -> IF { -> return null@meta==null||!(meta instanceof JsonObject) } -> element=(JsonObject) meta.get(key,)@!(meta==null||!(meta instanceof JsonObject)) -> IF { -> return null@!(meta==null||!(meta instanceof JsonObject)) && element==null } -> return element.getAsString()@!(meta==null||!(meta instanceof JsonObject)) && !(element==null)
results[https://github.com/Spoutcraft/Spoutcraft/blob/5cbbc2b07edaf4194a36130a7e74321e5b30ace0/src/main/java/com/prupe/mcpatcher/Config.java][getSelectedLauncherProfile][3] = -> IF { -> element=json.get("selectedProfile",)@json!=null -> IF { -> return element.getAsString()@element!=null&&element.isJsonPrimitive() && json!=null } }
results[https://github.com/thucydides-webtests/thucydides/blob/8a80df61b4cfb7524dda7fe1489e1aa0c53fadeb/thucydides-core/src/main/java/net/thucydides/core/reports/json/TestOutcomeSerializer.java][addQualifierIfPresent][1] = -> qualifierField=outcomeJsonObject.get(QUALIFIER_FIELD,)@ -> IF { -> testOutcome=testOutcome.withQualifier(unescape(qualifierField.getAsString(),),)@qualifierField!=null }
results[https://github.com/Aldeon/Aldeon/blob/4173391b42ffb0c6058a81135765a5b8fb208978/src/main/java/org/aldeon/networking/conversion/ResponseClassMapper.java][getClass][1] = -> IF { -> typeElement=jsonObject.get(TYPE_FIELD,)@!(object instanceof JsonObject) -> IF { -> action=typeElement.getAsString()@typeElement!=null && !(object instanceof JsonObject) -> return classMap.get(action,)@object instanceof JsonObject && typeElement!=null } }
results[https://github.com/JackDanger/google-wave-samples/blob/dde0bd9dd4a9ba86e4950eca5831df6c446f1138/extensions/robots/java/buggy/src/com/google/wave/api/impl/OperationRequestGsonAdaptor.java][getPropertyAsStringThenRemove][1] = -> property=jsonObject.get(key.key(),)@ -> IF { -> IF { -> return null@property.isJsonNull() && property!=null } -> return property.getAsString()@property!=null && !(property.isJsonNull()) }
results[https://github.com/Floobits/floobits-intellij/blob/600015940e606b56a347a271ed0f196e93d251cb/FlooConn.java][handle][2] = -> name=obj.get("name",)@ -> IF { -> return @name==null } -> requestName=name.getAsString()@!(name==null) -> IF { -> return @requestName.equals("pong",) && !(name==null) } -> handler.on_data(requestName,obj,)@!(requestName.equals("pong",)) && !(name==null)
results[https://github.com/asakusafw/asakusafw/blob/c925d9197fd0798df82cf8403db452e8b3baf079/testing-project/asakusa-test-data-provider/src/main/java/com/asakusafw/testdriver/json/JsonObjectDriver.java][stringProperty][2] = -> TRY {  -> prop=property(context,name,)@ -> builder.add(name,prop.getAsString(),)@!(prop==null) } CATCH(IOException) {}
results[https://github.com/johnpang28/nicorobin/blob/ff800b91c1974cd4a16a307ad4d4f3bff89bb4b0/src/main/java/com/pijin/nicorobin/json/GsonHelper.java][getMandatoryString][1] = -> jsonElement=jsonObject.get(name,)@ -> IF { -> return jsonElement.getAsString()@jsonElement!=null } ELSE { -> throw new JsonParseException(name+" property is mandatory",)@!(jsonElement!=null) }
results[https://github.com/motech/care-reporting/blob/ce3ea881ba7ef95097a1469d0f4ca218d49f1d51/care-reporting-preprod-migration/src/main/java/org/motechproject/care/reporting/migration/util/CommcareDataUtil.java][extractAsMap][2] = -> map=new HashMap<>()@ -> extractedValue=jsonResponse.get(fieldToExtract,)@ -> IF { -> throw new RuntimeException(String.format("%s field not present in commcare response",fieldToExtract,),)@extractedValue==null } -> map.put(requestHeader,extractedValue.getAsString(),)@!(extractedValue==null)
results[https://github.com/WinToosa/mobilelogger/blob/85a014004eaf679991ee614512fe010911bcd6bd/MobileLoggerServer/src/main/java/cs/wintoosa/controller/interceptor/ValidationInterceptor.java][isValid][1] = -> IF { -> return false@json==null } -> checksumJson=json.get("checksum",)@!(json==null) -> IF { -> return false@!(json==null) && checksumJson==null } -> checksum=checksumJson.getAsString()@!(json==null) && !(checksumJson==null) -> IF { -> return false@!(json==null) && !(checksum.equalsIgnoreCase(calculatedChecksum,)) && !(checksumJson==null) }
results[https://github.com/Collabinate/Collabinate/blob/677e577b6942686e0f2c542886e2a1221e955796/collabinate-server/src/main/java/com/collabinate/server/activitystreams/ActivityStreamsObject.java][getStringValue][1] = -> IF { -> return null@null==key||null==container } -> element=container.get(key,)@!(null==key||null==container) -> IF { -> TRY { -> value=element.getAsString()@!(null==key||null==container) && null!=element } }
results[https://github.com/Collabinate/Collabinate/blob/677e577b6942686e0f2c542886e2a1221e955796/collabinate-server/src/main/java/com/collabinate/server/activitystreams/ActivityStreamsObject.java][getPublished][2] = -> element=jsonObject.get(PUBLISHED,)@ -> TRY { -> IF { -> publishedString=element.getAsString()@null!=element -> published=DateTime.parse(publishedString,ISODateTimeFormat.dateTimeParser().withZoneUTC(),)@ } }
results[https://github.com/fracturedatlas/ATHENA/blob/e431d0166ba03d2d383bcea0024805b53bb313a1/core/web-resources/src/main/java/org/fracturedatlas/athena/web/util/JsonUtil.java][nullSafeGetAsString][1] = -> IF { -> return null@e==null } ELSE { -> IF { -> return null@e.isJsonNull() && !(e==null) } ELSE { -> return e.getAsString()@!(e==null) && !(e.isJsonNull()) } }
results[https://github.com/TomTasche/netCrawler/blob/4fdf3a357ff782810104edad08e8018206fc1d5f/src/at/netcrawler/io/json/JsonTopologyInterfaceAdapter.java][deserialize][1] = -> TRY {  -> interfaceNameElement=object.get(INTERFACE_NAME_PROPERTY,)@ -> IF { -> return interfaze@interfaceNameElement==null } -> interfaceName=interfaceNameElement.getAsString()@!(interfaceNameElement==null) -> return topologyDevice.getInterfaceByName(interfaceName,)@!(interfaceNameElement==null) } CATCH(JsonParseException) {}
results[https://github.com/eatnumber1/google-gson/blob/73597b06976191ef0a87fba3e259e721b08d9c05/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java][deserialize][6] = -> TRY {  -> jsonElement=jsonObj.get("data",)@ -> IF { -> return new DataHolder(null,)@jsonElement==null||jsonElement.isJsonNull() } -> return new DataHolder(jsonElement.getAsString(),)@!(jsonElement==null||jsonElement.isJsonNull()) } CATCH(JsonParseException) {}
results[https://github.com/always-on/always/blob/c77e2f0e1568eb522504725d146d40eeb53e2a91/core/agent/java/edu/wpi/always/cm/ragclient/UIMessagingJson.java][parse][2] = -> t=o.get(MSG_TYPE,)@ -> IF { -> throw new JsonMessageFormatException("Json message missing a type",)@t==null } -> IF { -> body=(b!=null&&b.isJsonObject())?b.getAsJsonObject():null@!(t.isJsonPrimitive()) && !(t==null) -> return new Message(t.getAsString(),body,)@!(t==null) && t.isJsonPrimitive() }
results[https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/blob/ebbc7209aa12a9c52c685e066a675a5c52c341f0/openid-connect-common/src/main/java/org/mitre/discovery/util/JsonUtils.java][getAsString][1] = -> IF { -> e=o.get(member,)@o.has(member,) -> IF { -> return e.getAsString()@e!=null&&e.isJsonPrimitive() && o.has(member,) } ELSE { -> return null@!(e!=null&&e.isJsonPrimitive()) && o.has(member,) } } ELSE { -> return null@!(o.has(member,)) }
results[https://github.com/DM2E/dm2e-ws/blob/d74d0ee9770a50544ceae50bda5aa20e8ef55039/src/main/java/eu/dm2e/ws/services/file/FileService.java][compare][1] = -> arg0Prop=arg0.get(this.compareProp,)@ -> arg1Prop=arg1.get(this.compareProp,)@ -> IF { -> return 0@null==arg0Prop&&null==arg1Prop } -> IF { -> return -1@!(null==arg0Prop&&null==arg1Prop) && null!=arg0Prop&&null==arg1Prop } -> IF { -> return +1@!(null==arg0Prop&&null==arg1Prop) && !(null!=arg0Prop&&null==arg1Prop) && null==arg0Prop&&null!=arg1Prop } -> return arg0Prop.getAsString().compareTo(arg1Prop.getAsString(),)@!(null==arg0Prop&&null==arg1Prop) && !(null!=arg0Prop&&null==arg1Prop) && !(null==arg0Prop&&null!=arg1Prop)
results[https://github.com/asakusafw/asakusafw/blob/c925d9197fd0798df82cf8403db452e8b3baf079/testing-project/asakusa-test-data-provider/src/main/java/com/asakusafw/testdriver/json/JsonObjectDriver.java][datetimeProperty][6] = -> TRY {  -> prop=property(context,name,)@ -> string=prop.getAsString()@!(prop==null) -> matcher=DATETIME.matcher(string,)@!(prop==null) -> IF { -> throw new IOException(MessageFormat.format("invalid time property \"{0}\", must be \"{2}\" form, but was \"{1}\"",name,string,"yyyy-mm-dd hh:mm:ss",),)@matcher.matches()==false && !(prop==null) } } CATCH(IOException) {}
results[https://github.com/tobiastry/Photoapp/blob/28e5ebd8a9bf0020c4e8fa4038b4366dcbcc2ece/Client/src/main/java/imageGetters/InstagramGetter.java][getMinID][2] = -> IF { -> min_tag_id=pagination.getAsJsonObject().get("min_tag_id",)@pagination!=null -> IF { -> minTagID=min_tag_id.getAsString()@pagination!=null && min_tag_id!=null -> return minTagID@pagination!=null && min_tag_id!=null } ELSE { -> return "0"@pagination!=null && !(min_tag_id!=null) } } ELSE { -> return "0"@!(pagination!=null) }
results[https://github.com/wikimedia/analytics-kraken/blob/b79a140d0d369ff66c34cc9713d7512a82924693/src/main/java/org/wikimedia/analytics/kraken/funnel/UserActionNode.java][<init>][2] = -> LOOP { -> value=json.get(type.toString().toLowerCase(),)@ -> IF { -> valueString=value.getAsString()@value!=null&&value.isJsonPrimitive() -> componentValues.putAll(splitProject(valueString,),)@ -> componentValues.put(type,valueString,)@ } }
results[https://github.com/anandankm/jUtils/blob/451817e446f270069f4d794fa88b3b40d7addb25/src/main/java/com/grooveshark/util/FileUtils.java][getJsonValue][1] = -> IF { -> IF { -> resultJe=jo.get(key,)@jo.has(key,) } } -> IF { -> return ""@resultJe==null } -> IF { -> return resultJe.toString()@resultJe.isJsonObject() && !(resultJe==null) } -> return resultJe.getAsString()@!(resultJe.isJsonObject()) && !(resultJe==null)
results[https://github.com/IKANOW/Infinit.e/blob/92ddc8dafb7c7d83aeb1c70efb50ae45a8247105/core/infinit.e.data_model/src/com/ikanow/infinit/e/data_model/index/ElasticSearchManager.java][addDocument][1] = -> IF { -> irb.setId(_id,)@null!=_id } ELSE { -> _idJson=docJson.getAsJsonObject().get("_id",)@ -> IF { -> _id=_idJson.getAsString()@!(null!=_id) && null!=_idJson -> IF { -> irb.setId(_id,)@!(null!=_id) && null!=_id } } }
results[https://github.com/facebook/buck/blob/8d60bbb7523cdaeabba7e4a1434d74ad2b6087eb/src/com/facebook/buck/httpserver/TracesHelper.java][parseCommandFrom][1] = -> TRY { -> nameEl=json.get("name",)@ -> IF { -> return Optional.absent()@nameEl==null||!(nameEl.isJsonPrimitive()) } -> IF { -> return Optional.absent()@!(nameEl==null||!(nameEl.isJsonPrimitive())) && argsEl==null||!(argsEl.isJsonObject())||argsEl.getAsJsonObject().get("command_args",)==null||!(argsEl.getAsJsonObject().get("command_args",).isJsonPrimitive()) } -> name=nameEl.getAsString()@!(argsEl==null||!(argsEl.isJsonObject())||argsEl.getAsJsonObject().get("command_args",)==null||!(argsEl.getAsJsonObject().get("command_args",).isJsonPrimitive())) && !(nameEl==null||!(nameEl.isJsonPrimitive())) } CATCH(IOException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/zhouxiaoxiaoxujian/gson/blob/70b893cdd41300bf074a7f0b90915f2feb3d38bc/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java][read][2] = -> TRY {  -> labelJsonElement=jsonElement.getAsJsonObject().remove(typeFieldName,)@ -> IF { -> throw new JsonParseException("cannot deserialize "+baseType+" because it does not define a field named "+typeFieldName,)@labelJsonElement==null } -> label=labelJsonElement.getAsString()@!(labelJsonElement==null) -> delegate=(TypeAdapter<R>) labelToDelegate.get(label,)@!(labelJsonElement==null) -> IF { -> throw new JsonParseException("cannot deserialize "+baseType+" subtype named "+label+"; did you forget to register a subtype?",)@!(labelJsonElement==null) && delegate==null } } CATCH(IOException) {}
results[https://github.com/eclipse/stardust.ui.web/blob/b04014956ea123d48bfb21e8f0ead85a000d44ce/web-modeler/src/main/java/org/eclipse/stardust/ui/web/modeler/marshaling/ModelElementUnmarshaller.java][updateActivity][1] = -> IF { -> return @null==activityJson } } ELSE { -> participantIdJson=activityJson.get(ModelerConstants.PARTICIPANT_FULL_ID,)@!(null==activityJson) -> IF { } ELSE { -> IF { -> participantFullId=participantIdJson.getAsString()@!(participantIdJson.isJsonNull()) && participantIdJson.isJsonPrimitive()&&participantIdJson.getAsJsonPrimitive().isString() && !(null==activityJson) && participantIdJson!=null -> performer=getModelBuilderFacade().findParticipant(participantFullId,)@!(null==activityJson) } }
results[https://github.com/eclipse/stardust.ui.web/blob/b04014956ea123d48bfb21e8f0ead85a000d44ce/web-modeler/src/main/java/org/eclipse/stardust/ui/web/modeler/marshaling/ModelElementMarshaller.java][findInChangeDescriptions][1] = -> LOOP { -> IF { -> LOOP { -> IF { -> IF { -> jsonElementType=formalParameterJson.get(ModelerConstants.PRIMITIVE_DATA_TYPE_PROPERTY,)@!(hasNotJsonNull(changes,ModelerConstants.FORMAL_PARAMETERS_PROPERTY,)) && formalParameterJson.get(ModelerConstants.DATA_TYPE_PROPERTY,).getAsString().equals(ModelerConstants.PRIMITIVE_DATA_TYPE_KEY,) && formalParameterJson.get(ModelerConstants.ID_PROPERTY,).getAsString().equals(id,) && !(n<formalParametersJson.size()) -> IF { -> primitiveDataType=jsonElementType.getAsString()@!(formalParameterJson.get(ModelerConstants.ID_PROPERTY,).getAsString().equals(id,)) && !(hasNotJsonNull(changes,ModelerConstants.FORMAL_PARAMETERS_PROPERTY,)) && jsonElementType!=null && !(n<formalParametersJson.size()) && !(formalParameterJson.get(ModelerConstants.DATA_TYPE_PROPERTY,).getAsString().equals(ModelerConstants.PRIMITIVE_DATA_TYPE_KEY,)) } -> return primitiveDataType@hasNotJsonNull(changes,ModelerConstants.FORMAL_PARAMETERS_PROPERTY,) && n<formalParametersJson.size() && formalParameterJson.get(ModelerConstants.DATA_TYPE_PROPERTY,).getAsString().equals(ModelerConstants.PRIMITIVE_DATA_TYPE_KEY,) && formalParameterJson.get(ModelerConstants.ID_PROPERTY,).getAsString().equals(id,) } } } } }
results[https://github.com/ybonnel/gson/blob/ba5cd8bf3bce0c5c6a1f885f7ea4fb6a4cfd45f8/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapter.java][deserialize][1] = -> TRY {  -> labelJsonElement=json.getAsJsonObject().remove(typeFieldName,)@ -> IF { -> throw new JsonParseException("cannot deserialize "+typeOfT+" because it does not define a field named "+typeFieldName,)@labelJsonElement==null } -> label=labelJsonElement.getAsString()@!(labelJsonElement==null) -> subtype=labelToSubtype.get(label,)@!(labelJsonElement==null) -> IF { -> throw new JsonParseException("cannot deserialize "+baseType+" subtype named "+label+"; did you forget to register a subtype?",)@!(labelJsonElement==null) && subtype==null } } CATCH(JsonParseException) {}
results[https://github.com/dakusui/symfonion/blob/15fcdefaafee5c8ba4026705c9cf5dfc509a8373/src/main/java/com/github/dakusui/json/JsonException.java][summary][2] = -> IF { -> return "null"@actualJSON==null||actualJSON.isJsonNull() } -> IF { -> return actualJSON.getAsString()+"(primitive)"@actualJSON.isJsonPrimitive() && !(actualJSON==null||actualJSON.isJsonNull()) } -> IF { -> return "array(size="+actualJSON.getAsJsonArray().size()+")"@!(actualJSON==null||actualJSON.isJsonNull()) && !(actualJSON.isJsonPrimitive()) && actualJSON.isJsonArray() } -> IF { -> return "object("+actualJSON.getAsJsonObject().entrySet().size()+" entries)"@!(actualJSON.isJsonArray()) && !(actualJSON==null||actualJSON.isJsonNull()) && !(actualJSON.isJsonPrimitive()) && actualJSON.isJsonObject() } -> return actualJSON.toString()+"(unknown)"@!(actualJSON.isJsonArray()) && !(actualJSON==null||actualJSON.isJsonNull()) && !(actualJSON.isJsonObject()) && !(actualJSON.isJsonPrimitive())
results[https://github.com/Ecwid/ecwid-mailchimp/blob/d180eb2477e21fd55fcf434fd5036e28a1c06649/src/main/java/com/ecwid/mailchimp/MailChimpClient.java][execute][1] = -> TRY {  -> IF { -> error=result.getAsJsonObject().get("error",)@result.isJsonObject() -> IF { -> code=result.getAsJsonObject().get("code",)@result.isJsonObject() && !(error!=null) -> throw new MailChimpException(code.getAsInt(),error.getAsString(),)@result.isJsonObject() && error!=null } } } CATCH(IOException,MailChimpException) {}
results[https://github.com/ezterry/TTRSS_android_ezterry/blob/807add7244a98101276ff5b415c699f2ea3c677f/src/org/fox/ttrss/FeedsFragment.java][onPostExecute][2] = -> IF { -> TRY { -> iconsUrl=result.getAsJsonObject().get("icons_dir",)@result!=null -> IF { -> iconsStr=iconsUrl.getAsString()@iconsUrl!=null -> IF { -> baseUrl=m_prefs.getString("ttrss_url","",)+"/"+iconsStr@!(iconsStr.contains("://",)) } } } CATCH(Exception) { -> Log.d(TAG,"Error receiving icons configuration",)@ -> e.printStackTrace()@ } }
results[https://github.com/apache/incubator-tajo/blob/49607a5423c458d2821d7a5bc0db6dde78f8a559/tajo-common/src/main/java/org/apache/tajo/json/DataTypeAdapter.java][deserialize][2] = -> TRY {  -> builder=DataType.newBuilder()@ -> builder.setType(type,)@ -> IF { -> builder.setLength(len.getAsInt(),)@len!=null } -> code=obj.get("code",)@ -> IF { -> builder.setCode(code.getAsString(),)@code!=null } -> return builder.build()@ } CATCH(JsonParseException) {}
results[https://github.com/IISI/cdic/blob/77d44bd9910d1d7feeff23f010f821999a09ae68/client/Aquarius/src/platform/aquarius/tree/TreeView.java][doubleClick][1] = -> url=jo.getAsJsonObject().get("url",)@ -> IF { -> IF { -> TRY { -> part=page.openEditor(editorInput,BrowserEditorPart.ID,)@page!=null -> IF { -> (BrowserEditorPart) part.browser.forceFocus()@part instanceof BrowserEditorPart -> (BrowserEditorPart) part.browser.setUrl(url.getAsString(),)@part instanceof BrowserEditorPart && url!=null } } CATCH(PartInitException) { -> e.printStackTrace()@ } } }
results[https://github.com/gothfox/Tiny-Tiny-RSS-for-Honeycomb/blob/f0a29f9bcba46c09a750f19b715a730fcc74eb02/src/org/fox/ttrss/FeedsFragment.java][onPostExecute][1] = -> IF { -> TRY { -> iconsUrl=result.getAsJsonObject().get("icons_dir",)@result!=null -> IF { -> iconsStr=iconsUrl.getAsString()@iconsUrl!=null -> IF { -> baseUrl=m_prefs.getString("ttrss_url","",).trim()+"/"+iconsStr@!(iconsStr.contains("://",)) } } } CATCH(Exception) { -> Log.d(TAG,"Error receiving icons configuration",)@ -> e.printStackTrace()@ } }
results[https://github.com/proofpoint/kairosdb/blob/7bade49a287884f59210dd33b0ad6218aff9ba79/src/main/java/org/kairosdb/core/http/rest/json/GsonParser.java][parseAggregators][1] = -> TRY {  -> LOOP { -> name=jsAggregator.get("name",)@!(J<aggregators.size()) -> IF { -> throw new BeanValidationException(new SimpleConstraintViolation("aggregators["+J+"]","must have a name",),context,)@name==null||name.getAsString().isEmpty() && J<aggregators.size() } -> aggName=name.getAsString()@!(name==null||name.getAsString().isEmpty()) && !(J<aggregators.size()) -> aggregator=m_aggregatorFactory.createAggregator(aggName,)@!(name==null||name.getAsString().isEmpty()) && !(J<aggregators.size()) -> IF { -> throw new BeanValidationException(new SimpleConstraintViolation(aggName,"invalid aggregator name",),aggContext,)@aggregator==null && !(name==null||name.getAsString().isEmpty()) && J<aggregators.size() } -> deserializeProperties(context+".aggregator["+J+"]",jsAggregator,aggName,aggregator,)@!(name==null||name.getAsString().isEmpty()) && !(aggregator==null) && J<aggregators.size() } } CATCH(QueryException,BeanValidationException) {}
results[https://github.com/andfRa/Saga/blob/eb16ba3e73bb5fa162a1ebf726134bae0f9c25e3/src/org/saga/utility/CustomDeserializer.java][deserialize][1] = -> TRY {  -> IF { -> throw new JsonParseException("ProfessionDeserializer JsonElement is not JsonObject!",)@!(je.isJsonObject()) } -> classElement=jo.get("_className",)@!(!(je.isJsonObject())) -> IF { -> return gson.fromJson(je,type,)@!(!(je.isJsonObject())) && classElement==null } -> className=classElement.getAsString()@!(!(je.isJsonObject())) && !(classElement==null) -> TRY { -> newType=Class.forName(className,)@!(!(je.isJsonObject())) && !(classElement==null) } CATCH(ClassNotFoundException) { -> throw new JsonParseException("Class "+className+" not found!",)@!(!(je.isJsonObject())) && !(classElement==null) } } CATCH(JsonParseException) {}
results[https://github.com/proofpoint/kairosdb/blob/7bade49a287884f59210dd33b0ad6218aff9ba79/src/main/java/org/kairosdb/core/http/rest/json/GsonParser.java][parseGroupBy][1] = -> TRY {  -> LOOP { -> nameElement=jsGroupBy.get("name",)@!(J<groupBys.size()) -> IF { -> throw new BeanValidationException(new SimpleConstraintViolation(groupContext,"must have a name",),context,)@J<groupBys.size() && nameElement==null||nameElement.getAsString().isEmpty() } -> name=nameElement.getAsString()@!(nameElement==null||nameElement.getAsString().isEmpty()) && !(J<groupBys.size()) -> groupBy=m_groupByFactory.createGroupBy(name,)@!(nameElement==null||nameElement.getAsString().isEmpty()) && !(J<groupBys.size()) -> IF { -> throw new BeanValidationException(new SimpleConstraintViolation(groupContext+"."+name,"invalid group_by name",),context,)@!(nameElement==null||nameElement.getAsString().isEmpty()) && J<groupBys.size() && groupBy==null } -> deserializeProperties(context+"."+groupContext,jsGroupBy,name,groupBy,)@!(nameElement==null||nameElement.getAsString().isEmpty()) && !(J<groupBys.size()) && !(groupBy==null) } } CATCH(QueryException,BeanValidationException) {}
results[https://github.com/andfRa/Saga/blob/b7546f60771068efc9ada9fc695a5cdb22328a85/src/org/saga/saveload/SagaCustomSerializer.java][deserialize][1] = -> TRY {  -> IF { -> throw new JsonParseException("JsonElement is not JsonObject",)@!(je.isJsonObject()) } -> classElement=jo.get("_className",)@!(!(je.isJsonObject())) -> IF { -> throw new JsonParseException("missing _className field",)@!(!(je.isJsonObject())) && classElement==null } -> className=classElement.getAsString()@!(!(je.isJsonObject())) && !(classElement==null) -> TRY { -> type=Class.forName(className,)@!(!(je.isJsonObject())) && !(classElement==null) } CATCH(ClassNotFoundException) { -> throw new JsonParseException("class "+className+" not found",)@!(!(je.isJsonObject())) && !(classElement==null) } } CATCH(JsonParseException) {}
results[https://github.com/IKANOW/Infinit.e/blob/92ddc8dafb7c7d83aeb1c70efb50ae45a8247105/core/infinit.e.data_model/src/com/ikanow/infinit/e/data_model/api/knowledge/DocumentPojoApiMap.java][serialize][1] = -> jetmp=jo.get(DocumentPojo.source_,)@ -> IF { -> ja.add(jetmp,)@null!=jetmp } -> jetmp=jo.get(DocumentPojo.sourceKey_,)@ -> IF { -> sourceKey=DocumentPojo.getSourceKey(jetmp.getAsString(),)@null!=jetmp -> jetmp=new JsonPrimitive(sourceKey,)@null!=jetmp -> ja.add(jetmp,)@null!=jetmp } -> jetmp=jo.get(DocumentPojo.mediaType_,)@ -> IF { -> ja.add(jetmp,)@null!=jetmp } -> jetmp=jo.get(DocumentPojo.communityId_,)@ -> IF { -> ja.add(jetmp,)@null!=jetmp }
results[https://github.com/bbytes/DAAS/blob/13998eac1a8ade34975b52de73fad9e6a660ef23/daas-client/src/main/java/com/bbytes/daas/client/SerializerUtil.java][deserialize][1] = -> TRY {  -> IF { -> TRY { -> date=new Date(json.getAsLong(),)@json!=null } CATCH(NumberFormatException) { -> dateFormat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss",)@!(json!=null) -> TRY { -> date=dateFormat.parse(json.getAsString(),)@json!=null } CATCH(ParseException) { -> throw new JsonParseException(exp,)@json!=null } } } } CATCH(JsonParseException) {}
results[https://github.com/impetus-opensource/Kundera/blob/123a84661596222974eeaa79b30de0d44491277a/src/kundera-couchdb/src/main/java/com/impetus/client/couchdb/CouchDBClient.java][getColumnsById][1] = -> foreignKeys=new ArrayList<E>()@ -> TRY { -> LOOP { -> value=element.getAsJsonObject().get("value",).getAsJsonObject().get(inverseJoinColumnName,)@ -> IF { -> foreignKeys.add((E) PropertyAccessorHelper.fromSourceToTargetClass(columnJavaType,String.class,value.getAsString(),),)@value!=null } } } CATCH(Exception) { -> log.error("Error while fetching column by id {}, Caused by {}.",pKeyColumnValue,e,)@ -> throw new KunderaException(e,)@ } FINALLY { -> closeContent(response,)@ }
results[https://github.com/samuelclay/NewsBlur/blob/ebb505e3f2caea4db2218f6f1a6a817b786021e6/clients/android/NewsBlur/src/com/newsblur/serialization/DateStringTypeAdapter.java][deserialize][2] = -> TRY {  -> TRY { -> IF { -> return new Date()@element==null||TextUtils.isEmpty(element.getAsString(),) } ELSE { -> dateString=element.getAsString()@!(element==null||TextUtils.isEmpty(element.getAsString(),)) -> IF { -> dateString=dateString.substring(0,19,)@element==null||TextUtils.isEmpty(element.getAsString(),) && dateString.length()>19 } -> return df.parse(dateString,)@!(element==null||TextUtils.isEmpty(element.getAsString(),)) } } CATCH(ParseException) { -> Log.e("DateTypeAdapter",e.getLocalizedMessage(),)@ -> return new Date()@ } } CATCH(JsonParseException) {}
results[https://github.com/europeana/Europeana-Cloud/blob/981b3d386111fe6e93a19987619cb14364d19050/service/dls/src/main/java/eu/europeana/cloud/service/dls/listeners/AssignmentAddedListener.java][onMessage][1] = -> IF { -> return @messageBytes==null } -> IF { -> return @!(messageBytes==null) && messageText.isEmpty() } -> versionJson=jo.get(ParamConstants.P_VER,)@!(messageBytes==null) && !(messageText.isEmpty()) -> IF { -> version=versionJson.getAsString()@versionJson!=null&&!(versionJson.isJsonNull()) && !(messageBytes==null) && !(messageText.isEmpty()) } -> IF { -> return @!(messageBytes==null) && StringUtils.isBlank(version,) && !(messageText.isEmpty()) } -> IF { -> return @!(messageBytes==null) && !(StringUtils.isBlank(version,)) && compoundDataSetId==null && !(messageText.isEmpty()) } -> IF { -> return @!(messageBytes==null) && !(StringUtils.isBlank(version,)) && !(messageText.isEmpty()) && !(compoundDataSetId==null) && StringUtils.isBlank(compoundDataSetId.getDataSetId(),) } -> IF { -> return @!(messageBytes==null) && !(StringUtils.isBlank(version,)) && StringUtils.isBlank(compoundDataSetId.getDataSetProviderId(),) && !(messageText.isEmpty()) && !(StringUtils.isBlank(compoundDataSetId.getDataSetId(),)) && !(compoundDataSetId==null) } -> TRY { -> solrDao.addAssignment(version,compoundDataSetId,)@!(messageBytes==null) && !(StringUtils.isBlank(version,)) && !(messageText.isEmpty()) && !(StringUtils.isBlank(compoundDataSetId.getDataSetId(),)) && !(compoundDataSetId==null) && !(StringUtils.isBlank(compoundDataSetId.getDataSetProviderId(),)) } CATCH(SolrServerException | IOException | SolrDocumentNotFoundException) { -> LOGGER.error("Cannot add assignment to solr.",ex,)@!(messageBytes==null) && !(StringUtils.isBlank(version,)) && !(messageText.isEmpty()) && !(StringUtils.isBlank(compoundDataSetId.getDataSetId(),)) && !(compoundDataSetId==null) && !(StringUtils.isBlank(compoundDataSetId.getDataSetProviderId(),)) }
results[https://github.com/DesignAndDeploy/dnd/blob/97ec4cd3f18e653828d12ac1ba3db4d6a2d743a1/DND/src/edu/teco/dnd/util/InetSocketAddressAdapter.java][deserialize][1] = -> TRY {  -> IF { -> throw new JsonParseException("not a JSON object",)@!(json.isJsonObject()) } -> address=obj.get("address",)@!(!(json.isJsonObject())) -> port=obj.get("port",)@!(!(json.isJsonObject())) -> IF { -> throw new JsonParseException("address/port missing",)@!(!(json.isJsonObject())) && address==null||port==null } -> IF { -> throw new JsonParseException("address is not a string",)@!(!(json.isJsonObject())) && !(address.isJsonPrimitive())||!((JsonPrimitive) address.isString()) && !(address==null||port==null) } -> IF { -> throw new JsonParseException("port is not a number",)@!(!(json.isJsonObject())) && !(port.isJsonPrimitive())||!((JsonPrimitive) port.isNumber()) && !(address==null||port==null) && !(!(address.isJsonPrimitive())||!((JsonPrimitive) address.isString())) } -> isa=new InetSocketAddress(address.getAsString(),port.getAsInt(),)@!(!(json.isJsonObject())) && !(address==null||port==null) && !(!(address.isJsonPrimitive())||!((JsonPrimitive) address.isString())) && !(!(port.isJsonPrimitive())||!((JsonPrimitive) port.isNumber())) -> LOGGER.exit(isa,)@!(!(json.isJsonObject())) && !(address==null||port==null) && !(!(address.isJsonPrimitive())||!((JsonPrimitive) address.isString())) && !(!(port.isJsonPrimitive())||!((JsonPrimitive) port.isNumber())) } CATCH(JsonParseException) {}
results[https://github.com/brooklyncentral/brooklyn/blob/a74b09c2a3079d009c735d8a197630451c423fbd/software/base/src/main/java/brooklyn/entity/chef/ChefAttributeFeed.java][onSuccess][1] = -> LOOP { -> sensor=attribute.getValue()@ -> log.trace("Finding value for attribute sensor "+sensor.getName(),)@ -> LOOP { -> TRY { -> elementForSensor=getElementByPath(jsonElement.getAsJsonObject(),prefixedPath,)@ } CATCH(IllegalArgumentException) { -> log.error("Entity {}: bad Chef attribute {} for sensor {}: {}", new Object[],)@ -> throw Throwables.propagate(e,)@ } } -> IF { -> entity.setAttribute(sensor,TypeCoercions.coerce(elementForSensor.getAsString(),sensor.getType(),),)@elementForSensor!=null } ELSE { -> entity.setAttribute(sensor,null,)@ } }
results[https://github.com/projectdanube/xdi2/blob/5bf743a9e73d30de15b8fba83313b246a16651a1/core/src/main/java/xdi2/core/impl/AbstractLiteral.java][jsonElementToLiteralData][1] = -> IF { -> throw new NullPointerException()@jsonElement==null } -> IF { -> IF { -> return jsonElement.getAsString()@!(jsonElement==null) && (JsonPrimitive) jsonElement.isString() && jsonElement instanceof JsonPrimitive } -> IF { -> return Double.valueOf(jsonElement.getAsDouble(),)@!(jsonElement==null) && (JsonPrimitive) jsonElement.isNumber() && !((JsonPrimitive) jsonElement.isString()) && jsonElement instanceof JsonPrimitive } -> IF { -> return Boolean.valueOf(jsonElement.getAsBoolean(),)@!(jsonElement==null) && (JsonPrimitive) jsonElement.isBoolean() && !((JsonPrimitive) jsonElement.isString()) && !((JsonPrimitive) jsonElement.isNumber()) && jsonElement instanceof JsonPrimitive } } ELSE { } ELSE { } ELSE { -> IF { -> return null@!(jsonElement==null) && !(jsonElement instanceof JsonObject) && jsonElement instanceof JsonNull && !(jsonElement instanceof JsonPrimitive) && !(jsonElement instanceof JsonArray) } } -> throw new IllegalArgumentException("Invalid JSON element: "+jsonElement,)@!(jsonElement==null) && jsonElement instanceof JsonPrimitive
results[https://github.com/paillardf/Work-Hub/blob/ead864e9d39216adc4e02f7b47d44dad5a51ea6b/Work-Hub-MainLib/src/com/workhub/utils/MessageFactory.java][getModel][1] = -> content_json=(JsonObject) js.parse(message.getContent(),).get("content",)@ -> IF { -> content=content_json.getAsString()@content_json!=null } -> IF { -> IF { -> image=Base64.decode(content,Base64.NO_OPTIONS,)@content!=null } } ELSE { -> IF { -> model=new TextElementModel(color,title,agent,content,)@ } ELSE { -> IF { -> model=new LinkElementModel(color,title,agent,content,)@ } ELSE { -> IF { -> model=new TextElementModel(color,title,agent,content,)@ } } } }
results[https://github.com/Aldeon/Aldeon/blob/4173391b42ffb0c6058a81135765a5b8fb208978/src/main/java/org/aldeon/networking/conversion/RequestClassMapper.java][getClass][1] = -> IF { -> typeElement=(JsonObject) object.get(TYPE_FIELD,)@object instanceof JsonObject -> IF { -> action=typeElement.getAsString()@typeElement!=null && !(object instanceof JsonObject) -> IF { -> return GetMessageRequest.class@action.equals(GetMessageRequest.TYPE,) && object instanceof JsonObject && typeElement!=null } ELSE { -> IF { -> return GetRelevantPeersRequest.class@object instanceof JsonObject && typeElement!=null && !(action.equals(GetMessageRequest.TYPE,)) && action.equals(GetRelevantPeersRequest.TYPE,) } ELSE { -> IF { -> return CompareTreesRequest.class@object instanceof JsonObject && !(action.equals(GetRelevantPeersRequest.TYPE,)) && typeElement!=null && !(action.equals(GetMessageRequest.TYPE,)) && action.equals(CompareTreesRequest.TYPE,) } ELSE { -> IF { -> return IndicateInterestRequest.class@object instanceof JsonObject && !(action.equals(CompareTreesRequest.TYPE,)) && !(action.equals(GetRelevantPeersRequest.TYPE,)) && typeElement!=null && !(action.equals(GetMessageRequest.TYPE,)) && action.equals(IndicateInterestRequest.TYPE,) } ELSE { -> IF { -> return GetClockRequest.class@object instanceof JsonObject && !(action.equals(CompareTreesRequest.TYPE,)) && !(action.equals(GetRelevantPeersRequest.TYPE,)) && typeElement!=null && action.equals(GetClockRequest.TYPE,) && !(action.equals(GetMessageRequest.TYPE,)) && !(action.equals(IndicateInterestRequest.TYPE,)) } ELSE { -> IF { -> return GetDiffRequest.class@object instanceof JsonObject && action.equals(GetDiffRequest.TYPE,) && !(action.equals(CompareTreesRequest.TYPE,)) && !(action.equals(GetRelevantPeersRequest.TYPE,)) && typeElement!=null && !(action.equals(GetMessageRequest.TYPE,)) && !(action.equals(GetClockRequest.TYPE,)) && !(action.equals(IndicateInterestRequest.TYPE,)) } } } } } } } }
results[https://github.com/impetus-opensource/Kundera/blob/123a84661596222974eeaa79b30de0d44491277a/src/kundera-couchdb/src/main/java/com/impetus/client/couchdb/CouchDBClient.java][findIdsByColumn][1] = -> foreignKeys=new ArrayList()@ -> m=KunderaMetadataManager.getEntityMetadata(kunderaMetadata,entityClazz,)@ -> TRY { -> IF { -> return foreignKeys.toArray()@ } -> LOOP { -> value=element.getAsJsonObject().get("value",).getAsJsonObject().get(pKeyName,)@ -> IF { -> foreignKeys.add(PropertyAccessorHelper.fromSourceToTargetClass(m.getIdAttribute().getBindableJavaType(),String.class,value.getAsString(),),)@value!=null } } } CATCH(Exception) { -> log.error("Error while fetching ids for column where column name is"+columnName+" and column value is {} , Caused by {}.",columnValue,e,)@ -> throw new KunderaException(e,)@ } FINALLY { -> closeContent(response,)@ } -> return foreignKeys.toArray()@
results[https://github.com/0xdata/h2o/blob/990bfbba5fdb316db3381f50746130416480a874/src/main/java/water/persist/PersistHdfs.java][addFolder][1] = -> TRY { -> IF { -> return @fs==null } -> LOOP { } ELSE { -> IF { -> IF { -> throw new RuntimeException("Missing version",)@!(fs==null) && v==null && pfs.getName().endsWith(Extensions.JSON,) && fs.listStatus(p,) } -> type=json.get(Constants.TYPE,)@!(fs==null) && !(fs.listStatus(p,)) && !(v==null) && !(pfs.getName().endsWith(Extensions.JSON,)) -> IF { -> throw new RuntimeException("Missing type",)@!(fs==null) && type==null && !(v==null) && pfs.getName().endsWith(Extensions.JSON,) && fs.listStatus(p,) } -> c=Class.forName(type.getAsString(),)@!(fs==null) && !(fs.listStatus(p,)) && !(v==null) && !(pfs.getName().endsWith(Extensions.JSON,)) && !(type==null) -> model=(OldModel) c.newInstance()@!(fs==null) && !(fs.listStatus(p,)) && !(v==null) && !(pfs.getName().endsWith(Extensions.JSON,)) && !(type==null) } } } CATCH(Exception) { -> Log.err(e,)@ -> o=new JsonObject()@ -> o.addProperty(Constants.FILE,p.toString(),)@ -> o.addProperty(Constants.ERROR,e.getMessage(),)@ -> failed.add(o,)@ }
results[https://github.com/commoncrawl/commoncrawl-crawler/blob/e49379fa0757caac902d182b85efe32fcbac03a9/src/org/commoncrawl/mapred/ec2/postprocess/crawldb/LinkGraphDataEmitter.java][emitLinksFromHTMLContent][2] = -> TRY {  -> TRY { -> IF { -> return @contentObject==null } ELSE { } ELSE { -> LOOP { -> href=linkObject.get("href",)@!(contentObject==null) -> IF { -> fp=URLUtils.getURLFPV2FromURL(href.getAsString(),)@!(contentObject==null) && href!=null } ELSE { -> IF { -> key=CrawlDBKey.generateLinkKey(fp,CrawlDBKey.Type.KEY_TYPE_HTML_LINK,md5Hash,)@!(contentObject==null) && !(hashSet.contains(fp.getUrlHash(),)) && !(fp==null) -> hashSet.add(fp.getUrlHash(),)@!(contentObject==null) && !(hashSet.contains(fp.getUrlHash(),)) && !(fp==null) } } } } } CATCH(Exception) { -> LOG.error(CCStringUtils.stringifyException(e,),)@ -> reporter.incrCounter(Counters.FAILED_TO_GET_LINKS_FROM_HTML,1,)@ } } CATCH(IOException) {}
results[https://github.com/MassiveCraft/mcore/blob/86db5a6bdd36afda35a0b2ef12b8d1c112af620f/src/com/massivecraft/mcore/adapter/FireworkEffectAdapter.java][fromJson][1] = -> IF { -> return null@jsonElement==null } -> IF { -> return null@!(jsonElement==null) && !(jsonElement.isJsonObject()) } -> element=json.get(FLICKER,)@!(jsonElement==null) && !(!(jsonElement.isJsonObject())) -> IF { -> flicker=element.getAsBoolean()@!(jsonElement==null) && !(!(jsonElement.isJsonObject())) && element!=null } -> element=json.get(TRAIL,)@!(jsonElement==null) && !(!(jsonElement.isJsonObject())) -> IF { -> trail=element.getAsBoolean()@!(jsonElement==null) && !(!(jsonElement.isJsonObject())) && element!=null } -> element=json.get(COLORS,)@!(jsonElement==null) && !(!(jsonElement.isJsonObject())) -> IF { -> colors=toColorCollection(element,)@!(jsonElement==null) && !(!(jsonElement.isJsonObject())) && element!=null } -> element=json.get(FADE_COLORS,)@!(jsonElement==null) && !(!(jsonElement.isJsonObject())) -> IF { -> fadeColors=toColorCollection(element,)@!(jsonElement==null) && !(!(jsonElement.isJsonObject())) && element!=null } -> element=json.get(TYPE,)@!(jsonElement==null) && !(!(jsonElement.isJsonObject())) -> IF { -> type=Type.valueOf(element.getAsString(),)@!(jsonElement==null) && !(!(jsonElement.isJsonObject())) && element!=null } -> ret=FireworkEffect.builder().flicker(flicker,).trail(trail,).withColor(colors,).withFade(fadeColors,).with(type,).build()@!(jsonElement==null) && !(!(jsonElement.isJsonObject()))
results[https://github.com/IKANOW/Infinit.e/blob/e8d3c98b0eee44a0979bec9a0118986205683bac/core/infinit.e.data_model/src/com/ikanow/infinit/e/data_model/custom/InfiniteFileInputJsonParser.java][getKey][2] = -> TRY { -> metaObj=meta.getAsJsonObject()@ -> LOOP { -> meta=metaObj.get(comp,)@ -> IF { -> return null@null==meta } ELSE { -> IF { -> metaObj=meta.getAsJsonObject()@!(null==meta) && meta.isJsonObject() } ELSE { -> IF { -> return meta.getAsString()@!(null==meta) && meta.isJsonPrimitive() && !(meta.isJsonObject()) } ELSE { -> IF { -> return null@!(meta.isJsonPrimitive()) && !(null==meta) && !(meta.isJsonObject()) } ELSE { -> array=meta.getAsJsonArray()@!(meta.isJsonPrimitive()) && !(null==meta) && !(meta.isJsonObject()) -> meta=array.get(0,)@!(meta.isJsonPrimitive()) && !(null==meta) && !(meta.isJsonObject()) -> IF { -> metaObj=meta.getAsJsonObject()@!(meta.isJsonPrimitive()) && !(null==meta) && meta.isJsonObject() && !(meta.isJsonObject()) } } } } } } -> IF { -> IF { -> return "[Object]"@null!=metaObj } } }
results[https://github.com/azapps/mirakel-android/blob/68f802934e9a9b27d3736d6124a168a29204f3b3/src/de/azapps/mirakel/model/list/ListMirakel.java][parseJson][2] = -> IF { -> t=ListMirakel.getList(id.getAsInt(),)@id!=null } -> IF { -> t=new ListMirakel()@t==null } -> j=el.get("name",)@ -> IF { -> t.setName(j.getAsString(),)@j!=null } -> j=el.get("lft",)@ -> IF { -> t.setLft(j.getAsInt(),)@j!=null } -> j=el.get("rgt",)@ -> IF { -> t.setRgt(j.getAsInt(),)@j!=null } -> j=el.get("lft",)@ -> IF { -> t.setLft(j.getAsInt(),)@j!=null } -> j=el.get("updated_at",)@ -> IF { -> t.setUpdatedAt(j.getAsString().replace(":","",),)@j!=null } -> j=el.get("sort_by",)@ -> IF { -> t.setSortBy(j.getAsInt(),)@j!=null }
results[https://github.com/vega113/WaveInCloud/blob/7a240021b931b240c33dca0b8443152fb82e0487/src/com/google/wave/api/event/EventSerializer.java][deserialize][2] = -> TRY {  -> IF { -> throw new EventSerializationException("Trying to deserialize event JSON with unknown "+"type: "+json,json,)@type==EventType.UNKNOWN } -> TRY { -> event=ctor.newInstance()@!(type==EventType.UNKNOWN) -> setField(event,rootClass.getDeclaredField(WAVELET,),wavelet,)@!(type==EventType.UNKNOWN) -> setField(event,rootClass.getDeclaredField(MODIFIED_BY,),modifiedBy,)@!(type==EventType.UNKNOWN) -> setField(event,rootClass.getDeclaredField(TIMESTAMP,),timestamp,)@!(type==EventType.UNKNOWN) -> setField(event,rootClass.getDeclaredField(TYPE,),type,)@!(type==EventType.UNKNOWN) -> setField(event,rootClass.getDeclaredField(BUNDLE,),bundle,)@!(type==EventType.UNKNOWN) -> blipId=properties.get(BLIP_ID,)@!(type==EventType.UNKNOWN) -> IF { -> setField(event,rootClass.getDeclaredField(BLIP_ID,),blipId.getAsString(),)@!(type==EventType.UNKNOWN) && blipId!=null&&!(blipId instanceof JsonNull) } -> LOOP { -> IF { -> setField(event,field,context.deserialize(properties.get(fieldName,),field.getGenericType(),),)@!(type==EventType.UNKNOWN) && properties.has(fieldName,) } } } CATCH(NoSuchMethodException) { -> throw new EventSerializationException("Unable to deserialize event JSON: "+json,json,)@!(type==EventType.UNKNOWN) } CATCH(NoSuchFieldException) { -> throw new EventSerializationException("Unable to deserialize event JSON: "+json,json,)@!(type==EventType.UNKNOWN) } CATCH(InstantiationException) { -> throw new EventSerializationException("Unable to deserialize event JSON: "+json,json,)@!(type==EventType.UNKNOWN) } CATCH(IllegalAccessException) { -> throw new EventSerializationException("Unable to deserialize event JSON: "+json,json,)@!(type==EventType.UNKNOWN) } CATCH(InvocationTargetException) { -> throw new EventSerializationException("Unable to deserialize event JSON: "+json,json,)@!(type==EventType.UNKNOWN) } CATCH(JsonParseException) { -> throw new EventSerializationException("Unable to deserialize event JSON: "+json,json,)@!(type==EventType.UNKNOWN) } } CATCH(EventSerializationException) {}
results[https://github.com/proofpoint/kairosdb/blob/7bade49a287884f59210dd33b0ad6218aff9ba79/src/main/java/org/kairosdb/core/http/rest/json/GsonParser.java][parseQueryMetric][1] = -> TRY {  -> IF { -> throw new BeanValidationException(new SimpleConstraintViolation("metric[]","must have a size of at least 1",),"query",)@metricsArray==null } -> LOOP { -> TRY { -> validateObject(metric,context,)@!(metricsArray==null) && !(I<metricsArray.size()) -> queryMetric=new QueryMetric(startTime,query.getCacheTime(),metric.getName(),)@!(metricsArray==null) && !(I<metricsArray.size()) -> queryMetric.setExcludeTags(metric.isExcludeTags(),)@!(metricsArray==null) && !(I<metricsArray.size()) -> queryMetric.setLimit(metric.getLimit(),)@!(metricsArray==null) && !(I<metricsArray.size()) -> IF { -> queryMetric.setEndTime(endTime,)@!(metricsArray==null) && !(I<metricsArray.size()) && endTime>-1 } -> IF { -> throw new BeanValidationException(new SimpleConstraintViolation("end_time","must be greater than the start time",),context,)@!(metricsArray==null) && queryMetric.getEndTime()<startTime && I<metricsArray.size() } -> queryMetric.setCacheString(sb.toString(),)@!(queryMetric.getEndTime()<startTime) && !(metricsArray==null) && !(I<metricsArray.size()) -> IF { -> IF { -> throw new BeanValidationException(new SimpleConstraintViolation("aggregators[]","must have a size of at least 1",),context,)@!(queryMetric.getEndTime()<startTime) && !(metricsArray==null) && asJsonArray.size()<1 && aggregators!=null && I<metricsArray.size() } -> parseAggregators(context,queryMetric,asJsonArray,)@!(queryMetric.getEndTime()<startTime) && !(metricsArray==null) && !(asJsonArray.size()<1) && !(I<metricsArray.size()) && !(aggregators!=null) } -> IF { -> parseGroupBy(context,queryMetric,groupBys,)@!(queryMetric.getEndTime()<startTime) && !(metricsArray==null) && !(I<metricsArray.size()) && !(aggregators!=null) } -> order=jsMetric.get("order",)@!(queryMetric.getEndTime()<startTime) && !(metricsArray==null) && !(I<metricsArray.size()) && !(aggregators!=null) -> IF { -> queryMetric.setOrder(Order.fromString(order.getAsString(),context,),)@!(queryMetric.getEndTime()<startTime) && !(metricsArray==null) && order!=null && !(I<metricsArray.size()) && !(aggregators!=null) } -> queryMetric.setTags(metric.getTags(),)@!(queryMetric.getEndTime()<startTime) && !(metricsArray==null) && !(I<metricsArray.size()) && !(aggregators!=null) -> ret.add(queryMetric,)@!(queryMetric.getEndTime()<startTime) && !(metricsArray==null) && !(I<metricsArray.size()) && !(aggregators!=null) } CATCH(ContextualJsonSyntaxException) { -> throw new BeanValidationException(new SimpleConstraintViolation(e.getContext(),e.getMessage(),),context,)@!(metricsArray==null) && I<metricsArray.size() } } } CATCH(QueryException,BeanValidationException) {}
results[https://github.com/brooklyncentral/brooklyn/blob/cf7186e4123f0d331c30bdcd46a12caeafbc97c7/core/src/main/java/brooklyn/event/feed/http/JsonFunctions.java][apply][1] = -> IF { -> return (T) null@input==null } ELSE { -> IF { -> return (T) null@input.isJsonNull() && !(input==null) } ELSE { -> IF { -> return (T) (Boolean) input.getAsBoolean()@!(input==null) && !(input.isJsonNull()) } ELSE { -> IF { -> return (T) (Character) input.getAsCharacter()@!(input==null) && !(input.isJsonNull()) } ELSE { -> IF { -> return (T) (Byte) input.getAsByte()@!(input==null) && !(input.isJsonNull()) } ELSE { -> IF { -> return (T) (Short) input.getAsShort()@!(input==null) && !(input.isJsonNull()) } ELSE { -> IF { -> return (T) (Integer) input.getAsInt()@!(input==null) && !(input.isJsonNull()) } ELSE { -> IF { -> return (T) (Long) input.getAsLong()@!(input==null) && !(input.isJsonNull()) } ELSE { -> IF { -> return (T) (Float) input.getAsFloat()@!(input==null) && !(input.isJsonNull()) } ELSE { -> IF { -> return (T) (Double) input.getAsDouble()@!(input==null) && !(input.isJsonNull()) } ELSE { -> IF { -> return (T) input.getAsBigDecimal()@!(input==null) && !(input.isJsonNull()) } ELSE { -> IF { -> return (T) input.getAsBigInteger()@!(input==null) && !(input.isJsonNull()) } ELSE { -> IF { -> return (T) input.getAsNumber()@!(input==null) && !(input.isJsonNull()) } ELSE { -> IF { -> return (T) input.getAsString()@!(input==null) && !(input.isJsonNull()) } ELSE { -> IF { -> array=input.getAsJsonArray()@!(input==null) && !(input.isJsonNull()) -> IF { -> return (T) result@JsonElement.class.isAssignableFrom(componentType,) && !(input==null) && !(input.isJsonNull()) } ELSE { -> return (T) result@!(input==null) && !(JsonElement.class.isAssignableFrom(componentType,)) && !(input.isJsonNull()) } } ELSE { -> throw new IllegalArgumentException("Cannot cast json element to type "+expected,)@!(input==null) && !(input.isJsonNull()) } } } } } } } } } } } } } } }
results[https://github.com/akbertram/activityinfo/blob/14e73b404666e5095e73dc9f3381d7f751ccc1d3/server/src/main/java/org/activityinfo/client/page/report/json/ReportJsonFactory.java][decodePivotTableReportElement][1] = -> pivotTableElement=new PivotTableReportElement()@ -> title=element.get("title",)@ -> IF { -> pivotTableElement.setTitle(title.getAsString(),)@title!=null } -> sheetTitle=element.get("sheetTitle",)@ -> IF { -> pivotTableElement.setSheetTitle(sheetTitle.getAsString(),)@sheetTitle!=null } -> pivotTableElement.setFilter(decodeFilter(filter,),)@ -> IF { -> pivotTableElement.setColumnDimensions(decodeDimensionList(colDims,),)@colDims.size()>0 } -> IF { -> pivotTableElement.setRowDimensions(decodeDimensionList(rowDims,),)@rowDims.size()>0 }
results[https://github.com/alvarl/FanApp/blob/946ac7a521a2605f0146c0118d36b554538a914c/modules/securesocial-0.2.4/app/securesocial/provider/OAuth2Provider.java][doAuth][3] = -> IF { -> IF { -> IF { -> IF { -> token=body.get(ACCESS_TOKEN,)@body!=null -> IF { -> accessTokenFromJson=token.getAsString()@token!=null } ELSE { -> token=body.get(OAUTH_TOKEN,)@body!=null && !(token!=null) -> IF { -> accessTokenFromJson=token.getAsString()@token!=null && !(token!=null) } } } } } -> IF { -> throw new AuthenticationException()@accessTokenFromJson==null } } -> user.accessToken=(accessTokenFromJson==null)?response.accessToken:accessTokenFromJson@
results[https://github.com/europeana/Europeana-Cloud/blob/981b3d386111fe6e93a19987619cb14364d19050/service/dls/src/main/java/eu/europeana/cloud/service/dls/listeners/RepresentationRemovedListener.java][onMessage][1] = -> IF { -> return @messageBytes==null } -> IF { -> return @!(messageBytes==null) && messageText.isEmpty() } -> cloudIdJson=jo.get(ParamConstants.P_CLOUDID,)@!(messageBytes==null) && !(messageText.isEmpty()) -> IF { -> cloudId=cloudIdJson.getAsString()@!(messageBytes==null) && !(messageText.isEmpty()) && cloudIdJson!=null&&!(cloudIdJson.isJsonNull()) } -> IF { -> return @!(messageBytes==null) && !(messageText.isEmpty()) && StringUtils.isBlank(cloudId,) } -> representationNameJson=jo.get(ParamConstants.P_REPRESENTATIONNAME,)@!(messageBytes==null) && !(messageText.isEmpty()) && !(StringUtils.isBlank(cloudId,)) -> IF { -> representationName=representationNameJson.getAsString()@!(messageBytes==null) && representationNameJson!=null&&!(representationNameJson.isJsonNull()) && !(messageText.isEmpty()) && !(StringUtils.isBlank(cloudId,)) } -> IF { -> return @!(messageBytes==null) && !(messageText.isEmpty()) && !(StringUtils.isBlank(cloudId,)) && StringUtils.isBlank(representationName,) } -> TRY { -> solrDao.removeRepresentation(cloudId,representationName,)@!(messageBytes==null) && !(messageText.isEmpty()) && !(StringUtils.isBlank(cloudId,)) && !(StringUtils.isBlank(representationName,)) } CATCH(SolrServerException | IOException) { -> LOGGER.error("Cannot remove representation from solr.",ex,)@!(messageBytes==null) && !(messageText.isEmpty()) && !(StringUtils.isBlank(cloudId,)) && !(StringUtils.isBlank(representationName,)) }
results[https://github.com/dgowpers/glowing-meme/blob/1f33642d68cb2b7c1a7ead8d463795d8c5df0f3b/stuffsystem/web/src/main/java/com/stuffsystem/rest/MongoInventoryDAL.java][convertIdToObjectId][1] = -> IF { -> IF { -> TRY { -> idStr=idElement.getAsString()@null!=idElement && idElement.isJsonPrimitive() } } -> IF { -> TRY { -> idElementObj=idElement.getAsJsonObject()@null!=idElement } -> IF { -> idObj=idElementObj.get("$oid",)@null!=idElementObj -> IF { -> TRY { -> idStr=idObj.getAsString()@null!=idObj && null==idStr } } } } -> IF { -> oid=new ObjectId(idStr,)@null!=idStr } }
results[https://github.com/DesignAndDeploy/dnd/blob/550e2538b0811521bd3702f5e3e45a713379a206/DND/src/edu/teco/dnd/module/messages/infoReq/BlockIDAdapter.java][deserialize][1] = -> TRY {  -> IF { -> throw new JsonParseException("not a JSON object",)@!(json.isJsonObject()) } -> blockUUID=obj.get("blockUUID",)@!(!(json.isJsonObject())) -> appUUID=obj.get("appID",)@!(!(json.isJsonObject())) -> IF { -> throw new JsonParseException("blockUUID/appID missing",)@!(!(json.isJsonObject())) && blockUUID==null||appUUID==null } -> IF { -> throw new JsonParseException("blockUUID is not a string",)@!(!(json.isJsonObject())) && !(blockUUID.isJsonPrimitive())||!((JsonPrimitive) blockUUID.isString()) && !(blockUUID==null||appUUID==null) } -> IF { -> throw new JsonParseException("appID is not a string",)@!(!(json.isJsonObject())) && !(!(blockUUID.isJsonPrimitive())||!((JsonPrimitive) blockUUID.isString())) && !(appUUID.isJsonPrimitive())||!((JsonPrimitive) appUUID.isString()) && !(blockUUID==null||appUUID==null) } -> applicationBlockID=new ApplicationBlockID(UUID.fromString(blockUUID.getAsString(),),UUID.fromString(appUUID.getAsString(),),)@!(!(json.isJsonObject())) && !(!(blockUUID.isJsonPrimitive())||!((JsonPrimitive) blockUUID.isString())) && !(!(appUUID.isJsonPrimitive())||!((JsonPrimitive) appUUID.isString())) && !(blockUUID==null||appUUID==null) -> LOGGER.exit(applicationBlockID,)@!(!(json.isJsonObject())) && !(!(blockUUID.isJsonPrimitive())||!((JsonPrimitive) blockUUID.isString())) && !(!(appUUID.isJsonPrimitive())||!((JsonPrimitive) appUUID.isString())) && !(blockUUID==null||appUUID==null) } CATCH(JsonParseException) {}
results[https://github.com/animoto/animoto_api_client_java/blob/9414491251c0cead920e4d4066aabe507d09b57d/src/main/java/com/animoto/api/gson/deserializer/PostrollDeserializer.java][deserialize][1] = -> TRY {  -> IF { -> throw new JsonParseException("Postroll value is not expected type (Object)",)@!(json.isJsonObject()) } -> jsonTemplate=jsonPostroll.get("template",)@!(!(json.isJsonObject())) -> IF { -> throw new JsonParseException("Postroll value \"template\" is not expected type (String)",)@!(!(json.isJsonObject())) && jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString()) } -> template=jsonTemplate.getAsString()@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) -> IF { -> postroll=new CustomFootagePostroll()@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && template.equals("custom_footage",) -> jsonSourceUrl=jsonPostroll.get("source_url",)@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && template.equals("custom_footage",) -> IF { -> throw new JsonParseException("Postroll value \"source_url\" is not expected type (String)",)@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && jsonSourceUrl==null||!(jsonSourceUrl.isJsonPrimitive()&&jsonSourceUrl.getAsJsonPrimitive().isString()) && template.equals("custom_footage",) } -> postroll.setSourceUrl(jsonSourceUrl.getAsString(),)@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && !(jsonSourceUrl==null||!(jsonSourceUrl.isJsonPrimitive()&&jsonSourceUrl.getAsJsonPrimitive().isString())) && template.equals("custom_footage",) -> return postroll@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && !(jsonSourceUrl==null||!(jsonSourceUrl.isJsonPrimitive()&&jsonSourceUrl.getAsJsonPrimitive().isString())) && template.equals("custom_footage",) } ELSE { -> postroll=new BasicPostroll()@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && template.equals("custom_footage",) -> postroll.setTemplate(template,)@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && !(template.equals("custom_footage",)) -> return postroll@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && !(template.equals("custom_footage",)) } } CATCH(JsonParseException) {}
results[https://github.com/DesignAndDeploy/dnd/blob/38b685ab1194df7428d790c7046877f9de57d6bf/DND/src/edu/teco/dnd/module/messages/infoReq/ApplicationBlockIDAdapter.java][deserialize][1] = -> TRY {  -> IF { -> throw new JsonParseException("not a JSON object",)@!(json.isJsonObject()) } -> blockID=obj.get("blockID",)@!(!(json.isJsonObject())) -> applicationID=obj.get("applicationID",)@!(!(json.isJsonObject())) -> IF { -> throw new JsonParseException("blockID/applicationID missing",)@!(!(json.isJsonObject())) && blockID==null||applicationID==null } -> IF { -> throw new JsonParseException("blockID is not a string",)@!(!(json.isJsonObject())) && !(blockID==null||applicationID==null) && !(blockID.isJsonPrimitive())||!((JsonPrimitive) blockID.isString()) } -> IF { -> throw new JsonParseException("applicationID is not a string",)@!(!(blockID.isJsonPrimitive())||!((JsonPrimitive) blockID.isString())) && !(applicationID.isJsonPrimitive())||!((JsonPrimitive) applicationID.isString()) && !(!(json.isJsonObject())) && !(blockID==null||applicationID==null) } -> applicationBlockID=new ApplicationBlockID(new FunctionBlockID(UUID.fromString(blockID.getAsString(),),),new ApplicationID(UUID.fromString(applicationID.getAsString(),),),)@!(!(blockID.isJsonPrimitive())||!((JsonPrimitive) blockID.isString())) && !(!(json.isJsonObject())) && !(blockID==null||applicationID==null) && !(!(applicationID.isJsonPrimitive())||!((JsonPrimitive) applicationID.isString())) -> LOGGER.exit(applicationBlockID,)@!(!(blockID.isJsonPrimitive())||!((JsonPrimitive) blockID.isString())) && !(!(json.isJsonObject())) && !(blockID==null||applicationID==null) && !(!(applicationID.isJsonPrimitive())||!((JsonPrimitive) applicationID.isString())) } CATCH(JsonParseException) {}
results[https://github.com/europeana/Europeana-Cloud/blob/981b3d386111fe6e93a19987619cb14364d19050/service/dls/src/main/java/eu/europeana/cloud/service/dls/listeners/AssignmentRemovedListener.java][onMessage][1] = -> IF { -> return @messageBytes==null } -> IF { -> return @!(messageBytes==null) && messageText.isEmpty() } -> cloudIdJson=jo.get(ParamConstants.P_CLOUDID,)@!(messageBytes==null) && !(messageText.isEmpty()) -> IF { -> cloudId=cloudIdJson.getAsString()@!(messageBytes==null) && !(messageText.isEmpty()) && cloudIdJson!=null&&!(cloudIdJson.isJsonNull()) } -> IF { -> return @!(messageBytes==null) && !(messageText.isEmpty()) && StringUtils.isBlank(cloudId,) } -> representationNameJson=jo.get(ParamConstants.P_REPRESENTATIONNAME,)@!(messageBytes==null) && !(messageText.isEmpty()) && !(StringUtils.isBlank(cloudId,)) -> IF { -> representationName=representationNameJson.getAsString()@!(messageBytes==null) && representationNameJson!=null&&!(representationNameJson.isJsonNull()) && !(messageText.isEmpty()) && !(StringUtils.isBlank(cloudId,)) } -> IF { -> return @!(messageBytes==null) && !(messageText.isEmpty()) && !(StringUtils.isBlank(cloudId,)) && StringUtils.isBlank(representationName,) } -> IF { -> return @!(messageBytes==null) && compoundDataSetId==null && !(messageText.isEmpty()) && !(StringUtils.isBlank(cloudId,)) && !(StringUtils.isBlank(representationName,)) } -> IF { -> return @!(messageBytes==null) && !(messageText.isEmpty()) && !(StringUtils.isBlank(cloudId,)) && !(compoundDataSetId==null) && StringUtils.isBlank(compoundDataSetId.getDataSetId(),) && !(StringUtils.isBlank(representationName,)) } -> IF { -> return @!(messageBytes==null) && StringUtils.isBlank(compoundDataSetId.getDataSetProviderId(),) && !(messageText.isEmpty()) && !(StringUtils.isBlank(cloudId,)) && !(StringUtils.isBlank(compoundDataSetId.getDataSetId(),)) && !(compoundDataSetId==null) && !(StringUtils.isBlank(representationName,)) } -> TRY { -> solrDao.removeAssignment(cloudId,representationName,Collections.singletonList(compoundDataSetId,),)@!(messageBytes==null) && !(messageText.isEmpty()) && !(StringUtils.isBlank(cloudId,)) && !(StringUtils.isBlank(compoundDataSetId.getDataSetId(),)) && !(compoundDataSetId==null) && !(StringUtils.isBlank(compoundDataSetId.getDataSetProviderId(),)) && !(StringUtils.isBlank(representationName,)) } CATCH(SolrServerException | IOException | SolrDocumentNotFoundException) { -> LOGGER.error("Cannot remove assignment from solr",ex,)@!(messageBytes==null) && !(messageText.isEmpty()) && !(StringUtils.isBlank(cloudId,)) && !(StringUtils.isBlank(compoundDataSetId.getDataSetId(),)) && !(compoundDataSetId==null) && !(StringUtils.isBlank(compoundDataSetId.getDataSetProviderId(),)) && !(StringUtils.isBlank(representationName,)) }
results[https://github.com/sleuthkit/autopsy/blob/5b7f705682f19e5b582e36eb2a648b63fc9cbe28/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/Chrome.java][getBookmark][1] = -> IF { -> return @bookmarkFiles.isEmpty() } -> LOOP { -> LOOP { -> urlEl=address.get("url",)@!(bookmarkFiles.isEmpty()) -> IF { -> url=urlEl.getAsString()@urlEl!=null && !(bookmarkFiles.isEmpty()) } -> nameEl=address.get("name",)@!(bookmarkFiles.isEmpty()) -> IF { -> name=nameEl.getAsString()@nameEl!=null && !(bookmarkFiles.isEmpty()) } -> domain=Util.extractDomain(url,)@!(bookmarkFiles.isEmpty()) -> TRY { -> bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL.getTypeID(),"Recent Activity",url,),)@!(bookmarkFiles.isEmpty()) -> bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_TITLE.getTypeID(),"Recent Activity",name,),)@!(bookmarkFiles.isEmpty()) } CATCH(TskCoreException) { -> logger.log(Level.SEVERE,"Error while trying to insert Chrome bookmark artifact{0}",ex,)@!(bookmarkFiles.isEmpty()) -> this.addErrorMessage(this.getName()+": Error while trying to analyze file:"+bookmarkFile.getName(),)@!(bookmarkFiles.isEmpty()) } } }
results[https://github.com/commoncrawl/commoncrawl-crawler/blob/798d0f12dfa9ce2dafcbcb253ba036a3d58a53e0/src/org/commoncrawl/mapred/ec2/postprocess/crawldb/CrawlDBWriter.java][populateDateHeadersFromJSONObject][2] = -> IF { -> httpDate=headers.get("date",)@headers!=null -> lastModified=headers.get("last-modified",)@headers!=null -> expires=headers.get("expires",)@headers!=null -> IF { -> crawlStatsJSON.addProperty(CRAWLDETAIL_HTTP_DATE_PROPERTY,HttpHeaderInfoExtractor.getTime(httpDate.getAsString(),),)@httpDate!=null } -> IF { -> crawlStatsJSON.add(CRAWLDETAIL_HTTP_AGE_PROPERTY,age,)@age!=null } -> IF { -> crawlStatsJSON.addProperty(CRAWLDETAIL_HTTP_LAST_MODIFIED_PROPERTY,HttpHeaderInfoExtractor.getTime(lastModified.getAsString(),),)@lastModified!=null } -> IF { -> crawlStatsJSON.addProperty(CRAWLDETAIL_HTTP_EXPIRES_PROPERTY,HttpHeaderInfoExtractor.getTime(expires.getAsString(),),)@expires!=null } -> IF { -> crawlStatsJSON.add(CRAWLDETAIL_HTTP_CACHE_CONTROL_PROPERTY,cacheControl,)@cacheControl!=null } -> IF { -> crawlStatsJSON.add(CRAWLDETAIL_HTTP_PRAGMA_PROPERTY,pragma,)@pragma!=null } -> IF { -> crawlStatsJSON.add(CRAWLDETAIL_HTTP_ETAG_PROPERTY,etag,)@etag!=null } }
results[https://github.com/OurGrid/commune/blob/000702b5f1f327e493748654df7436718e9f0c0e/src/main/java/br/edu/ufcg/lsd/commune/message/JsonMessageUtil.java][parse][1] = -> TRY {  -> msgStr=new String(bytes,ENCODING,)@ -> msg=new Message(source,destination,functionName,null,procType,)@ -> extractParameters(msgJson,msg,)@ -> IF { -> msg.setSession(sessionJson.getAsLong(),)@sessionJson!=null } -> msg.setSequence(msgJson.get("seq",).getAsLong(),)@ -> senderPKJson=msgJson.get("senderPK",)@ -> IF { -> msg.getSource().getContainerID().setPublicKey(senderPKJson.getAsString(),)@senderPKJson!=null } -> senderCertJson=msgJson.get("senderCert",)@ -> IF { -> msg.setSenderCertificatePath((X509CertPath) deserialize(senderCertJson.getAsString(),),)@senderCertJson!=null } -> signJson=msgJson.get("signature",)@ -> IF { -> msg.setSignature(signJson.getAsString().getBytes(ENCODING,),)@signJson!=null } } CATCH(IOException,ClassNotFoundException) {}
results[https://github.com/akbertram/activityinfo/blob/14e73b404666e5095e73dc9f3381d7f751ccc1d3/server/src/main/java/org/activityinfo/client/page/report/json/ReportJsonFactory.java][deserialize][1] = -> IF { -> return null@json==null||json.length()<1 } -> report=new Report()@!(json==null||json.length()<1) -> report.setId(jsonObject.get("id",).getAsInt(),)@!(json==null||json.length()<1) -> title=jsonObject.get("title",)@!(json==null||json.length()<1) -> IF { -> report.setTitle(title.getAsString(),)@!(json==null||json.length()<1) && title!=null } -> sheetTitle=jsonObject.get("sheetTitle",)@!(json==null||json.length()<1) -> IF { -> report.setSheetTitle(sheetTitle.getAsString(),)@sheetTitle!=null && !(json==null||json.length()<1) } -> description=jsonObject.get("description",)@!(json==null||json.length()<1) -> IF { -> report.setDescription(description.getAsString(),)@description!=null && !(json==null||json.length()<1) } -> fileName=jsonObject.get("fileName",)@!(json==null||json.length()<1) -> IF { -> report.setFileName(fileName.getAsString(),)@!(json==null||json.length()<1) && fileName!=null } -> IF { -> report.setFilter(decodeFilter(filter,),)@filter!=null && !(json==null||json.length()<1) } -> IF { -> report.setElements(decodeElements(elements,),)@!(json==null||json.length()<1) && elements.size()>0 }
results[https://github.com/akbertram/activityinfo/blob/14e73b404666e5095e73dc9f3381d7f751ccc1d3/server/src/main/java/org/activityinfo/client/page/report/json/ReportJsonFactory.java][decodePivotChartReportElement][1] = -> pivotChartElement=new PivotChartReportElement()@ -> title=element.get("title",)@ -> IF { -> pivotChartElement.setTitle(title.getAsString(),)@title!=null } -> sheetTitle=element.get("sheetTitle",)@ -> IF { -> pivotChartElement.setSheetTitle(sheetTitle.getAsString(),)@sheetTitle!=null } -> type=element.get("type",)@ -> IF { -> pivotChartElement.setType(PivotChartReportElement.Type.valueOf(type.getAsString(),),)@type!=null } -> categoryAxisTitle=element.get("categoryAxisTitle",)@ -> IF { -> pivotChartElement.setCategoryAxisTitle(categoryAxisTitle.getAsString(),)@categoryAxisTitle!=null } -> valueAxisTitle=element.get("valueAxisTitle",)@ -> IF { -> pivotChartElement.setValueAxisTitle(valueAxisTitle.getAsString(),)@valueAxisTitle!=null } -> pivotChartElement.setFilter(decodeFilter(filter,),)@ -> IF { -> pivotChartElement.setCategoryDimensions(decodeDimensionList(categoryDimensions,),)@categoryDimensions.size()>0 } -> IF { -> pivotChartElement.setSeriesDimension(decodeDimensionList(seriesDimensions,),)@seriesDimensions.size()>0 }
results[https://github.com/dlazerka/em/blob/042defee67dcf8f78b34d0990d2644921b093ff6/src/com/epam/memegen/MemeDao.java][create][1] = -> TRY {  -> TRY { -> topJE=jsonObject.get("top",)@ -> centerJE=jsonObject.get("center",)@ -> bottomJE=jsonObject.get("bottom",)@ -> blobKeyJE=jsonObject.get("blobKey",)@ -> IF { -> top=topJE.getAsString()@topJE!=null&&topJE.isJsonPrimitive() } -> IF { -> center=centerJE.getAsString()@centerJE!=null&&centerJE.isJsonPrimitive() } -> IF { -> bottom=bottomJE.getAsString()@bottomJE!=null&&bottomJE.isJsonPrimitive() } -> IF { -> blobKey=blobKeyJE.getAsString()@blobKeyJE!=null&&blobKeyJE.isJsonPrimitive() } } CATCH(JsonParseException) { -> throw new IllegalArgumentException(e,)@ } CATCH(ClassCastException) { -> throw new IllegalArgumentException(e,)@ } CATCH(IllegalStateException) { -> throw new IllegalArgumentException(e,)@ } CATCH(UnsupportedOperationException) { -> throw new IOException(e,)@ } -> IF { -> throw new IllegalArgumentException("No 'blobKey' param",)@blobKey==null } -> return create(blobKey,top,center,bottom,)@!(blobKey==null) } CATCH(IOException) {}
results[https://github.com/akbertram/activityinfo/blob/14e73b404666e5095e73dc9f3381d7f751ccc1d3/server/src/main/java/org/activityinfo/client/page/report/json/ReportJsonFactory.java][decodeMapReportElement][1] = -> mapElement=new MapReportElement()@ -> title=element.get("title",)@ -> IF { -> mapElement.setTitle(title.getAsString(),)@title!=null } -> sheetTitle=element.get("sheetTitle",)@ -> IF { -> mapElement.setSheetTitle(sheetTitle.getAsString(),)@sheetTitle!=null } -> baseMapId=element.get("baseMapId",)@ -> IF { -> mapElement.setBaseMapId(baseMapId.getAsString(),)@baseMapId!=null } -> IF { -> mapElement.setWidth(width.getAsInt(),)@width!=null } -> IF { -> mapElement.setHeight(height.getAsInt(),)@height!=null } -> zoomLevel=element.get("zoomLevel",)@ -> IF { -> mapElement.setBaseMapId(zoomLevel.getAsString(),)@zoomLevel!=null } -> center=element.get("center",)@ -> IF { -> mapElement.setBaseMapId(center.getAsString(),)@center!=null } -> IF { -> mapElement.setLayers(decodeLayers(layers,),)@layers.size()>0 } -> mapElement.setFilter(decodeFilter(filter,),)@
results[https://github.com/socialsensor/socialsensor-framework-common/blob/c99ea7118a000f8bebd5a78ab3950ae50ab57c65/src/main/java/eu/socialsensor/framework/common/repositories/StatusRepresentation.java][isRelatedTo][1] = -> IF { -> js=getJsonObject().get("user",)@ -> IF { -> js=js.getAsJsonObject().get("id",)@js!=null -> IF { -> userId=js.getAsString()@js!=null -> IF { -> return true@js!=null && infs.contains(userId,) } } } } -> IF { -> js=getJsonObject().get("retweeted_status",)@ -> IF { -> js=js.getAsJsonObject().get("user",)@js!=null -> IF { -> js=js.getAsJsonObject().get("id",)@js!=null -> IF { -> userId=js.getAsString()@js!=null -> IF { -> return true@js!=null && infs.contains(userId,) } } } } } -> IF { -> js=getJsonObject().get("entities",)@ -> IF { -> js=js.getAsJsonObject().get("user_mentions",)@js!=null -> IF { -> jsa=js.getAsJsonArray()@js!=null -> LOOP { -> js=jsa.get(j,).getAsJsonObject().get("id",)@js!=null && j<jsa.size() -> IF { -> userId=js.getAsString()@js!=null && !(j<jsa.size()) -> IF { -> return true@js!=null && j<jsa.size() && infs.contains(userId,) } } } } } }
results[https://github.com/impetus-opensource/Kundera/blob/123a84661596222974eeaa79b30de0d44491277a/src/kundera-couchdb/src/main/java/com/impetus/client/couchdb/CouchDBObjectMapper.java][getEntityFromJson][1] = -> TRY { -> entity=entityClass.newInstance()@ -> rowKey=jsonObj.get((AbstractAttribute) m.getIdAttribute().getJPAColumnName(),)@ -> IF { -> return null@rowKey==null } -> metaModel=(MetamodelImpl) kunderaMetadata.getApplicationMetadata().getMetamodel(m.getPersistenceUnit(),)@!(rowKey==null) -> idClass=m.getIdAttribute().getJavaType()@!(rowKey==null) -> IF { -> javaType=m.getIdAttribute().getBindableJavaType()@!(rowKey==null) && metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType(),) -> PropertyAccessorHelper.setId(entity,m,getObjectFromJson(rowKey.getAsJsonObject(),javaType,metaModel.embeddable(javaType,).getAttributes(),),)@!(rowKey==null) && metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType(),) } ELSE { -> PropertyAccessorHelper.setId(entity,m,PropertyAccessorHelper.fromSourceToTargetClass(idClass,String.class,rowKey.getAsString(),),)@!(metaModel.isEmbeddable(m.getIdAttribute().getBindableJavaType(),)) && !(rowKey==null) } -> LOOP { -> IF { -> IF { -> onViaEmbeddable(entityType,column,m,entity,metaModel.embeddable(javaType,),jsonObj,)@metaModel.isEmbeddable(javaType,) && !(column.equals(m.getIdAttribute(),))&&!((AbstractAttribute) column.getJPAColumnName().equals(discriminatorColumn,))&&value!=null&&!(value.equals(JsonNull.INSTANCE,)) && !(rowKey==null) } ELSE { -> IF { -> setFieldValue(entity,column,value,)@!(column.equals(m.getIdAttribute(),))&&!((AbstractAttribute) column.getJPAColumnName().equals(discriminatorColumn,))&&value!=null&&!(value.equals(JsonNull.INSTANCE,)) && !(rowKey==null) } ELSE { -> IF { -> IF { -> colValue=jsonObj.get((AbstractAttribute) column.getJPAColumnName(),)@!(rowKey==null) -> IF { -> colFieldName=m.getFieldName(fieldName,)@!(column.equals(m.getIdAttribute(),))&&!((AbstractAttribute) column.getJPAColumnName().equals(discriminatorColumn,))&&value!=null&&!(value.equals(JsonNull.INSTANCE,)) && !(rowKey==null) && relations.contains(fieldName,)&&!(fieldName.equals((AbstractAttribute) m.getIdAttribute().getJPAColumnName(),)) -> relationMetadata=KunderaMetadataManager.getEntityMetadata(kunderaMetadata,attribute.getJavaType(),)@!(rowKey==null) -> colVal=PropertyAccessorHelper.fromSourceToTargetClass(relationMetadata.getIdAttribute().getJavaType(),String.class,colValue.getAsString(),)@colValue!=null && !(rowKey==null) -> relationValue.put(fieldName,colVal,)@!(rowKey==null) && relations.contains(fieldName,)&&!(fieldName.equals((AbstractAttribute) m.getIdAttribute().getJPAColumnName(),)) } } } } } } } -> IF { -> e=new EnhanceEntity(entity,PropertyAccessorHelper.getId(entity,m,),relationValue,)@relationValue!=null&&!(relationValue.isEmpty()) && !(rowKey==null) -> return e@relationValue!=null&&!(relationValue.isEmpty()) && !(rowKey==null) } ELSE { -> return entity@!(rowKey==null) && !(relationValue!=null&&!(relationValue.isEmpty())) } } CATCH(Exception) { -> log.error("Error while extracting entity object from json, caused by {}.",e,)@ -> throw new KunderaException(e,)@ }
