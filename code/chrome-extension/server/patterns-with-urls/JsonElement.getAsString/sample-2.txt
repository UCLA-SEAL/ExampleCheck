results[https://github.com/Aleks-Ya/hh-java-api/blob/668eae99a19f36240d8ae56961ea6fc6f00b72c5/src/ru/yaal/project/hhapi/parser/deserializer/SalaryDeserializer.java][deserialize][2] = -> TRY { -> currencyElement=object.get("currency",)@ -> IF { -> currencyId=currencyElement.getAsString()@currencyElement.isJsonPrimitive() -> currency=Currency.CURRENCIES.getById(currencyId,)@ } } CATCH(Exception) { -> LOG.error(e.getMessage(),e,)@ -> throw new JsonParseException(e,)@ }
results[https://github.com/SpigotMC/BungeeCord/blob/38f12840ca16f8ee0930d91db7e0865c1c0e2dd9/api/src/main/java/net/md_5/bungee/chat/ComponentSerializer.java][deserialize][2] = -> TRY {  -> IF { -> return new TextComponent(json.getAsString(),)@json.isJsonPrimitive() } -> object=json.getAsJsonObject()@!(json.isJsonPrimitive()) -> IF { -> return context.deserialize(json,TranslatableComponent.class,)@!(json.isJsonPrimitive()) && object.has("translate",) } -> return context.deserialize(json,TextComponent.class,)@!(object.has("translate",)) && !(json.isJsonPrimitive()) } CATCH(JsonParseException) {}
results[https://github.com/facebook/buck/blob/8d60bbb7523cdaeabba7e4a1434d74ad2b6087eb/src/com/facebook/buck/httpserver/TracesHelper.java][parseCommandFrom][1] = -> TRY { -> nameEl=json.get("name",)@ -> IF { -> return Optional.absent()@nameEl==null||!(nameEl.isJsonPrimitive()) } -> IF { -> return Optional.absent()@!(nameEl==null||!(nameEl.isJsonPrimitive())) && argsEl==null||!(argsEl.isJsonObject())||argsEl.getAsJsonObject().get("command_args",)==null||!(argsEl.getAsJsonObject().get("command_args",).isJsonPrimitive()) } -> name=nameEl.getAsString()@!(argsEl==null||!(argsEl.isJsonObject())||argsEl.getAsJsonObject().get("command_args",)==null||!(argsEl.getAsJsonObject().get("command_args",).isJsonPrimitive())) && !(nameEl==null||!(nameEl.isJsonPrimitive())) } CATCH(IOException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/carrotsearch/randomizedtesting/blob/cc8eb71ee943de6f6b6f90a75bfa510011b4ccc9/integration-ant/ant-junit4/src/main/java/com/carrotsearch/ant/tasks/junit4/events/json/JsonDescriptionAdapter.java][deserialize][3] = -> TRY {  -> IF { -> id=json.getAsString()@json.isJsonPrimitive() -> key=identifiersInverse.get(id,)@json.isJsonPrimitive() -> IF { -> throw new JsonParseException("No such reference: "+id,)@json.isJsonPrimitive() && key==null } -> return key.description@!(key==null) && json.isJsonPrimitive() } ELSE { -> o=json.getAsJsonObject()@!(json.isJsonPrimitive()) -> return description@!(json.isJsonPrimitive()) } } CATCH(JsonParseException) {}
results[https://github.com/testmycode/tmc-netbeans/blob/edbb7894d672637593b3e9206577941e2677689d/tmc-netbeans-plugin/src/main/java/fi/helsinki/cs/tmc/utilities/ByteArrayGsonSerializer.java][deserialize][3] = -> TRY {  -> IF { -> return Base64.decodeBase64(je.getAsString(),)@je.isJsonPrimitive()&&(JsonPrimitive) je.isString() } ELSE { -> IF { -> return null@je.isJsonNull() && !(je.isJsonPrimitive()&&(JsonPrimitive) je.isString()) } ELSE { -> throw new JsonParseException("Not a base64 string.",)@!(je.isJsonNull()) && !(je.isJsonPrimitive()&&(JsonPrimitive) je.isString()) } } } CATCH(JsonParseException) {}
results[https://github.com/ubee/funf-open-sensing-framework/blob/1867866f944f1c1300d3b1a6939f81b4df642c1e/src/edu/mit/media/funf/config/DefaultRuntimeTypeAdapterFactory.java][read][1] = -> TRY {  -> el=Streams.parse(in,)@ -> runtimeType=getRuntimeType(el,type,)@ -> IF { -> throw new ParseException("RuntimeTypeAdapter: Unable to parse runtime type.",)@runtimeType==null } -> IF { -> typeObject=new JsonObject()@!(runtimeType==null) -> typeObject.addProperty(TYPE,el.getAsString(),)@!(runtimeType==null) && el.isJsonPrimitive()&&el.getAsJsonPrimitive().isString() } -> return delegate.read(new JsonTreeReader(el,),)@!(runtimeType==null) } CATCH(IOException) {}
results[https://github.com/Hurricaaane/Presence-Footsteps/blob/eb83a4c9aa0c7a3712b0eaed54a21609b26aeb7f/pf-src/eu/ha3/mc/presencefootsteps/jason/JasonAcoustics_Engine0.java][solveAcoustic][2] = -> TRY {  -> IF { -> ret=solveAcousticsCompound(unsolved.getAsJsonObject(),)@unsolved.isJsonObject() } ELSE { -> IF { -> a=new BasicAcoustic()@ -> prepareDefaults(a,)@ -> setupSoundName(a,unsolved.getAsString(),)@unsolved.isJsonPrimitive()&&unsolved.getAsJsonPrimitive().isString() && !(unsolved.isJsonObject()) } } -> IF { -> throw new UnexpectedDataException()@ret==null } } CATCH(UnexpectedDataException) {}
results[https://github.com/DesignAndDeploy/dnd/blob/97ec4cd3f18e653828d12ac1ba3db4d6a2d743a1/DND/src/edu/teco/dnd/util/InetSocketAddressAdapter.java][deserialize][1] = -> TRY {  -> IF { -> throw new JsonParseException("not a JSON object",)@!(json.isJsonObject()) } -> address=obj.get("address",)@!(!(json.isJsonObject())) -> port=obj.get("port",)@!(!(json.isJsonObject())) -> IF { -> throw new JsonParseException("address/port missing",)@!(!(json.isJsonObject())) && address==null||port==null } -> IF { -> throw new JsonParseException("address is not a string",)@!(!(json.isJsonObject())) && !(address.isJsonPrimitive())||!((JsonPrimitive) address.isString()) && !(address==null||port==null) } -> IF { -> throw new JsonParseException("port is not a number",)@!(!(json.isJsonObject())) && !(port.isJsonPrimitive())||!((JsonPrimitive) port.isNumber()) && !(address==null||port==null) && !(!(address.isJsonPrimitive())||!((JsonPrimitive) address.isString())) } -> isa=new InetSocketAddress(address.getAsString(),port.getAsInt(),)@!(!(json.isJsonObject())) && !(address==null||port==null) && !(!(address.isJsonPrimitive())||!((JsonPrimitive) address.isString())) && !(!(port.isJsonPrimitive())||!((JsonPrimitive) port.isNumber())) -> LOGGER.exit(isa,)@!(!(json.isJsonObject())) && !(address==null||port==null) && !(!(address.isJsonPrimitive())||!((JsonPrimitive) address.isString())) && !(!(port.isJsonPrimitive())||!((JsonPrimitive) port.isNumber())) } CATCH(JsonParseException) {}
results[https://github.com/Double-U/XenMaster/blob/1df036048d18b9cdbac9ce0e37c68d88ef9bd2b6/src/main/java/net/wgr/xenmaster/web/APICallDecoder.java][deserialize][1] = -> TRY {  -> LOOP { -> IF { -> args=new ArrayList<>(arr.size(),)@ -> LOOP { -> value=arr.get(i,)@i<arr.size() -> IF { -> args.add(value.getAsString(),)@value.isJsonPrimitive() } ELSE { -> IF { -> args.add(deserializeToMap(value.getAsJsonObject(),),)@value.isJsonObject() && !(value.isJsonPrimitive()) } } } -> apic.args=args.toArray()@ } } } CATCH(JsonParseException) {}
results[https://github.com/vega113/WaveInCloud/blob/1f8340c7ff8093fad6dcdbfb9714d16a6a59014c/src/org/waveprotocol/wave/communication/gson/GsonUtil.java][extractJsonObject][1] = -> TRY {  -> IF { -> object.fromGson(valueObj.getAsJsonObject(),gson,raw,)@valueObj.isJsonObject() } ELSE { -> IF { -> primitive=valueObj.getAsJsonPrimitive()@valueObj.isJsonPrimitive() && !(valueObj.isJsonObject()) -> IF { -> throw new GsonException("Decoding "+valueObj+" as object "+object.getClass()+" with no RawStringData given",)@valueObj.isJsonPrimitive() && raw==null||!(primitive.isString()) && !(valueObj.isJsonObject()) } -> s=raw.getString(valueObj.getAsString(),)@valueObj.isJsonPrimitive() && !(raw==null||!(primitive.isString())) && !(valueObj.isJsonObject()) -> GsonUtil.parseJson(object,gson,s,raw,)@valueObj.isJsonPrimitive() && valueObj.isJsonObject() && !(raw==null||!(primitive.isString())) } ELSE { -> throw new GsonException("Cannot decode valueObject "+valueObj.getClass()+" as object "+object.getClass(),)@!(valueObj.isJsonPrimitive()) && !(valueObj.isJsonObject()) } } } CATCH(GsonException) {}
results[https://github.com/IKANOW/Infinit.e/blob/a33540980ff8d3065c33e0ebf85b7582dfc365b2/core/infinit.e.harvest.library/src/com/ikanow/infinit/e/harvest/extraction/document/file/JsonToMetadataParser.java][getKey][2] = -> TRY { -> metaObj=meta.getAsJsonObject()@ -> LOOP { -> meta=metaObj.get(comp,)@ -> IF { -> return null@null==meta } ELSE { -> IF { -> metaObj=meta.getAsJsonObject()@!(null==meta) && meta.isJsonObject() } ELSE { -> IF { -> return meta.getAsString()@!(null==meta) && meta.isJsonPrimitive() && !(meta.isJsonObject()) } ELSE { -> IF { -> return null@!(meta.isJsonPrimitive()) && !(null==meta) && !(meta.isJsonObject()) } ELSE { -> array=meta.getAsJsonArray()@!(meta.isJsonPrimitive()) && !(null==meta) && !(meta.isJsonObject()) -> meta=array.get(0,)@!(meta.isJsonPrimitive()) && !(null==meta) && !(meta.isJsonObject()) -> IF { -> metaObj=meta.getAsJsonObject()@!(meta.isJsonPrimitive()) && !(null==meta) && meta.isJsonObject() && !(meta.isJsonObject()) } } } } } } -> IF { -> IF { -> return "[Object]"@null!=metaObj } } }
results[https://github.com/shilad/wikAPIdia/blob/8d3a2d200d1aa152c5893facfef39a9c33409e9f/wikAPIdia-wikidata/src/main/java/org/wikapidia/wikidata/WikidataParser.java][parseEntity][1] = -> TRY {  -> IF { -> array=value.getAsJsonArray()@value.isJsonArray() } ELSE { } ELSE { -> throw new WpParseException("in parseEntity expected item or property, found "+value,)@!(s.equals("property",)) && !(s.equals("item",)) && value.isJsonArray() } ELSE { -> IF { -> id=value.getAsString().toLowerCase()@value.isJsonPrimitive()&&value.getAsJsonPrimitive().isString() && !(value.isJsonArray()) -> IF { -> entityId=Integer.valueOf(id.substring(1,),)@value.isJsonPrimitive()&&value.getAsJsonPrimitive().isString() && id.startsWith("q",) && value.isJsonArray() } ELSE { -> IF { -> entityId=Integer.valueOf(id.substring(1,),)@id.startsWith("p",) && !(id.startsWith("q",)) && value.isJsonPrimitive()&&value.getAsJsonPrimitive().isString() && value.isJsonArray() } ELSE { -> throw new WpParseException("Invalid entity id: "+id,)@!(id.startsWith("q",)) && value.isJsonPrimitive()&&value.getAsJsonPrimitive().isString() && !(id.startsWith("p",)) && !(value.isJsonArray()) } } } ELSE { -> throw new WpParseException("in parseEntity expected array, found "+value,)@!(value.isJsonPrimitive()&&value.getAsJsonPrimitive().isString()) && !(value.isJsonArray()) } } } CATCH(WpParseException) {}
results[https://github.com/orcc/orcc/blob/8109b69033bbc5ba86c666f1060306fda78aef40/plugins/net.sf.orcc.core/src/net/sf/orcc/ir/serialize/IRParser.java][parseExpr][1] = -> TRY {  -> IF { -> primitive=element.getAsJsonPrimitive()@element.isJsonPrimitive() -> IF { -> return new BoolExpr(primitive.getAsBoolean(),)@primitive.isBoolean() && element.isJsonPrimitive() } ELSE { -> IF { -> IF { -> return new IntExpr(primitive.getAsBigInteger(),)@number instanceof BigInteger && !(primitive.isBoolean()) && element.isJsonPrimitive() && primitive.isNumber() } ELSE { -> IF { -> return new FloatExpr(primitive.getAsFloat(),)@number instanceof BigDecimal && !(number instanceof BigInteger) && !(primitive.isBoolean()) && element.isJsonPrimitive() && primitive.isNumber() } } } ELSE { -> IF { -> return new StringExpr(element.getAsString(),)@primitive.isString() && !(primitive.isNumber()) && !(primitive.isBoolean()) && element.isJsonPrimitive() } } } } ELSE { -> IF { -> array=element.getAsJsonArray()@element.isJsonArray() && !(element.isJsonPrimitive()) -> IF { -> return new VarExpr(var,)@element.isJsonArray() && name.equals(EXPR_VAR,) && !(element.isJsonPrimitive()) } ELSE { -> IF { -> return parseExprUnary(array,)@element.isJsonArray() && !(name.equals(EXPR_VAR,)) && name.equals(EXPR_UNARY,) && !(element.isJsonPrimitive()) } ELSE { -> IF { -> return parseExprBinary(array,)@name.equals(EXPR_BINARY,) && element.isJsonArray() && !(name.equals(EXPR_VAR,)) && !(name.equals(EXPR_UNARY,)) && !(element.isJsonPrimitive()) } ELSE { -> IF { -> return parseExprList(array,)@element.isJsonArray() && !(name.equals(EXPR_VAR,)) && name.equals(EXPR_LIST,) && !(name.equals(EXPR_UNARY,)) && !(element.isJsonPrimitive()) && !(name.equals(EXPR_BINARY,)) } ELSE { -> throw new OrccException("Invalid expression kind: "+name,)@element.isJsonArray() && !(name.equals(EXPR_VAR,)) && !(name.equals(EXPR_LIST,)) && !(name.equals(EXPR_UNARY,)) && !(element.isJsonPrimitive()) && !(name.equals(EXPR_BINARY,)) } } } } } } -> throw new OrccException("Invalid expression: "+element,)@element.isJsonPrimitive() } CATCH(OrccException) {}
results[https://github.com/DesignAndDeploy/dnd/blob/550e2538b0811521bd3702f5e3e45a713379a206/DND/src/edu/teco/dnd/module/messages/infoReq/BlockIDAdapter.java][deserialize][1] = -> TRY {  -> IF { -> throw new JsonParseException("not a JSON object",)@!(json.isJsonObject()) } -> blockUUID=obj.get("blockUUID",)@!(!(json.isJsonObject())) -> appUUID=obj.get("appID",)@!(!(json.isJsonObject())) -> IF { -> throw new JsonParseException("blockUUID/appID missing",)@!(!(json.isJsonObject())) && blockUUID==null||appUUID==null } -> IF { -> throw new JsonParseException("blockUUID is not a string",)@!(!(json.isJsonObject())) && !(blockUUID.isJsonPrimitive())||!((JsonPrimitive) blockUUID.isString()) && !(blockUUID==null||appUUID==null) } -> IF { -> throw new JsonParseException("appID is not a string",)@!(!(json.isJsonObject())) && !(!(blockUUID.isJsonPrimitive())||!((JsonPrimitive) blockUUID.isString())) && !(appUUID.isJsonPrimitive())||!((JsonPrimitive) appUUID.isString()) && !(blockUUID==null||appUUID==null) } -> applicationBlockID=new ApplicationBlockID(UUID.fromString(blockUUID.getAsString(),),UUID.fromString(appUUID.getAsString(),),)@!(!(json.isJsonObject())) && !(!(blockUUID.isJsonPrimitive())||!((JsonPrimitive) blockUUID.isString())) && !(!(appUUID.isJsonPrimitive())||!((JsonPrimitive) appUUID.isString())) && !(blockUUID==null||appUUID==null) -> LOGGER.exit(applicationBlockID,)@!(!(json.isJsonObject())) && !(!(blockUUID.isJsonPrimitive())||!((JsonPrimitive) blockUUID.isString())) && !(!(appUUID.isJsonPrimitive())||!((JsonPrimitive) appUUID.isString())) && !(blockUUID==null||appUUID==null) } CATCH(JsonParseException) {}
results[https://github.com/animoto/animoto_api_client_java/blob/9414491251c0cead920e4d4066aabe507d09b57d/src/main/java/com/animoto/api/gson/deserializer/PostrollDeserializer.java][deserialize][1] = -> TRY {  -> IF { -> throw new JsonParseException("Postroll value is not expected type (Object)",)@!(json.isJsonObject()) } -> jsonTemplate=jsonPostroll.get("template",)@!(!(json.isJsonObject())) -> IF { -> throw new JsonParseException("Postroll value \"template\" is not expected type (String)",)@!(!(json.isJsonObject())) && jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString()) } -> template=jsonTemplate.getAsString()@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) -> IF { -> postroll=new CustomFootagePostroll()@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && template.equals("custom_footage",) -> jsonSourceUrl=jsonPostroll.get("source_url",)@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && template.equals("custom_footage",) -> IF { -> throw new JsonParseException("Postroll value \"source_url\" is not expected type (String)",)@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && jsonSourceUrl==null||!(jsonSourceUrl.isJsonPrimitive()&&jsonSourceUrl.getAsJsonPrimitive().isString()) && template.equals("custom_footage",) } -> postroll.setSourceUrl(jsonSourceUrl.getAsString(),)@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && !(jsonSourceUrl==null||!(jsonSourceUrl.isJsonPrimitive()&&jsonSourceUrl.getAsJsonPrimitive().isString())) && template.equals("custom_footage",) -> return postroll@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && !(jsonSourceUrl==null||!(jsonSourceUrl.isJsonPrimitive()&&jsonSourceUrl.getAsJsonPrimitive().isString())) && template.equals("custom_footage",) } ELSE { -> postroll=new BasicPostroll()@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && template.equals("custom_footage",) -> postroll.setTemplate(template,)@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && !(template.equals("custom_footage",)) -> return postroll@!(jsonTemplate==null||!(jsonTemplate.isJsonPrimitive()&&jsonTemplate.getAsJsonPrimitive().isString())) && !(!(json.isJsonObject())) && !(template.equals("custom_footage",)) } } CATCH(JsonParseException) {}
results[https://github.com/DesignAndDeploy/dnd/blob/38b685ab1194df7428d790c7046877f9de57d6bf/DND/src/edu/teco/dnd/module/messages/infoReq/ApplicationBlockIDAdapter.java][deserialize][1] = -> TRY {  -> IF { -> throw new JsonParseException("not a JSON object",)@!(json.isJsonObject()) } -> blockID=obj.get("blockID",)@!(!(json.isJsonObject())) -> applicationID=obj.get("applicationID",)@!(!(json.isJsonObject())) -> IF { -> throw new JsonParseException("blockID/applicationID missing",)@!(!(json.isJsonObject())) && blockID==null||applicationID==null } -> IF { -> throw new JsonParseException("blockID is not a string",)@!(!(json.isJsonObject())) && !(blockID==null||applicationID==null) && !(blockID.isJsonPrimitive())||!((JsonPrimitive) blockID.isString()) } -> IF { -> throw new JsonParseException("applicationID is not a string",)@!(!(blockID.isJsonPrimitive())||!((JsonPrimitive) blockID.isString())) && !(applicationID.isJsonPrimitive())||!((JsonPrimitive) applicationID.isString()) && !(!(json.isJsonObject())) && !(blockID==null||applicationID==null) } -> applicationBlockID=new ApplicationBlockID(new FunctionBlockID(UUID.fromString(blockID.getAsString(),),),new ApplicationID(UUID.fromString(applicationID.getAsString(),),),)@!(!(blockID.isJsonPrimitive())||!((JsonPrimitive) blockID.isString())) && !(!(json.isJsonObject())) && !(blockID==null||applicationID==null) && !(!(applicationID.isJsonPrimitive())||!((JsonPrimitive) applicationID.isString())) -> LOGGER.exit(applicationBlockID,)@!(!(blockID.isJsonPrimitive())||!((JsonPrimitive) blockID.isString())) && !(!(json.isJsonObject())) && !(blockID==null||applicationID==null) && !(!(applicationID.isJsonPrimitive())||!((JsonPrimitive) applicationID.isString())) } CATCH(JsonParseException) {}
results[https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/blob/3b52ce82019b1e2c917c91d4d01b153039ccf297/openid-connect-server/src/main/java/org/mitre/openid/connect/web/ClientAPI.java][deserialize][1] = -> TRY {  -> IF { -> return JWEEncryptionMethodEmbed.getForAlgorithmName(json.getAsString(),)@json.isJsonPrimitive() } ELSE { -> return null@!(json.isJsonPrimitive()) } } CATCH(JsonParseException) {}
results[https://github.com/USGS-CIDA/coastal-hazards/blob/8717f0438edc324d490c3adc7125c2be7f29a42c/coastal-hazards-portal/src/main/java/gov/usgs/cida/coastalhazards/gson/adapter/ItemAdapter.java][deserialize][1] = -> TRY {  -> IF { -> IF { -> IF { -> LOOP { -> childItem=iterator.next()@!(children instanceof JsonArray) && !(defaultObj instanceof Item) && iterator.hasNext() && !(json instanceof JsonObject) -> TRY { -> IF { -> childItemObj=new Item()@!(children instanceof JsonArray) && !(defaultObj instanceof Item) && !(iterator.hasNext()) && !(json instanceof JsonObject) && childItem.isJsonPrimitive() -> childItemObj.setId(childItem.getAsString(),)@!(children instanceof JsonArray) && !(defaultObj instanceof Item) && !(iterator.hasNext()) && !(json instanceof JsonObject) && childItem.isJsonPrimitive() } ELSE { -> IF { -> childItemObj=(Item) context.deserialize(childItem,Item.class,)@!(childItem.isJsonPrimitive()) && childItem.isJsonObject() && !(children instanceof JsonArray) && !(defaultObj instanceof Item) && !(iterator.hasNext()) && !(json instanceof JsonObject) } ELSE { -> throw new JsonParseException("Need a list of primatives or objects",)@!(childItem.isJsonPrimitive()) && json instanceof JsonObject && iterator.hasNext() && !(childItem.isJsonObject()) && children instanceof JsonArray && defaultObj instanceof Item } } -> childrenList.add(childItemObj,)@!(children instanceof JsonArray) && !(defaultObj instanceof Item) && !(iterator.hasNext()) && !(json instanceof JsonObject) && childItem.isJsonPrimitive() } CATCH(JsonParseException) { -> log.debug("Problem deserializing children",ex,)@!(children instanceof JsonArray) && !(defaultObj instanceof Item) && !(iterator.hasNext()) && !(json instanceof JsonObject) } } } } } } CATCH(JsonParseException) {}
results[https://github.com/dlazerka/em/blob/042defee67dcf8f78b34d0990d2644921b093ff6/src/com/epam/memegen/MemeDao.java][create][1] = -> TRY {  -> TRY { -> topJE=jsonObject.get("top",)@ -> centerJE=jsonObject.get("center",)@ -> bottomJE=jsonObject.get("bottom",)@ -> blobKeyJE=jsonObject.get("blobKey",)@ -> IF { -> top=topJE.getAsString()@topJE!=null&&topJE.isJsonPrimitive() } -> IF { -> center=centerJE.getAsString()@centerJE!=null&&centerJE.isJsonPrimitive() } -> IF { -> bottom=bottomJE.getAsString()@bottomJE!=null&&bottomJE.isJsonPrimitive() } -> IF { -> blobKey=blobKeyJE.getAsString()@blobKeyJE!=null&&blobKeyJE.isJsonPrimitive() } } CATCH(JsonParseException) { -> throw new IllegalArgumentException(e,)@ } CATCH(ClassCastException) { -> throw new IllegalArgumentException(e,)@ } CATCH(IllegalStateException) { -> throw new IllegalArgumentException(e,)@ } CATCH(UnsupportedOperationException) { -> throw new IOException(e,)@ } -> IF { -> throw new IllegalArgumentException("No 'blobKey' param",)@blobKey==null } -> return create(blobKey,top,center,bottom,)@!(blobKey==null) } CATCH(IOException) {}
