results[https://github.com/murygin/opensourceisms/blob/3fb9db98ba694e6b98a337a0bdebb242f9d7f027/sernet.gs.ui.rcp.main/src/sernet/gs/ui/rcp/main/security/DelegatingKeyStore.java][engineLoad][1] = -> TRY {  -> delegate.load(stream,password,)@ } CATCH(IOException,NoSuchAlgorithmException,CertificateException) {}
results[https://github.com/TheCollective/android_frameworks_base/blob/c02d1a855a882e77ef855f36eb9eda40eb35b214/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_Aliases_Encrypted_Success][5] = -> TRY {  -> mKeyStore.load(null,null,)@ } CATCH(Exception) {}
results[https://github.com/pacerom/libcore/blob/21643b11ea824e0e4e65a5437a57abed2052ff7a/luni/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore3Test.java][test_setKeyEntry_null][108] = -> TRY {  -> mockKeyStore.load(null,null,)@ -> mockKeyStore.setKeyEntry(null,null,null,null,)@ } CATCH(Exception) {}
results[https://github.com/TheCollective/android_frameworks_base/blob/c02d1a855a882e77ef855f36eb9eda40eb35b214/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_GetCreationDate_CAEntry_Encrypted_Success][11] = -> TRY {  -> mKeyStore.load(null,null,)@ -> actual=mKeyStore.getCreationDate(TEST_ALIAS_1,)@ } CATCH(Exception) {}
results[https://github.com/bomm/thera-pi/blob/be4e017e09ec946d1df0faf475d260a5b0d8a39c/Nebraska/src/nebraska/BCStatics3.java][erzeugeLeerenKeyStore][2] = -> TRY {  -> store=KeyStore.getInstance("BCPKCS12","BC",)@ -> store.load(null,null,)@ } CATCH(Exception) {}
results[https://github.com/pacerom/libcore/blob/e595037cf49109e9e20b47e6e191eda45e414008/support/src/test/java/java/security/TestKeyStore.java][createKeyStore][46] = -> TRY {  -> keyStore=KeyStore.getInstance("BKS",)@ -> keyStore.load(null,null,)@ } CATCH(Exception) {}
results[https://github.com/TheCollective/android_frameworks_base/blob/c02d1a855a882e77ef855f36eb9eda40eb35b214/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_GetKey_NoPassword_Encrypted_Success][6] = -> TRY {  -> mKeyStore.load(null,null,)@ -> key=mKeyStore.getKey(TEST_ALIAS_1,null,)@ } CATCH(Exception) {}
results[https://github.com/guoliqiang/coding/blob/4e657c23e9c385981bff6bc45f8d04cfa01daa72/third_part/hadoop_src/hadoop-2.0.5-alpha-src/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/ssl/KeyStoreTestUtil.java][createEmptyKeyStore][10] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(null,null,)@ } CATCH(GeneralSecurityException,IOException) {}
results[https://github.com/TheCollective/android_frameworks_base/blob/c02d1a855a882e77ef855f36eb9eda40eb35b214/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_GetEntry_NullParams_Unencrypted_Success][7] = -> TRY {  -> mKeyStore.load(null,null,)@ -> entry=mKeyStore.getEntry(TEST_ALIAS_1,null,)@ } CATCH(Exception) {}
results[https://github.com/TheCollective/android_frameworks_base/blob/c02d1a855a882e77ef855f36eb9eda40eb35b214/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_DeleteEntry_EmptyStore_Encrypted_Success][2] = -> TRY {  -> mKeyStore.load(null,null,)@ -> mKeyStore.deleteEntry(TEST_ALIAS_1,)@ } CATCH(Exception) {}
results[https://github.com/iGio90/android_frameworks_base/blob/c2c778533288efb45107521eee9fcab82892fc9e/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_SetCertificate_CAExists_Overwrite_Success][5] = -> TRY {  -> mKeyStore.load(null,null,)@ -> mKeyStore.setCertificateEntry(TEST_ALIAS_1,cert,)@ } CATCH(Exception) {}
results[https://github.com/kwart/jsignpdf/blob/50db3e5186d4dbaffccb3af2dc122f3315f4e213/src/net/sf/jsignpdf/utils/KeyStoreUtils.java][createKeyStore][3] = -> TRY {  -> newKeyStore=KeyStore.getInstance("JKS",)@ -> newKeyStore.load(null,null,)@ } CATCH(KeyStoreException,NoSuchAlgorithmException,CertificateException,IOException) {}
results[https://github.com/OWASP/OWASP-Proxy/blob/ce13ef1cecad8c3d798955ff407f94072a5b8cff/src/main/java/org/owasp/proxy/ssl/KeystoreUtils.java][getPKCS11Keystore][1] = -> TRY {  -> ks=KeyStore.getInstance("PKCS11",)@!(!(library.exists())) -> ks.load(null,password,)@!(!(library.exists())) } CATCH(ClassNotFoundException,NoSuchMethodException,InvocationTargetException,IllegalAccessException,InstantiationException,GeneralSecurityException,IOException) {}
results[https://github.com/ifedorenko/rt.equinox.framework/blob/a3cec579d3e0dcc8b14fafce44e9a4f0e517f5b6/bundles/org.eclipse.osgi/security/src/org/eclipse/osgi/internal/service/security/KeyStoreTrustEngine.java][loadStore][1] = -> TRY {  -> store.load(is,getPassword(),)@ } CATCH(IOException,GeneralSecurityException) {}
results[https://github.com/apache/harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/KeyStore3Test.java][test_store_null][2] = -> TRY {  -> mockKeyStore.load(null,null,)@ -> mockKeyStore.store(null,null,)@ } CATCH(Exception) {}
results[https://github.com/apache/wss4j/blob/4144643cb68d85c08fcaabd2ffaf27c0d5255992/streaming-ws-security/src/main/java/org/apache/ws/security/stax/wss/ext/WSSSecurityProperties.java][loadDecryptionKeystore][16] = -> TRY {  -> keyStore=KeyStore.getInstance("jks",)@ -> keyStore.load(url.openStream(),keyStorePassword,)@ } CATCH(Exception) {}
results[https://github.com/TheCollective/android_frameworks_base/blob/c02d1a855a882e77ef855f36eb9eda40eb35b214/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_GetCertificateAlias_CAEntry_Encrypted_Success][15] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertEquals("Stored certificate alias should be found",TEST_ALIAS_1,mKeyStore.getCertificateAlias(actual,),)@ } CATCH(Exception) {}
results[https://github.com/davros-/frameworks_base/blob/da9165e10f476bc46f990e1d63a0f63dcbadbc26/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_GetEntry_Nonexistent_NullParams_Failure][6] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertNull("A non-existent entry should return null",mKeyStore.getEntry(TEST_ALIAS_1,null,),)@ } CATCH(Exception) {}
results[https://github.com/iGio90/android_frameworks_base/blob/c2c778533288efb45107521eee9fcab82892fc9e/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_ContainsAliases_CAOnly_Success][5] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertTrue("Should contain added CA certificate",mKeyStore.containsAlias(TEST_ALIAS_2,),)@ } CATCH(Exception) {}
results[https://github.com/TheCollective/android_frameworks_base/blob/c02d1a855a882e77ef855f36eb9eda40eb35b214/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_GetCertificateChain_NonExist_Encrypted_Failure][5] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertNull("Stored certificate alias should not be found",mKeyStore.getCertificateChain(TEST_ALIAS_1,),)@ } CATCH(Exception) {}
results[https://github.com/codefireX/platform_libcore/blob/f0c85fa16995e1c715c679aea704392a162f493a/support/src/test/java/libcore/java/security/TestKeyStore.java][createKeyStore][38] = -> TRY { -> keyStore=KeyStore.getInstance(StandardNames.KEY_STORE_ALGORITHM,)@ -> keyStore.load(null,null,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/DealerDotCom/grinder/blob/66bd72e6919b7cd1ed9b9a4292d9c87f3defcc75/source/src/main/java/net/grinder/util/InsecureSSLContextFactory.java][<init>][14] = -> TRY {  -> keyStore=KeyStore.getInstance(keyStoreType,)@ -> keyStore.load(keyStoreStream,keyStorePassword,)@ -> keyManagerFactory.init(keyStore,keyStorePassword,)@ } CATCH(GeneralSecurityException,IOException) {}
results[https://github.com/NEXUS-EVO/frameworks_base/blob/6849ad8fbb03c21d6aa61e1bd53fe7b449cd6adb/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_IsCertificateEntry_NonExist_Failure][11] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertFalse("Should return false for non-existent entry",mKeyStore.isCertificateEntry(TEST_ALIAS_1,),)@ } CATCH(Exception) {}
results[https://github.com/jgzornoza/SistemaVotacion/blob/96032edf244214c4a0448d2a97145571422e9e81/VotingSystemLibrary/src/main/java/org/votingsystem/signature/util/KeyStoreUtil.java][getKeyStoreFromBytes][1] = -> TRY {  -> store=KeyStore.getInstance("JKS",)@ -> store.load(new ByteArrayInputStream(keyStore,),password,)@ } CATCH(Exception) {}
results[https://github.com/Blakez/android_frameworks_base/blob/11714fcbb86c041579b3f2c64bc7e27ed7fc2705/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_GetCertificateAlias_NonExist_Empty_Failure][10] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertNull("Stored certificate alias should not be found",mKeyStore.getCertificateAlias(actual,),)@ } CATCH(Exception) {}
results[https://github.com/elitak/peertrust/blob/0cecdad23e28e1e2a35e3ea5c802789ce2401c05/src/org/peertrust/security/credentials/x509/X509CredentialStore.java][createEmptyStore][4] = -> TRY {  -> _ks=KeyStore.getInstance("JKS",)@ -> _ks.load(null,_storePassword.toCharArray(),)@ } CATCH(KeyStoreException,NoSuchAlgorithmException,CertificateException,IOException) {}
results[https://github.com/OWASP/OWASP-Proxy/blob/9decfc431107c4bd50f5fd0f4f262b8582066b99/src/main/java/org/owasp/proxy/util/KeystoreUtils.java][loadFromKeyStore][2] = -> TRY {  -> ks=KeyStore.getInstance(type,)@ -> ks.load(in,password,)@ -> return getKeyManagerForAlias(ks,alias,password,)@ } CATCH(GeneralSecurityException,IOException) {}
results[https://github.com/Amab/SWADroid/blob/0fb374a71da453b232a9b54363e772535b3daba1/SWADroid/src/es/ugr/swad/swadroid/ssl/SecureConnection.java][trustTerena][1] = -> TRY {  -> keyStore=KeyStore.getInstance(keyStoreType,)@ -> keyStore.load(null,null,)@ -> keyStore.setCertificateEntry("Terena",terenaCert,)@ } CATCH(KeyManagementException,UnrecoverableKeyException,NoSuchAlgorithmException,KeyStoreException,CertificateException,IOException) {}
results[https://github.com/TheCollective/android_frameworks_base/blob/c02d1a855a882e77ef855f36eb9eda40eb35b214/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_GetKey_NonExistent_Encrypted_Failure][10] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertNull("A non-existent entry should return null",mKeyStore.getKey(TEST_ALIAS_1,null,),)@ } CATCH(Exception) {}
results[https://github.com/NEXUS-EVO/frameworks_base/blob/6849ad8fbb03c21d6aa61e1bd53fe7b449cd6adb/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_SetEntry_PrivateKeyEntry_Success][6] = -> TRY {  -> mKeyStore.load(null,null,)@ -> mKeyStore.setEntry(TEST_ALIAS_1,expected,null,)@ -> actualEntry=mKeyStore.getEntry(TEST_ALIAS_1,null,)@ } CATCH(Exception) {}
results[https://github.com/davros-/frameworks_base/blob/da9165e10f476bc46f990e1d63a0f63dcbadbc26/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_SetKeyEntry_Success][5] = -> TRY {  -> mKeyStore.load(null,null,)@ -> mKeyStore.setKeyEntry(TEST_ALIAS_1,privKey,null,chain,)@ -> actualEntry=mKeyStore.getEntry(TEST_ALIAS_1,null,)@ } CATCH(Exception) {}
results[https://github.com/davros-/frameworks_base/blob/da9165e10f476bc46f990e1d63a0f63dcbadbc26/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_GetCertificate_NonExist_Failure][5] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertNull("Certificate should not exist in keystore",mKeyStore.getCertificate(TEST_ALIAS_1,),)@ } CATCH(Exception) {}
results[https://github.com/wso2/commons/blob/6adfc623c63fd98791a12e57612156db7d00b67e/opensaml-1.1.406/tests/org/opensaml/POSTProfileTest.java][setUp][4] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(new FileInputStream(path,),password,)@ } CATCH(Exception) {}
results[https://github.com/TheCollective/android_frameworks_base/blob/c02d1a855a882e77ef855f36eb9eda40eb35b214/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_IsKeyEntry_NonExist_Encrypted_Failure][10] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertFalse("Should return false for non-existent entry",mKeyStore.isKeyEntry(TEST_ALIAS_1,),)@ } CATCH(Exception) {}
results[https://github.com/davros-/frameworks_base/blob/da9165e10f476bc46f990e1d63a0f63dcbadbc26/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_SetCertificate_CA_Success][5] = -> TRY {  -> mKeyStore.load(null,null,)@ -> mKeyStore.setCertificateEntry(TEST_ALIAS_1,actual,)@ -> retrieved=mKeyStore.getCertificate(TEST_ALIAS_1,)@ } CATCH(Exception) {}
results[https://github.com/davros-/frameworks_base/blob/da9165e10f476bc46f990e1d63a0f63dcbadbc26/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_IsCertificateEntry_CA_Success][5] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertTrue("Should return true for CA certificate",mKeyStore.isCertificateEntry(TEST_ALIAS_1,),)@ } CATCH(Exception) {}
results[https://github.com/Blakez/android_frameworks_base/blob/11714fcbb86c041579b3f2c64bc7e27ed7fc2705/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_IsKeyEntry_PrivateKey_Success][5] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertTrue("Should return true for PrivateKeyEntry",mKeyStore.isKeyEntry(TEST_ALIAS_1,),)@ } CATCH(Exception) {}
results[https://github.com/davros-/frameworks_base/blob/da9165e10f476bc46f990e1d63a0f63dcbadbc26/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_ContainsAliases_NonExistent_Failure][5] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertFalse("Should contain added CA certificate",mKeyStore.containsAlias(TEST_ALIAS_1,),)@ } CATCH(Exception) {}
results[https://github.com/Juliens/red5/blob/ff751fec9b8f294e97546ccdd93d9c780b3af763/src/org/red5/server/net/rtmps/RTMPSMinaIoHandler.java][getKeyStore][5] = -> TRY {  -> ks=KeyStore.getInstance(keyStoreType,)@ -> ks.load(new ByteArrayInputStream(keystore,),password,)@ } CATCH(NoSuchAlgorithmException,CertificateException,IOException,KeyStoreException) {}
results[https://github.com/apache/harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/KeyManagerImplTest.java][testKeyManagerImpl1][2] = -> TRY {  -> ks=KeyStore.getInstance("BKS",)@ -> ks.load(null,null,)@ -> km=new KeyManagerImpl(ks, new char[],)@ } CATCH(Exception) {}
results[https://github.com/subgraph/Vega/blob/3a0b4a1b7e560af789bba903c597c834e323f432/platform/com.subgraph.vega.http.proxy/src/com/subgraph/vega/internal/http/proxy/ssl/CertificateStore.java][initKeyStore][1] = -> TRY {  -> IF { -> keyStore.load(null,password,)@ } } CATCH(GeneralSecurityException,IOException) {}
results[https://github.com/bladesilent/Harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/TrustManagerImplTest.java][testTrustManagerImpl_1][2] = -> TRY {  -> ks=KeyStore.getInstance("BKS",)@ -> ks.load(null,null,)@ -> tm=new TrustManagerImpl(ks,)@ } CATCH(Exception) {}
results[https://github.com/apache/harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/x-net/src/test/impl/java/org/apache/harmony/xnet/tests/provider/jsse/KeyManagerFactoryImplTest.java][testEngineGetKeyManagers][2] = -> TRY {  -> ks=KeyStore.getInstance("BKS",)@ -> ks.load(null,null,)@ -> kmf.engineInit(ks,null,)@ } CATCH(Exception) {}
results[https://github.com/fathomdb/fathomdb-shared/blob/bd8c9c55e1b08d0f7530e6e7e7cdafdbdde933a2/fathomdb-crypto/src/main/java/com/fathomdb/crypto/KeyStoreUtils.java][load][1] = -> TRY {  -> keystore=create()@ -> keystore.load(is,keystoreSecret.toCharArray(),)@ } CATCH(KeyStoreException,IOException,NoSuchAlgorithmException,CertificateException) {}
results[https://github.com/apache/harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/x-net/src/test/impl/java/org/apache/harmony/xnet/tests/provider/jsse/TrustManagerFactoryImplTest.java][testEngineGetTrustManagers][2] = -> TRY {  -> ks=KeyStore.getInstance("BKS",)@ -> ks.load(null,null,)@ -> tmf.engineInit(ks,)@ } CATCH(Exception) {}
results[https://github.com/TheCollective/android_frameworks_base/blob/c02d1a855a882e77ef855f36eb9eda40eb35b214/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_DeleteEntry_Encrypted_Success][4] = -> TRY {  -> mKeyStore.load(null,null,)@ -> mKeyStore.deleteEntry(TEST_ALIAS_1,)@ -> mKeyStore.deleteEntry(TEST_ALIAS_3,)@ -> mKeyStore.deleteEntry(TEST_ALIAS_2,)@ } CATCH(Exception) {}
results[https://github.com/Appverse/appverse-mobile/blob/50e132b68b1d84c4d1c317c136f2869cec0d4c1f/appverse-core/src/java/com/gft/unity/core/system/server/net/SSLServerSocketEndPoint.java][loadKeystoreFromFile][1] = -> TRY {  -> keystore=KeyStore.getInstance("JKS",)@ -> stream=new FileInputStream(file,)@ -> keystore.load(stream,password,)@ -> stream.close()@ } CATCH(IOException,GeneralSecurityException) {}
results[https://github.com/TaintDroid/android_platform_libcore/blob/e595037cf49109e9e20b47e6e191eda45e414008/support/src/test/java/java/security/TestKeyStore.java][createClient][36] = -> TRY { -> clientKeyStore=clientKeyStore=KeyStore.getInstance("BKS",)@ -> clientKeyStore.load(null,null,)@ -> copySelfSignedCertificates(clientKeyStore,caKeyStore,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/brachior/platform_dalvik/blob/f6c387128427e121477c1b32ad35cdcaa5101ba3/dx/tests/060-dex-call-static/Zorch.java][createKeyStore][1] = -> TRY {  -> ks=KeyStore.getInstance("BKS",)@ -> ks.load(null,null,)@ -> ks.setKeyEntry(privateAlias,privateKey,keyStorePassword,x509cc,)@ -> ks.setCertificateEntry(publicAlias,x509c,)@ } CATCH(Exception) {}
results[https://github.com/Blakez/android_frameworks_base/blob/11714fcbb86c041579b3f2c64bc7e27ed7fc2705/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_GetCertificateChain_SingleLength_Success][4] = -> TRY {  -> mKeyStore.load(null,null,)@ -> actual=mKeyStore.getCertificateChain(TEST_ALIAS_1,)@ -> assertNull("Stored certificate alias should not be found",mKeyStore.getCertificateChain(TEST_ALIAS_2,),)@ } CATCH(Exception) {}
results[https://github.com/ursatong/GuardroidROM/blob/01a1c6fbcaf758ea6d9cf6296618bc6092733b36/libcore/luni/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore3Test.java][test_setCertificateEntry_null][52] = -> TRY {  -> mockKeyStore.load(null,null,)@ -> mockKeyStore.setCertificateEntry(null,null,)@ -> mockKeyStore.setCertificateEntry(null,certificate,)@ -> mockKeyStore.setCertificateEntry("Alias",null,)@ } CATCH(Exception) {}
results[https://github.com/letama/platform_libcore/blob/21643b11ea824e0e4e65a5437a57abed2052ff7a/luni/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore3Test.java][test_setKeyEntry_key_is_public][48] = -> TRY {  -> mockKeyStore.load(null,null,)@ -> mockKeyStore.setKeyEntry("Alias1",key,null,null,)@ -> mockKeyStore.setKeyEntry("Alias2",key,null, new Certificate[],)@ -> mockKeyStore.setKeyEntry("Alias3",key,null, new Certificate[],)@ } CATCH(Exception) {}
results[https://github.com/rtyley/spongycastle/blob/9a2b105b6c8c8cbfeea077e0552e04b3b476f1e5/prov/src/test/java/org/spongycastle/jce/provider/test/KeyStoreTest.java][checkStore][16] = -> TRY {  -> ks.load(new ByteArrayInputStream(data,),oldStorePass,)@ -> key=ks.getKey("android",oldStorePass,)@ -> ks.store(bOut,oldStorePass,)@ } CATCH(Exception) {}
results[https://github.com/timduru/platform-libcore/blob/34f9c31ad296bc67f0fb5e6eff279e03027c60c5/luni/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java][test_deleteEmptyEntryBogusAlias][66] = -> TRY {  -> keyTest=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> keyTest.load(null,null,)@ -> keyTest.deleteEntry("bogus",)@ } CATCH(Exception) {}
results[https://github.com/dotCMS/dotCMS/blob/2ca65e2d8f3180e615efc7e46e1175cb91226918/src/com/dotcms/publisher/util/TrustFactory.java][<init>][3] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(new FileInputStream(trustStore,),password,)@ -> tmf.init(ks,)@ } CATCH(Exception) {}
results[https://github.com/davros-/frameworks_base/blob/da9165e10f476bc46f990e1d63a0f63dcbadbc26/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_DeleteEntry_EmptyStore_Failure][6] = -> TRY {  -> mKeyStore.load(null,null,)@ -> TRY { -> mKeyStore.deleteEntry(TEST_ALIAS_1,)@ } } CATCH(Exception) {}
results[https://github.com/loopj/android-async-http/blob/562e118fdc5fdfd2cc40409174ddae0a9a4884ef/library/src/main/java/com/loopj/android/http/MySSLSocketFactory.java][getKeystoreOfCA][1] = -> TRY { -> keyStore=KeyStore.getInstance(keyStoreType,)@ -> keyStore.load(null,null,)@ -> keyStore.setCertificateEntry("ca",ca,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/davros-/frameworks_base/blob/da9165e10f476bc46f990e1d63a0f63dcbadbc26/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_Store_LoadStoreParam_Failure][5] = -> TRY {  -> mKeyStore.load(null,null,)@ -> TRY { -> mKeyStore.store(null,)@ } } CATCH(Exception) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/ba6e9e97c84948700e301eb25dc16e8a36b52524/test/sun/security/mscapi/ShortRSAKeyWithinTLS.java][doClientSide][2] = -> TRY {  -> ks=KeyStore.getInstance("Windows-MY","SunMSCAPI",)@ -> ks.load(null,null,)@ -> kmf.init(ks,null,)@ -> tmf.init(ks,)@ } CATCH(Exception) {}
results[https://github.com/apache/activemq/blob/8bf987b134bd827b93ed8157b323bc3bd2d8a82e/activemq-core/src/test/java/org/apache/activemq/transport/tcp/SslBrokerServiceTest.java][getTrustManager][6] = -> TRY {  -> trustedCertStore=KeyStore.getInstance(SslTransportBrokerTest.KEYSTORE_TYPE,)@ -> trustedCertStore.load(new FileInputStream(SslTransportBrokerTest.TRUST_KEYSTORE,),null,)@ -> tmf.init(trustedCertStore,)@ } CATCH(Exception) {}
results[https://github.com/Tommassino/HnH_BotAPI/blob/1ee6778679b8d8976c5b3efd8f55028135efc7cc/src/haven/SslHelper.java][<init>][4] = -> TRY { -> trusted=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trusted.load(null,null,)@ } CATCH(Exception) { -> throw new Error(e,)@ }
results[https://github.com/iit-Demokritos/PServer/blob/12480557bc6b6bb9d4e47093c794db1bc49e003a/PServer/PersServer/src/pserver/logic/WServer.java][getSSLServerSocket][6] = -> TRY {  -> keystore=KeyStore.getInstance("JKS",)@ -> keystore.load(new FileInputStream(KEYSTORE,),KEYSTOREPW,)@ -> kmf.init(keystore,KEYPW,)@ } CATCH(Exception) {}
results[https://github.com/NLeSC/vbrowser/blob/ae3034365e22f9988d1f6e385510d64d25ff5f22/source/nl.nlesc.vlet.vrs.core/src/nl/nlesc/vlet/net/ssl/SSLContextManager.java][newKeyStore][2] = -> TRY {  -> keyStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> keyStore.load(null,passwd.toCharArray(),)@ } CATCH(KeyStoreException,NoSuchAlgorithmException,CertificateException,IOException) {}
results[https://github.com/snowfix/android_dalvik/blob/eeeed1aa9d93e06fe4597aaefde906dbc4b2648b/libcore/x-net/src/test/java/tests/api/javax/net/ssl/TrustManagerFactory1Test.java][test_initLjavax_net_ssl_ManagerFactoryParameters][13] = -> TRY { -> kStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> kStore.load(null,null,)@ } CATCH(Exception) { -> fail("Unexpected exception for configuration: "+e,)@ }
results[https://github.com/hortonworks/knox/blob/c8b3f3b16f60151f12ce0de8f8d3632e1434a60a/src/test/java/org/apache/hadoop/gateway/jetty/JettyHttpsTest.java][loadKeyStore][3] = -> TRY {  -> keyStore=KeyStore.getInstance(type,)@ -> keystoreInput=new FileInputStream(path,)@ -> keyStore.load(keystoreInput,password.toCharArray(),)@ } CATCH(IOException,NoSuchAlgorithmException,CertificateException,KeyStoreException) {}
results[https://github.com/NCIP/cagrid2/blob/98afa0e95b32173f05d905d24fba8d570e8438c2/cagrid-dorian/cagrid-dorian-service-tools/src/main/java/org/cagrid/dorian/service/tools/CreateTrustStore.java][execute][1] = -> TRY {  -> trustStore=KeyStore.getInstance("JKS",)@ -> trustStore.load(null,null,)@ -> trustStore.setCertificateEntry(ALIAS,certificate,)@ -> trustStore.store(truststoreStream,STORE_PASSWORD,)@ } CATCH(Exception) {}
results[https://github.com/liangqi/xqwizard/blob/2636959b41756eea61c573350a9e787145a9e22d/XQWAjax/src/xqwajax/util/cert/CertKey.java][toKeyStore][3] = -> TRY {  -> keyStore=KeyStore.getInstance(type,)@ -> keyStore.load(null,null,)@ -> keyStore.setKeyEntry("",key,password.toCharArray(),certChain,)@ } CATCH(Exception) {}
results[https://github.com/claudius108/expath-libs/blob/e97cda36eb28417111c7e72a68398d4963a095fc/crypto/src/main/java/org/expath/crypto/secureStorage/CreateSecureStore.java][create][2] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> passwordCharArray=password.toCharArray()@ -> ks.load(null,passwordCharArray,)@ -> ks.store(baos,passwordCharArray,)@ } CATCH(NoSuchAlgorithmException,CertificateException,IOException,KeyStoreException) {}
results[https://github.com/songzhiyong/lib_song/blob/9749c7c2891b86b47ee0199b4449bc48cb1d4370/src/com/loopj/android/http/MySSLSocketFactory.java][getKeystoreOfCA][2] = -> TRY { -> keyStore=KeyStore.getInstance(keyStoreType,)@ -> keyStore.load(null,null,)@ -> keyStore.setCertificateEntry("ca",(java.security.cert.Certificate) ca,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/splunk/splunk-shuttl/blob/e078a7d7c4ad58f98c1d0053bdfc914ff0763389/src/java/com/splunk/ShuttlPortEntity.java][getTrustStore][2] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/kencochrane/raven-java/blob/42c385b2c5a78e3a10e7f28188e6d4ad0c130b29/raven-getsentry/src/main/java/net/kencochrane/raven/getsentry/connection/GetSentryHttpsConnection.java][getStartcomSslFactory][1] = -> TRY {  -> ks=KeyStore.getInstance("jks",)@ -> ks.load(null,null,)@ -> ks.setCertificateEntry("ca",ca,)@ -> tmf.init(ks,)@ } CATCH(Exception) {}
results[https://github.com/robfletcher/betamax/blob/867e7f92f3192ec04e712b973c2c08fde00408af/betamax-proxy/src/main/groovy/co/freeside/betamax/proxy/ssl/DummySSLSocketFactory.java][getInstance][1] = -> TRY {  -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> return new DummySSLSocketFactory(trustStore,)@ } CATCH(GeneralSecurityException,IOException) {}
results[https://github.com/OWASP/OWASP-Proxy/blob/ce13ef1cecad8c3d798955ff407f94072a5b8cff/src/main/java/org/owasp/proxy/ssl/KeystoreUtils.java][saveToKeyStore][2] = -> TRY {  -> ks=KeyStore.getInstance(type,)@ -> ks.load(null,password,)@ -> addToKeyStore(ks,km,alias,password,)@ -> ks.store(out,password,)@ } CATCH(GeneralSecurityException,IOException) {}
results[https://github.com/OWASP/OWASP-Proxy/blob/ce13ef1cecad8c3d798955ff407f94072a5b8cff/src/test/java/org/owasp/proxy/ajp/AJPClientTest.java][loadCertificate][2] = -> TRY {  -> ks=KeyStore.getInstance("PKCS12",)@ -> ks.load(in,password,)@ -> aliases=ks.aliases()@ -> return (X509Certificate) ks.getCertificate(alias,)@ } CATCH(GeneralSecurityException,IOException) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/ba6e9e97c84948700e301eb25dc16e8a36b52524/test/sun/security/ssl/sanity/interop/CipherTest.java][readKeyStore][7] = -> TRY {  -> in=new FileInputStream(file,)@ -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(in,passwd,)@ -> in.close()@ } CATCH(Exception) {}
results[https://github.com/apache/santuario-java/blob/0157345649d438731e8653ec4512afeab3e38bc5/src/test/java/org/apache/xml/security/test/signature/ECDSASignatureTest.java][testOne][2] = -> TRY {  -> keyStore=KeyStore.getInstance("JKS",)@ -> keyStore.load(new java.io.FileInputStream(ECDSA_JKS,),ECDSA_JKS_PASSWORD.toCharArray(),)@ } CATCH(Exception) {}
results[https://github.com/apache/wss4j/blob/9221c69be864015e72f90b183b01211ace089dc8/ws-security-stax/src/main/java/org/apache/wss4j/stax/ext/WSSSecurityProperties.java][loadEncryptionKeystore][4] = -> TRY {  -> keyStore=KeyStore.getInstance("jks",)@ -> keyStore.load(url.openStream(),keyStorePassword,)@ -> encryptionWSSCrypto.setKeyStore(keyStore,)@ } CATCH(Exception) {}
results[https://github.com/taskadapter/redmine-java-api/blob/ba27ecaab3b291b6dd34bdbe6044c17ab75eed13/src/main/java/org/redmine/ta/internal/comm/HttpUtil.java][createConnectionManager][1] = -> TRY {  -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new FakeSSLSocketFactory(trustStore,)@ } CATCH(KeyStoreException,NoSuchAlgorithmException,CertificateException,IOException,KeyManagementException,UnrecoverableKeyException) {}
results[https://github.com/ripple/ripple-lib-java/blob/b324a67cf6588cdd78a7789d5e65cd254eca714d/ripple-bouncycastle/src/main/java/org/ripple/bouncycastle/jce/examples/PKCS12Example.java][main][7] = -> TRY {  -> store=KeyStore.getInstance("PKCS12","BC",)@ -> store.load(null,null,)@ -> store.setKeyEntry("Eric's Key",privKey,null,chain,)@ -> store.store(fOut,passwd,)@ } CATCH(Exception) {}
results[https://github.com/slcs/org.glite.slcs.common/blob/064c3012276ec3bd852ca75dc6802f25acd84fa6/src/main/java/org/glite/slcs/pki/bouncycastle/Codec.java][storePKCS12][2] = -> TRY {  -> p12Store=KeyStore.getInstance("PKCS12",BouncyCastleProvider.PROVIDER_NAME,)@ -> p12Store.load(null,null,)@ -> p12Store.setKeyEntry(alias,privateKey,null,certs,)@ -> p12Store.store(fos,password,)@ } CATCH(GeneralSecurityException,IOException) {}
results[https://github.com/pruiz/signserver/blob/de2fff084cfbfb41c618db6ad960b307e7445be8/signserver/modules/SignServer-Client-SignServerWS/src/org/signserver/protocol/ws/client/CustomJKSTrustStoreManager.java][<init>][2] = -> TRY {  -> trustStore=KeyStore.getInstance("JKS",)@ -> trustStore.load(new FileInputStream(trustStorePath,),trustStorePwd.toCharArray(),)@ } CATCH(Exception) {}
results[https://github.com/Digt/TrustedNet/blob/737a0f9016af0258203e98a13b1d5eb78519fc37/Server/Sources/src/main/java/com/digt/common/utils/X509CertificateGenerator.java][parseContainer][1] = -> TRY {  -> keystore=KeyStore.getInstance("PKCS12",)@ -> keystore.load(new ByteArrayInputStream(cData,),(pin!=null)?pin.toCharArray():null,)@ } CATCH(KeyStoreException,NoSuchProviderException,NoSuchAlgorithmException,CertificateException,IOException) {}
results[https://github.com/iGio90/android_frameworks_base/blob/c2c778533288efb45107521eee9fcab82892fc9e/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_GetCertificate_Single_Success][4] = -> TRY {  -> mKeyStore.load(null,null,)@ -> assertNull("Certificate should not exist in keystore",mKeyStore.getCertificate(TEST_ALIAS_2,),)@ -> retrieved=mKeyStore.getCertificate(TEST_ALIAS_1,)@ } CATCH(Exception) {}
results[https://github.com/vyloy/lnvc/blob/38625c0c7f2c0e5c562bcd3cea11043a281b6a54/lvmc/openfire_src/src/java/org/jivesoftware/openfire/net/SSLConfig.java][initializeKeyStore][4] = -> TRY { -> keyStore=KeyStore.getInstance(storeType,)@ -> keyStore.load(null,keypass.toCharArray(),)@ } CATCH(Exception) { -> Log.error("Unable to initialize keystore: ",e,)@ }
results[https://github.com/axDev-JDK/jdk/blob/5f8d139aef75dbd10951354851828324ca513f80/test/sun/security/pkcs11/KeyStore/ClientAuth.java][doClientSide][3] = -> TRY {  -> passphrase=NSS_PWD.toCharArray()@ -> ks=KeyStore.getInstance("PKCS11","SunPKCS11-nss",)@ -> ks.load(null,passphrase,)@ -> kmf.init(ks,passphrase,)@ } CATCH(Exception) {}
results[https://github.com/TheCollective/android_frameworks_base/blob/c02d1a855a882e77ef855f36eb9eda40eb35b214/keystore/tests/src/android/security/AndroidKeyStoreTest.java][testKeyStore_SetCertificate_PrivateKeyExists_Encrypted_Failure][4] = -> TRY {  -> mKeyStore.load(null,null,)@ -> TRY { -> mKeyStore.setCertificateEntry(TEST_ALIAS_1,cert,)@ } } CATCH(Exception) {}
results[https://github.com/liucong/jms4cxf2/blob/d56cb4fb7e9ae649d1f9b79c3d0d96a2b123f52f/systests/transports/src/test/java/org/apache/cxf/systest/http/HTTPConduitTest.java][getKeyStore][3] = -> TRY {  -> password=(ksPassword!=null)?ksPassword.toCharArray():null@ -> keyStore=KeyStore.getInstance(type,)@ -> keyStore.load(new FileInputStream(file,),password,)@ } CATCH(GeneralSecurityException,IOException) {}
results[https://github.com/bitzeche/jpasskit/blob/f3b32efc5b953f3772d4b7294250ac6fab620b58/jpasskit.server/src/test/java/de/brendamour/jpasskit/server/PKRestletServerResourceFactory.java][readPKCS12File][2] = -> TRY {  -> keystore=KeyStore.getInstance("PKCS12","BC",)@ -> keystore.load(new FileInputStream(file,),password.toCharArray(),)@ } CATCH(IOException,NoSuchAlgorithmException,CertificateException,KeyStoreException,NoSuchProviderException) {}
results[https://github.com/NLeSC/vbrowser/blob/88bc0826d519b7003a370c503f641eaa124c98a1/source/nl.esciencecenter.vlet.vrs.core/src/nl/esciencecenter/vlet/net/ssl/SSLContextManager.java][newKeyStore][1] = -> TRY {  -> keyStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> keyStore.load(null,passwd.getChars(),)@ } CATCH(KeyStoreException,NoSuchAlgorithmException,CertificateException,IOException) {}
results[https://github.com/pruiz/signserver/blob/23906db6d7e396365501e49e6375f89da9c4ad02/signserver/modules/SignServer-Test-Utils/src/org/signserver/testutils/TestUtils.java][loadKeyStore][3] = -> TRY {  -> keystore=KeyStore.getInstance("JKS",)@ -> keystore.load(new FileInputStream(truststoreFile,),truststorePassword.toCharArray(),)@ } CATCH(KeyStoreException,FileNotFoundException,IOException,NoSuchAlgorithmException,CertificateException) {}
results[https://github.com/pruiz/signserver/blob/58966c93e12a4935902edf33db604a38742cfa76/signserver/modules/SignServer-Client-SignServerWS/src/org/signserver/protocol/ws/client/CustomJKSKeyManager.java][<init>][1] = -> TRY {  -> trustStore=KeyStore.getInstance("JKS",)@ -> password=keyStorePwd.toCharArray()@ -> trustStore.load(new FileInputStream(keyStorePath,),password,)@ } CATCH(Exception) {}
results[https://github.com/greese/dasein-cloud-azure/blob/f042f7f35be9b6faddb411820acc3fcf2d5baa0d/src/main/java/org/dasein/cloud/azure/AzureX509.java][createJavaKeystore][2] = -> TRY {  -> store=KeyStore.getInstance("JKS","SUN",)@ -> pw=PASSWORD.toCharArray()@ -> store.load(null,pw,)@ -> store.setKeyEntry(ENTRY_ALIAS,key,pw, new Certificate[],)@ } CATCH(NoSuchProviderException,KeyStoreException,IOException,NoSuchAlgorithmException,CertificateException) {}
results[https://github.com/leth/ng4j/blob/85deacf0e99f923e43b687658d2ab9665a380d36/src/de/fuberlin/wiwiss/ng4j/swp/setup/CreateTestKeystore.java][createCertificate][1] = -> TRY {  -> store=KeyStore.getInstance("PKCS12",)@ -> store.load(null,null,)@ -> store.setKeyEntry("Private key for NG4J JUnit tests",clientPrivKey,exportPassword.toCharArray(),chain,)@ } CATCH(KeyStoreException,NoSuchAlgorithmException,CertificateException,IOException,InvalidKeyException,NoSuchProviderException,SignatureException,InvalidCipherTextException,InvalidKeySpecException) {}
results[https://github.com/leapcode/bitmask_android/blob/b816947d796bd30cfde0c326b568102c472e9445/src/se/leap/bitmaskclient/ProviderAPI.java][getProviderSSLSocketFactory][1] = -> TRY {  -> keyStore=KeyStore.getInstance(keyStoreType,)@ -> keyStore.load(null,null,)@ -> keyStore.setCertificateEntry("provider_ca_certificate",provider_certificate,)@ -> tmf.init(keyStore,)@ } CATCH(KeyStoreException,NoSuchAlgorithmException,CertificateException,IOException,KeyManagementException) {}
results[https://github.com/apache/santuario-java/blob/d2706890674fecb7351d50a3cf55c2f851629216/src/test/java/org/apache/xml/security/test/signature/SignatureTest.java][getKeyStore][4] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ksis=new FileInputStream(KEYSTORE_DIRECTORY+"test.jks",)@ -> ks.load(ksis,KEYSTORE_PASSWORD,)@ -> ksis.close()@ } CATCH(Exception) {}
results[https://github.com/http-kit/http-kit/blob/d11d47af4f424a91cec3cf8210878b224654a7fa/test/java/org/httpkit/client/HttpClientTest.java][main][1] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> passphrase="123456".toCharArray()@ -> ks.load(new FileInputStream("/tmp/testkeys",),passphrase,)@ } CATCH(KeyStoreException,IOException,CertificateException,NoSuchAlgorithmException) {}
results[https://github.com/binarybucks/homA/blob/b2d8b6d70d8e9d8089f29cbd987f7f9bba9ea341/interfaces/android/src/st/alr/homA/services/ServiceMqtt.java][getSSLSocketFactory][1] = -> TRY {  -> keyStore=KeyStore.getInstance(keyStoreType,)@ -> keyStore.load(null,null,)@ -> keyStore.setCertificateEntry("ca",ca,)@ -> tmf.init(keyStore,)@ } CATCH(CertificateException,KeyStoreException,NoSuchAlgorithmException,IOException,KeyManagementException) {}
results[https://github.com/aiQon/crowdshare/blob/bf915b750703aca97ea8383f9d21df8796a17067/src/de/cased/mobilecloud/SSLContextHolder.java][loadTrustStorePEM][1] = -> TRY {  -> localTrustStore=KeyStore.getInstance("BKS",)@ -> localTrustStore.load(null,null,)@ -> localTrustStore.setCertificateEntry("RegServerCert",regServerCert,)@ -> localTrustStore.setCertificateEntry("ClientCertRootOfTrust",signCert,)@ } CATCH(KeyStoreException,NoSuchAlgorithmException,CertificateException,IOException) {}
results[https://github.com/aphyr/riemann-java-client/blob/af950341257dbf278f1e6fb5d388a4bbc0f9e5e2/src/main/java/com/aphyr/riemann/client/SSL.java][trustStore][1] = -> TRY {  -> keyStore=KeyStore.getInstance("JKS",)@ -> keyStore.load(null,null,)@ -> keyStore.setCertificateEntry("cacert",loadCertificate(caCertFile,),)@ } CATCH(KeyStoreException,IOException,NoSuchAlgorithmException,CertificateException) {}
results[https://github.com/dotCMS/dotCMS/blob/2ca65e2d8f3180e615efc7e46e1175cb91226918/src/com/dotcms/publisher/util/TrustFactory.java][<init>][1] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(new FileInputStream(keyStore,),password,)@ -> kmf.init(ks,password,)@ } CATCH(Exception) {}
