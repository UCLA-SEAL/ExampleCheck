results[https://github.com/Smartupz/tigase-server/blob/f683a2b6479ca4bf32f0631c81e8d057034e488a/src/main/java/tigase/io/SSLContextContainerOLD.java][getTrustStore][1] = -> TRY { -> trustKeyStore=KeyStore.getInstance("JKS",)@ -> trustKeyStore.load(null, new char[],)@ }
results[https://github.com/cubieboard/openbox_libcore/blob/e595037cf49109e9e20b47e6e191eda45e414008/support/src/test/java/java/security/TestKeyStore.java][createKeyStore][46] = -> TRY {  -> keyStore=KeyStore.getInstance("BKS",)@ -> keyStore.load(null,null,)@ } CATCH(Exception) {}
results[https://github.com/OWASP/OWASP-Proxy/blob/ce13ef1cecad8c3d798955ff407f94072a5b8cff/src/main/java/org/owasp/proxy/ssl/KeystoreUtils.java][getPKCS11Keystore][1] = -> TRY {  -> ks=KeyStore.getInstance("PKCS11",)@!(!(library.exists())) -> ks.load(null,password,)@!(!(library.exists())) } CATCH(ClassNotFoundException,NoSuchMethodException,InvocationTargetException,IllegalAccessException,InstantiationException,GeneralSecurityException,IOException) {}
results[https://github.com/onecoders/ViewPageIndicator/blob/86a44ee80da79ecb3333c07568a1fe47cea51992/android-async-http-master/library/src/com/loopj/android/http/MySSLSocketFactory.java][getKeystore][6] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ } CATCH(Throwable) { -> t.printStackTrace()@ }
results[https://github.com/brunodecarvalho/http-client/blob/e04dd378e5b7e1f3e2a1529026590cba3aabc370/src/main/java/com/biasedbit/http/client/ssl/BogusSslContextFactory.java][createServerContext][1] = -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(BogusKeyStore.asInputStream(),BogusKeyStore.getKeyStorePassword(),)@ -> kmf.init(ks,BogusKeyStore.getCertificatePassword(),)@
results[https://github.com/guoliqiang/coding/blob/4e657c23e9c385981bff6bc45f8d04cfa01daa72/third_part/hadoop_src/hadoop-2.0.5-alpha-src/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/ssl/KeyStoreTestUtil.java][createEmptyKeyStore][10] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(null,null,)@ } CATCH(GeneralSecurityException,IOException) {}
results[https://github.com/apache/abdera/blob/cce3f0f613bd2c38d878a5f61f5aadea2eede184/client/src/main/java/org/apache/abdera/protocol/client/util/ClientAuthSSLProtocolSocketFactory.java][initKeyStore][1] = -> TRY { -> ks=KeyStore.getInstance(keyStoreType,)@ -> ks.load(new FileInputStream(keyStore,),keyPass.toCharArray(),)@ }
results[https://github.com/mariotaku/twidere/blob/fc242fa3fdd84a826453f2a3395000ff135af3a3/src/org/mariotaku/twidere/http/HttpClientImpl.java][getInstance][2] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> factory=new TrustAllSSLSocketFactory(trustStore,)@ }
results[https://github.com/kwart/jsignpdf/blob/50db3e5186d4dbaffccb3af2dc122f3315f4e213/src/net/sf/jsignpdf/utils/KeyStoreUtils.java][createKeyStore][3] = -> TRY {  -> newKeyStore=KeyStore.getInstance("JKS",)@ -> newKeyStore.load(null,null,)@ } CATCH(KeyStoreException,NoSuchAlgorithmException,CertificateException,IOException) {}
results[https://github.com/apache/wss4j/blob/4144643cb68d85c08fcaabd2ffaf27c0d5255992/streaming-ws-security/src/main/java/org/apache/ws/security/stax/wss/ext/WSSSecurityProperties.java][loadDecryptionKeystore][16] = -> TRY {  -> keyStore=KeyStore.getInstance("jks",)@ -> keyStore.load(url.openStream(),keyStorePassword,)@ } CATCH(Exception) {}
results[https://github.com/OpenDataSpace/opendj3/blob/57ce2119fcab5e35a55ad222f23271a7993752e8/opendj-ldap-sdk/src/main/java/org/forgerock/opendj/ldap/KeyManagers.java][usePKCS11Token][14] = -> TRY {  -> keyStore=KeyStore.getInstance("PKCS11",)@ -> keyStore.load(null,password,)@ -> kmf.init(keyStore,password,)@ } CATCH(GeneralSecurityException,IOException) {}
results[https://github.com/hongxucn/platform_libcore/blob/21643b11ea824e0e4e65a5437a57abed2052ff7a/support/src/test/java/libcore/java/security/TestKeyStore.java][createKeyStore][38] = -> TRY { -> keyStore=KeyStore.getInstance(StandardNames.KEY_STORE_ALGORITHM,)@ -> keyStore.load(null,null,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/xiaomo/rvm/blob/325039bbbcf0e46dfce9e0ef800a1c962971e981/code/red5Server/1_0/src/org/red5/server/net/rtmps/RTMPSMinaIoHandler.java][getKeyStore][5] = -> TRY {  -> ks=KeyStore.getInstance(keyStoreType,)@ -> ks.load(new ByteArrayInputStream(keystore,),password,)@ } CATCH(NoSuchAlgorithmException,CertificateException,IOException,KeyStoreException) {}
results[https://github.com/jgzornoza/SistemaVotacion/blob/96032edf244214c4a0448d2a97145571422e9e81/VotingSystemLibrary/src/main/java/org/votingsystem/signature/util/KeyStoreUtil.java][getKeyStoreFromBytes][1] = -> TRY {  -> store=KeyStore.getInstance("JKS",)@ -> store.load(new ByteArrayInputStream(keyStore,),password,)@ } CATCH(Exception) {}
results[https://github.com/elitak/peertrust/blob/0cecdad23e28e1e2a35e3ea5c802789ce2401c05/src/org/peertrust/security/credentials/x509/X509CredentialStore.java][createEmptyStore][4] = -> TRY {  -> _ks=KeyStore.getInstance("JKS",)@ -> _ks.load(null,_storePassword.toCharArray(),)@ } CATCH(KeyStoreException,NoSuchAlgorithmException,CertificateException,IOException) {}
results[https://github.com/OWASP/OWASP-Proxy/blob/9decfc431107c4bd50f5fd0f4f262b8582066b99/src/main/java/org/owasp/proxy/util/KeystoreUtils.java][loadFromKeyStore][2] = -> TRY {  -> ks=KeyStore.getInstance(type,)@ -> ks.load(in,password,)@ -> return getKeyManagerForAlias(ks,alias,password,)@ } CATCH(GeneralSecurityException,IOException) {}
results[https://github.com/Amab/SWADroid/blob/0fb374a71da453b232a9b54363e772535b3daba1/SWADroid/src/es/ugr/swad/swadroid/ssl/SecureConnection.java][trustTerena][1] = -> TRY {  -> keyStore=KeyStore.getInstance(keyStoreType,)@ -> keyStore.load(null,null,)@ -> keyStore.setCertificateEntry("Terena",terenaCert,)@ } CATCH(KeyManagementException,UnrecoverableKeyException,NoSuchAlgorithmException,KeyStoreException,CertificateException,IOException) {}
results[https://github.com/wso2/commons/blob/6adfc623c63fd98791a12e57612156db7d00b67e/opensaml-1.1.406/tests/org/opensaml/POSTProfileTest.java][setUp][4] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(new FileInputStream(path,),password,)@ } CATCH(Exception) {}
results[https://github.com/bladesilent/Harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/KeyManagerImplTest.java][testKeyManagerImpl1][2] = -> TRY {  -> ks=KeyStore.getInstance("BKS",)@ -> ks.load(null,null,)@ -> km=new KeyManagerImpl(ks, new char[],)@ } CATCH(Exception) {}
results[https://github.com/bladesilent/Harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/x-net/src/test/impl/java/org/apache/harmony/xnet/tests/provider/jsse/KeyManagerFactoryImplTest.java][testEngineGetKeyManagers][2] = -> TRY {  -> ks=KeyStore.getInstance("BKS",)@ -> ks.load(null,null,)@ -> kmf.engineInit(ks,null,)@ } CATCH(Exception) {}
results[https://github.com/apache/harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/x-net/src/test/impl/java/org/apache/harmony/xnet/tests/provider/jsse/TrustManagerFactoryImplTest.java][testEngineGetTrustManagers][2] = -> TRY {  -> ks=KeyStore.getInstance("BKS",)@ -> ks.load(null,null,)@ -> tmf.engineInit(ks,)@ } CATCH(Exception) {}
results[https://github.com/apache/harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/TrustManagerImplTest.java][testTrustManagerImpl_1][2] = -> TRY {  -> ks=KeyStore.getInstance("BKS",)@ -> ks.load(null,null,)@ -> tm=new TrustManagerImpl(ks,)@ } CATCH(Exception) {}
results[https://github.com/wyouflf/xUtils/blob/56a537a6fb86913677ece2f92443f83ec6eadfa8/library/src/com/lidroid/xutils/util/core/SimpleSSLSocketFactory.java][<clinit>][1] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ } CATCH(Throwable) { -> LogUtils.e(e.getMessage(),e,)@ }
results[https://github.com/davros-/android_libcore_s4/blob/e888585a72df3786111230769d73fee92dbbfb39/luni/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java][test_deleteEmptyEntryEmptyAlias][76] = -> TRY {  -> keyTest=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> keyTest.load(null,null,)@ -> keyTest.deleteEntry("",)@ } CATCH(Exception) {}
results[https://github.com/Appverse/appverse-mobile/blob/50e132b68b1d84c4d1c317c136f2869cec0d4c1f/appverse-core/src/java/com/gft/unity/core/system/server/net/SSLServerSocketEndPoint.java][loadKeystoreFromFile][1] = -> TRY {  -> keystore=KeyStore.getInstance("JKS",)@ -> stream=new FileInputStream(file,)@ -> keystore.load(stream,password,)@ -> stream.close()@ } CATCH(IOException,GeneralSecurityException) {}
results[https://github.com/TaintDroid/android_platform_libcore/blob/e595037cf49109e9e20b47e6e191eda45e414008/support/src/test/java/java/security/TestKeyStore.java][createClient][45] = -> TRY { -> clientKeyStore=clientKeyStore=KeyStore.getInstance("BKS",)@ -> clientKeyStore.load(null,null,)@ -> copySelfSignedCertificates(clientKeyStore,caKeyStore,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/brachior/platform_dalvik/blob/f6c387128427e121477c1b32ad35cdcaa5101ba3/dx/tests/060-dex-call-static/Zorch.java][createKeyStore][1] = -> TRY {  -> ks=KeyStore.getInstance("BKS",)@ -> ks.load(null,null,)@ -> ks.setKeyEntry(privateAlias,privateKey,keyStorePassword,x509cc,)@ -> ks.setCertificateEntry(publicAlias,x509c,)@ } CATCH(Exception) {}
results[https://github.com/pruiz/signserver/blob/23906db6d7e396365501e49e6375f89da9c4ad02/signserver/modules/SignServer-Test-Utils/src/org/signserver/testutils/TestUtils.java][loadKeyStore][3] = -> TRY {  -> keystore=KeyStore.getInstance("JKS",)@ -> keystore.load(new FileInputStream(truststoreFile,),truststorePassword.toCharArray(),)@ } CATCH(KeyStoreException,FileNotFoundException,IOException,NoSuchAlgorithmException,CertificateException) {}
results[https://github.com/pruiz/signserver/blob/58966c93e12a4935902edf33db604a38742cfa76/signserver/modules/SignServer-Client-SignServerWS/src/org/signserver/protocol/ws/client/CustomJKSKeyManager.java][<init>][1] = -> TRY {  -> trustStore=KeyStore.getInstance("JKS",)@ -> password=keyStorePwd.toCharArray()@ -> trustStore.load(new FileInputStream(keyStorePath,),password,)@ } CATCH(Exception) {}
results[https://github.com/dotCMS/dotCMS/blob/2ca65e2d8f3180e615efc7e46e1175cb91226918/src/com/dotcms/publisher/util/TrustFactory.java][<init>][3] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(new FileInputStream(trustStore,),password,)@ -> tmf.init(ks,)@ } CATCH(Exception) {}
results[https://github.com/abhijitsarkar/java/blob/15a411bf8197ece656945af2bfda6f62dcb9ee6d/xml/xml-security/src/main/java/name/abhijitsarkar/xml/security/KeyStoreManager.java][loadKeyStore][3] = -> TRY {  -> ks=KeyStore.getInstance("JCEKS",)@ -> ks.load(new FileInputStream(keystore,),storePassword.toCharArray(),)@ } CATCH(Exception) {}
results[https://github.com/apache/santuario-java/blob/6fa7ee072a03c0a4bedbac3c4d1a5604192aa72f/src/test/java/org/apache/xml/security/test/dom/signature/ECDSASignatureTest.java][testOne][3] = -> TRY {  -> keyStore=KeyStore.getInstance("JKS",)@ -> keyStore.load(new java.io.FileInputStream(ECDSA_JKS,),ECDSA_JKS_PASSWORD.toCharArray(),)@ } CATCH(Exception) {}
results[https://github.com/apache/wss4j/blob/9221c69be864015e72f90b183b01211ace089dc8/ws-security-stax/src/main/java/org/apache/wss4j/stax/ext/WSSSecurityProperties.java][loadSignatureVerificationKeystore][4] = -> TRY {  -> keyStore=KeyStore.getInstance("jks",)@ -> keyStore.load(url.openStream(),keyStorePassword,)@ -> signatureVerificationWSSCrypto.setKeyStore(keyStore,)@ } CATCH(Exception) {}
results[https://github.com/leth/ng4j/blob/85deacf0e99f923e43b687658d2ab9665a380d36/src/de/fuberlin/wiwiss/ng4j/swp/setup/CreateTestKeystore.java][createCertificate][1] = -> TRY {  -> store=KeyStore.getInstance("PKCS12",)@ -> store.load(null,null,)@ -> store.setKeyEntry("Private key for NG4J JUnit tests",clientPrivKey,exportPassword.toCharArray(),chain,)@ } CATCH(KeyStoreException,NoSuchAlgorithmException,CertificateException,IOException,InvalidKeyException,NoSuchProviderException,SignatureException,InvalidCipherTextException,InvalidKeySpecException) {}
results[https://github.com/loopj/android-async-http/blob/562e118fdc5fdfd2cc40409174ddae0a9a4884ef/library/src/main/java/com/loopj/android/http/MySSLSocketFactory.java][getKeystoreOfCA][1] = -> TRY { -> keyStore=KeyStore.getInstance(keyStoreType,)@ -> keyStore.load(null,null,)@ -> keyStore.setCertificateEntry("ca",ca,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/EnderWiggin/Haven-and-Hearth-client-modified-by-Ender/blob/3dc60a9b44e3bc50838e38f8139b8b79a8968b3b/src/haven/SslHelper.java][<init>][5] = -> TRY { -> trusted=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trusted.load(null,null,)@ } CATCH(Exception) { -> throw new Error(e,)@ }
results[https://github.com/leapcode/bitmask_android/blob/b816947d796bd30cfde0c326b568102c472e9445/src/se/leap/bitmaskclient/ProviderAPI.java][getProviderSSLSocketFactory][1] = -> TRY {  -> keyStore=KeyStore.getInstance(keyStoreType,)@ -> keyStore.load(null,null,)@ -> keyStore.setCertificateEntry("provider_ca_certificate",provider_certificate,)@ -> tmf.init(keyStore,)@ } CATCH(KeyStoreException,NoSuchAlgorithmException,CertificateException,IOException,KeyManagementException) {}
results[https://github.com/OWASP/OWASP-Proxy/blob/5374133727f118b52840fbe685fdfede3de8b26e/src/test/java/org/owasp/ajp/AJPClientTest.java][loadCertificate][2] = -> TRY {  -> ks=KeyStore.getInstance("PKCS12",)@ -> ks.load(in,password,)@ -> aliases=ks.aliases()@ -> return (X509Certificate) ks.getCertificate(alias,)@ } CATCH(GeneralSecurityException,IOException) {}
results[https://github.com/apache/santuario-java/blob/d2706890674fecb7351d50a3cf55c2f851629216/src/test/java/org/apache/xml/security/test/signature/SignatureTest.java][getKeyStore][5] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ksis=new FileInputStream(KEYSTORE_DIRECTORY+"test.jks",)@ -> ks.load(ksis,KEYSTORE_PASSWORD,)@ -> ksis.close()@ } CATCH(Exception) {}
results[https://github.com/apache/ftpserver/blob/d454a47e596bbc71f88e79bdbc4757574268c725/ssl-tests/src/test/org/apache/ftpserver/ssl/MinaClientAuthTest.java][createFTPClient][8] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(new FileInputStream(FTPCLIENT_KEYSTORE,),KEYSTORE_PASSWORD,)@ -> kmf.init(ks,KEYSTORE_PASSWORD,)@ } CATCH(Exception) {}
results[https://github.com/sapo/sapo-broker/blob/86f5dbfebf9190eff5ddbd8b663ddcf3ebd49f29/clients/java-Component-BrokerTCP/src/pt/com/broker/client/SslNetworkConnector.java][getSslSocketFactory][1] = -> TRY { -> keyStore=KeyStore.getInstance("JKS",)@ -> keyStore.load(new FileInputStream(keystoreLocation,),keystorePw,)@ -> tmf.init(keyStore,)@ } CATCH(Throwable) { -> log.error("SslNetworkConnector.SslNetworkConnector",t,)@ -> throw new RuntimeException(t,)@ }
results[https://github.com/ikeji/openjdk7-jdk/blob/1d238c66aad78972570771d075a288ba9c558372/test/sun/security/pkcs11/fips/CipherTest.java][readKeyStore][9] = -> TRY {  -> in=new FileInputStream(file,)@ -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(in,passwd,)@ -> in.close()@ } CATCH(Exception) {}
results[https://github.com/apache/activemq/blob/8bf987b134bd827b93ed8157b323bc3bd2d8a82e/activemq-core/src/test/java/org/apache/activemq/transport/tcp/SslBrokerServiceTest.java][getTrustManager][6] = -> TRY {  -> trustedCertStore=KeyStore.getInstance(SslTransportBrokerTest.KEYSTORE_TYPE,)@ -> trustedCertStore.load(new FileInputStream(SslTransportBrokerTest.TRUST_KEYSTORE,),null,)@ -> tmf.init(trustedCertStore,)@ } CATCH(Exception) {}
results[https://github.com/hortonworks/knox/blob/67407b4766477057de849051758a494a363eeffb/gateway-server/src/test/java/org/apache/hadoop/gateway/jetty/JettyHttpsTest.java][loadKeyStore][3] = -> TRY {  -> keyStore=KeyStore.getInstance(type,)@ -> keystoreInput=new FileInputStream(path,)@ -> keyStore.load(keystoreInput,password.toCharArray(),)@ } CATCH(IOException,NoSuchAlgorithmException,CertificateException,KeyStoreException) {}
results[https://github.com/NLeSC/vbrowser/blob/ae3034365e22f9988d1f6e385510d64d25ff5f22/source/nl.nlesc.vlet.vrs.core/src/nl/nlesc/vlet/net/ssl/SSLContextManager.java][newKeyStore][2] = -> TRY {  -> keyStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> keyStore.load(null,passwd.toCharArray(),)@ } CATCH(KeyStoreException,NoSuchAlgorithmException,CertificateException,IOException) {}
results[https://github.com/rowboat/libcore/blob/e595037cf49109e9e20b47e6e191eda45e414008/luni/src/test/java/tests/api/javax/net/ssl/TrustManagerFactory1Test.java][test_initLjavax_net_ssl_ManagerFactoryParameters][14] = -> TRY { -> kStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> kStore.load(null,null,)@ } CATCH(Exception) { -> fail("Unexpected exception for configuration: "+e,)@ }
results[https://github.com/hypercube1024/firefly/blob/b1b5a1f8ecc09960dfe98351013ee1fd2f2c755b/firefly-nettool/src/main/java/com/firefly/net/support/ssl/SSLContextFactory.java][getSSLContext][2] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(in,keystorePassword.toCharArray(),)@ -> kmf.init(ks,keyPassword.toCharArray(),)@ -> tmf.init(ks,)@ } CATCH(Throwable) {}
results[https://github.com/NCIP/cagrid2/blob/98afa0e95b32173f05d905d24fba8d570e8438c2/cagrid-dorian/cagrid-dorian-service-tools/src/main/java/org/cagrid/dorian/service/tools/CreateTrustStore.java][execute][1] = -> TRY {  -> trustStore=KeyStore.getInstance("JKS",)@ -> trustStore.load(null,null,)@ -> trustStore.setCertificateEntry(ALIAS,certificate,)@ -> trustStore.store(truststoreStream,STORE_PASSWORD,)@ } CATCH(Exception) {}
results[https://github.com/liangqi/xqwizard/blob/2636959b41756eea61c573350a9e787145a9e22d/XQWAjax/src/xqwajax/util/cert/CertKey.java][toKeyStore][3] = -> TRY {  -> keyStore=KeyStore.getInstance(type,)@ -> keyStore.load(null,null,)@ -> keyStore.setKeyEntry("",key,password.toCharArray(),certChain,)@ } CATCH(Exception) {}
results[https://github.com/claudius108/expath-libs/blob/e97cda36eb28417111c7e72a68398d4963a095fc/crypto/src/main/java/org/expath/crypto/secureStorage/CreateSecureStore.java][create][2] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> passwordCharArray=password.toCharArray()@ -> ks.load(null,passwordCharArray,)@ -> ks.store(baos,passwordCharArray,)@ } CATCH(NoSuchAlgorithmException,CertificateException,IOException,KeyStoreException) {}
results[https://github.com/songzhiyong/lib_song/blob/9749c7c2891b86b47ee0199b4449bc48cb1d4370/src/com/loopj/android/http/MySSLSocketFactory.java][getKeystoreOfCA][2] = -> TRY { -> keyStore=KeyStore.getInstance(keyStoreType,)@ -> keyStore.load(null,null,)@ -> keyStore.setCertificateEntry("ca",(java.security.cert.Certificate) ca,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/splunk/splunk-shuttl/blob/e078a7d7c4ad58f98c1d0053bdfc914ff0763389/src/java/com/splunk/ShuttlPortEntity.java][getTrustStore][3] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/kencochrane/raven-java/blob/42c385b2c5a78e3a10e7f28188e6d4ad0c130b29/raven-getsentry/src/main/java/net/kencochrane/raven/getsentry/connection/GetSentryHttpsConnection.java][getStartcomSslFactory][1] = -> TRY {  -> ks=KeyStore.getInstance("jks",)@ -> ks.load(null,null,)@ -> ks.setCertificateEntry("ca",ca,)@ -> tmf.init(ks,)@ } CATCH(Exception) {}
results[https://github.com/http-kit/http-kit/blob/d11d47af4f424a91cec3cf8210878b224654a7fa/test/java/org/httpkit/client/HttpClientTest.java][main][1] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> passphrase="123456".toCharArray()@ -> ks.load(new FileInputStream("/tmp/testkeys",),passphrase,)@ } CATCH(KeyStoreException,IOException,CertificateException,NoSuchAlgorithmException) {}
results[https://github.com/apache/cxf-fediz/blob/4f687f314e0cd2800dab9381828d92184f58c903/services/sts/src/test/java/org/apache/cxf/fediz/sts/Utils.java][getKeyStore][3] = -> TRY {  -> password=(ksPassword!=null)?ksPassword.toCharArray():null@ -> keyStore=KeyStore.getInstance(type,)@ -> keyStore.load(new FileInputStream(file,),password,)@ } CATCH(GeneralSecurityException,IOException) {}
results[https://github.com/robfletcher/betamax/blob/867e7f92f3192ec04e712b973c2c08fde00408af/betamax-proxy/src/main/groovy/co/freeside/betamax/proxy/ssl/DummySSLSocketFactory.java][getInstance][1] = -> TRY {  -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> return new DummySSLSocketFactory(trustStore,)@ } CATCH(GeneralSecurityException,IOException) {}
results[https://github.com/OWASP/OWASP-Proxy/blob/ce13ef1cecad8c3d798955ff407f94072a5b8cff/src/main/java/org/owasp/proxy/ssl/KeystoreUtils.java][saveToKeyStore][2] = -> TRY {  -> ks=KeyStore.getInstance(type,)@ -> ks.load(null,password,)@ -> addToKeyStore(ks,km,alias,password,)@ -> ks.store(out,password,)@ } CATCH(GeneralSecurityException,IOException) {}
results[https://github.com/binarybucks/homA/blob/b2d8b6d70d8e9d8089f29cbd987f7f9bba9ea341/interfaces/android/src/st/alr/homA/services/ServiceMqtt.java][getSSLSocketFactory][1] = -> TRY {  -> keyStore=KeyStore.getInstance(keyStoreType,)@ -> keyStore.load(null,null,)@ -> keyStore.setCertificateEntry("ca",ca,)@ -> tmf.init(keyStore,)@ } CATCH(CertificateException,KeyStoreException,NoSuchAlgorithmException,IOException,KeyManagementException) {}
results[https://github.com/taskadapter/redmine-java-api/blob/ba27ecaab3b291b6dd34bdbe6044c17ab75eed13/src/main/java/org/redmine/ta/internal/comm/HttpUtil.java][createConnectionManager][1] = -> TRY {  -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new FakeSSLSocketFactory(trustStore,)@ } CATCH(KeyStoreException,NoSuchAlgorithmException,CertificateException,IOException,KeyManagementException,UnrecoverableKeyException) {}
results[https://github.com/aiQon/crowdshare/blob/bf915b750703aca97ea8383f9d21df8796a17067/src/de/cased/mobilecloud/SSLContextHolder.java][loadTrustStorePEM][1] = -> TRY {  -> localTrustStore=KeyStore.getInstance("BKS",)@ -> localTrustStore.load(null,null,)@ -> localTrustStore.setCertificateEntry("RegServerCert",regServerCert,)@ -> localTrustStore.setCertificateEntry("ClientCertRootOfTrust",signCert,)@ } CATCH(KeyStoreException,NoSuchAlgorithmException,CertificateException,IOException) {}
results[https://github.com/aphyr/riemann-java-client/blob/af950341257dbf278f1e6fb5d388a4bbc0f9e5e2/src/main/java/com/aphyr/riemann/client/SSL.java][trustStore][1] = -> TRY {  -> keyStore=KeyStore.getInstance("JKS",)@ -> keyStore.load(null,null,)@ -> keyStore.setCertificateEntry("cacert",loadCertificate(caCertFile,),)@ } CATCH(KeyStoreException,IOException,NoSuchAlgorithmException,CertificateException) {}
results[https://github.com/Digt/TrustedNet/blob/737a0f9016af0258203e98a13b1d5eb78519fc37/Server/Sources/src/main/java/com/digt/common/utils/X509CertificateGenerator.java][parseContainer][1] = -> TRY {  -> keystore=KeyStore.getInstance("PKCS12",)@ -> keystore.load(new ByteArrayInputStream(cData,),(pin!=null)?pin.toCharArray():null,)@ } CATCH(KeyStoreException,NoSuchProviderException,NoSuchAlgorithmException,CertificateException,IOException) {}
results[https://github.com/vyloy/lnvc/blob/38625c0c7f2c0e5c562bcd3cea11043a281b6a54/lvmc/openfire_src/src/java/org/jivesoftware/openfire/net/SSLConfig.java][initializeKeyStore][4] = -> TRY { -> keyStore=KeyStore.getInstance(storeType,)@ -> keyStore.load(null,keypass.toCharArray(),)@ } CATCH(Exception) { -> Log.error("Unable to initialize keystore: ",e,)@ }
results[https://github.com/dotCMS/dotCMS/blob/2ca65e2d8f3180e615efc7e46e1175cb91226918/src/com/dotcms/publisher/util/TrustFactory.java][<init>][1] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(new FileInputStream(keyStore,),password,)@ -> kmf.init(ks,password,)@ } CATCH(Exception) {}
results[https://github.com/obiba/opal/blob/7c4d3c6b485f0d593f9a533332f339931264ae81/opal-core/src/main/java/org/obiba/opal/core/service/impl/DefaultUnitKeyStoreServiceImpl.java][loadKeyStore][2] = -> TRY {  -> ks=KeyStore.getInstance("JCEKS",)@ -> ks.load(new ByteArrayInputStream(keyStoreBytes,),getKeyPassword(passwordCallback,),)@ } CATCH(GeneralSecurityException,UnsupportedCallbackException,IOException) {}
results[https://github.com/obiba/opal/blob/84b384063dbbd7e74e88bd1978ae5560d9fc7b44/opal-core/src/main/java/org/obiba/opal/core/domain/unit/UnitKeyStore.java][loadKeyStore][1] = -> TRY {  -> ks=KeyStore.getInstance("JCEKS",)@ -> ks.load(new ByteArrayInputStream(keyStore,),getKeyPassword(passwordCallback,),)@ } CATCH(KeyStoreException,IOException,NoSuchAlgorithmException,CertificateException,UnsupportedCallbackException) {}
results[https://github.com/zibhub/GNDMS/blob/0e835e9a7d539302b3b48fce7f76f42725c3f17d/common/src/de/zib/gndms/common/kit/security/SetupSSL.java][prepareTrustStore][1] = -> TRY {  -> tis=new FileInputStream(trustStoreLocation,)@ -> trustStore=KeyStore.getInstance(trustStoreType,)@ -> trustStore.load(tis,(trustStorePassword!=null)?trustStorePassword.toCharArray():null,)@ } CATCH(KeyStoreException,IOException,NoSuchAlgorithmException,CertificateException) {}
results[https://github.com/aphyr/riemann-java-client/blob/af950341257dbf278f1e6fb5d388a4bbc0f9e5e2/src/main/java/com/aphyr/riemann/client/SSL.java][keyStore][1] = -> TRY {  -> keyStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> keyStore.load(null,null,)@ -> keyStore.setKeyEntry("key",key,keyStorePassword, new Certificate[],)@ } CATCH(FileNotFoundException,IOException,KeyStoreException,NoSuchAlgorithmException,InvalidKeySpecException,CertificateException) {}
results[https://github.com/NLeSC/vbrowser/blob/88bc0826d519b7003a370c503f641eaa124c98a1/source/nl.esciencecenter.vlet.vrs.core/src/nl/esciencecenter/vlet/net/ssl/SSLContextManager.java][newKeyStore][1] = -> TRY {  -> keyStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> keyStore.load(null,passwd.getChars(),)@ } CATCH(KeyStoreException,NoSuchAlgorithmException,CertificateException,IOException) {}
results[https://github.com/4ndrew/odisp/blob/b49abc26c585acdba4a1c5303b956b03b4155ccb/src/org/valabs/stdobj/webcon/Serve.java][setupServerKeystore][1] = -> TRY {  -> serverKeyStore=KeyStore.getInstance("JKS",)@ -> serverKeyStore.load(new FileInputStream("server.private",),PASSPHRASE.toCharArray(),)@ } CATCH(GeneralSecurityException,IOException) {}
results[https://github.com/prey/prey-android-client/blob/591ae9eb082a1032ffd60f1498e127871348fe65/src/com/prey/net/HttpUtils.java][getNewHttpClient][2] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new EasySSLSocketFactory(trustStore,)@ } CATCH(Exception) { -> return new DefaultHttpClient()@ }
results[https://github.com/axDev-JDK/jdk/blob/acbdb0ade569a980d025ec2b09f528c0bc1a29cd/test/sun/security/provider/KeyStore/TestJKSWithSecretKey.java][main][1] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(null,passwd,)@ -> TRY { -> ks.setKeyEntry("test_encrypt_key",key,passwd,null,)@ } } CATCH(Exception) {}
results[https://github.com/huashizhenhua/TadpoleWeibo/blob/85d891b039d2a5abff1407f438055e3c0f1e6268/weibo.sdk.android.sso.demo/src/com/weibo/sdk/android/net/HttpManager.java][getNewHttpClient][33] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new MySSLSocketFactory(trustStore,)@ } CATCH(Exception) { -> return new DefaultHttpClient()@ }
results[https://github.com/ezterry/GB-libcore/blob/e595037cf49109e9e20b47e6e191eda45e414008/luni/src/test/java/tests/api/javax/net/ssl/KeyManagerFactorySpiTest.java][test_engineInit_01][23] = -> TRY { -> kst=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> kst.load(null,null,)@ -> kmf.engineInit(kst,psw,)@ } CATCH(Exception) { -> fail("Unexpected exception "+e,)@ }
results[https://github.com/otruffer/Ape_On_Tape/blob/d45effcb146762c3d202b1b4e5c93c300cf5b28f/src/org/webbitserver/helpers/SslFactory.java][<init>][1] = -> TRY { -> ks=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> ks.load(keyStore,storePass.toCharArray(),)@ } CATCH(Exception) { -> throw new WebbitException(e,)@ }
results[https://github.com/rmcc/android_dalvik/blob/f6c387128427e121477c1b32ad35cdcaa5101ba3/libcore/x-net/src/test/java/tests/api/javax/net/ssl/SSLContextSpiTest.java][test_engineInit][48] = -> TRY { -> ks=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> ks.load(null,null,)@ -> trustMF.init(ks,)@ } CATCH(Exception) { -> fail(ex+" unexpected exception",)@ }
results[https://github.com/Root-Box/libcore/blob/45273a0346df3d08c9c7bbf84cc1474192703df1/luni/src/test/java/tests/targets/security/cert/CertificateTest.java][createPKIXParams][24] = -> TRY {  -> keyStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> keyStore.load(null,null,)@ -> keyStore.setCertificateEntry("selfSignedCert",certs[0],)@ -> params=new PKIXParameters(keyStore,)@ } CATCH(Exception) {}
results[https://github.com/violetagg/apache-tomcat-8.0/blob/2d261e76344e1328498e9a59bb543a1b0d46b742/modules/tomcat-lite/java/org/apache/tomcat/lite/io/jsse/JsseSslProvider.java][getCertificateFromStore][3] = -> TRY {  -> store=KeyStore.getInstance("JKS",)@ -> store.load(new FileInputStream(file,),pass.toCharArray(),)@ -> certificate=store.getCertificate("tomcat",)@ } CATCH(Exception) {}
results[https://github.com/imoseyon/leanKernel-d2usc-deprecated/blob/85dca4838d36fa8e8db240b308ebe03f9643160c/libcore/luni/src/test/java/tests/targets/security/cert/CertPathBuilderTestPKIX.java][getCertPathParameters][23] = -> TRY {  -> keyStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> keyStore.load(null,null,)@ -> keyStore.setCertificateEntry("selfSignedCert",selfSignedcertificate,)@ -> parameters=new PKIXBuilderParameters(keyStore,targetConstraints,)@ } CATCH(Exception) {}
results[https://github.com/jponge/izpack-full-svn-history-copy/blob/d9d134b71176d2c33fbd96379d0f53dfdbe5e426/izpack-src/tags/4.3.3/src/lib/com/izforge/izpack/util/PasswordKeystoreValidator.java][getKeyStore][8] = -> TRY { -> ks=KeyStore.getInstance(type,)@ -> ks.load(new FileInputStream(fileName,),password,)@ } CATCH(Exception) { -> System.out.println("getKeyStore() Failed: "+e,)@ }
results[https://github.com/jersey/jersey-1.x/blob/a9c4639d76bd493d95e8400e5a53509cf9decfa8/samples/https-clientserver-grizzly/src/test/java/com/sun/jersey/samples/https_grizzly/MainTest.java][<init>][1] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(new FileInputStream(keyStore,),password,)@ -> kmf.init(ks,"asdfgh".toCharArray(),)@ } CATCH(Exception) {}
results[https://github.com/Olog/olog-java-api/blob/4774678f8fe52141cb597f1c13365f46d5f9e546/ologAPI/src/main/java/edu/msu/nscl/olog/api/MyX509TrustManager.java][<init>][4] = -> TRY {  -> ks=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> ks.load(new FileInputStream(trustStore,),password,)@ -> tmf.init(ks,)@ } CATCH(Exception) {}
results[https://github.com/axDev-JDK/jdk/blob/e29089cd2f1827672b8e1fd7d492d8de8a128937/test/sun/security/ssl/javax/net/ssl/NewAPIs/CheckMyTrustedKeystore.java][doClientSide][3] = -> TRY {  -> uks=KeyStore.getInstance("JKS",)@ -> uks.load(new FileInputStream(unknownFilename,),cpasswd,)@ -> kmf.init(uks,cpasswd,)@ -> kmf1.init(uks,cpasswd,)@ } CATCH(Exception) {}
results[https://github.com/ODCleanStore/ODCleanStore/blob/85c9ef23e754ce72d235cb2d5dfc811991b5934f/odcleanstore/engine/src/main/java/cz/cuni/mff/odcleanstore/engine/inputws/SslKeyLoader.java][getKeys][1] = -> TRY { -> ks=KeyStore.getInstance("JKS",)@ -> ksPass=STORE_PASSWORD.toCharArray()@ -> TRY { -> ks.load(SslKeyLoader.class.getResourceAsStream(JKS_CERTIFICATE_RESOURCE_NAME,),ksPass,)@ } -> kmf.init(ks,ctPass,)@ }
results[https://github.com/OlegYch/pdfbox/blob/623a0af37723377676f57213cf74b1a909c23272/src/test/pdfbox/encryption/TestPublicKeyEncryption.java][open][2] = -> TRY {  -> ks=KeyStore.getInstance("PKCS12",)@ -> ks.load(new FileInputStream(certPath,),password.toCharArray(),)@ -> pdm=new PublicKeyDecryptionMaterial(ks,null,password,)@ } CATCH(Exception) {}
results[https://github.com/axDev-JDK/jdk/blob/acbdb0ade569a980d025ec2b09f528c0bc1a29cd/test/sun/security/rsa/TestSignatures.java][getKeyStore][7] = -> TRY {  -> in=new FileInputStream(new File(BASE,"rsakeys.ks",),)@ -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(in,password,)@ -> in.close()@ } CATCH(Exception) {}
results[https://github.com/SSilence/scotty/blob/c473304a04247b7b8160e0d7743f8999d2b66dac/scotty-commons/src/main/java/org/owasp/webscarab/httpclient/AbstractCertificateRepository.java][loadPKCS12Certificate][2] = -> TRY {  -> is=new FileInputStream(filename,)@ -> ks=KeyStore.getInstance("PKCS12",)@ -> ks.load(is,(ksPassword==null)?null:ksPassword.toCharArray(),)@ -> return addKeyStore(ks,"PKCS#12 - "+filename,)@ } CATCH(IOException,KeyStoreException,CertificateException,NoSuchAlgorithmException) {}
results[https://github.com/jazzlly/Notes/blob/609d2fd4107e474ebb997a9506b60fa747fb5924/computer.science/android/project/MobileUtil/src/com/pekall/http/HttpClient.java][newSslSocketFactory][1] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new SSLSocketFactoryEx(trustStore,)@ } CATCH(Exception) { -> throw new AssertionError(e,)@ }
results[https://github.com/elitak/peertrust/blob/222a8ea30dcabe5da529dc9969de5068006d3ff2/sandbox/service/src/org/peertrust/security/credentials/x509/X509CredentialStore.java][loadAllCredentialsFromFile][1] = -> TRY {  -> keystore=KeyStore.getInstance("JKS",)@ -> keystore.load(new FileInputStream(file,),storePassword.toCharArray(),)@ -> addAllCredentials(keystore,)@ } CATCH(KeyStoreException,Exception) {}
results[https://github.com/Genshin/SpreeWarehouseAndroid/blob/2ad84312950b93c1f2f7699d4ffb8343e3cb7f74/src/org/genshin/spree/RESTConnector.java][getHttpClient][1] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new AnyCertSSLSocketFactory(trustStore,)@ } CATCH(Exception) { -> return new DefaultHttpClient()@ }
results[https://github.com/HawaiianNinja/RoseHulman-Android-App/blob/04826c032f1f910dc9d851b2d65545c65e8417ed/src/awesome/app/SecurityHole.java][getNewHttpClient][2] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new UniversalSocketFactory(trustStore,)@ } CATCH(Exception) { -> return new DefaultHttpClient()@ }
results[https://github.com/FreakyPenguin/elexis-hilotec-base/blob/be7fd9159b01d0165281a3cc6c695a9a573df08d/ch.rgw.utility/src/ch/rgw/crypt/JCEKeyManager.java][create][2] = -> IF { -> TRY { -> ks=KeyStore.getInstance(ksType,)@ks==null -> ks.load(null,null,)@ks==null } CATCH(Exception) { -> e.printStackTrace()@!(ks==null) -> return false@ks==null } }
results[https://github.com/Berico-Technologies/AMP/blob/281c9fc20e1fa8c7dc17f98b245898968b6cf505/java/amp-rabbit/src/main/java/amp/rabbit/SSLChannelFactory.java][configureConnectionFactory][1] = -> TRY {  -> keyPassphrase=_keystorePassword.toCharArray()@ -> remoteCertStore=KeyStore.getInstance("JKS",)@ -> remoteCertStore.load(new FileInputStream(_pathToRabbitTrustStore,),keyPassphrase,)@ -> tmf.init(remoteCertStore,)@ } CATCH(Exception) {}
results[https://github.com/taskadapter/redmine-java-api/blob/880fd305b91e453b0c5632bc62b412e3c6a4b6ec/org.redmine.ta.api/src/main/java/org/redmine/ta/internal/HttpUtil.java][getNewHttpClient][2] = -> TRY { -> trustStore=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> trustStore.load(null,null,)@ -> sf=new FakeSSLSocketFactory(trustStore,)@ } CATCH(Exception) { -> return new DefaultHttpClient()@ }
results[https://github.com/esoeproject/esoeproject/blob/520adc43cd5661808a8e26432c6c8c957db74a86/esoedelegators/shibboleth/shib-1.3.x/src-installer/com/qut/middleware/delegator/deployment/Startup.java][loadKeystore][1] = -> TRY {  -> keystoreInputStream=new FileInputStream(keystoreFileName,)@ -> keystore=KeyStore.getInstance("JKS",)@ -> keystore.load(keystoreInputStream,keystorePassword.toCharArray(),)@ -> keystoreInputStream.close()@ } CATCH(Exception) {}
results[https://github.com/elitak/peertrust/blob/6f6e0af00562c22837d7b8a96a34f82f6d2d45c3/sandbox/securityExt/src/org/peertrust/security/credentials/x509/X509CredentialStore.java][<init>][1] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(new FileInputStream(file,),storePassword.toCharArray(),)@ -> addAllCredentials(ks,)@ } CATCH(Exception) {}
results[https://github.com/sdywcd/jshoperv2/blob/a7cb55c71211143b22e61dd7a970836fa64f7a0a/ROOT/src/com/jshop/pay/tenpay/util/HttpClientUtil.java][storeCACert][1] = -> TRY {  -> ks=KeyStore.getInstance("JKS",)@ -> ks.load(null,null,)@ -> ks.setCertificateEntry(alias,cert,)@ -> ks.store(out,HttpClientUtil.str2CharArray(password,),)@ } CATCH(KeyStoreException,NoSuchAlgorithmException,CertificateException,IOException) {}
results[https://github.com/DISID/gvnix/blob/c21fd46d03e51daf040f0bbdfa43f57da0b2a8e2/addon-service/src/main/java/org/gvnix/service/roo/addon/security/GvNix509TrustManager.java][loadKeyStore][2] = -> TRY {  -> in=new FileInputStream(keystore,)@ -> ks=KeyStore.getInstance(KeyStore.getDefaultType(),)@ -> ks.load(in,pass,)@ -> in.close()@ } CATCH(Exception) {}
results[https://github.com/FreakyPenguin/elexis-hilotec-base/blob/b0c616ac6a80f26ddc95b8c81df5ac8b8c2597b2/elexis/src/ch/rgw/crypt/KeyManager.java][load][1] = -> TRY { -> ks=KeyStore.getInstance(ksType,)@ -> ks.load(new FileInputStream(ksFile,),pwd,)@ } CATCH(Exception) { -> ExHandler.handle(ex,)@ -> log.log(Level.SEVERE,"No Keystore found or coudl not open Keystore",)@ }
results[https://github.com/reficio/soap-ws/blob/9c8034a36d5eaca8c3efb8ffc3791cbd1ab157d8/soap-it/src/test/java/org/reficio/ws/it/AbstractCooperationTest.java][readKeyStore][1] = -> TRY { -> in=keyStoreUrl.openStream()@ -> ks=KeyStore.getInstance(keyStoreType,)@ -> ks.load(in,keyStorePassword.toCharArray(),)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
