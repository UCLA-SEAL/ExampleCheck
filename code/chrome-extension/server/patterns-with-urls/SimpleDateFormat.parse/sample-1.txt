results[https://github.com/lveci/nest/blob/20ebe0d9eb642123232197b637c978234d74d08b/beam/beam-core/src/main/java/org/esa/beam/util/DateTimeUtils.java][stringToUTC][195] = -> TRY {  -> return ISO_8601_FORMAT.parse(utc,)@ } CATCH(ParseException) {}
results[https://github.com/cantwait/psp/blob/6ccd8a3f7985e19b5bc75bb4e9582cadbdf01479/psp-services/src/com/pdvsa/psp/serializer/DateAdapter.java][unmarshal][43] = -> TRY {  -> return dateFormat.parse(v,)@ } CATCH(Exception) {}
results[https://github.com/ontometrics/ontokettle/blob/9eea6592302c1ca12e7250d1decfa0b9c6998ecd/src/be/ibridge/kettle/core/value/ValueString.java][getDate][13] = -> IF { -> TRY { -> return df.parse(string,)@string!=null } }
results[https://github.com/OpenNTF/org.openntf.domino/blob/1b6af398f03a281fa0aa6833095c3edb21b932fb/org.openntf.domino/commons/com/ibm/commons/util/io/json/JsonGenerator.java][stringToDate][3] = -> TRY {  -> return ISO8601.parse(value,)@ } CATCH(IOException,ParseException) {}
results[https://github.com/machina/openNoark/blob/a0f018f61bbbbbdbb857b898ed0dabf459bcb55b/friark/src/java/no/machina/utils/DateUtils.java][parse][2] = -> TRY {  -> return dp.parse(str,)@ } CATCH(java.text.ParseException) {}
results[https://github.com/DSpace/DSpace-SVN-Deprecated/blob/0af2d0a0b04b7c4ca29abbe55417c04e42ad7c93/dspace-api/src/main/java/org/dspace/app/statistics/StatisticsLoader.java][getDatesFromMap][2] = -> LOOP { -> TRY { -> dates[i]=monthlySDF.parse(date,)@ } }
results[https://github.com/teropa/stem/blob/e018a7aa0b1121c3be27c74fbdeff67e464a6061/org.eclipse.stem.core/src/org/eclipse/stem/core/common/impl/DublinCoreImpl.java][createDateFromISO8601DateString][174] = -> TRY {  -> return new SimpleDateFormat("yyyy-MM-dd",).parse(iso8601DateString,)@ } CATCH(ParseException) {}
results[https://github.com/RestOpenGov/RestOpenGov/blob/94e180b70b2fc0c14fa0bd4ba72b60df415abb74/crawler/src/main/java/com/nardoz/restopengov/utils/DateChecker.java][findFormat][2] = -> LOOP { -> sdf=new SimpleDateFormat(format,)@ -> TRY { -> date=sdf.parse(str,)@ } }
results[https://github.com/elyas-bhy/CampusUB1/blob/36e64c85117535c19f456f354d88c041dc1060ad/source/src/com/dev/campus/util/TimeExtractor.java][createDate][24] = -> TRY {  -> sdf=new SimpleDateFormat(format,Locale.ENGLISH,)@ -> return sdf.parse(date,)@ } CATCH(ParseException) {}
results[https://github.com/sevntu-checkstyle/sevntu.checkstyle/blob/bf9b24fd3fcde34dc6cbe7b3657d9cc193fe3044/sevntu-checks/src/test/resources/com/github/sevntu/checkstyle/coding/InputAvoidDefaultSerializableInInnerClasses2.java][readObject][3] = -> TRY {  -> result.date=new SimpleDateFormat().parse(str,)@ } CATCH(ParseException) {}
results[https://github.com/ax003d/sichu_android/blob/cc6aa37bf9d85ae9d3e24dd2103142953d373d5a/sichu/src/com/sinaapp/sichu/utils/Utils.java][parseDateString][22] = -> TRY { -> dt=dateFmt.parse(date,)@ } CATCH(ParseException) { -> e.printStackTrace()@ }
results[https://github.com/dextra/dextranet/blob/12954188ea66d2f7dbe7247f2b6028a746d1c3a2/src/main/java/br/com/dextra/dextranet/utils/TimeMachine.java][transformaEmData][25] = -> TRY { -> return formatter.parse(data,)@ } CATCH(ParseException) { -> throw new RuntimeException("Erro ao realizar parse da data: "+data,)@ }
results[https://github.com/NicolasFonte/marinhorh/blob/589f3a221d52378a80f2997c9dcd644a18c78c8d/src/com/rochamarinho/controller/AdvogadoController.java][atualizarAdvogado][1] = -> TRY {  -> associacaoData=formatter.parse(associacaoTexto,)@ -> adv.setAssociacao(associacaoData,)@ } CATCH(BackendException,ParseException) {}
results[https://github.com/LynkLin/hrm-client/blob/bb314a0184954c9834cbddf4b7082fa9afec2820/src/com/lynk/hrm/common/Utils.java][formatDateToCn][1] = -> TRY {  -> return formatCn.format(format.parse(date,),)@ } CATCH(Exception) {}
results[https://github.com/seam/international/blob/4aa1ec34a35e3b527acab12d32a992b0d5a67075/examples/seam-timeanddate/src/test/java/org/jboss/seam/international/examples/timeanddate/ftest/TimeAndDateTest.java][testPacificTimes][6] = -> TRY {  -> formatter.parse(selenium.getText(DATETIME_INFO,),)@ } CATCH(ParseException) {}
results[https://github.com/fnppl/openSDX/blob/3d9afce481f76e82ade1113cdc3421148fc383fa/src/org/fnppl/opensdx/security/SecurityHelper.java][parseDate][3] = -> TRY {  -> return datemeGMT.parse(date,).getTime()@ } CATCH(Exception) {}
results[https://github.com/fits/try_samples/blob/1476db8f9fdc9246000dfc2f75bf378a682ddbd5/java/iso_date/ParseIsoDate.java][format][38] = -> TRY {  -> return new SimpleDateFormat(format,).parse(dateString,)@ } CATCH(Exception) {}
results[https://github.com/javadabadoo/chachareando/blob/452394cca8ecc6afddae57b3caa6162a2d4da89a/ChachareandoGit/src/test/java/doo/daba/java/pruebas/persistencia/EntradaRepositorioTest.java][testWhichDaysHasEntries][2] = -> TRY {  -> date=this.dateFormat.parse("2013-05-12",)@ -> days=this.entradaDao.selectWhichDaysHasEntries(date,)@ } CATCH(ParseException) {}
results[https://github.com/spingel/org.eclipse.mylyn.tasks/blob/7df783b8953289bb5e54aa1dd0f07bda4537a62f/org.eclipse.mylyn.bugzilla.core/src/org/eclipse/mylyn/provisional/bugzilla/core/ReportAttachment.java][getDateCreated][3] = -> IF { -> TRY { -> created=creation_ts_date_format.parse(getAttributeValue(BugzillaReportElement.DATE,),)@created==null } }
results[https://github.com/proofpoint/kairosdb/blob/655f2a8b0d9050bf5c3451d1f908093c884fb35a/src/test/java/org/kairosdb/core/http/rest/json/RelativeTimeTest.java][setup][14] = -> TRY {  -> timeRelativeTo=dateFormat.parse("2013-JAN-18 4:55:12",).getTime()@ } CATCH(ParseException) {}
results[https://github.com/jimtahu/OMShips_android/blob/2fa38bbe11af8baf6ad7adcd2a46eb60dbe80642/src/org/omships/omships/FeedItem.java][setPubDate][2] = -> TRY { -> this.pubDate=format.parse(date,)@ } CATCH(ParseException) { -> Log.e("RSS","Date parsing failed on "+date,ex,)@ }
results[https://github.com/martinp/hist-bachelor-thesis/blob/7ff55b5fb04f15d570cf6ab648c12286d63a4e6c/server/app/Import.java][parseDate][2] = -> TRY { -> return dateFormat.parse(s,)@ } CATCH(ParseException) { -> Logger.warn(e,"Failed to parse date: %s",s,)@ }
results[https://github.com/bobmcwhirter/drools/blob/d95020e66fd5b0056d922bd540fdb1599531d8c5/drools-examples/drools-insurance/src/test/java/org/acme/insurance/test/DriverTest.java][setUp][3] = -> TRY {  -> df=new java.text.SimpleDateFormat("dd/MM/yyyy",)@ -> defaultBirthday=df.parse("18/09/1983",)@ } CATCH(Exception) {}
results[https://github.com/juherr/fit/blob/ad40701bb807cca44d2e542c6754d0bf2380222a/imp/ant/src/com/cmdev/maya/Julian.java][parse][5] = -> TRY {  -> d=formatter.parse(s,)@ -> cal.setTime(d,)@ } CATCH(ParseException) {}
results[https://github.com/brunopedroso/besouro/blob/cb3054d6580218b81dfbfe1db0bdffc497466361/test/athos/model/EpisodeClassifierTest.java][setUp][1] = -> TRY {  -> this.clock=new Clock(dateFormat.parse("01/01/2005 08:30:45",),)@ } CATCH(Exception) {}
results[https://github.com/Wurmy/My_Redmine-Java-API_XML/blob/00f27fd08aa0ae1327686e6341a8a12e69b34c31/org.alskor.redmine_api/src/main/java/org/alskor/redmine/internal/RedmineLongDateHandler.java][getDate][10] = -> TRY {  -> converted=convertToRFC822Format(str,)@ -> date=formatter.parse(converted,)@ } CATCH(ParseException) {}
results[https://github.com/enwida/idpRepo/blob/29c562477b3fdb9b3517c6603dc1795f4c103b76/workspace/enwida/src/test/java/de/enwida/web/ChartNavigationTest.java][toCalendar][1] = -> TRY {  -> return toCalendar(dateFormat.parse(source,),)@ } CATCH(ParseException) {}
results[https://github.com/Chogos/BoovieList/blob/936525f9b8e38053041f1089696089b8c02af316/src/main/java/hr/blazeka/boovielist/database/DoneDatabase.java][stringToDate][6] = -> TRY { -> date=dateFormat.parse(dateString,)@ } CATCH(ParseException) { -> date=new Date()@ }
results[https://github.com/Balkanbomb/Itslearning/blob/afff832c91f415b7049dd9f7c5b6890258b3f1e6/application/MahAppStudent_ITSL_Branch/src/org/mcsoxford/rss/Dates.java][parseRfc822][8] = -> TRY { -> return RFC822.parse(date,)@ } CATCH(ParseException) { -> throw new RSSFault(e,)@ }
results[https://github.com/araujodavid/mydbaas-monitor/blob/96e3e30c578aa1814bd6eacd14b542a4f42b495f/mydbaasmonitor/src/main/java/br/com/arida/ufc/mydbaasmonitor/core/util/DataUtil.java][isDataValida][6] = -> sdf=new SimpleDateFormat("dd/MM/yyyy",)@ -> TRY { -> testDate=sdf.parse(date,)@ } -> IF { -> return false@!(sdf.format(testDate,).equals(date,)) }
results[https://github.com/cjashfor/LinuxToolsProjectPatches/blob/54fdb19c42d69e0586a3f0aad9c9c09f50da444d/changelog/org.eclipse.linuxtools.changelog.core/src/org/eclipse/linuxtools/changelog/core/editors/ChangeLogFormattingStrategy.java][isDate][2] = -> isoDate=new SimpleDateFormat("yyyy-MM-dd",)@ -> TRY { -> ad=isoDate.parse(inputStr,)@ -> IF { -> return true@ad!=null } }
results[https://github.com/HeinzLaetsch/TVSeebach-Portal-extensions/blob/55b22ed6ddc010607386676ef0a53d23af4e94d1/tvs-services/src/test/java/org/tvs/portal/model/EsrServiceTestCase.java][getESRByErstellungDatumAndStatus][1] = -> TRY {  -> erstellungsDatum=sd.parse("2012-08-01",)@ -> dates.add(erstellungsDatum,)@ } CATCH(ParseException) {}
results[https://github.com/mdoninger/org.eclipse.mylyn.tasks/blob/fa6f11f1514c15b9c5fe3017e1b2a7e1e30ea537/org.eclipse.mylyn.bugzilla.core/src/org/eclipse/mylyn/provisional/bugzilla/core/BugzillaReport.java][getCreated][2] = -> IF { -> dateString=getAttributeValue(BugzillaReportElement.CREATION_TS,)@ -> TRY { -> created=creation_ts_format.parse(dateString,)@created==null } }
results[https://github.com/sgbell/podsalinan/blob/8788daedea2a434208cfb94a2ed84ea179f6f12e/podsalinan/src/com/mimpidev/podsalinan/CLInterface.java][convertDate][6] = -> LOOP { -> TRY { -> date=new SimpleDateFormat(dateFormat[dateCounter],).parse(menuInput,)@date==null&&dateCounter<dateFormat.length } }
results[https://github.com/sarxos/medusa-system/blob/524ee200f2b72efab2da42e7931bbaa46c4e204b/medusa-core/src/main/java/com/sarxos/medusa/util/DateUtils.java][fromCGL][3] = -> TRY { -> return sdf.parse(str,)@ } CATCH(ParseException) { -> throw new RuntimeException("Cannot parse date "+str,e,)@ }
results[https://github.com/unclebob/fitnesse/blob/91e93be251bd402842292162da80ec7595aea823/src/fitnesse/slim/converters/DateConverter.java][fromString][4] = -> TRY { -> return dateFormat.parse(arg,)@ } CATCH(ParseException) { -> throw new SlimError("Can't parse date "+arg,e,)@ }
results[https://github.com/MagicCube/Platinum/blob/9bf69b0d1e5bbd3b637e22f4a4738b4955eb19aa/server/source/platinum-platform/src/platinum/common/util/DateUtil.java][parseFromString][1] = -> TRY {  -> format=_getDateFormat(p_formatString,)@ -> return format.parse(p_formatString,)@ } CATCH(ParseException) {}
results[https://github.com/asascience/THREDDS/blob/feee39f0747e069d30328c6e851b615fa06c0cdb/cdm/src/main/java/ucar/nc2/units/DateFormatter.java][stdDateNoSecsFormat][7] = -> TRY {  -> text=(text==null)?"":text.trim()@ -> return stdDateNoSecsFormat.parse(text,)@ } CATCH(java.text.ParseException) {}
results[https://github.com/applicake/Beandroid/blob/69092d34ab95ad19f87430bda37c9c926114f795/Beanstalk Android Client/src/com/applicake/beanstalkclient/Comment.java][setUpdatedAt][2] = -> TRY {  -> this.updatedAt=FORMATTER.parse(date.trim(),)@ } CATCH(ParseException) {}
results[https://github.com/builddoctor/cruisecontrol/blob/bb1c1d199b438965668d5c79db8fbad9b54e47c6/cruisecontrol/main/test/net/sourceforge/cruisecontrol/sourcecontrols/AlienBrainTest.java][testBuildGetModificationsCommand][1] = -> TRY {  -> date=DATE_FORMAT.parse("5/20/2005 -0400",)@ -> cmdLine=ab.buildGetModificationsCommand(date,date,)@ } CATCH(ParseException) {}
results[https://github.com/sgewuhan/vim/blob/ae22d717010cbdb07890f33745aea7f5e0537f8b/com.sg.sqldb/src/com/sg/sqldb/utility/Util.java][getWeekDateString][1] = -> TRY {  -> return getWeekDateString(inputFormat.parse(dateInWeek,),outputFormat,0,)@ } CATCH(ParseException) {}
results[https://github.com/mrdon/jforum-cvs/blob/f2c0b27255dbe338037540942f288f6d8bd231a1/src/net/jforum/search/LuceneCommandLineReindexer.java][parseDate][7] = -> IF { -> TRY { -> date=new SimpleDateFormat("dd/MM/yyyy",).parse(s,)@!(StringUtils.isEmpty(s,)) } }
results[https://github.com/alagopus/fraglets/blob/035afcc2dff392a2ad6c79d6b46d39e3193b947e/java/net/sourceforge/fraglets/yaelp/Line.java][getTimestamp][1] = -> IF { -> TRY { -> timestamp=timestampFormat.parse(spec,).getTime()@spec!=null } }
results[https://github.com/Depter/JReserve/blob/4f4ce9e0bc0237b18c502ed6be6d0d6c868e1c2e/NetbeansProject/jreserve/jreserve-triangle-core/src/test/java/org/jreserve/triangle/TestUtil.java][getDate][6] = -> TRY { -> return DF.parse(date,)@ } CATCH(ParseException) { -> throw new IllegalArgumentException("Unable to parse date: "+date,ex,)@ }
results[https://github.com/taksan/Skype2Gmail/blob/704500a6e084525862f0aa7b22f5ba66d22a58cd/src/main/java/skype/commons/SkypeMessageDateFormatImpl.java][parse][4] = -> TRY { -> return simpleDateFormat.parse(messageTimeText,)@ } CATCH(ParseException) { -> throw new MessageProcessingException(e,)@ }
results[https://github.com/jblaya/openmrs-core/blob/9807b6bf9f15d5ecc35169aa7005e1a7cfff19dd/web/src/main/java/org/openmrs/web/dwr/DWRPatientService.java][parseDate][3] = -> IF { -> sdf=Context.getDateFormat()@!(date!=null) -> TRY { -> return sdf.parse(date,)@date!=null } }
results[https://github.com/michaelsembwever/Possom/blob/54e323fa6f15dd618c2339f39fa83f3beb5a111b/generic.sesam/velocity-directives/src/main/java/no/sesat/search/view/velocity/DateFormattingDirective.java][formatFormThree][3] = -> TRY {  -> return shortFormatter.format(formThreeParser.parse(input,),)@ } CATCH(ParseException) {}
results[https://github.com/joeytwiddle/code/blob/a537fafc92b7f63bef83acbb15cc8bc41564c04a/java/changetheworld/XML.java][unStringify][1] = -> IF { -> TRY { -> return new SimpleDateFormat().parse(s,)@ } }
results[https://github.com/syapse/bigdata/blob/bcf790fe9c487a14e0f36a1a1fee85df065b0373/bigdata/src/java/com/bigdata/counters/StatisticsCollectorForWindows.java][parseValue][5] = -> TRY { -> return f.parse(text,)@ } CATCH(ParseException) { -> log.error("Could not parse: "+text,e,)@ }
results[https://github.com/geoserver/geoserver-history/blob/51a5586770c942dc6b00a9dcb43b82b73b6f492b/src/community/monitoring/src/main/java/org/geoserver/monitor/rest/RequestResource.java][parseDate][4] = -> TRY { -> return DATE_FORMAT.parse(s,)@ } CATCH(ParseException) { -> return Converters.convert(s,Date.class,)@ }
results[https://github.com/tiesmaster/JGet/blob/819a04b156bcf3b6acdc183f27441021b41d94b4/nic/view/Mainframe.java][parseDate][5] = -> TRY {  -> sdf=new SimpleDateFormat("EEE MMM d HH:mm:ss yyyy",Locale.US,)@ -> return sdf.parse(timestamp,)@ } CATCH(Exception) {}
results[https://github.com/HeinzLaetsch/TVSeebach-Portal-extensions/blob/55b22ed6ddc010607386676ef0a53d23af4e94d1/tvs-services/src/test/java/org/tvs/portal/model/EsrServiceTestCase.java][getESRByErstellungDatum][1] = -> TRY {  -> erstellungsDatum=sd.parse("2012-08-01",)@ -> esrs=service.getESRByErstellungDatum(erstellungsDatum,)@ } CATCH(ParseException) {}
results[https://github.com/unpush/apache-incubator-shindig/blob/fc6bf312919c99e774b5ab101845f6ced1a8e068/java/samples/src/test/java/org/apache/shindig/social/opensocial/jpa/spi/SpiTestUtil.java][buildDate][2] = -> TRY { -> return DATE_FORMATTER.parse(dateAsString,)@ } CATCH(Exception) { -> throw new RuntimeException("Failed to parse date - "+dateAsString,e,)@ }
results[https://github.com/economist239/BrandAnalytics/blob/4999d6bd3a0354ba36996f7c4c7bc83e953bb86e/tasker/src/test/DataParseTest.java][testDate][1] = -> TRY {  -> System.out.println(FORMATTER.parse("Mon, 30 Apr 2012 01:22:12 GMT",),)@ } CATCH(Exception) {}
results[https://github.com/sarxos/medusa-system/blob/fd5a7d9f55dff7e6f047fc084d08bd99e9a032ef/src/com/sarxos/gpwnotifier/market/Quote.java][main][3] = -> TRY {  -> System.out.println(DATE_FORMAT.parse("2010-11-10",),)@ } CATCH(ParseException) {}
results[https://github.com/geosolutions-it/geobatch/blob/c5fa7390e681ca90bee8101575afbeb904636abc/src/actions/metocs/nurc-sem/src/main/java/it/geosolutions/geobatch/nurc/sem/lscv08/INGVFileConfiguratorAction.java][findTimeOriginPattern][1] = -> LOOP { -> TRY { -> testSdf=new SimpleDateFormat(pattern,Locale.ENGLISH,)@ -> testSdf.parse(timeOrigin,)@ } }
results[https://github.com/bingo-open-source/bingo-core/blob/1f453991e817d459dca83a862618be56546b4546/core-lang/src/main/java/bingo/lang/format/ConcurrentDateFormat.java][parse][1] = -> TRY {  -> return format.parse(source,)@ } CATCH(ParseException) {}
results[https://github.com/astrapi69/jaulp.core/blob/ca5271b85311a16eb5e5907c3adc0306db2fd9af/jaulp.time/src/main/java/net/sourceforge/jaulp/date/ParseDateUtils.java][parseToDate][1] = -> LOOP { -> sdf=new SimpleDateFormat(formats[i],locale,)@i<formats.length -> TRY { -> return sdf.parse(datum,)@i<formats.length } }
results[https://github.com/openplans/cebu-taxi/blob/fab222b094b6030c819ef0327fad1a0ab1784127/cebu-server/app/utils/Observation.java][createObservation][1] = -> TRY {  -> time=sdf.parse(timestamp,)@ -> return createObservation(vehicleId,time,obsCoords,velocityd,headingd,accuracyd,)@ } CATCH(NumberFormatException,ParseException,TransformException,TimeOrderException) {}
results[https://github.com/apache/poi/blob/9926c8900688f2bf4813dd7c10ca0f89ddffc11a/src/scratchpad/testcases/org/apache/poi/hslf/record/TestComment2000Atom.java][testCreate][2] = -> TRY {  -> date_a=sdf.parse("2006-01-24 10:26:15.205",)@ -> a.setDate(date_a,)@ } CATCH(Exception) {}
results[https://github.com/obiba/magma/blob/27718d2743e9b5cce6686bf3fcaf3aa38e9aaade/magma-api/src/main/java/org/obiba/magma/type/DateTimeType.java][parseDate][2] = -> TRY {  -> return Factory.newValue(this,format.parse(string,),)@ } CATCH(ParseException) {}
results[https://github.com/digitalabs/IBFb/blob/c35c463737937d3b8f3e21a9218e057b5dc96032/IBWBProvider/src/org/cimmyt/cril/ibwb/provider/utils/ConverterDate.java][getIntegerAsDate][2] = -> IF { -> stringDate=numToConvert.toString()@numToConvert!=null -> TRY { -> integerAsDate=format.parse(stringDate,)@ } }
results[https://github.com/PieceMaker/OpenJUMP/blob/ddd3352783072d8eba011a49c57feea4c77c2779/src/jumptest/junit/GMLWriterTestCase.java][testToString][1] = -> TRY {  -> doAssert("1921-04-18",dateFormatter.parse("1921-04-18",),AttributeType.DATE,)@ } CATCH(Exception) {}
results[https://github.com/apache/chukwa/blob/e055a848c97752db6160bc1e9bb63de70216f01a/src/java/org/apache/hadoop/chukwa/extraction/demux/processor/mapper/LogEntry.java][<init>][2] = -> TRY {  -> dStr=recordEntry.substring(0,23,)@ -> date=sdf.parse(dStr,)@ } CATCH(ParseException) {}
results[https://github.com/LuckyStars/nbc/blob/e4374d5162db8a8a8a60791ef9361f2f0b6c0cc6/function-schoolmaster2/java/function-schoolmaster2/src/main/com/nbcedu/function/schoolmaster2/utils/Utils.java][safeParseSimpleDate][1] = -> TRY { -> return dateSdf.parse(origin,)@ } CATCH(Exception) { -> return new Date()@ }
results[https://github.com/InMobi/conduit/blob/cc35b0c40258ebde0896b64f8cfd63b003874478/databus-audit/src/main/java/com/inmobi/databus/audit/AuditAdmin.java][getDate][3] = -> formatter.setLenient(false,)@ -> TRY { -> currentDate=formatter.parse(date,)@ -> IF { -> return null@currentDate.before(new Date(1356998400000l,),) } }
results[https://github.com/deepsky/SQL-Code-Assistant-/blob/5ba73b8b038b77548029ea1d7a240fa1c2b4303a/shared/root/java/tools/com/deepsky/tools/DbSchemaObjectsIndexer.java][<init>][1] = -> TRY {  -> _1970=new SimpleDateFormat("yyyy",).parse("1970",)@ } CATCH(ParseException,DBException) {}
results[https://github.com/SonarSource/sonar/blob/ce63bd4c293fe7a1fa066d73860bbaf4e1f5a608/sonar-batch/src/test/java/org/sonar/batch/components/PastSnapshotFinderByDateTest.java][shouldFindDate][1] = -> TRY {  -> date=DATE_FORMAT.parse("2008-11-22",)@ -> pastSnapshot=finder.findByDate(projectSnapshot,date,)@ } CATCH(ParseException) {}
results[https://github.com/geesun/android_packages_apps_Contacts/blob/1052ef208cf062913106dfe2eb4497ea0ffe6260/src/com/android/contacts/model/FallbackSource.java][parseDateFromDb][1] = -> IF { -> TRY { -> return sDateFormat.parse(value.toString(),)@value!=null } }
results[https://github.com/tumb1er/RutubeAppProject/blob/b47d007e5b724d04426b1be93d07579646e2622c/RutubeAPI/src/ru/rutube/RutubeAPI/models/Video.java][parseDate][1] = -> TRY { -> return dtf.parse(data,)@ } CATCH(ParseException) { -> return new Date(0,)@ }
results[https://github.com/Doldge/Hornet/blob/2ad8305965cb6f651e20c194d11f1562f8c83eed/src/com/treshna/hornet/ClassMemberListAdapter.java][onCheckedChanged][1] = -> IF { -> format=new SimpleDateFormat("yyyyMMdd HH:mm:ss",Locale.US,)@ -> TRY { -> start=format.parse(sdate+" "+stime,)@ } }
results[https://github.com/netbout/netbout/blob/86f418793c1baa746d69360371ea76b24c4fa00b/netbout/netbout-rest/src/test/java/com/netbout/rest/PeriodsBuilderTest.java][date][4] = -> TRY {  -> return new SimpleDateFormat("yyyy-MM-dd",Locale.ENGLISH,).parse(text,)@ } CATCH(java.text.ParseException) {}
results[https://github.com/f1ori/yacy/blob/4bea3f97143bf2bcc40819505712fc5d2d0a2bcf/source/de/anomic/data/wiki/WikiBoard.java][getAncestorDate][2] = -> TRY { -> c=record.get("date",)@ -> IF { -> ret=SimpleFormatter.parse(c,)@c!=null } }
results[https://github.com/mcekovic/currency-watch/blob/2755987055ce41ea9d3738ea6a0af5385664bd1b/core/src/main/java/org/strangeforest/currencywatch/rest/CurrencyRateResource.java][parseDate][1] = -> TRY {  -> return (!(StringUtil.isNullOrEmpty(date,)))?DATE_FORMAT.parse(date,):null@ } CATCH(ParseException) {}
results[https://github.com/Netflix/denominator/blob/4af509102c1d414c2620f4551c2d480757c026a1/ultradns/src/test/java/denominator/ultradns/UltraDNSTest.java][checkSOARecord][2] = -> TRY {  -> assertEquals(soaRecord.created,iso8601SimpleDateFormat.parse("2013-02-22T08:22:48.000Z",),)@ } CATCH(ParseException) {}
results[https://github.com/vtatai/srec/blob/4d5ca99ccbe13bc5c29f3478b13355f6c8cdd3c1/core/src/main/java/com/github/srec/command/value/DateValue.java][<init>][1] = -> TRY {  -> format=new SimpleDateFormat()@ -> value=format.parse(valueString,)@ } CATCH(ParseException) {}
results[https://github.com/apache/poi/blob/5c061765b834c2f090e54bbee1b14f6847a2ec9b/src/scratchpad/testcases/org/apache/poi/hslf/util/TestSystemTimeUtils.java][testWriteDateA][1] = -> TRY {  -> date=sdf.parse("2006-01-24 10:26:15.205",)@ -> SystemTimeUtils.storeDate(date,out_a,)@ } CATCH(Exception) {}
results[https://github.com/apache/poi/blob/5c061765b834c2f090e54bbee1b14f6847a2ec9b/src/scratchpad/testcases/org/apache/poi/hslf/util/TestSystemTimeUtils.java][testWriteDateB][1] = -> TRY {  -> date=sdf.parse("2006-01-24 21:25:03.725",)@ -> SystemTimeUtils.storeDate(date,out_b,12,)@ } CATCH(Exception) {}
results[https://github.com/HeinzLaetsch/TVSeebach-Portal-extensions/blob/55b22ed6ddc010607386676ef0a53d23af4e94d1/tvs-services/src/test/java/org/tvs/portal/model/EsrServiceTestCase.java][getESRByErstellungDatumAndBezahlt][1] = -> TRY {  -> erstellungsDatum=sd.parse("2012-08-01",)@ -> esrs=service.getESRByErstellungDatum(erstellungsDatum,true,)@ } CATCH(ParseException) {}
results[https://github.com/lietou/insight/blob/df4e615b7dac56be06b9e7c79af0e7223f8c11bd/cat-home/src/main/java/com/dianping/cat/report/page/query/Payload.java][setEnd][1] = -> TRY { -> m_end=m_sdf.parse(end,)@ } CATCH(ParseException) { -> Cat.logError(e,)@ }
results[https://github.com/theonlybender/SportschulApp/blob/5c876fe8bbc234d26fde8c13f4c3996b0e1e6c61/src/de/sportschulApp/server/dtaus/Tool.java][parseQIFDate][1] = -> TRY {  -> sdf=new SimpleDateFormat("MM.dd.yy",)@ -> return sdf.parse(value,)@ } CATCH(java.text.ParseException) {}
results[https://github.com/gkhachik/katello-api/blob/535aabb5bdc364bea94132df7890f3aa71604923/src/com/redhat/qe/katello/base/KatelloTestScript.java][parseKatelloDate][1] = -> TRY {  -> sDate=strDate.substring(0,19,)@ -> return dateFormatter.parse(sDate,)@ } CATCH(java.text.ParseException) {}
results[https://github.com/Dhandapani/gluster-ovirt/blob/3439311394886f76ae498e505b3f9c32f7e5f7cb/backend/manager/modules/dal/src/test/java/org/ovirt/engine/core/dao/AuditLogDAOTest.java][testRemoveAllBeforeDate][2] = -> TRY {  -> cutoff=EXPECTED_DATE_FORMAT.parse("2010-12-20 13:11:00",)@ -> dao.removeAllBeforeDate(cutoff,)@ } CATCH(Exception) {}
results[https://github.com/eclipse/emf.texo/blob/ead3ddc8022e4a3c9867c2bedd4b2805bdee35ba/core/org.eclipse.emf.texo/src/org/eclipse/emf/texo/utils/ModelUtils.java][createFromXML][4] = -> TRY { -> return xmlDateFormat.parse(xmlString,)@ } CATCH(ParseException) { -> throw new IllegalArgumentException(e,)@ }
results[https://github.com/freenet/plugin-Freemail-staging/blob/3750a50a430f18ad4bbde15641ac82d2523a6b2b/test/org/freenetproject/freemail/imap/IMAPLocaleDependentTest.java][internaldateFormat][2] = -> TRY {  -> sdf=new SimpleDateFormat("dd MMM yyyy HH:mm:ss Z",Locale.ROOT,)@ -> sdf.parse(date,)@ } CATCH(IOException,ParseException) {}
results[https://github.com/apache/tuscany-sdo/blob/fa2428326e342a42d96858f1f8aaca25c9e54cd0/impl/src/test/java/org/apache/tuscany/sdo/test/TypeRoundTripTest.java][compare][1] = -> TRY { -> IF { -> sdf=new SimpleDateFormat("yyyy-MM-dd'Z'",)@ -> o1=sdf.parse((String) o1,)@o1 instanceof String&&o2 instanceof Date } }
results[https://github.com/SonarSource/sonar/blob/4a7eae13c556369592da2ed726e4c8546b61a17a/plugins/sonar-core-plugin/src/test/java/org/sonar/plugins/core/timemachine/PastSnapshotFinderByDateTest.java][shouldFindDate][1] = -> TRY {  -> date=DATE_FORMAT.parse("2008-11-22",)@ -> snapshot=finder.findByDate(date,)@ } CATCH(ParseException) {}
results[https://github.com/nuodb/migration-tools/blob/d0e4e14dec80e61ff647a5131fa0a08076984447/core/src/main/java/com/nuodb/migrator/utils/xml/DateTransform.java][read][1] = -> TRY {  -> return (isEmpty(value,))?null:format.parse(value,)@ } CATCH(Exception) {}
results[https://github.com/NationalStudentClearinghouse/Meteor4/blob/06a17bb75b1c3c1c486e3efe5832282eed0e5df3/meteorsaml/src/test/java/org/meteornetwork/meteor/saml/SecurityTokenImplTest.java][<init>][1] = -> TRY {  -> dateFormat=new SimpleDateFormat("MMM d, yyyy Z",Locale.US,)@ -> currentDate=dateFormat.parse("April 5, 2063 -0000",)@ } CATCH(ParseException,ConfigurationException) {}
results[https://github.com/michaelsembwever/Possom/blob/54e323fa6f15dd618c2339f39fa83f3beb5a111b/generic.sesam/velocity-directives/src/main/java/no/sesat/search/view/velocity/DateFormattingDirective.java][formatFormTwo][1] = -> TRY {  -> parsedDate=formTwoParser.parse(input,)@ -> return longFormat(parsedDate,newsDateOnly,)@ } CATCH(ParseException) {}
results[https://github.com/irina-andreevna-ivanova/ivanova_p01/blob/83db82ea2a9ab1c178d4bbc26f537c1cdaab97f0/tests/test-zendo2/zendo-playground/src/main/java/zendo/playground/sse/serialization/TestJavaSerialization.java][main][1] = -> TRY {  -> apple.pickingDate=new SimpleDateFormat("dd.MM.yyyy",).parse("10.06.2010",)@ } CATCH(ParseException,IOException,ClassNotFoundException) {}
results[https://github.com/maxluo/zhaisujie/blob/a77fa4390c3e53904c02cefce2a68a6fcc2c4a11/src/com/ag/zhaisujie/DateUtil.java][toDateByDT][1] = -> TRY { -> return sdf1.parse(dateTime,)@ } CATCH(Exception) { -> ex.printStackTrace()@ }
results[https://github.com/apache/oodt/blob/562aea51ac9ab523264437a53a075a5521048215/filemgr/src/main/java/org/apache/oodt/cas/filemgr/tools/SolrIndexer.java][formatDate][1] = -> TRY {  -> return solrFormat.format(format.parse(value,),)@!(config.getIgnoreValues().contains(value.trim(),)) } CATCH(java.text.ParseException) {}
results[https://github.com/unclebob/fitnesse/blob/fc959bd3b6f738ceb8a7f3df7564d3d071e12dc4/test/fitnesse/responders/testHistory/PageHistoryResponderTest.java][computePassFailBarFor][2] = -> TRY {  -> date=dateFormat.parse("20090503110451",)@ -> passFailBar=pageHistory.getPassFailBar(date,50,)@ } CATCH(IOException,ParseException) {}
results[https://github.com/vyloy/lnvc/blob/38625c0c7f2c0e5c562bcd3cea11043a281b6a54/lvmc/openfire_src/src/plugins/conferenceVote/src/java/org/jivesoftware/openfire/plugin/conferenceVote/util/DateUtil.java][getDate][1] = -> TRY {  -> dateFormat=new java.text.SimpleDateFormat(pattern,)@ -> date=dateFormat.parse(dateStr,)@ } CATCH(ParseException) {}
results[https://github.com/openplanets/plato/blob/ffb58f0645c4ab587928f6885814a56aa71e30db/planning-core/src/main/java/eu/scape_project/planning/xml/plan/TimestampFormatter.java][parseTimestamp][1] = -> TRY {  -> return formatter.parse(s,).getTime()@ } CATCH(java.text.ParseException) {}
results[https://github.com/charleso/naca/blob/9fe1dd7b410a08e36c346ee9711baefd5bb116fc/JLib/src/jlib/misc/DateUtil.java][dateString2Calendar][1] = -> TRY {  -> d1=ms_dfYYYYMMDD.parse(s,)@ -> cal.setTime(d1,)@ } CATCH(Exception) {}
results[https://github.com/patrickvane/my_java_library/blob/4b1ca006a59750a3fc349d067ab077497d644542/01a. My Common Objects/lib/patrick_vane/My_Static_Classes/MyDate.java][fromString][1] = -> TRY {  -> return fromDate(dateformat.parse(date,),)@ } CATCH(ParseException) {}
results[https://github.com/ivanstojkovic/doodle/blob/cf262cd5c8b28cf945989b536d73a5982d35f576/feeder/src/main/java/at/tuwien/sbc/feeder/gui/components/DateTextField.java][getDate][1] = -> TRY {  -> return this.df.parse(this.getText(),)@ } CATCH(ParseException) {}
results[https://github.com/ubx/start-list/blob/331cc77d3aca776378f151dc7bbb5301fca6a1ac/test/ch/ubx/startlist/server/TestUtil.java][parseTimeString][1] = -> TRY { -> nextTime=timeFormat.parse(timeStr,)@ } CATCH(ParseException) { -> fail("Could not parse test time(nextTime)",)@ }
