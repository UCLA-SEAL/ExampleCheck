results[https://github.com/svn2github/tigervnc/blob/4f6b706749421b029546c2c3b957c200b9a21168/trunk/java/com/jcraft/jsch/jce/MD5.java][digest][23] = -> TRY {  -> return md.digest()@ } CATCH(Exception) {}
results[https://github.com/Phoenix1708/t2-server-jar-android-0.1/blob/9542f16879cabcf61f752b96fbf25a6b0bd41db0/src/main/java/local/org/apache/http/impl/auth/HttpEntityDigester.java][close][17] = -> TRY {  -> this.digest=this.digester.digest()@ } CATCH(IOException) {}
results[https://github.com/ikeji/openjdk7-jdk/blob/c445903c23d3316d31b5171130aaf714c23f3446/src/share/classes/sun/security/ec/ECDSASignature.java][getDigestValue][6] = -> TRY {  -> return messageDigest.digest()@ } CATCH(SignatureException) {}
results[https://github.com/apache/fop/blob/563da808e4399be05300fcc28838a266b97d868a/test/java/org/apache/fop/util/DigestFilter.java][endDocument][1] = -> TRY {  -> value=digest.digest()@ } CATCH(SAXException) {}
results[https://github.com/jalop-tresys/jjnl/blob/e95564d3ab731dd0571ade9fe479f19eebedfcc6/jnl_lib/src/main/java/com/tresys/jalop/jnl/impl/SubscriberANSHandler.java][getRecordDigest][1] = -> TRY {  -> return md.digest()@ } CATCH(IncompleteRecordException) {}
results[https://github.com/JohannesBuchner/Jarsync/blob/ec4eff70721996879aa59f9dbc1421edeb4f98a1/trunk/vwdiff/source/HTTPClient/MD5InputStream.java][real_close][15] = -> TRY {  -> verifier.verifyHash(md5.digest(),rcvd,)@ } CATCH(IOException) {}
results[https://github.com/AllBinary/phoneme-components-cdc/blob/03923aebc00db2e353b6c3c86a7874c009d48647/src/share/classes/java/security/MessageDigest.java][getDigestLength][8] = -> IF { -> TRY { -> md=(MessageDigest) clone()@!(digestLen==0) -> digest=md.digest()@!(digestLen==0) } }
results[https://github.com/ikeji/openjdk7-jdk/blob/ac3faf88491f55369fb6b83f77fbb75557ed3bf4/test/sun/net/www/http/ChunkedInputStream/ChunkedEncodingTest.java][handle][3] = -> TRY {  -> dos=new DigestOutputStream(os,serverDigest,)@ -> serverMac=serverDigest.digest()@ } CATCH(IOException) {}
results[https://github.com/chenshuo/muduo/blob/3c2d9ccc0dbf4cb29221c837d46b0f0348449aa9/examples/filetransfer/loadtest/Handler.java][channelDisconnected][1] = -> TRY {  -> md5=digest.digest()@ -> bigInt=new BigInteger(1,md5,)@ } CATCH(Exception) {}
results[https://github.com/beppec56/odf-xades/blob/f6e641dc169c7e424851cd3f4eebd621cf497770/oxsit-custom_it/src/com/yacme/ext/oxsit/cust_it/comp/security/xades/factory/SAXSignedDocFactory.java][getDigest][1] = -> TRY { -> digest=m_digest.digest()@ } CATCH(Exception) { -> m_aLogger.severe("Error calculating digest: ",ex,)@ }
results[https://github.com/runtimeverification/javamop/blob/e67e777680b9c5cf79b9925913a2b9897abad88a/examples/ERE/PasswordLogin/MessageDigestClass/MessageDigestClass.java][main][1] = -> TRY {  -> md=MessageDigest.getInstance("SHA-1",)@ -> aMessageDigest=md.digest()@ } CATCH(Exception) {}
results[https://github.com/SiteView/NEWECC9.2/blob/076b63a99db128eb46c350884745811545d46477/org.eclipse.jgit/src/org/eclipse/jgit/storage/dfs/DfsInserter.java][writePackFooter][6] = -> TRY {  -> packHash=md.digest()@ -> writeNoHash(packHash,0,packHash.length,)@ } CATCH(IOException) {}
results[https://github.com/willuhn/hbci4java/blob/36cf06606ba3b25374b94819680545d62668928f/thirdparty/cryptalgs4java/src/java/org/kapott/cryptalgs/ISO9796p1.java][engineSign][1] = -> TRY {  -> buffer=this.dig.digest()@ -> rr=prepareForSig(buffer,bModulus,)@ } CATCH(SignatureException) {}
results[https://github.com/projectodd/nodyn/blob/470b91880f31d16cdc9fe23e4cc561013191f15e/src/main/java/org/projectodd/nodyn/crypto/Hash.java][digest][3] = -> TRY {  -> return encoder.encode(digest.digest(),)@ } CATCH(NoSuchAlgorithmException) {}
results[https://github.com/jscep/jscep/blob/81177552ea8749da9e8d98ed4d46bcde0adf4bf9/api/src/main/java/com/google/code/jscep/pkcs7/SignedDataGenerator.java][getMessageDigest][1] = -> TRY {  -> digest=MessageDigest.getInstance(digestAlgorithm,)@ -> return digest.digest()@ } CATCH(NoSuchAlgorithmException) {}
results[https://github.com/elitak/peertrust/blob/0cecdad23e28e1e2a35e3ea5c802789ce2401c05/src/org/peertrust/security/credentials/CryptTools.java][computeMessageDigestOf][5] = -> TRY {  -> md=getMessageDigest()@ -> mdis=new DigestInputStream(is,md,)@ -> result=md.digest()@ } CATCH(IOException,FileNotFoundException) {}
results[https://github.com/rkapsi/ardverk-dht/blob/51e7d214f9d71d938d55fabc1c0468606cc3ffd7/ardverk-encoding/src/main/java/com/ardverk/dht/message/DigestMessageCodec.java][digest][5] = -> TRY {  -> messageDigest.reset()@ -> messageDigest.update(data,offset,length,)@ -> return messageDigest.digest()@ } CATCH(IOException) {}
results[https://github.com/AndMorMat/clinivet/blob/f9257292780d6b69466369942e16f0aca57647b5/mysql-connector-java-5.1.26/src/com/mysql/jdbc/Security.java][getBinaryPassword][33] = -> TRY {  -> md=MessageDigest.getInstance("SHA-1",)@ -> md.update(binaryPassword,0,8,)@ -> return md.digest()@ } CATCH(NoSuchAlgorithmException) {}
results[https://github.com/sourcesense/modeshape-stone/blob/53f8a077db5e0241896d9f1528a32014c7d02fea/modeshape-common/src/main/java/org/modeshape/common/util/SecureHash.java][close][6] = -> TRY {  -> IF { -> hash=digest.digest()@hash==null } } CATCH(IOException) {}
results[https://github.com/openml/OpenML/blob/0d6e7b7d34a2d9f4601bbaca29aecb5cc543da6f/Java/evaluate_predictions/src/org/openml/io/Md5Writer.java][flush][2] = -> TRY {  -> hash=new BigInteger(1,md.digest(),)@ -> result=hash.toString(16,)@ } CATCH(IOException) {}
results[https://github.com/claudius108/expath-libs/blob/aeef712b998e1b0cd47d9bd694f82c1cb5e47d18/expath-crypto/src/test/java/org/expath/crypto/tests/digest/HashPerformanceTest.java][digestStringWithInputStreamTest][6] = -> TRY {  -> algorithm=MessageDigest.getInstance("SHA",)@ -> dis=new DigestInputStream(is,algorithm,)@ -> hash=algorithm.digest()@ } CATCH(Exception) {}
results[https://github.com/ericdes/nuxeo-features/blob/ea4c319c4784248122722ac75595d79eeede32cd/nuxeo-platform-jbpm/nuxeo-platform-jbpm-core/src/main/java/org/nuxeo/ecm/platform/jbpm/core/deployer/MD5Hasher.java][MD5][62] = -> TRY {  -> md=MessageDigest.getInstance("MD5",)@ -> md.update(bytes,)@ -> md5hash=md.digest()@ } CATCH(NoSuchAlgorithmException) {}
results[https://github.com/giannini/java.learning/blob/2227304c4d4f33100a5d92f9af6a986579c6526e/license/com/java/rsa/Coder.java][encryptSHA][16] = -> TRY {  -> sha=MessageDigest.getInstance(KEY_SHA,)@ -> sha.update(data,)@ -> return sha.digest()@ } CATCH(Exception) {}
results[https://github.com/sorcersoft/sorcer/blob/50d910fa9a8b30be245778940e267e5398607fec/sos/sos-platform/src/main/java/sorcer/core/loki/key/FixedRandom.java][<init>][4] = -> TRY { -> this.sha=MessageDigest.getInstance("SHA-1",)@ -> this.state=sha.digest()@ } CATCH(NoSuchAlgorithmException) { -> throw new RuntimeException("can't find SHA-1!",)@ }
results[https://github.com/sarah-happy/happy-archive/blob/f5d9192e94f5b3b34f5aec47a26e67d0021392a8/src/org/yi/happy/archive/crypto/Digests.java][digestData][1] = -> TRY {  -> d=digest.get()@ -> d.update(data,)@ -> return d.digest()@ } CATCH(UnknownDigestAlgorithmException) {}
results[https://github.com/esoeproject/esoeproject/blob/e06b76aca67544aa673e25368e8b84b723a2dfc0/spepjava/src/com/qut/middleware/spep/authn/bindings/impl/ArtifactProcessorImpl.java][digestEntityIdentifier][3] = -> TRY {  -> digest=MessageDigest.getInstance("SHA1",)@ -> digest.update(entityIdentifierBytes,)@ -> return digest.digest()@ } CATCH(UnsupportedEncodingException,NoSuchAlgorithmException) {}
results[https://github.com/jazzlly/Notes/blob/828857d5a518ccab9178b421442cec1dcb6ad207/java/security/java.sec.src/src/org/zlex/chapter06_6/MessageDigestCoder.java][encodeMD5][2] = -> TRY {  -> md=getMD5MessageDigest()@ -> md.update(data,)@ -> return md.digest()@ } CATCH(Exception) {}
results[https://github.com/intouchfollowup/dbmaintain/blob/ba096fa083fc4fc2c8a07ef91b503ad91331bd9e/src/main/java/org/dbmaintain/script/ScriptContentHandle.java][getCheckSum][1] = -> TRY { -> return getHexPresentation(scriptDigest.digest(),)@ } CATCH(IOException) { -> throw new DbMaintainException(e,)@ }
results[https://github.com/jonnywang/mylocal/blob/9e847eb3aeb1cf7013921f3dc2dfc4f512374363/java/LogHttpServer/src/com/bi/core/Md5.java][getFileMD5String][6] = -> TRY {  -> messageDigest.update(byteBuffer,)@ -> return bufferToHex(messageDigest.digest(),)@ } CATCH(IOException) {}
results[https://github.com/bomm/thera-pi-2/blob/9a41f9731a79045b5a794e923416bfc817a2a6ae/Nebraska/src/utils/NUtils.java][<init>][2] = -> TRY { -> this.sha=MessageDigest.getInstance(Constants.HASH_ALGORITHM_SHA_1,Constants.SECURITY_PROVIDER,)@ -> this.state=sha.digest()@ } CATCH(Exception) { -> throw new RuntimeException("kann SHA-1 nicht finden",)@ }
results[https://github.com/visad/visad/blob/0d81d0f9cb39f49df882e2e03964a6bf72082cd2/core/src/visad/data/in/MD5Key.java][<init>][2] = -> TRY {  -> digester.update(byteArrayOutputStream.toByteArray(),)@ -> checksum=digester.digest()@ } CATCH(IOException) {}
results[https://github.com/saces/jgit/blob/23bd331cb2ce9c387eac377b244a7d9285cf3d25/org.eclipse.jgit/src/org/eclipse/jgit/transport/IndexPack.java][fixThinPack][4] = -> TRY {  -> packDigest.reset()@ -> fixHeaderFooter(packcsum,packDigest.digest(),)@ } CATCH(IOException) {}
results[https://github.com/shunfa/crawlzilla/blob/ad37376fa3b55d707e0e2c9d3ba91fdb5bbf3853/v1.5/webManager/CrawlzillaDemo/WebContent/WEB-INF/classes/org/nchc/crawlzilla/bean/RegisterBean.java][MD5][5] = -> TRY { -> mdInst=MessageDigest.getInstance("MD5",)@ -> mdInst.update(btInput,)@ -> md=mdInst.digest()@ -> LOOP { -> val=(int) md[i]&0xff@i<md.length } }
results[https://github.com/swmaestro2012/somap312_17_CurFit/blob/1782c022cc5b9e96d1d92046758985962e59f69b/app/controllers/RestApp.java][calculateHash][2] = -> TRY {  -> dis=new DigestInputStream(bis,algorithm,)@ -> hash=algorithm.digest()@ -> return byteArray2Hex(hash,)@ } CATCH(Exception) {}
results[https://github.com/davidajulio/hx/blob/40c9334ef750777173b1daf1cb79a38e433c1144/isel/meic/si/ex1/AppGenerator2.java][TryTest][2] = -> TRY {  -> tryDigest=(MessageDigest) badDigest.clone()@ -> tryDigest.update(test,)@ -> return tryDigest.digest()@ } CATCH(CloneNotSupportedException) {}
results[https://github.com/Visual-Illusions/viutils/blob/d0de014556b220a592aeb8bbec5040a7841baa96/src/main/java/net/visualillusionsent/utils/FileUtils.java][checkSum][1] = -> TRY {  -> md=MessageDigest.getInstance(algorithm,)@ -> dis=new DigestInputStream(inStream,md,)@ -> return md.digest()@ } CATCH(IOException,NoSuchAlgorithmException) {}
results[https://github.com/bndtools/bnd/blob/be43f16a6fed3fd7ef78fa646dd5653ecb711e07/biz.aQute.bndlib/src/aQute/bnd/osgi/Jar.java][getTimelessDigest][1] = -> TRY {  -> md=MessageDigest.getInstance("SHA1",)@ -> dout=new DigestOutputStream(IO.nullStream,md,)@ -> return md.digest()@ } CATCH(Exception) {}
results[https://github.com/jazzlly/Notes/blob/2b412eb8c53e63924cb7f6afe781bed3ffb851e6/computer.science/languages/java/security/java.sec.src/src/org/zlex/chapter06_5/MD5Test.java][testByMessageDigest][2] = -> TRY {  -> md=dis.getMessageDigest()@ -> b=md.digest()@ -> md5hex=Hex.encodeHexString(b,)@ } CATCH(Exception) {}
results[https://github.com/bndtools/bnd/blob/a620bea7f5f478a0d25a3fb12d8a61f30d68270b/biz.aQute.bndlib.tests/src/test/deployer/FileRepoTest.java][calculateHash][1] = -> TRY {  -> algorithm.reset()@ -> copy(file,algorithm,)@ -> return algorithm.digest()@ } CATCH(Exception) {}
results[https://github.com/thelinuxbox/enkive/blob/d560ca77cd6750ca17805f23a54ad7585fca45e6/test/java/com/linuxbox/enkive/docstore/mongogrid/MongoGridDocStoreServiceTest.java][setUpClass][1] = -> TRY {  -> messageDigest=getPrimedMessageDigest(testDocument,)@ -> messageDigest.update(testData,)@ -> testDocumentHash=messageDigest.digest()@ } CATCH(Exception) {}
results[https://github.com/azkaban/azkaban2/blob/ab45c45efca54d550f68ca2c78cac4fc11c9aaae/src/java/azkaban/utils/Md5Hasher.java][md5Hash][1] = -> TRY {  -> digest=getMd5Digest()@ -> blobStream=new DigestInputStream(bStream,digest,)@ -> return digest.digest()@ } CATCH(IOException) {}
results[https://github.com/bladesilent/Harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/security/src/test/impl/java/org/apache/harmony/security/tests/provider/crypto/SHA1ImplTest.java][testMultiBlockMessage][2] = -> TRY {  -> md.update("abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq".getBytes("UTF-8",),)@ -> dgst=md.digest()@ } CATCH(UnsupportedEncodingException) {}
results[https://github.com/jgzornoza/SistemaVotacion/blob/47b9c4768ea7400184b095837cbeb96a56a89e9d/SistemaVotacionAndroid/src/itext/java/com/itextpdf/text/ImgJBIG2.java][<init>][6] = -> IF { -> TRY { -> md=MessageDigest.getInstance("MD5",)@ -> md.update(this.global,)@ -> this.globalHash=md.digest()@ } }
results[https://github.com/stain/alibaba/blob/0756f23eb872a01330fc66ea05d3d49ad246d6a7/object-server/src/main/java/org/openrdf/server/metadata/cache/ContentMD5Stream.java][getContentMD5][3] = -> TRY {  -> hash=Base64.encodeBase64(digest.digest(),)@ -> return new String(hash,"UTF-8",)@ } CATCH(UnsupportedEncodingException) {}
results[https://github.com/joshsh/extendo/blob/8c67c276fbce8c43d1e894904d550c2e3211cd85/extendo-server/src/main/java/net/fortytwo/extendo/brain/server/DuplicatesExtension.java][md5SumOf][2] = -> TRY {  -> MD5_DIGEST.update(plaintext.getBytes(UTF_8,),)@ -> digest=MD5_DIGEST.digest()@ } CATCH(UnsupportedEncodingException) {}
results[https://github.com/mattgarkusha/HomeSync/blob/70594de346937cfd0b3533bac2951e927304fc33/IntelliJ Workspace/Password Authentication/src/PasswordAuthenticator.java][validatePassword][2] = -> TRY {  -> hash=MessageDigest.getInstance("SHA-512","BC",)@ -> hash.update(saltAndPassword,)@ -> hashedPassword=hash.digest()@ } CATCH(Exception) {}
results[https://github.com/fcrepo/fcrepo-historical/blob/25ca3bcfbb37135bbddf48408bf37a0da71d6a55/fcrepo-security/fcrepo-security-pep/src/main/java/melcoe/fedora/pep/ResponseCacheImpl.java][makeHash][2] = -> TRY {  -> digest.reset()@ -> hash=digest.digest()@ -> return byte2hex(hash,)@ } CATCH(CacheException) {}
results[https://github.com/dukeboard/kevoree-extra/blob/2f6312dfc5b28f7d8e86d175168a94784238b867/org.kevoree.extra.freePastry/src/main/java/rice/p2p/util/SecurityUtils.java][apop][1] = -> TRY {  -> apop.update(challenge,)@ -> apop.update(password,)@ -> return apop.digest()@ } CATCH(SecurityException) {}
results[https://github.com/claudius108/expath-libs/blob/aeef712b998e1b0cd47d9bd694f82c1cb5e47d18/expath-crypto/src/test/java/org/expath/crypto/tests/digest/HashPerformanceTest.java][digestInputStreamWithBufferedInputStreamTest][3] = -> TRY {  -> algorithm=MessageDigest.getInstance("SHA",)@ -> dis=new DigestInputStream(bis,algorithm,)@ -> hash=algorithm.digest()@ } CATCH(Exception) {}
results[https://github.com/mdiponio/sahara-labs-rig-client-commons/blob/de1f994fd7ed654d4e30b0685d339ed5cdf5eff5/src/au/edu/labshare/rigclient/action/test/JPEGFrameCameraTestAction.java][determineHash][1] = -> TRY {  -> this.hasher.update(buf,0,len,)@ -> this.hashes[i]=this.hasher.digest()@ -> this.hasher.reset()@ } CATCH(DigestException) {}
results[https://github.com/brl/JTor/blob/7b05d16ae20378fa0cace581a4f98061bd5ea364/src/org/torproject/jtor/crypto/TorMessageDigest.java][getDigestBytes][4] = -> TRY { -> clone=(MessageDigest) digestInstance.clone()@ -> return clone.digest()@ } CATCH(CloneNotSupportedException) { -> throw new TorException(e,)@ }
results[https://github.com/torquebox/jruby-maven-plugins/blob/ec587f3d6efcdb9725f40b9c53dfc45957d27101/gem-proxy/src/main/java/de/saumya/mojo/proxy/Controller.java][writeSha][1] = -> TRY {  -> writeUTF8(file,toHex(sha.digest(),),)@ } CATCH(IOException) {}
results[https://github.com/jetty-project/jetty-plugin-support/blob/fa4668ce5c3e5b68ac08d99cbb60dac97d7f869c/jetty-servlets/src/test/java/org/eclipse/jetty/servlets/GzipWithPipeliningTest.java][assertChecksum][2] = -> TRY {  -> actualSha1=Hex.asHex(digest.digest(),)@ -> Assert.assertEquals(testResourceFile+" / SHA1Sum of content",expectedSha1,actualSha1,)@ } CATCH(IOException) {}
results[https://github.com/ata4/disunity/blob/724e794378832688ebe575eca5d01eb75e9dcbd5/disunity-cli/src/main/java/info/ata4/disunity/cli/command/DebugAssetCollect.java][getMD5Checksum][2] = -> TRY {  -> md=MessageDigest.getInstance("MD5",)@ -> digest=md.digest()@ -> return DatatypeConverter.printHexBinary(digest,)@ } CATCH(IOException,NoSuchAlgorithmException) {}
results[https://github.com/MiniSEC/adito_reload/blob/248f593a1291e13cbde205bce1565810cf8bf28a/Alfresco-jLAN/alfresco-jlan/source/java/org/alfresco/jlan/server/auth/PasswordEncryptor.java][doMD4Hashing][2] = -> TRY {  -> md4=MessageDigest.getInstance("MD4",)@ -> md4.update(pwdBytes,)@ -> return md4.digest()@ } CATCH(NoSuchAlgorithmException,InvalidKeyException) {}
results[https://github.com/jonbullock/JBake/blob/680007a8bf7f0a1d8ebb9ca368401d7d88fa62cf/src/main/java/org/jbake/app/FileUtil.java][sha1][1] = -> TRY {  -> complete=MessageDigest.getInstance("SHA-1",)@ -> updateDigest(complete,sourceFile,buffer,)@ -> bytes=complete.digest()@ } CATCH(Exception) {}
results[https://github.com/thialfihar/apg/blob/67ffc24526aeb96d3a368ace68d980a98d5e5153/apg/src/main/java/org/thialfihar/android/apg/pgp/Utils.java][getRgbForData][1] = -> TRY {  -> md=MessageDigest.getInstance("SHA1",)@ -> md.update(bytes,)@ -> digest=md.digest()@ -> result=(int) digest[0]+256%256(int) digest[1]+256%256(int) digest[2]+256%256@ } CATCH(NoSuchAlgorithmException,DigestException) {}
results[https://github.com/irstv/orbisgis-commons/blob/73c50d24fe69abd19506a89549721ac511a22906/src/main/java/org/orbisgis/utils/FileUtils.java][getMD5][1] = -> TRY {  -> m=MessageDigest.getInstance("MD5",)@ -> m.update(content,0,content.length,)@ -> return m.digest()@ } CATCH(IOException,NoSuchAlgorithmException) {}
results[https://github.com/CSEMike/OneSwarm/blob/c391e61ab70b210d10dc44ba7c172aeb96fd9d13/oneswarm_az_mods/mods_f2f/edu/washington/cs/oneswarm/f2f/Friend.java][getSha1][1] = -> TRY {  -> md.update(bytes,0,bytes.length,)@ -> sha1hash=md.digest()@ -> md.reset()@ } CATCH(NoSuchAlgorithmException,UnsupportedEncodingException) {}
results[https://github.com/bndtools/bnd/blob/f2a56db1ad07159a3492f991a98f56d19d4bc852/aQute.libg/src/aQute/lib/json/Encoder.java][digest][1] = -> TRY {  -> IF { -> return null@digest==null } -> return digest.digest()@!(digest==null) } CATCH(NoSuchAlgorithmException,IOException) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/249ff22f64878a7eac7a4f62f92e7b706ed76c58/test/sun/security/ssl/com/sun/net/ssl/internal/ssl/SSLSocketImpl/ServerTimeout.java][doClientSide][1] = -> TRY {  -> md=MessageDigest.getInstance("SHA",)@ -> transIns=new DigestInputStream(new FileInputStream(transFilename,),md,)@ -> clientDigest=md.digest()@ } CATCH(Exception) {}
results[https://github.com/elasticsearch/elasticsearch/blob/0c72bb2125971c015059c861613b6b0fffaa542f/modules/elasticsearch/src/main/java/org/elasticsearch/common/Digest.java][digest][5] = -> TRY {  -> LOOP { -> digest.update(buffer,0,read,)@read>-1 } -> return digest.digest()@ } CATCH(IOException) {}
results[https://github.com/z3pr4h/weave-framework/blob/7ff096d468b4104553371557849129ae171d3f0f/jixaw-util/src/main/java/org/jixaw/util/cryptography/SHA1.java][calculateBytes][2] = -> TRY { -> messageDigest=MessageDigest.getInstance("SHA-1",)@ -> messageDigest.update(inputBytes,)@ -> return messageDigest.digest()@ } CATCH(NoSuchAlgorithmException) { -> throw new CryptographyException(e,)@ }
results[https://github.com/sidseth/h2-container-reuse/blob/9a9fcf826d455aacdc24948300bdf3015302d0f5/common/src/java/org/apache/hadoop/io/SequenceFile.java][<clinit>][23] = -> TRY { -> digester=MessageDigest.getInstance("MD5",)@ -> digester.update(new UID()+"@"+time.getBytes(),)@ -> sync=digester.digest()@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/basho/yokozuna/blob/c015144d36a1f04df0990fb394383e8f27fb8bd3/priv/java/com/basho/yokozuna/handler/MerkleTreeHandler.java][sha][6] = -> TRY {  -> md=MessageDigest.getInstance("SHA",)@ -> md.update(s.getBytes(),)@ -> return md.digest()@ } CATCH(NoSuchAlgorithmException) {}
results[https://github.com/sarah-happy/happy-archive/blob/fe4cf39c758c7faf58f22445ba323ecd0cd80823/src/org/yi/happy/archive/DigestOutputStream.java][close][1] = -> TRY {  -> IF { -> return @md==null } -> hash=new HashValue(md.digest(),)@!(md==null) } CATCH(IOException) {}
results[https://github.com/apache/hadoop-common/blob/1b4ed10ebada49b20b2e02b67c5d2d094db9182b/src/test/core/org/apache/hadoop/io/TestMD5Hash.java][getTestHash][15] = -> TRY {  -> digest=MessageDigest.getInstance("MD5",)@ -> digest.update(buffer,)@ -> return new MD5Hash(digest.digest(),)@ } CATCH(Exception) {}
results[https://github.com/oxhead/decoupled-hadoop/blob/1d79d91876e75ec025028b216971b65b6ae1c581/src/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java][save][8] = -> TRY {  -> digester=MD5Hash.getDigester()@ -> fos=new DigestOutputStream(fout,digester,)@ -> savedDigest=new MD5Hash(digester.digest(),)@ } CATCH(IOException) {}
results[https://github.com/barchart/barchart-udt/blob/e0df2ea887793d2d4654613095221a21f20a780f/barchart-udt-reference-jdk6/src/main/java/sun/security/pkcs11/P11Util.java][sha1][3] = -> TRY { -> md=MessageDigest.getInstance("SHA-1",)@ -> md.update(data,)@ -> return md.digest()@ } CATCH(GeneralSecurityException) { -> throw new ProviderException(e,)@ }
results[https://github.com/Aras90/Eventoo/blob/6141b881e99e431d8a28af1f84c5b604f9d6a493/mysql-connector-java-5.1.24/src/com/mysql/jdbc/Security.java][passwordHashStage2][6] = -> TRY {  -> md=MessageDigest.getInstance("SHA-1",)@ -> md.update(salt,0,4,)@ -> md.update(hashedPassword,0,SHA1_HASH_SIZE,)@ -> return md.digest()@ } CATCH(NoSuchAlgorithmException) {}
results[https://github.com/fakechris/JTrackerServer/blob/a70fc6b7bcb229ae4f6a22c53142c2d98f9b0032/test/com/tracker/backend/TrackerRequestParserTest.java][setUp][2] = -> TRY {  -> md=MessageDigest.getInstance("SHA-1",)@ -> md.update(byteHash,)@ -> rawInfoHash=md.digest()@ -> infoHash=StringUtils.getHexString(rawInfoHash,)@ } CATCH(Exception) {}
results[https://github.com/JohannesBuchner/Jarsync/blob/4fc7fc5c0375c157c80b7c7bba681b8dd835f701/trunk/jarsync/source/org/metastatic/rsync/v2/BufferSender.java][sendDeltas][2] = -> TRY {  -> IF { -> file.sum=file_sum.digest()@!(len==-1) -> return @len==-1 } -> file_sum.update(buf,0,len,)@!(len==-1) } CATCH(IOException) {}
results[https://github.com/apache/avro/blob/4d73af83a5ec618781a1476e55d60b5e3a6e72f5/lang/java/src/java/org/apache/avro/file/DataFileWriter.java][generateSync][4] = -> TRY { -> digester=MessageDigest.getInstance("MD5",)@ -> digester.update(new UID()+"@"+time.getBytes(),)@ -> return digester.digest()@ } CATCH(NoSuchAlgorithmException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/bonitasoft/bonita-studio/blob/2bd5b75b18aeb1ab545055cd977e54f194f7936d/releng/org.bonitasoft.studio-antTasks/src/org/bonitasoft/studio/antTasks/ReplaceDuplicateJarsByLinks.java][createInstance][2] = -> TRY {  -> digester=MessageDigest.getInstance("SHA-1",)@ -> digester.update(bytes,)@ -> res.fileDigest=new String(digester.digest(),)@ } CATCH(Exception) {}
results[https://github.com/huxi/sulky/blob/5f468a78aa0feb1a89a6632277462d5182f56f3d/sulky-blobs/src/main/java/de/huxhorn/sulky/blobs/impl/BlobRepositoryImpl.java][valid][1] = -> digest=createMessageDigest()@ -> TRY { -> dis=new DigestInputStream(input,digest,)@ -> hash=digest.digest()@ } FINALLY { -> IOUtils.closeQuietly(input,)@ }
results[https://github.com/LindseyB/CS1653/blob/95dcc6ed376995e5f086497eca7090b6aede6da3/FinalProject/Phase3/GroupServer.java][getHash][1] = -> TRY { -> messageDigest=MessageDigest.getInstance("SHA1","BC",)@ -> messageDigest.update(doHash,)@ -> return messageDigest.digest()@ } CATCH(Exception) { -> e.printStackTrace(System.err,)@ }
results[https://github.com/noctarius/Lightning/blob/da297a8b9e67542f047f30baba10750835481793/lightning-core/src/main/java/org/apache/directmemory/lightning/internal/util/InternalUtil.java][getChecksum][2] = -> TRY { -> digest=MessageDigest.getInstance("SHA-1",)@ -> digest.update(data,0,data.length,)@ -> return digest.digest()@ } CATCH(Exception) { -> throw new RuntimeException("Could not build checksum of data",)@ }
results[https://github.com/sarah-happy/happy-archive/blob/da6ac0c1870fbeb875488b5a95fd754241bc27ea/src/org/yi/happy/archive/ContentEncodedBlock.java][getHash][1] = -> TRY { -> d=DigestFactory.create(digest,)@ -> d.update(body,)@ -> return d.digest()@ } CATCH(UnknownAlgorithmException) { -> throw new UnknownDigestException(digest,e,)@ }
results[https://github.com/scs/uclinux/blob/2c1c65d052a1b49a09759664b541e1f94519539b/lib/classpath/gnu/java/rmi/server/RMIHashes.java][getMethodHash][4] = -> TRY { -> md=MessageDigest.getInstance("SHA",)@ -> md.update(digest_out.toByteArray(),)@ -> sha=md.digest()@ -> LOOP { -> result+=(long) sha[i]&0xFF<<8*i@i<len } }
results[https://github.com/korpling/ANNIS/blob/66d1ccb6adcc9cc5002e4377a25115de7a5a892d/Annis-Service/Service-Implementation/src/main/java/annis/utils/Utils.java][calculateSHAHash][5] = -> TRY {  -> md=MessageDigest.getInstance("SHA-256",)@ -> md.update(s.getBytes("UTF-8",),)@ -> digest=md.digest()@ } CATCH(NoSuchAlgorithmException,UnsupportedEncodingException) {}
results[https://github.com/gdelente/mention-android-universal-image-loader/blob/af5ef01a28c4c89723ef5ee8ba43fc1d58e04f94/library/src/com/nostra13/universalimageloader/cache/disc/naming/Md5FileNameGenerator.java][getMD5][2] = -> TRY { -> digest=MessageDigest.getInstance(HASH_ALGORITHM,)@ -> digest.update(data,)@ -> hash=digest.digest()@ } CATCH(NoSuchAlgorithmException) { -> L.e(e,)@ }
results[https://github.com/hank/litecoinj/blob/216deb2d35d1a128a7f617b91f2ca35438aae546/lib/src/com/google/bitcoin/core/Utils.java][singleDigest][2] = -> TRY { -> digest=MessageDigest.getInstance("SHA-256",)@ -> digest.update(input,offset,length,)@ -> return digest.digest()@ } CATCH(NoSuchAlgorithmException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/fusesource/fuse-extra/blob/18f008e10a8ecd1ce74c695dd2993f5f64379ae4/fabric-apollo-cluster/src/main/scala/org/fusesource/fabric/apollo/cluster/util/Hasher.java][hash][2] = -> TRY { -> md=MessageDigest.getInstance(algorithim,)@ -> md.update(data,0,len,)@ -> digest=md.digest()@ -> return (int) digest[0]&0xFF<<24|digest[1]&0xFF<<16|digest[2]&0xFF<<8|digest[3]&0xFF@ } CATCH(NoSuchAlgorithmException) { -> throw new RuntimeException(algorithim+" not supported",e,)@ }
results[https://github.com/zycgit/hasor/blob/9efc5ef6a9db3207203b496cbde791721ec83dba/src/extends-parent/jetty-all/src/main/java/org/eclipse/jetty/websocket/WebSocketConnectionD00.java][doTheHixieHixieShake][4] = -> TRY { -> md=MessageDigest.getInstance("MD5",)@ -> md.update(fodder,)@ -> return md.digest()@ } CATCH(NoSuchAlgorithmException) { -> throw new IllegalStateException(e,)@ }
results[https://github.com/MiniSEC/adito_reload/blob/429cbc3960d6ed22fc2840c32ac8d4f683b932c4/adito/branches/maven2/adito/src/com/adito/jdbc/hsqldb/DBFunctions.java][digest][2] = -> TRY {  -> md=MessageDigest.getInstance("MD5",)@ -> md.update(b,)@ -> digest=md.digest()@ -> return new String(digest,)@ } CATCH(NoSuchAlgorithmException,UnsupportedEncodingException) {}
results[https://github.com/miun/mediasense/blob/c92661931d6e0063a8c26b0bd159d15c92f1e820/eclipse_projects/DHT/src/manager/dht/SHA1Generator.java][SHA1][2] = -> TRY { -> md=MessageDigest.getInstance("SHA-1",)@ -> md.update(data,)@ -> sha1hash=md.digest()@ } CATCH(NoSuchAlgorithmException) { -> e.printStackTrace()@ }
results[https://github.com/gaffo/jgit/blob/ff09f7e201c285af38fd1293fe5ac08019ae45dc/org.spearce.jgit/src/org/spearce/jgit/fetch/IndexPack.java][readPackFooter][3] = -> TRY {  -> cmpcsum=packDigest.digest()@ -> IF { -> throw new CorruptObjectException("Packfile checksum incorrect.",)@!(Arrays.equals(cmpcsum,packcsum,)) } } CATCH(IOException) {}
results[https://github.com/mozilla-services/android-sync/blob/b33be9e3d7aeebfef4a8c1cd84fbfb16bb3010d2/src/main/java/org/mozilla/gecko/background/datareporting/TelemetryRecorder.java][makePingFooter][1] = -> TRY {  -> base64Checksum=Base64.encodeToString(checksum.digest(),Base64.NO_WRAP,)@ -> return "\",\"checksum\":"+JSONObject.quote(base64Checksum,)+"}".getBytes(charset,)@ } CATCH(UnsupportedEncodingException) {}
results[https://github.com/AbinashBishoyi/FreeRapid-Plugins/blob/19f75252c46a12ab0acd704675ce699df2f5f880/src/tor/com/subgraph/orchid/crypto/TorMessageDigest.java][peekDigest][3] = -> TRY { -> clone=(MessageDigest) digestInstance.clone()@ -> clone.update(data,offset,length,)@ -> return clone.digest()@ } CATCH(CloneNotSupportedException) { -> throw new TorException(e,)@ }
results[https://github.com/droolsjbpm/uberfire/blob/4be6ffae8721dbba07f3b9b4d4e402570b3f1e4c/guvnorng-vfs/vfs-impls/vfs-jgit/src/main/java/com/gitblit/utils/JGitUtils.java][createInmemoryIndex][1] = -> TRY {  -> digest=Constants.newMessageDigest()@ -> os=createOutputStream(digest,(FileRepository) repo,)@ -> id=ObjectId.fromRaw(digest.digest(),)@ } CATCH(IOException) {}
results[https://github.com/claudius108/expath-libs/blob/5b42d5bd4b2fbe0d8e2de7e4130621acf3d1a7a6/expath-crypto/src/test/java/org/expath/crypto/tests/junit/digest/HashPerformanceTest.java][digestString][1] = -> TRY {  -> algorithm=MessageDigest.getInstance("SHA",)@ -> algorithm.update(tempString.getBytes("UTF-8",),)@ -> hash=algorithm.digest()@ } CATCH(Exception) {}
results[https://github.com/FreakyPenguin/elexis-hilotec-base/blob/a03ec9ac9020af9ee6cd14b2cf9cc1a46863f035/elexis-utilities/src/ch/rgw/crypt/SAT.java][calcDigest][1] = -> TRY { -> digest=MessageDigest.getInstance("SHA-1",)@ -> addParameters(body,digest,)@ -> return digest.digest()@ } CATCH(NoSuchAlgorithmException) { -> ExHandler.handle(e,)@ }
results[https://github.com/kaltura/KalturaServer-Backup/blob/8aaa25f111fce12770eba1cc1a73674f7ce5f145/generator/sources/java/src/com/kaltura/client/KalturaClientBase.java][signInfoWithSHA1][1] = -> TRY {  -> algorithm=MessageDigest.getInstance("SHA1",)@ -> algorithm.reset()@ -> algorithm.update(data,)@ -> infoSignature=algorithm.digest()@ } CATCH(GeneralSecurityException) {}
results[https://github.com/mattgarkusha/HomeSync/blob/48dd174a43b46d97347572a437200b72eef63a09/Android_workspace/ContentProvider/src/com/example/contentprovider/userLoginActivity.java][hashPassword][1] = -> TRY {  -> hash=MessageDigest.getInstance("SHA-512","BC",)@ -> hash.update(saltAndPassword,)@ -> hashedPassword=hash.digest()@ -> stringPass=CryptoUtils.toString(hashedPassword,)@ } CATCH(Exception) {}
results[https://github.com/mlundblad/bc-java/blob/2b976f5364cfdbc37d3086019d93483c983eb80b/prov/src/test/java/org/bouncycastle/jce/provider/test/SigTest.java][testBadSig][1] = -> TRY {  -> sha1=MessageDigest.getInstance("SHA1","BC",)@ -> sha1.update((byte) 0,)@ -> dig=sha1.digest()@ -> System.arraycopy(dig,0,block,sigHeader.length,dig.length,)@ } CATCH(Exception) {}
results[https://github.com/androidquery/androidquery/blob/0aac8005078e8ad5b42a973e2ee11ec6e5a23518/src/com/androidquery/util/AQUtility.java][getMD5][2] = -> TRY { -> digest=java.security.MessageDigest.getInstance("MD5",)@ -> digest.update(data,)@ -> hash=digest.digest()@ } CATCH(NoSuchAlgorithmException) { -> AQUtility.report(e,)@ }
results[https://github.com/peq/WurstScript/blob/cdc8363bae134c09aafc8d14c8ff1f0b1d9bfb61/Wurst Updater v2/src/file/FileChecksum.java][get][1] = -> TRY { -> md=MessageDigest.getInstance("MD5",)@ -> digest=md.digest()@ -> return bytesToHex(digest,)@ } CATCH(NoSuchAlgorithmException | IOException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/photo/mobile-android/blob/8f24aa6794402bb08889f7987590e4606dae0648/app/src/me/openphoto/android/app/util/SHA1Utils.java][computeSha1ForFile][1] = -> TRY {  -> md=MessageDigest.getInstance("SHA1",)@ -> dis=new DigestInputStream(fis,md,)@ -> return byteArray2Hex(md.digest(),)@ } CATCH(IOException,NoSuchAlgorithmException) {}
results[https://github.com/intouchfollowup/dbmaintain/blob/eaf5bb62886d73c0625b64f65c3400707232942b/dbmaintain/src/main/java/org/dbmaintain/script/ScriptContentHandle.java][getCheckSum][1] = -> TRY { -> scriptDigest=getScriptDigest()@ -> return getHexPresentation(scriptDigest.digest(),)@ } CATCH(IOException) { -> throw new DbMaintainException(e,)@ }
