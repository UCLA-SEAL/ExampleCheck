results[https://github.com/charles-dyfis-net/svnkit/blob/6cd93bfef2472117114293634b82c37d6ded89fb/svnkit/src/main/java/org/tmatesoft/svn/core/internal/util/SVNSSLUtil.java][getFingerprint][12] = -> TRY { -> md=MessageDigest.getInstance((digestAlgorithm!=null)?digestAlgorithm:"SHA1",)@ -> md.update(key,)@ -> digest=md.digest()@ }
results[https://github.com/svn2github/icepdf/blob/508e8e2b3f7df47add32bee1a2fcc19175e9d088/core/src/org/icepdf/core/pobjects/security/StandardEncryption.java][resetObjectReference][2] = -> TRY { -> md5=MessageDigest.getInstance("MD5",)@ } -> md5.update(step2Bytes,)@ -> return md5.digest()@
results[https://github.com/seasarorg/teeda/blob/1cb9d04bcf3a07fe8c5733c4d0956079da534f94/teeda/teeda-extension/src/main/java/org/seasar/teeda/extension/util/TransactionTokenUtil.java][generate][1] = -> md=MessageDigestUtil.getInstance("MD5",)@ -> md.update(idBytes,)@ -> md.update(now,)@ -> return StringUtil.toHex(md.digest(),)@
results[https://github.com/maxirosson/jdroid/blob/95fc03dede87a5e2d1b630e5d5ca7f14e6fba190/jdroid-android/src/main/java/com/facebook/internal/Utility.java][hashWithAlgorithm][53] = -> TRY { -> hash=MessageDigest.getInstance(algorithm,)@ } -> hash.update(key.getBytes(),)@ -> digest=hash.digest()@
results[https://github.com/fbogyai/sport-league-system/blob/03921518c79e9d03ffaa1fac953cc206c717d216/src/main/java/cz/muni/fi/pv243/sportleaguesystem/service/PrincipalServiceImpl.java][hashPassword][13] = -> TRY { -> md=MessageDigest.getInstance("MD5",)@ -> md.update(password.getBytes(),)@ -> byteData=md.digest()@ }
results[https://github.com/adeven/adjust_android_sdk/blob/af35c2eaa465cd441edf93bb3559be25e1b904aa/AdjustIo/src/com/adjust/sdk/Util.java][hash][3] = -> TRY { -> mesd=MessageDigest.getInstance(method,)@ -> mesd.update(bytes,0,bytes.length,)@ -> hash=mesd.digest()@ -> return convertToHex(hash,)@ }
results[https://github.com/ndeloof/svnkit/blob/57c757fd308fb9d11232783322f88b5b75f82bb4/javasvn/src/org/tmatesoft/svn/core/javahl/JavaHLAuthenticationProvider.java][getFingerprint][3] = -> TRY { -> md=MessageDigest.getInstance("SHA1",)@ -> md.update(cert.getEncoded(),)@ -> digest=md.digest()@ }
results[https://github.com/bojanp/Nginious/blob/2c55b4a18eda99130b7840c2573747c9c864cb9c/nginious-server/src/main/java/com/nginious/http/application/StaticContent.java][readCachedEntityTag][1] = -> TRY { -> md=MessageDigest.getInstance("MD5",)@ -> md.update(this.content,0,(int) this.length,)@ -> return StringUtils.asHexString(md.digest(),)@ }
results[https://github.com/runtimeverification/javamop/blob/e67e777680b9c5cf79b9925913a2b9897abad88a/examples/ERE/PasswordLogin/MessageDigestClass/MessageDigestClass.java][main][1] = -> TRY {  -> md=MessageDigest.getInstance("SHA-1",)@ -> aMessageDigest=md.digest()@ } CATCH(Exception) {}
results[https://github.com/dice-cyfronet/coin/blob/bcb5b0bb1cbd0acafdd51e589678a52c6b9b87b2/coined/src/main/java/pl/cyfronet/coin/impl/utils/PublicKeyUtils.java][getFingerprint][1] = -> TRY { -> hash=MessageDigest.getInstance("MD5",)@ -> hash.reset()@ -> hash.update(data,0,data.length,)@ -> foo=hash.digest()@ }
results[https://github.com/LucasEasedUp/logit/blob/863b96918dd60774c7f0ca57df7b4bd798479741/src/io/github/lucaseasedup/logit/hash/HashGenerator.java][getHash][3] = -> TRY { -> messageDigest=MessageDigest.getInstance(algorithm,)@ -> messageDigest.update(string.getBytes(),)@ } -> bytes=messageDigest.digest()@
results[https://github.com/leandrocruz/Xingu/blob/865a2d0a627a36b7921e8e427dba173ca7fdfddb/utils/src/main/java/br/com/ibnetwork/xingu/utils/MD5Utils.java][md5Hash][1] = -> TRY { -> md=MessageDigest.getInstance("MD5",)@ -> md.update(barray,)@ -> result=md.digest()@ -> restring=StringUtils.toHex(result,)@ }
results[https://github.com/dukeboard/kevoree-extra/blob/2f6312dfc5b28f7d8e86d175168a94784238b867/org.kevoree.extra.freePastry/src/main/java/rice/p2p/aggregation/raw/RawAggregate.java][getContentHash][1] = -> TRY { -> md=MessageDigest.getInstance("SHA",)@ } -> md.reset()@ -> md.update(bytes,0,numBytes,)@ -> return md.digest()@
results[https://github.com/jscep/jscep/blob/81177552ea8749da9e8d98ed4d46bcde0adf4bf9/api/src/main/java/com/google/code/jscep/pkcs7/SignedDataGenerator.java][getMessageDigest][1] = -> TRY {  -> digest=MessageDigest.getInstance(digestAlgorithm,)@ -> return digest.digest()@ } CATCH(NoSuchAlgorithmException) {}
results[https://github.com/dukeboard/kevoree-extra/blob/2f6312dfc5b28f7d8e86d175168a94784238b867/org.kevoree.extra.freePastry/src/main/java/rice/p2p/aggregation/Aggregate.java][getContentHash][1] = -> TRY { -> md=MessageDigest.getInstance("SHA",)@ } -> md.reset()@ -> md.update(bytes,)@ -> return md.digest()@
results[https://github.com/AndMorMat/clinivet/blob/f9257292780d6b69466369942e16f0aca57647b5/mysql-connector-java-5.1.26/src/com/mysql/jdbc/Security.java][getBinaryPassword][33] = -> TRY {  -> md=MessageDigest.getInstance("SHA-1",)@ -> md.update(binaryPassword,0,8,)@ -> return md.digest()@ } CATCH(NoSuchAlgorithmException) {}
results[https://github.com/frostwire/frostwire-android/blob/08b4ce8de0ba4b471334495ef59bed41e3a3eebf/src/gui/com/frostwire/android/gui/DiskCrawlCache.java][encodeKey][2] = -> TRY { -> md=MessageDigest.getInstance("MD5",)@ -> md.update(bytes,0,bytes.length,)@ -> md5hash=md.digest()@ -> return ByteUtils.encodeHex(md5hash,)@ } CATCH(Throwable) { -> LOG.error("Error encoding cache key",e,)@ }
results[https://github.com/claudius108/expath-libs/blob/aeef712b998e1b0cd47d9bd694f82c1cb5e47d18/expath-crypto/src/test/java/org/expath/crypto/tests/digest/HashPerformanceTest.java][digestStringWithInputStreamTest][6] = -> TRY {  -> algorithm=MessageDigest.getInstance("SHA",)@ -> dis=new DigestInputStream(is,algorithm,)@ -> hash=algorithm.digest()@ } CATCH(Exception) {}
results[https://github.com/spontecorp/ferretotalserver/blob/6ff5b0a7916a3fd19833d984d101a9521768e496/src/java/com/spontecorp/ferretotalserver/security/Cifrador.java][generaKey][4] = -> TRY { -> digest=MessageDigest.getInstance("SHA",)@ -> digest.update(passphrase.getBytes(),)@ -> key=new SecretKeySpec(digest.digest(),0,16,"AES",)@ }
results[https://github.com/yixia/VitamioBundle/blob/4db7eae511245560182be8def12714d61ff28095/vitamio/src/io/vov/vitamio/utils/Crypto.java][md5][2] = -> TRY { -> m=MessageDigest.getInstance("MD5",)@ -> m.update(plain.getBytes(),)@ -> digest=m.digest()@ -> bigInt=new BigInteger(1,digest,)@ }
results[https://github.com/ericdes/nuxeo-features/blob/ea4c319c4784248122722ac75595d79eeede32cd/nuxeo-platform-jbpm/nuxeo-platform-jbpm-core/src/main/java/org/nuxeo/ecm/platform/jbpm/core/deployer/MD5Hasher.java][MD5][62] = -> TRY {  -> md=MessageDigest.getInstance("MD5",)@ -> md.update(bytes,)@ -> md5hash=md.digest()@ } CATCH(NoSuchAlgorithmException) {}
results[https://github.com/giannini/java.learning/blob/2227304c4d4f33100a5d92f9af6a986579c6526e/license/com/java/rsa/Coder.java][encryptSHA][16] = -> TRY {  -> sha=MessageDigest.getInstance(KEY_SHA,)@ -> sha.update(data,)@ -> return sha.digest()@ } CATCH(Exception) {}
results[https://github.com/Hidendra/LWC/blob/57cd7598e969bf8d8dcce2e896e0d8366d7fbb7e/core/src/main/java/com/griefcraft/util/StringUtil.java][encrypt][4] = -> TRY { -> md=MessageDigest.getInstance("SHA",)@ -> md.update(plaintext.getBytes("UTF-8",),)@ -> raw=md.digest()@ -> return byteArray2Hex(raw,)@ }
results[https://github.com/sorcersoft/sorcer/blob/50d910fa9a8b30be245778940e267e5398607fec/sos/sos-platform/src/main/java/sorcer/core/loki/key/FixedRandom.java][<init>][4] = -> TRY { -> this.sha=MessageDigest.getInstance("SHA-1",)@ -> this.state=sha.digest()@ } CATCH(NoSuchAlgorithmException) { -> throw new RuntimeException("can't find SHA-1!",)@ }
results[https://github.com/esoeproject/esoeproject/blob/e06b76aca67544aa673e25368e8b84b723a2dfc0/spepjava/src/com/qut/middleware/spep/authn/bindings/impl/ArtifactProcessorImpl.java][digestEntityIdentifier][3] = -> TRY {  -> digest=MessageDigest.getInstance("SHA1",)@ -> digest.update(entityIdentifierBytes,)@ -> return digest.digest()@ } CATCH(UnsupportedEncodingException,NoSuchAlgorithmException) {}
results[https://github.com/koordinates/geonetwork/blob/13c1ac3d1cc10f0b4cb87ef8fe826b19a0bf6f92/jeeves/src/jeeves/utils/Util.java][scramble][10] = -> TRY { -> md=MessageDigest.getInstance("SHA-1",)@ -> md.update(text.getBytes("UTF-8",),)@ -> return getHex(md.digest(),)@ }
results[https://github.com/apache/synapse/blob/2782162356544972ada48b7b3366e39ee805b124/scratch/asankha/1.2-656977/modules/core/src/main/java/org/apache/synapse/util/UUIDGenerator.java][getInitialUUID][8] = -> TRY { -> md5=MessageDigest.getInstance("MD5",)@ } -> md5.update(sb.toString().getBytes(),)@ -> array=md5.digest()@
results[https://github.com/webinos/Webinos-Platform/blob/379e0d1e95023a173a75f4e2fb55fef927cd215f/webinos/platform/android/util/src/org/webinos/util/ModuleUtils.java][getResourceUriHash][4] = -> TRY { -> sha=MessageDigest.getInstance("SHA-1",)@ -> sha.update(id.getBytes("iso-8859-1",),)@ -> return digest2Hex(sha.digest(),)@ }
results[https://github.com/DomoTop/DomoTop/blob/ea7602cd5730fdb30d9be7233b637b0c235f00b9/Product/Controller/src/org/openremote/controller/utils/AlgorithmUtil.java][generateSHA512][1] = -> TRY { -> md=MessageDigest.getInstance("SHA-512",)@ -> md.update(message,)@ -> resultByte=md.digest()@ } -> return new String(Hex.encodeHex(resultByte,),)@
results[https://github.com/hashio/websocket-client/blob/c52bb11358533ad804b0fd8d535f71598327bfae/src/main/java/jp/a840/websocket/util/StringUtil.java][toMD5HexString][1] = -> TRY { -> md=MessageDigest.getInstance("MD5",)@ -> md.update(str.getBytes("US-ASCII",),)@ -> return toHexString(md.digest(),)@ }
results[https://github.com/stutiguias/webportal/blob/969f46a3f132704b03b365f7ba2c0fe2d85bdfd7/src/main/java/me/stutiguias/webportal/webserver/authentication/Algorithm.java][gerarHash][6] = -> TRY { -> md=MessageDigest.getInstance(algoritmo,)@ -> md.reset()@ -> md.update(frase.getBytes(),)@ -> digest=md.digest()@ }
results[https://github.com/shunfa/crawlzilla/blob/ad37376fa3b55d707e0e2c9d3ba91fdb5bbf3853/v1.5/webManager/CrawlzillaDemo/WebContent/WEB-INF/classes/org/nchc/crawlzilla/bean/RegisterBean.java][MD5][5] = -> TRY { -> mdInst=MessageDigest.getInstance("MD5",)@ -> mdInst.update(btInput,)@ -> md=mdInst.digest()@ -> LOOP { -> val=(int) md[i]&0xff@i<md.length } }
results[https://github.com/liucong/jms4cxf2/blob/bcf3dea39b02267fa2663733c790cf39c20a993a/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyhandlers/SymmetricBindingHandler.java][getSHA1][1] = -> TRY { -> sha=MessageDigest.getInstance("SHA-1",)@ -> sha.reset()@ -> sha.update(input,)@ -> data=sha.digest()@ -> return Base64.encode(data,)@ }
results[https://github.com/alkacon/alkacon-oamp/blob/a74f9d3ed92a5f66855fea5c99488234c108e213/com.alkacon.opencms.formgenerator/src/com/alkacon/opencms/formgenerator/CmsCaptchaSettings.java][getKey][2] = -> TRY { -> md5=MessageDigest.getInstance("MD5",)@ -> md5.update(PASSWORD.toString().getBytes(),)@ -> key=md5.digest()@ }
results[https://github.com/copperflake/SAT/blob/5d14b6cbe0f6a295b92053ec0626b3faa48ce76e/src/sat/radio/Radio.java][sendText][1] = -> TRY { -> digest=MessageDigest.getInstance("SHA1",)@ -> digest.update(data,0,data.length,)@ -> hash=digest.digest()@ } -> send(new MessageData(id,c,hash,0,"txt",data.length,data,),)@
results[https://github.com/Visual-Illusions/viutils/blob/d0de014556b220a592aeb8bbec5040a7841baa96/src/main/java/net/visualillusionsent/utils/FileUtils.java][checkSum][1] = -> TRY {  -> md=MessageDigest.getInstance(algorithm,)@ -> dis=new DigestInputStream(inStream,md,)@ -> return md.digest()@ } CATCH(IOException,NoSuchAlgorithmException) {}
results[https://github.com/bndtools/bnd/blob/be43f16a6fed3fd7ef78fa646dd5653ecb711e07/biz.aQute.bndlib/src/aQute/bnd/osgi/Jar.java][getTimelessDigest][1] = -> TRY {  -> md=MessageDigest.getInstance("SHA1",)@ -> dout=new DigestOutputStream(IO.nullStream,md,)@ -> return md.digest()@ } CATCH(Exception) {}
results[https://github.com/frostwire/frostwire-android/blob/08b4ce8de0ba4b471334495ef59bed41e3a3eebf/src/gui/com/frostwire/android/gui/util/DiskLruRawDataCache.java][encodeKey][2] = -> TRY { -> md=MessageDigest.getInstance("MD5",)@ -> md.update(bytes,0,bytes.length,)@ -> md5hash=md.digest()@ -> return ByteUtils.encodeHex(md5hash,)@ } CATCH(Throwable) { -> e.printStackTrace()@ }
results[https://github.com/cnyangyifeng/otp/blob/09eb8bfed2d9cfbc60aab9cfb660d0f7febf66c7/src/main/java/cn/xdf/me/otp/sso/e2/util/AESX3.java][md5][1] = -> TRY { -> mdTemp=MessageDigest.getInstance("MD5",)@ -> mdTemp.update(strTemp,)@ -> md=mdTemp.digest()@ -> return Hex.encodeHexString(md,).toUpperCase()@ }
results[https://github.com/jgzornoza/SistemaVotacion/blob/47b9c4768ea7400184b095837cbeb96a56a89e9d/SistemaVotacionAndroid/src/itext/java/com/itextpdf/text/ImgJBIG2.java][<init>][6] = -> IF { -> TRY { -> md=MessageDigest.getInstance("MD5",)@ -> md.update(this.global,)@ -> this.globalHash=md.digest()@ } }
results[https://github.com/jifeee/tb/blob/9939f2e260e2192bce14f3edfdbaa350046cb43a/legacy/Textbuster/src/com/access2/BusterService.java][onCreate][1] = -> TRY { -> md=MessageDigest.getInstance("SHA-256",)@ -> md.update(telephonyMgr.getDeviceId().getBytes(),)@ -> deviceId=md.digest()@ }
results[https://github.com/harsimranmaan/DBox/blob/b17edbd30a6767a6ff9107b4a82b51db7bce09b9/DBoxInterface/src/dBox/utils/Hashing.java][encryptSHA][1] = -> TRY { -> md=MessageDigest.getInstance("SHA-1",)@ -> md.update(literal.getBytes(),)@ -> hash=getString(md.digest(),)@ }
results[https://github.com/appnexus/mobile-sdk-android/blob/5c5b89f3956830c957809b77f310a8bcaae72f3c/sdk/src/com/appnexus/opensdk/utils/HashingFunctions.java][md5][2] = -> TRY { -> digest=java.security.MessageDigest.getInstance("MD5",)@ -> digest.update(s.getBytes(),)@ -> messageDigest=digest.digest()@ -> return HashingFunctions.byteToHex(messageDigest,)@ }
results[https://github.com/zlainsama/LainCraft/blob/25c74aad8f9a744e1dea0f751a5261400d3c5c95/src/main/java/lain/mods/laincraft/util/StreamUtils.java][compute_md5][2] = -> TRY { -> digest=MessageDigest.getInstance("MD5",)@ -> digest.update(bytes,)@ -> return String.format("%1$032x",new BigInteger(1,digest.digest(),),)@ }
results[https://github.com/loldot/Orientering/blob/f5c31f276c0730483cf2c6bb543de745ccc6e30c/Web/src/no/orientering/DAO/jdbc/UserDAO.java][SHA256][1] = -> TRY { -> pwHash=MessageDigest.getInstance("SHA-256",)@ -> pwHash.update(str.getBytes("UTF-8",),)@ -> hash=ByteUtil.BytesToHexString(pwHash.digest(),)@ }
results[https://github.com/zcourts/higgs/blob/dc38ab4aacc444b2a6b7b8ee64180d19cf2fc499/higgs-core/src/main/java/com/fillta/higgs/util/Algorithms.java][sha256][1] = -> TRY { -> messageDigest=MessageDigest.getInstance("SHA-256",)@ -> messageDigest.update(str.getBytes(),)@ -> return new String(messageDigest.digest(),)@ }
results[https://github.com/claudius108/expath-libs/blob/aeef712b998e1b0cd47d9bd694f82c1cb5e47d18/expath-crypto/src/test/java/org/expath/crypto/tests/digest/HashPerformanceTest.java][digestInputStreamWithBufferedInputStreamTest][3] = -> TRY {  -> algorithm=MessageDigest.getInstance("SHA",)@ -> dis=new DigestInputStream(bis,algorithm,)@ -> hash=algorithm.digest()@ } CATCH(Exception) {}
results[https://github.com/apache/incubator-marmotta/blob/c77916e81341ebf9604880ae189c958d06258b2d/commons/marmotta-commons/src/main/java/at/newmedialab/sesame/commons/util/HashUtils.java][calcHash][2] = -> TRY { -> m=MessageDigest.getInstance(algorithm,)@ -> m.update(bytes,)@ -> return new BigInteger(1,m.digest(),).toString(16,)@ }
results[https://github.com/johnstok/http/blob/739ba67cb62df6c1ba86c0a4ce9304108369c30c/src/main/java/com/johnstok/http/engine/Utils.java][eTag][1] = -> TRY { -> m=MessageDigest.getInstance("MD5",)@ -> m.update(data,0,data.length,)@ -> i=new BigInteger(1,m.digest(),)@ -> return String.format("%1$032X",i,)@ }
results[https://github.com/mdaniel/svn-caucho-com-resin/blob/1c06bc0e918b42f4a9d5010611ef3d385a6effe8/modules/quercus/src/com/caucho/quercus/lib/QuercusStringModule.java][sha1][2] = -> TRY {  -> md=MessageDigest.getInstance("SHA1",)@ -> LOOP { -> md.update((byte) ch,)@ } -> digest=md.digest()@ } CATCH(Throwable) {}
results[https://github.com/MathijsStertefeld/RekeningRijden/blob/e999d3576d0fb9efd7b8426de7432659de639705/Source/AdministrationDomain/src/main/java/com/marbl/administration/domain/utils/Hasher.java][hash][2] = -> TRY { -> md=MessageDigest.getInstance(algorithm,)@ -> md.update(text.getBytes(charsetName,),)@ -> digest=md.digest()@ -> bi=new BigInteger(1,digest,)@ }
results[https://github.com/ata4/disunity/blob/724e794378832688ebe575eca5d01eb75e9dcbd5/disunity-cli/src/main/java/info/ata4/disunity/cli/command/DebugAssetCollect.java][getMD5Checksum][2] = -> TRY {  -> md=MessageDigest.getInstance("MD5",)@ -> digest=md.digest()@ -> return DatatypeConverter.printHexBinary(digest,)@ } CATCH(IOException,NoSuchAlgorithmException) {}
results[https://github.com/weishengshui/posserver/blob/417417f1ce5eb7862aad55fe179fbb7cc512c1b3/qqmeishi-wsapi/src/main/java/com/chinarewards/qq/meishi/util/DigestUtil.java][digestData][1] = -> TRY {  -> TRY { -> md=java.security.MessageDigest.getInstance(algorithm,)@ -> md.update(source,)@ -> tmp=md.digest()@ } CATCH(Throwable) { -> throw new Exception("data digest is ERROR!",e,)@ } } CATCH(Throwable) {}
results[https://github.com/qyb/sohu/blob/38215b2966d993ea41ab85a099fa783c92e14230/src/StorageWorkspace/StorageAPI/src/com/scss/utility/CommonUtilities.java][getBase64MD5][1] = -> TRY { -> digest=MessageDigest.getInstance("MD5",)@ -> digest.update(data,)@ -> b64=Base64.encodeBase64(digest.digest(),)@ -> rc=new String(b64,)@ }
results[https://github.com/MiniSEC/adito_reload/blob/248f593a1291e13cbde205bce1565810cf8bf28a/Alfresco-jLAN/alfresco-jlan/source/java/org/alfresco/jlan/server/auth/PasswordEncryptor.java][doMD4Hashing][2] = -> TRY {  -> md4=MessageDigest.getInstance("MD4",)@ -> md4.update(pwdBytes,)@ -> return md4.digest()@ } CATCH(NoSuchAlgorithmException,InvalidKeyException) {}
results[https://github.com/jonbullock/JBake/blob/680007a8bf7f0a1d8ebb9ca368401d7d88fa62cf/src/main/java/org/jbake/app/FileUtil.java][sha1][1] = -> TRY {  -> complete=MessageDigest.getInstance("SHA-1",)@ -> updateDigest(complete,sourceFile,buffer,)@ -> bytes=complete.digest()@ } CATCH(Exception) {}
results[https://github.com/seasarorg/test-cms-1/blob/9cf23e1905e6a7026e1a452667e068bd5cefb83b/ymir/src/main/java/org/seasar/cms/ymir/util/TokenUtils.java][generateToken][1] = -> TRY { -> md=MessageDigest.getInstance("MD5",)@ -> md.update(id,)@ -> md.update(now,)@ -> return toHex(md.digest(),)@ }
results[https://github.com/xstd/xstd_plugin/blob/29f76ba967c5d996e6d8dedcb9c86fd86859c8bd/src/com/xstd/plugin/Utils/EncryptUtils.java][getMD5Data][1] = -> TRY { -> md5=MessageDigest.getInstance("MD5",)@ -> md5.update(src,)@ -> return EncryptUtils.byte2hex(md5.digest(),).toLowerCase()@ }
results[https://github.com/thialfihar/apg/blob/67ffc24526aeb96d3a368ace68d980a98d5e5153/apg/src/main/java/org/thialfihar/android/apg/pgp/Utils.java][getRgbForData][1] = -> TRY {  -> md=MessageDigest.getInstance("SHA1",)@ -> md.update(bytes,)@ -> digest=md.digest()@ -> result=(int) digest[0]+256%256(int) digest[1]+256%256(int) digest[2]+256%256@ } CATCH(NoSuchAlgorithmException,DigestException) {}
results[https://github.com/irstv/orbisgis-commons/blob/73c50d24fe69abd19506a89549721ac511a22906/src/main/java/org/orbisgis/utils/FileUtils.java][getMD5][1] = -> TRY {  -> m=MessageDigest.getInstance("MD5",)@ -> m.update(content,0,content.length,)@ -> return m.digest()@ } CATCH(IOException,NoSuchAlgorithmException) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/249ff22f64878a7eac7a4f62f92e7b706ed76c58/test/sun/security/ssl/com/sun/net/ssl/internal/ssl/SSLSocketImpl/ServerTimeout.java][doClientSide][1] = -> TRY {  -> md=MessageDigest.getInstance("SHA",)@ -> transIns=new DigestInputStream(new FileInputStream(transFilename,),md,)@ -> clientDigest=md.digest()@ } CATCH(Exception) {}
results[https://github.com/araqne/logdb/blob/88ee898b2e35c8be504da061ae984928aee62d28/araqne-logdb/src/main/java/org/araqne/logdb/impl/Sha1.java][hash][3] = -> TRY { -> md=MessageDigest.getInstance("SHA-1",)@ -> md.update(text.getBytes("utf-8",),0,text.length(),)@ -> sha1hash=md.digest()@ -> return convertToHex(sha1hash,)@ }
results[https://github.com/z3pr4h/weave-framework/blob/7ff096d468b4104553371557849129ae171d3f0f/jixaw-util/src/main/java/org/jixaw/util/cryptography/SHA1.java][calculateBytes][1] = -> TRY { -> messageDigest=MessageDigest.getInstance("SHA-1",)@ -> messageDigest.update(inputBytes,)@ -> return messageDigest.digest()@ } CATCH(NoSuchAlgorithmException) { -> throw new CryptographyException(e,)@ }
results[https://github.com/sidseth/h2-container-reuse/blob/9a9fcf826d455aacdc24948300bdf3015302d0f5/common/src/java/org/apache/hadoop/io/SequenceFile.java][<clinit>][23] = -> TRY { -> digester=MessageDigest.getInstance("MD5",)@ -> digester.update(new UID()+"@"+time.getBytes(),)@ -> sync=digester.digest()@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/CNA/android_packages_apps_Email/blob/a07f2ae0b18964aa15e218e8b6be8be24e5c9f46/src/com/android/emailcommon/utility/Utility.java][getSmallHash][7] = -> TRY { -> sha=MessageDigest.getInstance("SHA-1",)@ } -> sha.update(Utility.toUtf8(value,),)@ -> hash=getSmallHashFromSha1(sha.digest(),)@ -> return Integer.toString(hash,)@
results[https://github.com/basho/yokozuna/blob/c015144d36a1f04df0990fb394383e8f27fb8bd3/priv/java/com/basho/yokozuna/handler/MerkleTreeHandler.java][sha][6] = -> TRY {  -> md=MessageDigest.getInstance("SHA",)@ -> md.update(s.getBytes(),)@ -> return md.digest()@ } CATCH(NoSuchAlgorithmException) {}
results[https://github.com/jfinkels/tuxguitar/blob/1f38bb942576c95fe3338f2e95a81f6c36fc386f/src/main/java/org/herac/tuxguitar/community/auth/TGCommunityAuth.java][update][1] = -> TRY { -> IF { -> md=MessageDigest.getInstance("md5",)@ -> md.update(this.password.getBytes(),)@this.password!=null&&this.password.length()>0 -> digest=md.digest()@ } } CATCH(Throwable) { -> LOG.error(throwable,)@ }
results[https://github.com/apache/hadoop-common/blob/1b4ed10ebada49b20b2e02b67c5d2d094db9182b/src/test/core/org/apache/hadoop/io/TestMD5Hash.java][getTestHash][15] = -> TRY {  -> digest=MessageDigest.getInstance("MD5",)@ -> digest.update(buffer,)@ -> return new MD5Hash(digest.digest(),)@ } CATCH(Exception) {}
results[https://github.com/barchart/barchart-udt/blob/e0df2ea887793d2d4654613095221a21f20a780f/barchart-udt-reference-jdk6/src/main/java/sun/security/pkcs11/P11Util.java][sha1][3] = -> TRY { -> md=MessageDigest.getInstance("SHA-1",)@ -> md.update(data,)@ -> return md.digest()@ } CATCH(GeneralSecurityException) { -> throw new ProviderException(e,)@ }
results[https://github.com/Aras90/Eventoo/blob/6141b881e99e431d8a28af1f84c5b604f9d6a493/mysql-connector-java-5.1.24/src/com/mysql/jdbc/Security.java][passwordHashStage2][6] = -> TRY {  -> md=MessageDigest.getInstance("SHA-1",)@ -> md.update(salt,0,4,)@ -> md.update(hashedPassword,0,SHA1_HASH_SIZE,)@ -> return md.digest()@ } CATCH(NoSuchAlgorithmException) {}
results[https://github.com/fakechris/JTrackerServer/blob/a70fc6b7bcb229ae4f6a22c53142c2d98f9b0032/test/com/tracker/backend/TrackerRequestParserTest.java][setUp][2] = -> TRY {  -> md=MessageDigest.getInstance("SHA-1",)@ -> md.update(byteHash,)@ -> rawInfoHash=md.digest()@ -> infoHash=StringUtils.getHexString(rawInfoHash,)@ } CATCH(Exception) {}
results[https://github.com/thomasbreitbach/hci_advanced/blob/2dcc5d154950a4eabed6a65d362fce0939c6b430/android-lockpattern/code/src/group/pals/android/lib/ui/lockpattern/widget/LockPatternUtils.java][patternToSha1][1] = -> TRY { -> md=MessageDigest.getInstance(_Sha1,)@ -> md.update(patternToString(pattern,).getBytes(_Utf8,),)@ -> digest=md.digest()@ -> bi=new BigInteger(1,digest,)@ }
results[https://github.com/Mobisocial/dungbeetle/blob/2f3e1fc7df63b691623631601e2ea780ccd1e9d7/src/edu/stanford/mobisocial/dungbeetle/util/Util.java][MD5][1] = -> TRY { -> m=MessageDigest.getInstance("MD5",)@ -> m.reset()@ -> m.update(plaintext.getBytes(),)@ -> digest=m.digest()@ -> bigInt=new BigInteger(1,digest,)@ }
results[https://github.com/apache/avro/blob/4d73af83a5ec618781a1476e55d60b5e3a6e72f5/lang/java/src/java/org/apache/avro/file/DataFileWriter.java][generateSync][3] = -> TRY { -> digester=MessageDigest.getInstance("MD5",)@ -> digester.update(new UID()+"@"+time.getBytes(),)@ -> return digester.digest()@ } CATCH(NoSuchAlgorithmException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/bonitasoft/bonita-studio/blob/2bd5b75b18aeb1ab545055cd977e54f194f7936d/releng/org.bonitasoft.studio-antTasks/src/org/bonitasoft/studio/antTasks/ReplaceDuplicateJarsByLinks.java][createInstance][1] = -> TRY {  -> digester=MessageDigest.getInstance("SHA-1",)@ -> digester.update(bytes,)@ -> res.fileDigest=new String(digester.digest(),)@ } CATCH(Exception) {}
results[https://github.com/noctarius/Lightning/blob/da297a8b9e67542f047f30baba10750835481793/lightning-core/src/main/java/org/apache/directmemory/lightning/internal/util/InternalUtil.java][getChecksum][2] = -> TRY { -> digest=MessageDigest.getInstance("SHA-1",)@ -> digest.update(data,0,data.length,)@ -> return digest.digest()@ } CATCH(Exception) { -> throw new RuntimeException("Could not build checksum of data",)@ }
results[https://github.com/scs/uclinux/blob/2c1c65d052a1b49a09759664b541e1f94519539b/lib/classpath/gnu/java/rmi/server/RMIHashes.java][getMethodHash][4] = -> TRY { -> md=MessageDigest.getInstance("SHA",)@ -> md.update(digest_out.toByteArray(),)@ -> sha=md.digest()@ -> LOOP { -> result+=(long) sha[i]&0xFF<<8*i@i<len } }
results[https://github.com/cleverliz/wotMall/blob/8399f9dd7c5e63793453ef02dfca4e487fdaccee/src/com/kongzhong/wot/util/Md5.java][getMd5ByFile][1] = -> TRY { -> md5=MessageDigest.getInstance("MD5",)@ -> LOOP { -> md5.update(buffer,0,numRead,)@(numRead=fis.read(buffer,))>0 } -> return byte2hex(md5.digest(),)@ }
results[https://github.com/korpling/ANNIS/blob/66d1ccb6adcc9cc5002e4377a25115de7a5a892d/Annis-Service/Service-Implementation/src/main/java/annis/utils/Utils.java][calculateSHAHash][5] = -> TRY {  -> md=MessageDigest.getInstance("SHA-256",)@ -> md.update(s.getBytes("UTF-8",),)@ -> digest=md.digest()@ } CATCH(NoSuchAlgorithmException,UnsupportedEncodingException) {}
results[https://github.com/SeqWare/queryengine/blob/e4ef63f5a15917adfe6673e6793362233dd33cff/seqware-queryengine/src/main/java/com/github/seqware/model/User.java][hashedPassword][3] = -> TRY { -> md5=MessageDigest.getInstance("MD5",)@ -> md5.update(password.getBytes(),)@ -> hash=new BigInteger(1,md5.digest(),)@ -> hashword=hash.toString(16,)@ }
results[https://github.com/gdelente/mention-android-universal-image-loader/blob/af5ef01a28c4c89723ef5ee8ba43fc1d58e04f94/library/src/com/nostra13/universalimageloader/cache/disc/naming/Md5FileNameGenerator.java][getMD5][2] = -> TRY { -> digest=MessageDigest.getInstance(HASH_ALGORITHM,)@ -> digest.update(data,)@ -> hash=digest.digest()@ } CATCH(NoSuchAlgorithmException) { -> L.e(e,)@ }
results[https://github.com/hank/litecoinj/blob/216deb2d35d1a128a7f617b91f2ca35438aae546/lib/src/com/google/bitcoin/core/Utils.java][singleDigest][2] = -> TRY { -> digest=MessageDigest.getInstance("SHA-256",)@ -> digest.update(input,offset,length,)@ -> return digest.digest()@ } CATCH(NoSuchAlgorithmException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/fusesource/fuse-extra/blob/18f008e10a8ecd1ce74c695dd2993f5f64379ae4/fabric-apollo-cluster/src/main/scala/org/fusesource/fabric/apollo/cluster/util/Hasher.java][hash][2] = -> TRY { -> md=MessageDigest.getInstance(algorithim,)@ -> md.update(data,0,len,)@ -> digest=md.digest()@ -> return (int) digest[0]&0xFF<<24|digest[1]&0xFF<<16|digest[2]&0xFF<<8|digest[3]&0xFF@ } CATCH(NoSuchAlgorithmException) { -> throw new RuntimeException(algorithim+" not supported",e,)@ }
results[https://github.com/zycgit/hasor/blob/9efc5ef6a9db3207203b496cbde791721ec83dba/src/extends-parent/jetty-all/src/main/java/org/eclipse/jetty/websocket/WebSocketConnectionD00.java][doTheHixieHixieShake][4] = -> TRY { -> md=MessageDigest.getInstance("MD5",)@ -> md.update(fodder,)@ -> return md.digest()@ } CATCH(NoSuchAlgorithmException) { -> throw new IllegalStateException(e,)@ }
results[https://github.com/MiniSEC/adito_reload/blob/429cbc3960d6ed22fc2840c32ac8d4f683b932c4/adito/branches/maven2/adito/src/com/adito/jdbc/hsqldb/DBFunctions.java][digest][1] = -> TRY {  -> md=MessageDigest.getInstance("MD5",)@ -> md.update(b,)@ -> digest=md.digest()@ -> return new String(digest,)@ } CATCH(NoSuchAlgorithmException,UnsupportedEncodingException) {}
results[https://github.com/miun/mediasense/blob/c92661931d6e0063a8c26b0bd159d15c92f1e820/eclipse_projects/DHT/src/manager/dht/SHA1Generator.java][SHA1][2] = -> TRY { -> md=MessageDigest.getInstance("SHA-1",)@ -> md.update(data,)@ -> sha1hash=md.digest()@ } CATCH(NoSuchAlgorithmException) { -> e.printStackTrace()@ }
results[https://github.com/jjnguy/PublicFun/blob/54a6e508bb16291e0030fb81db072b8af84fab42/coms_362_java/src/util/Util.java][getHashedBytes][1] = -> TRY { -> msg=MessageDigest.getInstance(hashingAlgorithmUsed,)@ } CATCH(NoSuchAlgorithmException) { -> throw new AssertionError("Someone chose to use a hashing algorithm that doesn't exist.  Epic fail, go change it in the Util file.  SHA(1) or MD5",)@ } -> msg.update(in,)@ -> return msg.digest()@
results[https://github.com/barchart/barchart-udt/blob/e0df2ea887793d2d4654613095221a21f20a780f/barchart-udt-reference-jdk6/src/main/java/sun/security/provider/SeedGenerator.java][getSystemEntropy][1] = -> TRY { -> md=MessageDigest.getInstance("SHA",)@ } CATCH(NoSuchAlgorithmException) { -> throw new InternalError("internal error: SHA-1 not available.",)@ } -> md.update(b,)@ -> return md.digest()@
results[https://github.com/koush/AndroidAsync/blob/3da965a37ed5e36effb02a9427f6c8b7f788e5ca/AndroidAsync/src/com/koushikdutta/async/http/server/WebSocketImpl.java][SHA1][2] = -> TRY { -> md=MessageDigest.getInstance("SHA-1",)@ -> md.update(text.getBytes("iso-8859-1",),0,text.length(),)@ -> sha1hash=md.digest()@ -> return Base64.encodeToString(sha1hash,0,)@ }
results[https://github.com/claudius108/expath-libs/blob/5b42d5bd4b2fbe0d8e2de7e4130621acf3d1a7a6/expath-crypto/src/test/java/org/expath/crypto/tests/junit/digest/HashPerformanceTest.java][digestString][1] = -> TRY {  -> algorithm=MessageDigest.getInstance("SHA",)@ -> algorithm.update(tempString.getBytes("UTF-8",),)@ -> hash=algorithm.digest()@ } CATCH(Exception) {}
results[https://github.com/flyingsaucerproject/flyingsaucer/blob/e6f44601bb0d567063a3307810658634e216d5ae/demos/samples/src/Review.java][getDigestHex][1] = -> TRY { -> md5=MessageDigest.getInstance("MD5",)@ -> md5.update(buffer,)@ -> return new BigInteger(1,md5.digest(),).toString(16,).toUpperCase()@ }
results[https://github.com/APXEOLOG/salem/blob/019813ae66dd712882d10692de4fd75c8fd005d4/src/haven/AuthClient.java][digest][1] = -> TRY { -> dig=MessageDigest.getInstance("SHA-256",)@ } CATCH(java.security.NoSuchAlgorithmException) { -> throw new RuntimeException(e,)@ } -> dig.update(pw,)@ -> return dig.digest()@
results[https://github.com/FreakyPenguin/elexis-hilotec-base/blob/a03ec9ac9020af9ee6cd14b2cf9cc1a46863f035/elexis-utilities/src/ch/rgw/crypt/SAT.java][calcDigest][1] = -> TRY { -> digest=MessageDigest.getInstance("SHA-1",)@ -> addParameters(body,digest,)@ -> return digest.digest()@ } CATCH(NoSuchAlgorithmException) { -> ExHandler.handle(e,)@ }
results[https://github.com/kaltura/KalturaServer-Backup/blob/8aaa25f111fce12770eba1cc1a73674f7ce5f145/generator/sources/java/src/com/kaltura/client/KalturaClientBase.java][signInfoWithSHA1][1] = -> TRY {  -> algorithm=MessageDigest.getInstance("SHA1",)@ -> algorithm.reset()@ -> algorithm.update(data,)@ -> infoSignature=algorithm.digest()@ } CATCH(GeneralSecurityException) {}
results[https://github.com/androidquery/androidquery/blob/0aac8005078e8ad5b42a973e2ee11ec6e5a23518/src/com/androidquery/util/AQUtility.java][getMD5][1] = -> TRY { -> digest=java.security.MessageDigest.getInstance("MD5",)@ -> digest.update(data,)@ -> hash=digest.digest()@ } CATCH(NoSuchAlgorithmException) { -> AQUtility.report(e,)@ }
results[https://github.com/peq/WurstScript/blob/cdc8363bae134c09aafc8d14c8ff1f0b1d9bfb61/Wurst Updater v2/src/file/FileChecksum.java][get][1] = -> TRY { -> md=MessageDigest.getInstance("MD5",)@ -> digest=md.digest()@ -> return bytesToHex(digest,)@ } CATCH(NoSuchAlgorithmException | IOException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/apache/struts1/blob/834a72d663091a553dd52795fa56f3e65100f595/src/java/org/apache/struts/util/TokenProcessor.java][generateToken][1] = -> TRY { -> md=MessageDigest.getInstance("MD5",)@ -> md.update(id.getBytes(),)@ -> md.update(now,)@ -> return toHex(md.digest(),)@ }
results[https://github.com/photo/mobile-android/blob/8f24aa6794402bb08889f7987590e4606dae0648/app/src/me/openphoto/android/app/util/SHA1Utils.java][computeSha1ForFile][1] = -> TRY {  -> md=MessageDigest.getInstance("SHA1",)@ -> dis=new DigestInputStream(fis,md,)@ -> return byteArray2Hex(md.digest(),)@ } CATCH(IOException,NoSuchAlgorithmException) {}
results[https://github.com/bbossgroups/bboss-cms/blob/be90adae15480817527e8ecaa5aa522296b0d83f/src-sys/com/frameworkset/platform/security/util/Base64.java][main][1] = -> TRY { -> digester=MessageDigest.getInstance("SHA",)@ -> digester.update("1234567".getBytes("UTF-8",),)@ } -> bytes=digester.digest()@ -> System.out.println(base64.encode(bytes,),)@
