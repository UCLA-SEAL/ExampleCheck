results[https://github.com/nysenate/BillBuzz/blob/6165aab6d00575deb03f9635754d0185b2703640/BBSignup/src/collect/XmlRpc.java][generateServicesHash][2] = -> TRY {  -> mac=Mac.getInstance("HmacSHA256",)@ -> mac.init(secret,)@ -> shaDigest=mac.doFinal(time+";"+BASE_URL+";"+nonce+";"+methodName.getBytes(),)@ } CATCH(NoSuchAlgorithmException,InvalidKeyException) {}
results[https://github.com/LCID-Fire/uni_stuff/blob/b36b2c5788ede4930a30540c0a4142ab280ddde8/ipc/Interaction/src/hotel/data/Room.java][generate][1] = -> TRY {  -> mac=Mac.getInstance("HmacSHA512",)@ -> mac.init(secret,)@ -> return mac.doFinal(code.getBytes(),)@ } CATCH(NoSuchAlgorithmException,InvalidKeyException) {}
results[https://github.com/Fudan-University/fudan-sakai/blob/aa6b862bda1f7292ceed86151f2b44e527776f89/linktool/src/java/org/sakaiproject/tool/rutgers/LinkTool.java][sign][2] = -> TRY {  -> sig=Mac.getInstance("HmacSHA1",)@ -> sig.init(salt,)@ -> return byteArray2Hex(sig.doFinal(data.getBytes(),),)@ } CATCH(NoSuchAlgorithmException,InvalidKeyException) {}
results[https://github.com/yangjiandong/sshapp/blob/e2b7df27f1b93522d14cc8809f7a5d9c5c6c09c5/modules/core/src/main/java/org/springside/modules/security/utils/CryptoUtils.java][hmacSha1][1] = -> TRY { -> mac=Mac.getInstance(HMACSHA1,)@ -> mac.init(secretKey,)@ -> return mac.doFinal(input.getBytes(),)@ } CATCH(GeneralSecurityException) { -> throw new IllegalStateException("Security exception",e,)@ }
results[https://github.com/revetkn/restfb/blob/c7a321c0b3fb5d9082d3935985bcfc5a22086c70/source/library/com/restfb/util/EncodingUtils.java][encodeAppSecretProof][1] = -> TRY {  -> mac=Mac.getInstance("HmacSHA256",)@ -> mac.init(signingKey,)@ -> raw=mac.doFinal(accessToken.getBytes(),)@ -> hex=encodeHex(raw,)@ } CATCH(NoSuchAlgorithmException,InvalidKeyException,UnsupportedEncodingException) {}
results[https://github.com/springside/springside4/blob/2f7cd58bb927c6ed4ab9dea1ffd3eb58ae5040d7/modules/core/src/main/java/org/springside/modules/utils/security/Cryptos.java][hmacSha1][2] = -> TRY { -> mac=Mac.getInstance(HMACSHA1,)@ -> mac.init(secretKey,)@ -> return mac.doFinal(input.getBytes(),)@ } CATCH(GeneralSecurityException) { -> throw Exceptions.unchecked(e,)@ }
results[https://github.com/h3xstream/find-sec-bugs/blob/f8ad208f8caef0d37c308a2de33e582c04e23487/plugin/src/test/java/testcode/googlemaps/UrlSigner.java][signRequest][2] = -> TRY {  -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(sha1Key,)@ -> sigBytes=mac.doFinal(resource.getBytes(),)@ -> signature=Base64.encodeBytes(sigBytes,)@ } CATCH(NoSuchAlgorithmException,InvalidKeyException,UnsupportedEncodingException,URISyntaxException) {}
results[https://github.com/openmichigan/OERca/blob/f853f2184a79b601ee5cf603fb1768c11cb41c32/src/java/org/sakaiproject/tool/ocw/OCWTool.java][sign][1] = -> TRY {  -> sig=Mac.getInstance("HmacSHA1",)@ -> sig.init(salt,)@ -> return byteArray2Hex(sig.doFinal(data.getBytes(),),)@ } CATCH(Exception) {}
results[https://github.com/BroadleafCommerce/blc-authorizenet/blob/2e745f5c8d2b85048e31bcf781cc5d085392739e/src/main/java/org/broadleafcommerce/vendor/authorizenet/service/payment/AuthorizeNetCheckoutServiceImpl.java][createTamperProofSeal][1] = -> TRY {  -> sha1Mac=Mac.getInstance("HmacSHA1",)@ -> sha1Mac.init(publicKeySpec,)@ -> publicBytes=sha1Mac.doFinal(customerOrderString.getBytes(),)@ -> publicDigest=encoder.encodeToString(publicBytes,)@ } CATCH(NoSuchAlgorithmException,InvalidKeyException) {}
results[https://github.com/yangjiandong/sshapp/blob/48ca1be4640a69ce1af5d804b32e56561325385f/modules/extension/src/main/java/org/springside/modules/security/utils/CryptoUtils.java][hmacSha1][2] = -> TRY { -> mac=Mac.getInstance(HMACSHA1,)@ -> mac.init(secretKey,)@ -> return mac.doFinal(input.getBytes(),)@ } CATCH(GeneralSecurityException) { -> throw convertRuntimeException(e,)@ }
results[https://github.com/javaswift/joss/blob/36c1ae1ff10a2bce1c76d2e69a0c329cc393df0a/src/main/java/org/javaswift/joss/util/HashSignature.java][getHmacMD5][1] = -> TRY {  -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(keySpec,)@ -> hashBytes=mac.doFinal(input.getBytes(),)@ -> return Hex.encodeHexString(hashBytes,)@ } CATCH(Exception) {}
results[https://github.com/RamesesDev/osiris2/blob/dcc688b9e1713b5414715744d53d90b6242d2e60/common/rameses-common/src/com/rameses/util/Encoder.java][encode][5] = -> TRY { -> mac=Mac.getInstance("HmacMD5",)@ -> mac.init(skey,)@ -> hash=mac.doFinal(v.getBytes(),)@ -> return toHexString(hash,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/WhisperSystems/TextSecure/blob/c48894724807a83bffac0feb7a20d32577106b6f/library/src/org/whispersystems/textsecure/crypto/MasterCipher.java][getMacFor][2] = -> Log.w("MasterCipher","Macing: "+content,)@ -> TRY { -> mac=getMac(masterSecret.getMacKey(),)@ -> return mac.doFinal(content.getBytes(),)@ } CATCH(GeneralSecurityException) { -> throw new AssertionError(ike,)@ }
results[https://github.com/lovepoetry/mepss/blob/b623eccee70f8f8956835c5c483e89320c996d48/lib/mepss-lib/src/mepss/lib/config/Config.java][computeSignature][1] = -> TRY {  -> mac=Mac.getInstance(ENCRYPT_ALGO,)@ -> mac.init(secretKey,)@ -> text=BASE.getBytes()@ -> return Base64.encodeBytes(mac.doFinal(text,),).trim()@ } CATCH(GeneralSecurityException,UnsupportedEncodingException) {}
results[https://github.com/carnero/c-geo/blob/d92c90355b43a0c12508888132bbeb3880dac89b/src/carnero/cgeo/cgBase.java][hashHmac][4] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(secretKeySpec,)@ -> macBytes=mac.doFinal(text.getBytes(),)@ } CATCH(Exception) { -> Log.e(cgSettings.tag,"cgBase.hashHmac: "+e.toString(),)@ }
results[https://github.com/forcedotcom/aura/blob/9edf63a6b2308b47638f5f3c1a0dd486617ccc95/aura/src/test/java/org/auraframework/test/SauceUtil.java][authToken][1] = -> TRY {  -> mac=Mac.getInstance(secretKey.getAlgorithm(),)@ -> mac.init(secretKey,)@ -> result=mac.doFinal(jobId.getBytes(),)@ -> return toHexString(result,)@ } CATCH(Exception) {}
results[https://github.com/astagi/magpi-android/blob/fe3a367c4a5dd994c064c6b43cf74c44e0d60cf8/src/com/themagpi/api/SecurityUtils.java][Hmac][1] = -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=Base64.encodeToString(rawHmac,Base64.NO_WRAP,)@ } CATCH(GeneralSecurityException) { -> throw new IllegalArgumentException()@ }
results[https://github.com/yusuke/twitter4j/blob/e5aaf0bcf21b9a5436e5890b1a8d73a65250ce74/twitter4j-core/src/main/java/twitter4j/http/OAuthAuthorization.java][generateSignature][4] = -> TRY { -> mac=Mac.getInstance(HMAC_SHA1,)@ -> mac.init(spec,)@ -> byteHMAC=mac.doFinal(data.getBytes(),)@ } CATCH(InvalidKeyException) { -> e.printStackTrace()@ } -> return BASE64Encoder.encode(byteHMAC,)@
results[https://github.com/asktkhr/porunga-youroom/blob/24436efbfb788a40dfbf0281d8529c7de1672c83/src/com/porunga/youroomclient/YouRoomAccess.java][getSignature][2] = -> TRY {  -> mac=Mac.getInstance(ALGOTITHM,)@ -> mac.init(key,)@ -> digest=mac.doFinal(base.getBytes(),)@ -> result=encodeURL(Base64.encodeBytes(digest,),)@ } CATCH(NoSuchAlgorithmException,InvalidKeyException,UnsupportedEncodingException) {}
results[https://github.com/camsys/onebusaway-nyc/blob/13d315c8abd67f6c4ba602e6f5f47090beae4616/onebusaway-nyc-presentation/src/main/java/org/onebusaway/nyc/geocoder/impl/GoogleGeocoderImpl.java][signRequest][1] = -> TRY {  -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(sha1Key,)@ -> sigBytes=mac.doFinal(resource.getBytes(),)@ -> signature=new String(Base64.encodeBase64(sigBytes,),)@ } CATCH(NoSuchAlgorithmException,InvalidKeyException,UnsupportedEncodingException,URISyntaxException) {}
results[https://github.com/FAP-Team/Fap-Module/blob/b5ac8b60bd0d216c434f978ec6a3a84f7c93015f/fap/app/controllers/fap/WSPortafirma.java][encodeHmac][1] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(value.getBytes(),)@ -> return Base64.encodeBase64URLSafeString(rawHmac,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/crashnote/crashnote-java/blob/9e167cb2b612b99d429033a2a0e6fccfb20f86e0/modules/core/src/main/java/com/crashnote/core/send/HMAC.java][sign][1] = -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> mac.reset()@ -> return mac.doFinal(data.getBytes(),)@ } CATCH(GeneralSecurityException) { -> throw new IllegalArgumentException(e,)@ }
results[https://github.com/CommercialWebDevelopment/pyramid/blob/0dd55d499395d5359b7d37785e2eb46e60990203/src/main/java/com/financial/pyramid/service/impl/PayUServiceImpl.java][hmacMD5][4] = -> TRY { -> mac=Mac.getInstance("HmacMD5",)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(value.getBytes(),)@ -> hexBytes=new Hex().encode(rawHmac,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/leoncool/healthbook/blob/da16666efa0a048b94ce3314ccd86b23697417bf/src/com/fitbit/api/client/http/OAuth.java][generateSignature][12] = -> TRY { -> mac=Mac.getInstance(HMAC_SHA1,)@ -> mac.init(spec,)@ -> byteHMAC=mac.doFinal(data.getBytes(),)@ } CATCH(InvalidKeyException) { -> e.printStackTrace()@ } -> return new BASE64Encoder().encode(byteHMAC,)@
results[https://github.com/klwork-social/main/blob/c5fe64c9758c7139184d0fa9950717129fad30d0/src/main/java/com/vdisk/utils/Signature.java][getHmacSHA1][1] = -> TRY {  -> mac=Mac.getInstance(KEY_MAC,)@ -> secret=new SecretKeySpec(appKeyPair.secret.getBytes("UTF-8",),mac.getAlgorithm(),)@ -> mac.init(secret,)@ -> return mac.doFinal(src.getBytes(),)@ } CATCH(NoSuchAlgorithmException,UnsupportedEncodingException,InvalidKeyException) {}
results[https://github.com/slok/mdissphoto/blob/12c5f4b8602c7d5951a6b1a8feadfd300634e825/mdiss-api/src/main/java/org/mdissjava/api/helpers/ApiHelper.java][calculateHMAC][1] = -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=new String(Base64.encodeBase64(rawHmac,),)@ } CATCH(GeneralSecurityException) { -> throw new IllegalArgumentException()@ }
results[https://github.com/mathieupedrero/eclihand/blob/bc649c0fdaa889fdd26904a72188cf24b072ead0/eclihand/rest-server/src/main/java/com/pedrero/eclihand/rest/security/AuthenticationSimulator.java][calculateHMAC][2] = -> TRY { -> mac=Mac.getInstance(HMAC_SHA256_ALGORITHM_NAME,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=new String(Base64.encode(rawHmac,),)@ } CATCH(GeneralSecurityException) { -> throw new IllegalArgumentException()@ }
results[https://github.com/ramesesinc/incubation/blob/77a12926f44242ee631d40a653839fee22802959/rameses-common2/src/com/rameses/util/Encoder.java][encode][5] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(skey,)@ -> hash=mac.doFinal(v.getBytes(),)@ -> return toHexString(hash,)@ } CATCH(Exception) { -> throw new RuntimeException(e.getMessage(),e,)@ }
results[https://github.com/projectrsc/ProjectRSC/blob/be9e2e1854a0e4b93816e52712c9fe37ff7dfc39/ProjectRSC/Development/Server/src/org/darkquest/ls/util/DataConversions.java][hmac][2] = -> TRY { -> mac=Mac.getInstance("Hmac"+hashType,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(value.getBytes(),)@ -> return new BigInteger(1,rawHmac,).toString(16,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/revetkn/restfb/blob/c7a321c0b3fb5d9082d3935985bcfc5a22086c70/source/library/com/restfb/DefaultFacebookClient.java][obtainAppSecretProof][1] = -> verifyParameterPresence("accessToken",accessToken,)@ -> TRY { -> mac=Mac.getInstance("HmacSHA256",)@ -> mac.init(signingKey,)@ -> raw=mac.doFinal(accessToken.getBytes(),)@ -> hex=encodeHex(raw,)@ } CATCH(Exception) { -> throw new IllegalStateException("Creation of appsecret_proof has failed",e,)@ }
results[https://github.com/saucelabs/bamboo_sauce/blob/a5ef711b6856e001e312639a7ecc72d216fe2292/src/main/java/com/saucelabs/bamboo/sod/plan/ViewSauceJobAction.java][calcHMAC][3] = -> TRY {  -> mac=Mac.getInstance(sks.getAlgorithm(),)@ -> mac.init(sks,)@ -> hmacBytes=mac.doFinal(jobId.getBytes(),)@ -> hexBytes=new Hex().encode(hmacBytes,)@ } CATCH(NoSuchAlgorithmException,InvalidKeyException,UnsupportedEncodingException) {}
results[https://github.com/chandlersong/TestCase/blob/2ada7db79c507c14bb863ca569076c2c7cac414f/TestCase/src/test/java/com/hilatest/security/chapter6/mac/MacSun.java][testHmacMD5][1] = -> TRY {  -> mac=Mac.getInstance(secretKey.getAlgorithm(),)@ -> mac.init(secretKey,)@ -> output=Hex.encodeHexString(mac.doFinal(input.getBytes(),),)@ -> System.out.println("密文："+output,)@ } CATCH(NoSuchAlgorithmException,InvalidKeyException) {}
results[https://github.com/janrain/janrain-backplane-2/blob/c01853b2dbc1a2c6a2ed672f9b9193f02d57b1dc/src/main/java/com/janrain/backplane/common/HmacHashUtils.java][hmacSign][2] = -> TRY {  -> mac=Mac.getInstance(key.getAlgorithm(),)@ -> mac.init(key,)@ -> return new String(Base64.encodeBase64(mac.doFinal(password.getBytes(),),),UTF8_STRING_ENCODING,)@ } CATCH(NoSuchAlgorithmException,InvalidKeyException,UnsupportedEncodingException) {}
results[https://github.com/mstepan/incubator/blob/e27425ef51eb4de8714dafdce1286fb49d8cb681/WellnessPortal/src/main/java/com/fitbit/api/client/http/OAuth.java][generateSignature][1] = -> TRY { -> mac=Mac.getInstance(HMAC_SHA1,)@ -> mac.init(spec,)@ -> byteHMAC=mac.doFinal(data.getBytes(),)@ -> return new BASE64Encoder().encode(byteHMAC,)@ } CATCH(InvalidKeyException) { -> e.printStackTrace()@ }
results[https://github.com/chandlersong/TestCase/blob/2ada7db79c507c14bb863ca569076c2c7cac414f/TestCase/src/test/java/com/hilatest/security/chapter6/mac/MacBouncyCastle.java][testHmacMD5][1] = -> TRY {  -> mac=Mac.getInstance(secretKey.getAlgorithm(),BC,)@ -> mac.init(secretKey,)@ -> output=Hex.encodeHexString(mac.doFinal(input.getBytes(),),)@ -> System.out.println("密文："+output,)@ } CATCH(NoSuchAlgorithmException,InvalidKeyException,NoSuchProviderException) {}
results[https://github.com/thucydides-webtests/thucydides/blob/8a80df61b4cfb7524dda7fe1489e1aa0c53fadeb/thucydides-core/src/main/java/net/thucydides/core/reports/saucelabs/SaucelabsLinkGenerator.java][generateHMACFor][1] = -> TRY { -> mac=Mac.getInstance("HmacMD5",)@ -> mac.init(key,)@ -> return new String(Hex.encodeHex(mac.doFinal(message.getBytes(),),),)@ } CATCH(GeneralSecurityException) { -> throw new IllegalStateException("Could not generate HMAC for some reason",e,)@ }
results[https://github.com/restlet/restlet-framework-java/blob/140ae44a444863ef738c18a5c1fb94fddbd6e01d/modules/org.restlet/src/org/restlet/engine/security/DigestUtils.java][toHMac][12] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> result=mac.doFinal(source.getBytes(),)@ } CATCH(NoSuchAlgorithmException) { -> throw new RuntimeException("Could not find the SHA-1 algorithm. HMac conversion failed.",nsae,)@ } CATCH(InvalidKeyException) { -> throw new RuntimeException("Invalid key exception detected. HMac conversion failed.",ike,)@ }
results[https://github.com/spring-projects/spring-social-facebook/blob/b66c8bee82c36c0d0197ebd6878f43f0f87339c2/spring-social-facebook-web/src/main/java/org/springframework/social/facebook/web/SignedRequestDecoder.java][encrypt][1] = -> TRY { -> mac=Mac.getInstance(HMAC_SHA256_MAC_NAME,)@ -> mac.init(secretKeySpec,)@ -> return mac.doFinal(base.getBytes(),)@ } CATCH(NoSuchAlgorithmException) { -> throw new IllegalStateException(e,)@ } CATCH(InvalidKeyException) { -> throw new IllegalStateException(e,)@ }
results[https://github.com/anycook/anycook-api/blob/f58b56099cf33b039e83b5d659b6bac3f0a69819/src/main/java/de/anycook/social/facebook/FacebookHandler.java][verifySigSHA256][2] = -> TRY { -> mac=Mac.getInstance("HmacSHA256",)@ -> mac.init(secret,)@ -> digest=mac.doFinal(payload.getBytes(),)@ -> expected_sig=new String(digest,)@ -> IF { -> return true@sig.equals(expected_sig,) } } CATCH(NoSuchAlgorithmException | InvalidKeyException) { -> LOGGER.error(e,e,)@ }
results[https://github.com/RamesesDev/osiris2/blob/dcc688b9e1713b5414715744d53d90b6242d2e60/common/rameses-common/test/research/KeySpecTest.java][testHello2][4] = -> TRY {  -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(skey,)@ -> bytes=mac.doFinal(pwd.getBytes(),)@ -> System.out.println(Encoder.SHA1.toHexString(bytes,),)@ -> System.out.println(Encoder.SHA1.encode(pwd,key,),)@ } CATCH(Exception) {}
results[https://github.com/spring-projects/spring-social-facebook/blob/e98c81ef2d0bd91d4c76b38e6af72379de4aebf4/spring-social-facebook-web/src/main/java/org/springframework/social/facebook/web/RealTimeUpdateController.java][verifySignature][1] = -> TRY {  -> IF { -> return false@!(signature.startsWith("sha1=",)) } -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@!(!(signature.startsWith("sha1=",))) -> mac.init(signingKey,)@!(!(signature.startsWith("sha1=",))) -> rawHmac=mac.doFinal(payload.getBytes(),)@!(!(signature.startsWith("sha1=",))) -> actual=new String(Hex.encode(rawHmac,),)@!(!(signature.startsWith("sha1=",))) } CATCH(Exception) {}
results[https://github.com/CloudStack-extras/CloudBridge-archive/blob/e0657e7e1137592b51f61a284b4796698b35d370/src/com/cloud/bridge/util/S3SoapAuth.java][calculateRFC2104HMAC][1] = -> TRY { -> hmacSha1=Mac.getInstance("HmacSHA1",)@ -> hmacSha1.init(key,)@ -> rawHmac=hmacSha1.doFinal(signIt.getBytes(),)@ -> result=new String(Base64.encodeBase64(rawHmac,),)@ } CATCH(Exception) { -> logger.error("Failed to generate keyed HMAC on soap request: "+e.getMessage(),)@ }
results[https://github.com/sosilent/euca/blob/54fd3c97a69a5054705bc777a5b6f1403a72ba1e/clc/modules/www/src/main/java/com/eucalyptus/www/Registration.java][getSignature][1] = -> TRY { -> mac=Hmac.HmacSHA256.getInstance()@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(uuid.getBytes(),)@ -> sig=Hashes.getHexString(rawHmac,)@ -> LOG.warn("\nkey='"+key+"'\nid='"+uuid+"'\nresult="+sig,)@ } CATCH(Exception) { -> LOG.error(e,)@ -> return "error: "+e.getMessage()@ }
results[https://github.com/dscho/Xpra/blob/0cdda8a9119ed1094ddfdb2b2aea2bd117f1e1a4/java/src/xpra/AbstractClient.java][hmac_password][2] = -> TRY { -> mac=Mac.getInstance("HMACMD5",)@ -> mac.init(secret,)@ -> digest=mac.doFinal(salt.getBytes(),)@ -> this.log("hmac_password("+salt+")=byte["+digest.length+"]",)@ -> enc_pass=hexlify_raw(digest,)@ -> this.log("hmac_password("+salt+")="+enc_pass,)@ } CATCH(Exception) { -> log("hmac_password("+salt+") failed: "+e.getMessage(),)@ }
results[https://github.com/hoccer/java-api/blob/58c21fe11c72334308630ceaaa120c87d18c6f76/src/com/hoccer/api/ApiSigningTools.java][digest][1] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(url.getBytes(),)@ -> return Base64.encodeBytes(rawHmac,)@ } CATCH(NoSuchAlgorithmException) { -> e.printStackTrace()@ } CATCH(InvalidKeyException) { -> e.printStackTrace()@ }
results[https://github.com/WhisperSystems/RedPhone/blob/09a4ae4a3ed0438198b89b6c29c7157079d2d4ad/src/org/thoughtcrime/redphone/crypto/Otp.java][calculateOtp][1] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(key,)@ -> return Base64.encodeBytes(mac.doFinal(counter+"".getBytes(),),)@ } CATCH(NoSuchAlgorithmException) { -> throw new AssertionError(nsae,)@ } CATCH(InvalidKeyException) { -> throw new AssertionError(e,)@ }
results[https://github.com/momoplan/Android/blob/b85f02d4695dd7e0d427b84ecd6d3a8d7a9dff4f/Ruyicai_168/v3.5.5/src/com/third/share/AccessTokenHeader.java][generateSignature][64] = -> TRY { -> mac=Mac.getInstance(HttpHeaderFactory.CONST_HMAC_SHA1,)@ -> mac.init(spec,)@ -> byteHMAC=mac.doFinal(data.getBytes(),)@ } CATCH(NoSuchAlgorithmException) { -> e.printStackTrace()@ } CATCH(InvalidKeyException) { -> e.printStackTrace()@ } -> return String.valueOf(Utility.base64Encode(byteHMAC,),)@
results[https://github.com/korman/HHHH/blob/e41d7b3943e09b255d02fe562f714b9176c27508/version1.0/ClientLancher/proj.android/src/org/DeNA/DHLJ/OAuthSupport.java][makeSignature][1] = -> TRY { -> mac=Mac.getInstance(key.getAlgorithm(),)@ -> mac.init(key,)@ -> res=mac.doFinal(basestring.getBytes(),)@ -> signature=encB64(res,)@ } CATCH(InvalidKeyException) { -> Log.e(TAG,"makeSignature error",ex,)@ } CATCH(NoSuchAlgorithmException) { -> Log.e(TAG,"makeSignature error",ex,)@ }
results[https://github.com/sunlin901203/sunny/blob/b66cd086cb24d6fa7bdf0bb94dff57d5194993b8/sunny-basic/sunny-common/src/main/java/com/sunny/common/util/SecureUtil.java][encryptHMAC_SHA1][2] = -> TRY { -> mac=Mac.getInstance(HMAC_SHA1,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(source.getBytes(),)@ } CATCH(NoSuchAlgorithmException) { -> throw new RuntimeException("失败："+e.getMessage(),)@ } CATCH(InvalidKeyException) { -> throw new RuntimeException("失败："+e.getMessage(),)@ }
results[https://github.com/briandwyer/cas-hudson/blob/3d3e6b51362b42603c6b7f130a3e94fb2bc75c8c/cas-server-3.4.2/cas-server-support-openid/src/main/java/org/jasig/cas/support/openid/authentication/principal/OpenIdService.java][generateHash][3] = -> TRY { -> sha1=Mac.getInstance("HmacSHA1",)@ -> sha1.init(this.sharedSecret,)@ -> return Base64.encodeBase64String(sha1.doFinal(value.getBytes(),),)@ } CATCH(Exception) { -> LOG.error(e.getMessage(),e,)@ -> return Base64.encodeBase64String(ENCODER.encode(value,).getBytes(),)@ }
results[https://github.com/the9ull/microbit/blob/45b43d5387fd4168bd67b62acc2d3ad59ecaa4ad/src/org/silix/the9ull/microbit/control/SHA1.java][HMAC_digest][2] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(keySpec,)@ -> rawHmac=mac.doFinal(message.getBytes(),)@ } CATCH(NoSuchAlgorithmException) { -> e.printStackTrace()@ } CATCH(InvalidKeyException) { -> e.printStackTrace()@ } -> return String.format("%x",new BigInteger(1,rawHmac,),)@
results[https://github.com/anycook/anycook-core/blob/46e2432a9d4ed0796d6902d69bc7e1c8b7826b89/src/anycook/facebook/FacebookHandler.java][verifySigSHA256][1] = -> TRY { -> mac=Mac.getInstance("HmacSHA256",)@ -> mac.init(secret,)@ -> digest=mac.doFinal(payload.getBytes(),)@ -> expected_sig=new String(digest,)@ -> IF { -> return true@sig.equals(expected_sig,) } } CATCH(NoSuchAlgorithmException) { -> logger.error(e,)@ } CATCH(InvalidKeyException) { -> logger.error(e,)@ }
results[https://github.com/talhatariktemiz/twitter-topic-strand/blob/52fc8e02250e8aaf385948a28def2675b34ad15b/twitter4j-core/src/main/java/twitter4j/auth/OAuthAuthorization.java][generateSignature][7] = -> TRY { -> mac=Mac.getInstance(HMAC_SHA1,)@ -> mac.init(spec,)@ -> byteHMAC=mac.doFinal(data.getBytes(),)@ } CATCH(InvalidKeyException) { -> logger.error("Failed initialize \"Message Authentication Code\" (MAC)",ike,)@ -> throw new AssertionError(ike,)@ } CATCH(NoSuchAlgorithmException) { -> logger.error("Failed to get HmacSHA1 \"Message Authentication Code\" (MAC)",nsae,)@ -> throw new AssertionError(nsae,)@ } -> return BASE64Encoder.encode(byteHMAC,)@
results[https://github.com/Rathravane/drumlin/blob/e4b4ff2b6d473c9e749038b8766c0ff81fa27ea4/code/src/com/rathravane/till/data/sha1HmacSigner.java][sign][1] = -> TRY { -> mac=Mac.getInstance(kHmacSha1Algo,)@ -> mac.init(secretKey,)@ -> rawHmac=mac.doFinal(message.getBytes(),)@ -> return rrConvertor.base64Encode(rawHmac,)@ } CATCH(InvalidKeyException) { -> throw new RuntimeException(e,)@ } CATCH(NoSuchAlgorithmException) { -> throw new RuntimeException(e,)@ } CATCH(IllegalStateException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/GrantSparks/mtgox-java/blob/856222c4e321028d62ffa51029147237c0090799/src/main/java/to/sparks/mtgox/util/MtGoxHTTPApiClient.java][getMtGoxHTTPInputStream][3] = -> TRY {  -> post_data=buildQueryString(args,)@ -> mac=Mac.getInstance("HmacSHA512",)@ -> mac.init(secret_spec,)@ -> signature=new String(Base64Coder.encode(mac.doFinal(post_data.getBytes(),),),).replaceAll("\n","",)@ -> connection.setRequestProperty("Rest-Sign",signature,)@ -> connection.getOutputStream().write(post_data.getBytes(),)@ } CATCH(IOException,NoSuchAlgorithmException,InvalidKeyException) {}
results[https://github.com/codefirst/dashbozu/blob/3a28db511b2f046043e4c6a3b60b258d086a8f8a/app/lib/pusher/Pusher.java][hmacsha256Representation][3] = -> TRY { -> mac=Mac.getInstance("HmacSHA256",)@ -> mac.init(signingKey,)@ -> digest=mac.doFinal(data.getBytes("UTF-8",),)@ -> digest=mac.doFinal(data.getBytes(),)@ -> bigInteger=new BigInteger(1,digest,)@ } CATCH(NoSuchAlgorithmException) { -> throw new RuntimeException("No HMac SHA256 algorithm",)@ } CATCH(UnsupportedEncodingException) { -> throw new RuntimeException("No UTF-8",)@ } CATCH(InvalidKeyException) { -> throw new RuntimeException("Invalid key exception while converting to HMac SHA256",)@ }
results[https://github.com/qiniu/java-sdk/blob/bdc2f37c51072eca7e12b6f0d9ba622a6a5c239d/qbox/src/com/qiniu/qbox/auth/AuthPolicy.java][makeAuthToken][2] = -> TRY { -> policyBase64=Client.urlsafeEncodeBytes(policyJson.getBytes(),)@ -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(keySpec,)@ -> digest=mac.doFinal(policyBase64,)@ -> digestBase64=Client.urlsafeEncodeBytes(digest,)@ -> System.arraycopy(policyBase64,0,token,accessKey.length+30,policyBase64.length,)@ } CATCH(NoSuchAlgorithmException) { -> e.printStackTrace()@ } CATCH(InvalidKeyException) { -> e.printStackTrace()@ } CATCH(JSONException) { -> e.printStackTrace()@ }
results[https://github.com/GrantSparks/mtgox-java/blob/fb73f107080ac15499e7f7b92dbc34e46c9eeca0/src/main/java/to/sparks/mtgox/net/HTTPAuthenticator.java][getMtGoxHTTPInputStream][1] = -> TRY {  -> post_data=buildQueryString(args,)@ -> IF { -> mac=Mac.getInstance("HmacSHA512",)@ -> mac.init(secret_spec,)@ -> signature=new String(Base64Coder.encode(mac.doFinal(post_data.getBytes(),),),).replaceAll("\n","",)@ -> connection.setRequestProperty("Rest-Sign",signature,)@ } -> connection.getOutputStream().write(post_data.getBytes(),)@ } CATCH(IOException,NoSuchAlgorithmException,InvalidKeyException) {}
results[https://github.com/GrantSparks/mtgox-java/blob/6fdffe56670ef374dcd8fd05ce2ed114301cf4c5/src/main/java/to/sparks/mtgox/net/MtGoxHTTPAuthenticator.java][getMtGoxHTTPInputStream][2] = -> TRY {  -> post_data=buildQueryString(args,)@ -> IF { -> mac=Mac.getInstance("HmacSHA512",)@ -> mac.init(secret_spec,)@ -> signature=new String(Base64Coder.encode(mac.doFinal(post_data.getBytes(),),),).replaceAll("\n","",)@ } -> connection.setRequestProperty("Rest-Sign",signature,)@ -> connection.getOutputStream().write(post_data.getBytes(),)@ } CATCH(IOException,NoSuchAlgorithmException,InvalidKeyException) {}
results[https://github.com/Lavanyajey/Zappa/blob/1fcb562264e3927ce40733dfdcea8aaa07aeec49/java/twillioAPI/src/com/twilio/sdk/TwilioUtils.java][validateRequest][1] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> data=new StringBuffer(url,)@ -> IF { -> LOOP { -> data.append(s,)@ -> data.append(v,)@ } } -> rawHmac=mac.doFinal(data.toString().getBytes(),)@ -> signature=new String(Base64.encodeBase64(rawHmac,),)@ } CATCH(NoSuchAlgorithmException) { -> e.printStackTrace()@ } CATCH(InvalidKeyException) { -> e.printStackTrace()@ }
results[https://github.com/Mobicents/sip-servlets/blob/87bb155bbee6500d26c91cd12412e859f5724bc3/sip-servlets-impl/src/main/java/org/mobicents/servlet/sip/rfc5626/RFC5626Helper.java][decodeFlowToken][1] = -> TRY {  -> arrayS=concatenation.substring(indexOfSlash+1,concatenation.length(),)@ -> IF { -> logger.debug("Decoding RFC 5626 Flow token recomputing hmac of array S "+arrayS,)@logger.isDebugEnabled() } -> recomputedHmac=mac.doFinal(arrayS.trim().getBytes(),)@ -> IF { -> logger.debug("Decoding RFC 5626 Flow token recomputed Hmac"+recomputedHmac,)@logger.isDebugEnabled() } -> recomputedHmac=new String(recomputedHmac,).trim().getBytes()@ -> IF { -> throw new IncorrectFlowIdentifierException("hmac "+hmac+" is different from the recomputed hmac "+new String(recomputedHmac,).trim(),)@!(Arrays.equals(hmac.trim().getBytes(),recomputedHmac,)) } -> stringTokenizer=new StringTokenizer(arrayS,"_",)@!(!(Arrays.equals(hmac.trim().getBytes(),recomputedHmac,))) } CATCH(IncorrectFlowIdentifierException) {}
results[https://github.com/n3phele/core/blob/d6ce78bc86f8cacf362ccf680585d0ea525c33b8/n3phele/src/n3phele/storage/swift/CloudStorageImpl.java][signSwiftQueryString][1] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(stringToSign.getBytes(),)@ -> hexBytes=new Hex().encode(rawHmac,)@ } CATCH(IllegalStateException) { -> log.log(Level.SEVERE,"Signing error",e,)@ -> throw new IllegalArgumentException(e.getMessage(),)@ } CATCH(InvalidKeyException) { -> log.log(Level.SEVERE,"Signing error",e,)@ -> throw new IllegalArgumentException(e.getMessage(),)@ } CATCH(NoSuchAlgorithmException) { -> log.log(Level.SEVERE,"Signing error",e,)@ -> throw new IllegalArgumentException(e.getMessage(),)@ } CATCH(UnsupportedEncodingException) { -> log.log(Level.SEVERE,"Signing error",e,)@ -> throw new IllegalArgumentException(e.getMessage(),)@ }
results[https://github.com/maxpower47/PinDroid/blob/5326d8dbc70a3212b48456364ec9d84dafa6a95b/src/com/android/droidlicious/authenticator/OauthUtilities.java][signRequest][2] = -> sb=new StringBuilder()@ -> sb.append("GET",)@ -> sb.append("&"+URLEncoder.encode(url,),)@ -> LOOP { -> IF { -> sb.append("&",)@ } ELSE { -> sb.append("%26",)@ } -> sb.append(URLEncoder.encode(key,)+"%3D",)@ -> sb.append(URLEncoder.encode(params.get(key,),),)@params.keySet() } -> Log.d("base string",sb.toString(),)@ -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(sha1key,)@ -> sigBytes=mac.doFinal(sb.toString().getBytes(),)@ -> signature=Base64.encodeBytes(sigBytes,)@ } CATCH(Exception) { -> Log.e("Oauth Sign Request","Hash Error",)@ }
results[https://github.com/seratch/signedrequest4j/blob/8b3ed44c23071ac43668065fbed4c0e8ed2b9117/src/main/java/com/github/seratch/signedrequest4j/SignedRequestImpl.java][getSignature][2] = -> baseString=getSignatureBaseString(url,method,oAuthNonce,oAuthTimestamp,)@ -> IF { -> TRY { -> mac=Mac.getInstance(algorithm,)@signatureMethod==SignatureMethod.HMAC_SHA1 -> mac.init(keySpec,)@signatureMethod==SignatureMethod.HMAC_SHA1 -> rawValue=mac.doFinal(baseString.getBytes(),)@signatureMethod==SignatureMethod.HMAC_SHA1 -> return Base64.encode(rawValue,)@signatureMethod==SignatureMethod.HMAC_SHA1 } CATCH(NoSuchAlgorithmException) { -> throw new SignedRequestClientException("Invalid Alogrithm : "+e.getLocalizedMessage(),)@signatureMethod==SignatureMethod.HMAC_SHA1 } CATCH(InvalidKeyException) { -> throw new SignedRequestClientException("Invalid key : "+e.getLocalizedMessage(),)@signatureMethod==SignatureMethod.HMAC_SHA1 } } ELSE { -> IF { -> IF { -> throw new SignedRequestClientException("RSA Private Key value is required.",)@signatureMethod==SignatureMethod.HMAC_SHA1 && signatureMethod==SignatureMethod.RSA_SHA1 && rsaPrivateKeyValue==null||rsaPrivateKeyValue.length()==0 } -> TRY { -> signer.update(baseString.getBytes(),)@!(rsaPrivateKeyValue==null||rsaPrivateKeyValue.length()==0) && signatureMethod==SignatureMethod.HMAC_SHA1 && signatureMethod==SignatureMethod.RSA_SHA1 && PEMReader.PRIVATE_PKCS1_MARKER.equals(reader.getBeginMarker(),) } CATCH(Exception) { -> throw new SignedRequestClientException("Cannot make a signature(RSA)",e,)@!(rsaPrivateKeyValue==null||rsaPrivateKeyValue.length()==0) && signatureMethod==SignatureMethod.HMAC_SHA1 && signatureMethod==SignatureMethod.RSA_SHA1 } } }
results[https://github.com/maxpower47/PinDroid/blob/3d52b06efd7aafc3431a3a350312f2e78fa618f6/src/com/deliciousdroid/authenticator/OauthUtilities.java][signRequest][1] = -> sb=new StringBuilder()@ -> sb.append("GET",)@ -> sb.append("&"+URLEncoder.encode(url,),)@ -> LOOP { -> IF { -> sb.append("&",)@ } ELSE { -> sb.append("%26",)@ } -> sb.append(URLEncoder.encode(key,)+"%3D",)@ -> sb.append(URLEncoder.encode(params.get(key,),).replace("+","%2B",).replace("%7C","%257C",).replace("%7B","%257B",).replace("%7D","%257D",).replace("%26","%2526",).replace("%2C","%252C",),)@params.keySet() } -> Log.d("base string",sb.toString().replace("%23","%2523",),)@ -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(sha1key,)@ -> sigBytes=mac.doFinal(sb.toString().replace("%23","%2523",).getBytes(),)@ -> signature=Base64.encodeBytes(sigBytes,)@ } CATCH(Exception) { -> Log.e("Oauth Sign Request","Hash Error",)@ }
results[https://github.com/charlesmunger/touch-to-text/blob/621bcfa5c2bda9ae8bb36afc3453fec594332ce8/src/edu/ucsb/cs290/touch/to/chat/crypto/MasterPassword.java][<init>][1] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> secret=new SecretKeySpec(userPass.getBytes(),mac.getAlgorithm(),)@ -> mac.init(secret,)@ -> encodedPass=mac.doFinal(userPass.getBytes(),)@ } -> LOOP { -> c=(char) encodedPass[bpos]&0x00FF<<8+encodedPass[bpos+1]&0x00FF@ }
results[https://github.com/jintrone/TurkSnet/blob/860936c4b2dbeb20a1c498dd8036d85b225c220e/src/main/java/edu/mit/cci/turkit/MTurkSOAP.java][getSignature][2] = -> TRY {  -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(new SecretKeySpec(secretKey.getBytes(),HMAC_SHA1_ALGORITHM,),)@ -> return Base64.encodeBytes(mac.doFinal(service+operation+timestamp.getBytes(),),)@ } CATCH(Exception) {}
results[https://github.com/schibsted/sdk-android/blob/aac3d7a5294d3f2e83bc9377cafbca0ee9ca1f38/SPiDSDK/src/com/schibsted/android/sdk/utils/SPiDUtils.java][getHmacSHA256][1] = -> TRY {  -> mac=Mac.getInstance("HmacSHA256",)@ -> mac.init(new SecretKeySpec(key.getBytes(),"HmacSHA256",),)@ -> bs=mac.doFinal(string.getBytes(),)@ -> return byteArrayToHexString(bs,)@ } CATCH(Exception) {}
results[https://github.com/square/pollexor/blob/b38fdbc6879394b3339197f299093a99ddefe690/src/main/java/com/squareup/thumbor/Utilities.java][hmacSha1][1] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(new SecretKeySpec(key.getBytes(),"HmacSHA1",),)@ -> return mac.doFinal(message.toString().getBytes(),)@ } CATCH(Exception) { -> throw new UnableToBuildException(e,)@ }
results[https://github.com/square/pollexor/blob/cf8f2785ae3499d525dbdf7d23c58edb3cc7df3a/src/main/java/com/squareup/pollexor/Utilities.java][hmacSha1][1] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(new SecretKeySpec(key.getBytes(),"HmacSHA1",),)@ -> return mac.doFinal(message.toString().getBytes(),)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/OTAUpdateCenter/ota-updater-2.0/blob/82ddc7f0137407a5b73c9bc16bfba5c6e25e3dad/src/com/otaupdater/utils/Utils.java][hmac][1] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(new SecretKeySpec(key.getBytes(),mac.getAlgorithm(),),)@ -> return byteArrToStr(mac.doFinal(str.getBytes(),),)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/copperflake/SAT/blob/05bee53ed64e5cb7d3991d14832987fcad05d270/src/sat/external/twitter/Twitter.java][main][2] = -> TRY {  -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(secret,)@ -> binarySignature=mac.doFinal(signatureBaseString.getBytes(),)@ } CATCH(Exception) { -> e.printStackTrace()@ } } CATCH(IOException) {}
results[https://github.com/greese/dasein-cloud-cloudstack/blob/b806784162e2d87cd7b7d45610dd3263435ff141/src/main/java/org/dasein/cloud/cloudstack/CloudstackMethod.java][calculateHmac][2] = -> TRY {  -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> return mac.doFinal(data.getBytes(),)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(SignatureException) {}
results[https://github.com/dustinlucien/project-platypus/blob/c666a21fb20ba03faa86cad20b411b88baec1ae2/src/java/com/platypus/util/SignatureUtil.java][generateHMACMD5][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance(MD5_ALGORITHM,)@ -> mac.init(signingKey,)@ -> raw=mac.doFinal(data.getBytes(),)@ -> result=Base64.encodeBytes(raw,)@ } CATCH(Exception) { -> throw new SignatureException("Could not generate MD5 Signature",)@ } } CATCH(SignatureException) {}
results[https://github.com/helpscout/helpscout-api-java/blob/7ad923e25b1fea6c885066cd25be9aafe2d5e668/src/main/java/net/helpscout/api/Webhook.java][generateSignature][1] = -> IF { -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(new SecretKeySpec(secretKey.getBytes(),"HmacSHA1",),)@ -> digest=json.getBytes()@json!=null -> encoder=new BASE64Encoder()@ -> computed=new String(encoder.encode(mac.doFinal(digest,),),).trim()@ } }
results[https://github.com/cmccabe/hadoop/blob/9a9fcf826d455aacdc24948300bdf3015302d0f5/mapreduce/src/contrib/dynamic-scheduler/src/java/org/apache/hadoop/mapred/PriorityAuthorization.java][hmac][36] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=new String(Base64.encodeBase64(rawHmac,),)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e,e,)@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/daisy-consortium/pipeline-framework/blob/9373cbeedebc9b1c94ac75b4e4dee4fd4698ea5e/webservice/src/main/java/org/daisy/pipeline/webservice/Authenticator.java][calculateRFC2104HMAC][2] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingSecret,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=Base64.encodeBase64String(rawHmac,)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/wso2/commons/blob/6adfc623c63fd98791a12e57612156db7d00b67e/qa/automation/system-test-framework/scenario/org.wso2.stratos.test.scenario/src/test/java/org/wso2/startos/system/test/stratosUtils/msUtils/MessageBoxSubClient.java][calculateRFC2104HMAC][4] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=Base64.encode(rawHmac,)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/kencochrane/raven-java/blob/6365228db7d0eb5bf3e760c88a860311fc833983/src/main/java/net/kencochrane/sentry/RavenUtils.java][calculateHMAC][3] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=hexEncode(rawHmac,)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/rajrajamani/Marketo/blob/014809ff5a6ce70a4d2817c8294f9e6b77b8bb16/2waySMS/app/com/marketo/mktows/client/Signature.java][calculateHMAC][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HMAC_SHA1,)@ -> mac.init(secretKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> hexChars=Hex.encodeHex(rawHmac,)@ } CATCH(Exception) { -> throw new SignatureException("Error generating HMAC signature: "+e.getMessage(),e,)@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/vincentjanv/groepI/blob/643bbc2aa06b98b4698ad8f2158d5d431a0a49cd/src/main/java/be/kdg/groepi/utils/VuforiaSignatureUtil.java][calculateRFC2104HMAC][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=new String(Base64.encodeBase64(rawHmac,false,),)@ } CATCH(Exception) { -> e.printStackTrace()@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/TGAC/miso-lims/blob/155f3fa782e5f1358a7ff3edb821272d573b6f05/integration-tools/src/main/java/uk/ac/bbsrc/tgac/miso/integration/util/SignatureHelper.java][calculateHMAC][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=Base64.encodeBase64URLSafeString(rawHmac,)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/thesmith/eventhorizon/blob/2230dce8dc3b5a4f9c8ceefd7b341e08ad51d3ed/src/main/java/thesmith/eventhorizon/service/impl/UserServiceImpl.java][calculateRFC2104HMAC][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> return Base64.encode(rawHmac,)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(SignatureException) {}
results[https://github.com/sosilent/euca/blob/54fd3c97a69a5054705bc777a5b6f1403a72ba1e/clc/modules/wsstack/src/main/java/com/eucalyptus/ws/util/HmacUtils.java][getSignature][3] = -> TRY {  -> TRY { -> digest=mac.getInstance()@ -> digest.init(signingKey,)@ -> rawHmac=digest.doFinal(subject.getBytes(),)@ -> return Base64.encode(rawHmac,).replaceAll("=","",)@ } CATCH(Exception) { -> LOG.error(e,e,)@ -> throw new AuthenticationException("Failed to compute signature",)@ } } CATCH(AuthenticationException) {}
results[https://github.com/CloudStack-extras/CloudBridge-archive/blob/e0657e7e1137592b51f61a284b4796698b35d370/src/com/cloud/bridge/util/RestAuth.java][calculateRFC2104HMAC][2] = -> TRY {  -> TRY { -> hmacSha1=Mac.getInstance("HmacSHA1",)@ -> hmacSha1.init(key,)@ -> rawHmac=hmacSha1.doFinal(signIt.getBytes(),)@ -> result=new String(Base64.encodeBase64(rawHmac,),)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate keyed HMAC on REST request: "+e.getMessage(),)@ } } CATCH(SignatureException) {}
results[https://github.com/ybrs/hazelcastforked/blob/6d494fa5ef514816a415adb7e2e13314d67bbf87/hazelcast-cloud/src/main/java/com/hazelcast/aws/security/RFC2104HMAC.java][calculateRFC2104HMAC][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance(SIGNATURE_METHOD,)@ -> mac.init(signingKey,)@ -> rawSignature=mac.doFinal(data.getBytes(),)@ -> result=new String(encode(rawSignature,),)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(SignatureException) {}
results[https://github.com/plivo/plivo-java/blob/a87485818c8eb5a28d8115926812f0e6f16474eb/src/main/java/com/plivo/helper/util/XPlivoSignature.java][verify][1] = -> TRY {  -> TRY { -> textBytes=uri.getBytes()@ -> hmac=Mac.getInstance("HmacSHA1",)@ -> hmac.init(macKey,)@ -> signBytes=hmac.doFinal(textBytes,)@ -> signature=new String(Base64.encodeBase64(signBytes,),)@ } CATCH(Exception) { -> throw new PlivoException(e.getLocalizedMessage(),)@ } } CATCH(PlivoException) {}
results[https://github.com/TGAC/miso-lims/blob/8d1cdc14f0caaa83f63a562f588b75619a841e44/core/src/main/java/uk/ac/bbsrc/tgac/miso/core/security/PasswordCodecService.java][encryptHMACSHA1][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(plaintext.getBytes(),)@ -> result=new Base64().encodeToString(rawHmac,)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/sosilent/euca/blob/54fd3c97a69a5054705bc777a5b6f1403a72ba1e/clc/modules/wsstack/src/main/java/com/eucalyptus/ws/handlers/WalrusPOSTAuthenticationHandler.java][checkSignature][2] = -> TRY {  -> TRY { -> mac=Hmac.HmacSHA1.getInstance()@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(subject.getBytes(),)@ -> return new String(Base64.encode(rawHmac,),).replaceAll("=","",)@ } CATCH(Exception) { -> LOG.error(e,e,)@ -> throw new AuthenticationException("Failed to compute signature",)@ } } CATCH(AuthenticationException) {}
results[https://github.com/philihp/WebLabora/blob/50db13592859984f130aec62c75b07b23e64e54d/src/main/java/com/philihp/weblabora/util/FacebookUtil.java][isValidSignedRequest][1] = -> TRY { -> mac=Mac.getInstance("HMACSHA256",)@ -> mac.init(new SecretKeySpec(clientSecret.getBytes(),mac.getAlgorithm(),),)@ -> calculatedSignature=mac.doFinal(payload.getBytes(),)@ -> return Arrays.equals(decoder.decode(givenSignature,),calculatedSignature,)@ } CATCH(InvalidKeyException) { -> throw new RuntimeException(e,)@ } CATCH(NoSuchAlgorithmException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/mandylu/android/blob/4f5896c800a0b31ec2803fabb74f2bb986553242/ThirdParty/com_weibo_android/src/com/weibo/net/RequestHeader.java][generateSignature][12] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HttpHeaderFactory.CONST_HMAC_SHA1,)@ -> mac.init(spec,)@ -> byteHMAC=mac.doFinal(data.getBytes(),)@ } CATCH(InvalidKeyException) { -> throw new WeiboException(e,)@ } CATCH(NoSuchAlgorithmException) { -> throw new WeiboException(e,)@ } -> return String.valueOf(Utility.base64Encode(byteHMAC,),)@ } CATCH(WeiboException) {}
results[https://github.com/zendtech/zendserver-sdk-java/blob/3b20cad3003d1e7a14d29e6b2208bb4b2b3a6e44/zendserver-webapi-java/org.zend.webapi/src/org/zend/webapi/internal/core/Utils.java][hashMac][2] = -> TRY {  -> TRY { -> mac=Mac.getInstance(sk.getAlgorithm(),)@ -> mac.init(sk,)@ -> hmac=mac.doFinal(text.getBytes(),)@ -> return toHexString(hmac,)@ } CATCH(NoSuchAlgorithmException) { -> throw new SignatureException("error building signature, no such algorithm "+HASH_ALGORITHM,)@ } CATCH(InvalidKeyException) { -> throw new SignatureException("error building signature, invalid key "+HASH_ALGORITHM,)@ } } CATCH(SignatureException) {}
results[https://github.com/akvo/akvo-flow/blob/d33afb05c27e9dea876eda928af51d0dc442951c/GAE/src/com/gallatinsystems/common/util/MD5Util.java][generateHMAC][1] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> secret=new SecretKeySpec(privateKey.getBytes(),mac.getAlgorithm(),)@ -> mac.init(secret,)@ -> digest=mac.doFinal(content.getBytes(),)@ -> return Base64.encode(digest,)@ } CATCH(NoSuchAlgorithmException) { -> log.log(Level.SEVERE,e.getMessage(),e,)@ } CATCH(InvalidKeyException) { -> log.log(Level.SEVERE,e.getMessage(),e,)@ }
results[https://github.com/VT-Magnum-Research/sodacloud/blob/3ab20910fbe022ab8ad581a7f897adad34299afe/SodaCloudAndroid/src/org/magnum/soda/transport/wamp/WampCraConnection.java][authSignature][2] = -> TRY {  -> TRY { -> mac=Mac.getInstance(sk.getAlgorithm(),)@ -> mac.init(sk,)@ -> hmac=mac.doFinal(authChallenge.getBytes(),)@ -> return Base64.encodeToString(hmac,Base64.NO_WRAP,)@ } CATCH(NoSuchAlgorithmException) { -> throw new SignatureException("error building signature, no such algorithm in device "+HASH_ALGORITHM,)@ } CATCH(InvalidKeyException) { -> throw new SignatureException("error building signature, invalid key "+HASH_ALGORITHM,)@ } } CATCH(SignatureException) {}
results[https://github.com/darrenjl/pdfrun/blob/1b3be26c3328e1ede55801432c36eaf528bc23b1/external_sources/httpclient-4.1.1/httpclient-contrib/src/main/java/org/apache/http/contrib/auth/AWSScheme.java][calculateRFC2104HMAC][3] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> return Base64.encodeBase64String(rawHmac,)@ } CATCH(InvalidKeyException) { -> throw new AuthenticationException("Failed to generate HMAC: "+ex.getMessage(),ex,)@ } CATCH(NoSuchAlgorithmException) { -> throw new AuthenticationException(HMAC_SHA1_ALGORITHM+" algorithm is not supported",ex,)@ } } CATCH(AuthenticationException) {}
results[https://github.com/pengliaoye/exchange/blob/24f61432820fd777b22ef3f2da94321975983d55/src/main/java/com/dm/exchange/servlet/QQOpen.java][doPost][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(new SecretKeySpec("SW9ssjaMvLGHfonv&".getBytes(),"HmacSHA1",),)@ -> rawHmac=mac.doFinal(str.getBytes(),)@ -> sig=DatatypeConverter.printBase64Binary(rawHmac,)@ } CATCH(NoSuchAlgorithmException | InvalidKeyException) { -> Logger.getLogger(QQOpen.class.getName(),).log(Level.SEVERE,null,ex,)@ } } CATCH(ServletException,IOException) {}
results[https://github.com/sosilent/euca/blob/54fd3c97a69a5054705bc777a5b6f1403a72ba1e/clc/modules/walrus/src/main/java/com/eucalyptus/auth/login/WalrusLoginModule.java][checkSignature][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance(Hmac.HmacSHA1.toString(),)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(subject.getBytes(),)@ -> return new String(Base64.encode(rawHmac,),).replaceAll("=","",)@ } CATCH(Exception) { -> LOG.error(e,e,)@ -> throw new AuthenticationException("Failed to compute signature",)@ } } CATCH(AuthenticationException) {}
results[https://github.com/social-computing/jmi-server/blob/e6c7d53e7179b375608656891fcf9816c6791aee/jmi-server-connector-utils/src/main/java/com/socialcomputing/wps/server/planDictionnary/connectors/utils/OAuthHelper.java][getOAuthSignature][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> secret=new SecretKeySpec(key.getBytes(),mac.getAlgorithm(),)@ -> mac.init(secret,)@ -> digest=mac.doFinal(data.getBytes(),)@ -> return enc.encode(digest,)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/braiden/fpm2-android/blob/f7e7ae5a653649b80defebd17ad3192d1a3fa7bf/app/src/org/braiden/fpm2/PBKDF2KeyGenerator.java][generateKey][1] = -> TRY {  -> key=new SecretKeySpec(secret.getBytes(),hmac.getAlgorithm(),)@ -> System.arraycopy(salt,0,initialHashInput,0,salt.length,)@ -> LOOP { -> initialHashInput[salt.length+0]=(byte) count>>24@ -> initialHashInput[salt.length+1]=(byte) count>>16@ -> initialHashInput[salt.length+2]=(byte) count>>8@ -> initialHashInput[salt.length+3]=(byte) count@ -> hmac.init(key,)@ -> hash1=hmac.doFinal(initialHashInput,)@ -> System.arraycopy(hash1,0,intermediateResult,0,hash1.length,)@ -> LOOP { -> hmac.init(key,)@ -> hash2=hmac.doFinal(hash1,)@ -> System.arraycopy(hash2,0,hash1,0,hash2.length,)@ } } } CATCH(InvalidKeyException) {}
results[https://github.com/piascikj/fincayra/blob/65cd440336e5f35b20ba5d0ba32dfb4cfd5093c3/src/main/java/org/innobuilt/fincayra/fps/SignatureUtils.java][sign][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance(signatureMethod,)@ -> mac.init(new SecretKeySpec(key.getBytes(),signatureMethod,),)@ -> signature=new String(Base64.encodeBase64(mac.doFinal(data.getBytes(UTF_8_Encoding,),),),)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate signature: "+e.getMessage(),e,)@ } } CATCH(SignatureException) {}
