results[https://github.com/wdcode/wdcode/blob/571fad0b82b0ffcfe2e7127ebfa9e725d90672c8/wdcode/wdcommon/src/main/java/org/wdcode/common/crypto/Encrypts.java][hmacSha1][1] = -> TRY { -> mac=Mac.getInstance(EncryptConstants.ALGO_HMAC_SHA1,)@ -> mac.init(secretKey,)@ -> return Hex.encode(mac.doFinal(text.getBytes(),),)@ }
results[https://github.com/joonolee/framework3/blob/f0ded0b3fc72104fbf3ff406d23fedbe0722508e/framework3/src/framework/util/CryptUtil.java][_hashHmac][1] = -> TRY { -> mac=Mac.getInstance(algorithm,)@ -> mac.init(skeySpec,)@ -> return mac.doFinal(message.getBytes(),)@ } CATCH(Throwable) { -> throw new RuntimeException(e,)@ }
results[https://github.com/AppBlade/SDK/blob/b0e14ae69c705efd826998a9163fa46a8f281066/Android/AppBlade Framework/src/com/appblade/framework/utils/StringUtils.java][hmacSha256][1] = -> TRY { -> mac=Mac.getInstance("HmacSHA256",)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(message.getBytes(),)@ -> result=Base64.encodeToString(rawHmac,0,rawHmac.length,0,)@ }
results[https://github.com/digipost/android/blob/39d7d4ad4c7e820d6e2de0189c6abdd9878c7902/src/no/digipost/android/authentication/OAuth2.java][encryptHmacSHA256][1] = -> TRY { -> mac=Mac.getInstance(ApplicationConstants.HMACSHA256,)@ -> mac.init(secretKey,)@ } -> hmacData=mac.doFinal(data.getBytes(),)@ -> return new String(hmacData,)@
results[https://github.com/momoplan/Android/blob/b85f02d4695dd7e0d427b84ecd6d3a8d7a9dff4f/Ruyicai_General/v3.2/src/com/third/share/RequestTokenHeader.java][generateSignature][128] = -> TRY { -> mac=Mac.getInstance(HttpHeaderFactory.CONST_HMAC_SHA1,)@ -> mac.init(spec,)@ -> byteHMAC=mac.doFinal(data.getBytes(),)@ } -> return String.valueOf(Utility.base64Encode(byteHMAC,),)@
results[https://github.com/zhoulzhou/IPCPlayer/blob/3e06c1ce7e2ad5d9602a9a45168efe3c64060b75/src/com/tencent/weibo/oauthv1/OAuthV1Client.java][generateSignature][2] = -> TRY { -> mac=Mac.getInstance(hashAlgorithmName,)@ -> mac.init(spec,)@ -> bytes=mac.doFinal(base.getBytes(),)@ -> return new String(Base64Encoder.encode(bytes,),)@ }
results[https://github.com/gilesp/taskhelper/blob/6318730a5e47e1dc6062979dff0b6e13a91a85c1/hakken-security/src/main/java/uk/co/vurt/hakken/security/HashUtils.java][hmacSHA1][1] = -> TRY { -> mac=Mac.getInstance(HASH_TYPE,)@ -> mac.init(secret,)@ -> digest=mac.doFinal(value.getBytes(),)@ -> encodedValue=new String(Base64.encodeBase64(digest,),)@ }
results[https://github.com/LCID-Fire/uni_stuff/blob/b36b2c5788ede4930a30540c0a4142ab280ddde8/ipc/Interaction/src/hotel/data/Room.java][generate][1] = -> TRY {  -> mac=Mac.getInstance("HmacSHA512",)@ -> mac.init(secret,)@ -> return mac.doFinal(code.getBytes(),)@ } CATCH(NoSuchAlgorithmException,InvalidKeyException) {}
results[https://github.com/RemiNV/edtemps-ecn/blob/e9b803ee13ed8f59f8262f03b409135ed7676558/EdTempsECN/src/org/ecn/edtemps/managers/UtilisateurGestion.java][hmac_sha256][2] = -> TRY {  -> mac=Mac.getInstance("HmacSHA256",)@ -> mac.init(keySpec,)@ -> result=mac.doFinal(input.getBytes(),)@ } CATCH(NoSuchAlgorithmException,InvalidKeyException) {}
results[https://github.com/Fudan-University/fudan-sakai/blob/aa6b862bda1f7292ceed86151f2b44e527776f89/linktool/src/java/org/sakaiproject/tool/rutgers/LinkTool.java][sign][2] = -> TRY {  -> sig=Mac.getInstance("HmacSHA1",)@ -> sig.init(salt,)@ -> return byteArray2Hex(sig.doFinal(data.getBytes(),),)@ } CATCH(NoSuchAlgorithmException,InvalidKeyException) {}
results[https://github.com/revetkn/restfb/blob/c7a321c0b3fb5d9082d3935985bcfc5a22086c70/source/library/com/restfb/util/EncodingUtils.java][encodeAppSecretProof][1] = -> TRY {  -> mac=Mac.getInstance("HmacSHA256",)@ -> mac.init(signingKey,)@ -> raw=mac.doFinal(accessToken.getBytes(),)@ -> hex=encodeHex(raw,)@ } CATCH(NoSuchAlgorithmException,InvalidKeyException,UnsupportedEncodingException) {}
results[https://github.com/springside/springside4/blob/2f7cd58bb927c6ed4ab9dea1ffd3eb58ae5040d7/modules/core/src/main/java/org/springside/modules/utils/security/Cryptos.java][hmacSha1][2] = -> TRY { -> mac=Mac.getInstance(HMACSHA1,)@ -> mac.init(secretKey,)@ -> return mac.doFinal(input.getBytes(),)@ } CATCH(GeneralSecurityException) { -> throw Exceptions.unchecked(e,)@ }
results[https://github.com/h3xstream/find-sec-bugs/blob/f8ad208f8caef0d37c308a2de33e582c04e23487/plugin/src/test/java/testcode/googlemaps/UrlSigner.java][signRequest][2] = -> TRY {  -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(sha1Key,)@ -> sigBytes=mac.doFinal(resource.getBytes(),)@ -> signature=Base64.encodeBytes(sigBytes,)@ } CATCH(NoSuchAlgorithmException,InvalidKeyException,UnsupportedEncodingException,URISyntaxException) {}
results[https://github.com/openmichigan/OERca/blob/f853f2184a79b601ee5cf603fb1768c11cb41c32/src/java/org/sakaiproject/tool/ocw/OCWTool.java][sign][1] = -> TRY {  -> sig=Mac.getInstance("HmacSHA1",)@ -> sig.init(salt,)@ -> return byteArray2Hex(sig.doFinal(data.getBytes(),),)@ } CATCH(Exception) {}
results[https://github.com/BroadleafCommerce/blc-authorizenet/blob/2e745f5c8d2b85048e31bcf781cc5d085392739e/src/main/java/org/broadleafcommerce/vendor/authorizenet/service/payment/AuthorizeNetCheckoutServiceImpl.java][createTamperProofSeal][1] = -> TRY {  -> sha1Mac=Mac.getInstance("HmacSHA1",)@ -> sha1Mac.init(publicKeySpec,)@ -> publicBytes=sha1Mac.doFinal(customerOrderString.getBytes(),)@ -> publicDigest=encoder.encodeToString(publicBytes,)@ } CATCH(NoSuchAlgorithmException,InvalidKeyException) {}
results[https://github.com/javaswift/joss/blob/36c1ae1ff10a2bce1c76d2e69a0c329cc393df0a/src/main/java/org/javaswift/joss/util/HashSignature.java][getHmacMD5][1] = -> TRY {  -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(keySpec,)@ -> hashBytes=mac.doFinal(input.getBytes(),)@ -> return Hex.encodeHexString(hashBytes,)@ } CATCH(Exception) {}
results[https://github.com/eastseven/tsm/blob/ba200489f8eb664376754b33dbdddce3ef28f2aa/tsm/src/main/java/com/justinmobile/core/utils/security/CryptoUtils.java][hmacSha1][2] = -> TRY { -> mac=Mac.getInstance(HMACSHA1,)@ -> mac.init(secretKey,)@ -> return mac.doFinal(input.getBytes(),)@ } CATCH(GeneralSecurityException) { -> throw convertRuntimeException(e,)@ }
results[https://github.com/yangjiandong/sshapp/blob/e2b7df27f1b93522d14cc8809f7a5d9c5c6c09c5/modules/core/src/main/java/org/springside/modules/security/utils/CryptoUtils.java][hmacSha1][1] = -> TRY { -> mac=Mac.getInstance(HMACSHA1,)@ -> mac.init(secretKey,)@ -> return mac.doFinal(input.getBytes(),)@ } CATCH(GeneralSecurityException) { -> throw new IllegalStateException("Security exception",e,)@ }
results[https://github.com/carnero/c-geo/blob/d92c90355b43a0c12508888132bbeb3880dac89b/src/carnero/cgeo/cgBase.java][hashHmac][4] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(secretKeySpec,)@ -> macBytes=mac.doFinal(text.getBytes(),)@ } CATCH(Exception) { -> Log.e(cgSettings.tag,"cgBase.hashHmac: "+e.toString(),)@ }
results[https://github.com/astagi/magpi-android/blob/fe3a367c4a5dd994c064c6b43cf74c44e0d60cf8/src/com/themagpi/api/SecurityUtils.java][Hmac][1] = -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=Base64.encodeToString(rawHmac,Base64.NO_WRAP,)@ } CATCH(GeneralSecurityException) { -> throw new IllegalArgumentException()@ }
results[https://github.com/yusuke/twitter4j/blob/e5aaf0bcf21b9a5436e5890b1a8d73a65250ce74/twitter4j-core/src/main/java/twitter4j/http/OAuthAuthorization.java][generateSignature][4] = -> TRY { -> mac=Mac.getInstance(HMAC_SHA1,)@ -> mac.init(spec,)@ -> byteHMAC=mac.doFinal(data.getBytes(),)@ } CATCH(InvalidKeyException) { -> e.printStackTrace()@ } -> return BASE64Encoder.encode(byteHMAC,)@
results[https://github.com/ramesesinc/clfc/blob/0330f3009b5566e2435294e760a07377c35f043b/platform/android_src/PaymentCollectionApp/src/com/rameses/util/Encoder.java][encode][5] = -> TRY { -> mac=Mac.getInstance("HmacMD5",)@ -> mac.init(skey,)@ -> hash=mac.doFinal(v.getBytes(),)@ -> return toHexString(hash,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/camsys/onebusaway-nyc/blob/13d315c8abd67f6c4ba602e6f5f47090beae4616/onebusaway-nyc-presentation/src/main/java/org/onebusaway/nyc/geocoder/impl/GoogleGeocoderImpl.java][signRequest][1] = -> TRY {  -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(sha1Key,)@ -> sigBytes=mac.doFinal(resource.getBytes(),)@ -> signature=new String(Base64.encodeBase64(sigBytes,),)@ } CATCH(NoSuchAlgorithmException,InvalidKeyException,UnsupportedEncodingException,URISyntaxException) {}
results[https://github.com/asktkhr/porunga-youroom/blob/aa965875dd8a08d8accde568194b1f1c7572afd3/src/jp/co/tokaneoka/youroomclient/YouRoomAccess.java][getSignature][2] = -> TRY {  -> mac=Mac.getInstance(ALGOTITHM,)@ -> mac.init(key,)@ -> digest=mac.doFinal(base.getBytes(),)@ -> result=encodeURL(Base64.encodeBytes(digest,),)@ } CATCH(NoSuchAlgorithmException,InvalidKeyException,UnsupportedEncodingException) {}
results[https://github.com/lovepoetry/mepss/blob/b623eccee70f8f8956835c5c483e89320c996d48/lib/mepss-lib/src/mepss/lib/config/Config.java][computeSignature][1] = -> TRY {  -> mac=Mac.getInstance(ENCRYPT_ALGO,)@ -> mac.init(secretKey,)@ -> text=BASE.getBytes()@ -> return Base64.encodeBytes(mac.doFinal(text,),).trim()@ } CATCH(GeneralSecurityException,UnsupportedEncodingException) {}
results[https://github.com/forcedotcom/aura/blob/9edf63a6b2308b47638f5f3c1a0dd486617ccc95/aura/src/test/java/org/auraframework/test/SauceUtil.java][authToken][1] = -> TRY {  -> mac=Mac.getInstance(secretKey.getAlgorithm(),)@ -> mac.init(secretKey,)@ -> result=mac.doFinal(jobId.getBytes(),)@ -> return toHexString(result,)@ } CATCH(Exception) {}
results[https://github.com/FAP-Team/Fap-Module/blob/b5ac8b60bd0d216c434f978ec6a3a84f7c93015f/fap/app/controllers/fap/WSPortafirma.java][encodeHmac][1] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(value.getBytes(),)@ -> return Base64.encodeBase64URLSafeString(rawHmac,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/crashnote/crashnote-java/blob/9e167cb2b612b99d429033a2a0e6fccfb20f86e0/modules/core/src/main/java/com/crashnote/core/send/HMAC.java][sign][1] = -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> mac.reset()@ -> return mac.doFinal(data.getBytes(),)@ } CATCH(GeneralSecurityException) { -> throw new IllegalArgumentException(e,)@ }
results[https://github.com/ramesesinc/clfc/blob/84a85fa041edb07c2176ef742b3d464c95dd69aa/client/rameses-client-mobile/src/com/rameses/util/Encoder.java][encode][5] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(skey,)@ -> hash=mac.doFinal(v.getBytes(),)@ -> return toHexString(hash,)@ } CATCH(Exception) { -> throw new RuntimeException(e.getMessage(),e,)@ }
results[https://github.com/projectrsc/ProjectRSC/blob/be9e2e1854a0e4b93816e52712c9fe37ff7dfc39/ProjectRSC/Development/Server/src/org/darkquest/ls/util/DataConversions.java][hmac][2] = -> TRY { -> mac=Mac.getInstance("Hmac"+hashType,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(value.getBytes(),)@ -> return new BigInteger(1,rawHmac,).toString(16,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/revetkn/restfb/blob/c7a321c0b3fb5d9082d3935985bcfc5a22086c70/source/library/com/restfb/DefaultFacebookClient.java][obtainAppSecretProof][1] = -> verifyParameterPresence("accessToken",accessToken,)@ -> TRY { -> mac=Mac.getInstance("HmacSHA256",)@ -> mac.init(signingKey,)@ -> raw=mac.doFinal(accessToken.getBytes(),)@ -> hex=encodeHex(raw,)@ } CATCH(Exception) { -> throw new IllegalStateException("Creation of appsecret_proof has failed",e,)@ }
results[https://github.com/saucelabs/bamboo_sauce/blob/a5ef711b6856e001e312639a7ecc72d216fe2292/src/main/java/com/saucelabs/bamboo/sod/plan/ViewSauceJobAction.java][calcHMAC][3] = -> TRY {  -> mac=Mac.getInstance(sks.getAlgorithm(),)@ -> mac.init(sks,)@ -> hmacBytes=mac.doFinal(jobId.getBytes(),)@ -> hexBytes=new Hex().encode(hmacBytes,)@ } CATCH(NoSuchAlgorithmException,InvalidKeyException,UnsupportedEncodingException) {}
results[https://github.com/mathieupedrero/eclihand/blob/c02ff4eb0e32557cfd0b9ff627fc71eac5b948ff/eclihand/rest-server/src/main/java/com/pedrero/eclihand/rest/security/SecurityUtilities.java][calculateHMAC][2] = -> TRY { -> mac=Mac.getInstance(HMAC_SHA256_ALGORITHM_NAME,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=new String(Base64.encode(rawHmac,),)@ } CATCH(GeneralSecurityException) { -> throw new IllegalArgumentException()@ }
results[https://github.com/rjyo/twitter-2-weibo/blob/fbd8efafa7c5c5dca926af806f87dbae8d12cb36/hello-weibo/weibo/weibo4j/http/OAuth.java][generateSignature][12] = -> TRY { -> mac=Mac.getInstance(HMAC_SHA1,)@ -> mac.init(spec,)@ -> byteHMAC=mac.doFinal(data.getBytes(),)@ } CATCH(InvalidKeyException) { -> e.printStackTrace()@ } -> return new BASE64Encoder().encode(byteHMAC,)@
results[https://github.com/CommercialWebDevelopment/pyramid/blob/0dd55d499395d5359b7d37785e2eb46e60990203/src/main/java/com/financial/pyramid/service/impl/PayUServiceImpl.java][hmacMD5][4] = -> TRY { -> mac=Mac.getInstance("HmacMD5",)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(value.getBytes(),)@ -> hexBytes=new Hex().encode(rawHmac,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/klwork-social/main/blob/c5fe64c9758c7139184d0fa9950717129fad30d0/src/main/java/com/vdisk/utils/Signature.java][getHmacSHA1][1] = -> TRY {  -> mac=Mac.getInstance(KEY_MAC,)@ -> secret=new SecretKeySpec(appKeyPair.secret.getBytes("UTF-8",),mac.getAlgorithm(),)@ -> mac.init(secret,)@ -> return mac.doFinal(src.getBytes(),)@ } CATCH(NoSuchAlgorithmException,UnsupportedEncodingException,InvalidKeyException) {}
results[https://github.com/slok/mdissphoto/blob/12c5f4b8602c7d5951a6b1a8feadfd300634e825/mdiss-api/src/main/java/org/mdissjava/api/helpers/ApiHelper.java][calculateHMAC][1] = -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=new String(Base64.encodeBase64(rawHmac,),)@ } CATCH(GeneralSecurityException) { -> throw new IllegalArgumentException()@ }
results[https://github.com/Waino/4Dnest/blob/dbe31aaacba064dc306a41f4580cb55ff9769898/4dnest/src/org/fourdnest/androidclient/comm/FourDNestProtocol.java][computeSignature][1] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> hexStr=new String(Hex.encodeHex(mac.doFinal(stringToSign.getBytes(),),),)@ -> result=new String(Base64.encodeBase64(hexStr.getBytes(),),)@ }
results[https://github.com/chandlersong/TestCase/blob/2ada7db79c507c14bb863ca569076c2c7cac414f/TestCase/src/test/java/com/hilatest/security/chapter6/mac/MacSun.java][testHmacMD5][1] = -> TRY {  -> mac=Mac.getInstance(secretKey.getAlgorithm(),)@ -> mac.init(secretKey,)@ -> output=Hex.encodeHexString(mac.doFinal(input.getBytes(),),)@ -> System.out.println("密文："+output,)@ } CATCH(NoSuchAlgorithmException,InvalidKeyException) {}
results[https://github.com/janrain/janrain-backplane-2/blob/c01853b2dbc1a2c6a2ed672f9b9193f02d57b1dc/src/main/java/com/janrain/backplane/common/HmacHashUtils.java][hmacSign][2] = -> TRY {  -> mac=Mac.getInstance(key.getAlgorithm(),)@ -> mac.init(key,)@ -> return new String(Base64.encodeBase64(mac.doFinal(password.getBytes(),),),UTF8_STRING_ENCODING,)@ } CATCH(NoSuchAlgorithmException,InvalidKeyException,UnsupportedEncodingException) {}
results[https://github.com/mstepan/incubator/blob/e27425ef51eb4de8714dafdce1286fb49d8cb681/WellnessPortal/src/main/java/com/fitbit/api/client/http/OAuth.java][generateSignature][1] = -> TRY { -> mac=Mac.getInstance(HMAC_SHA1,)@ -> mac.init(spec,)@ -> byteHMAC=mac.doFinal(data.getBytes(),)@ -> return new BASE64Encoder().encode(byteHMAC,)@ } CATCH(InvalidKeyException) { -> e.printStackTrace()@ }
results[https://github.com/thucydides-webtests/thucydides/blob/8a80df61b4cfb7524dda7fe1489e1aa0c53fadeb/thucydides-core/src/main/java/net/thucydides/core/reports/saucelabs/SaucelabsLinkGenerator.java][generateHMACFor][1] = -> TRY { -> mac=Mac.getInstance("HmacMD5",)@ -> mac.init(key,)@ -> return new String(Hex.encodeHex(mac.doFinal(message.getBytes(),),),)@ } CATCH(GeneralSecurityException) { -> throw new IllegalStateException("Could not generate HMAC for some reason",e,)@ }
results[https://github.com/restlet/restlet-framework-java/blob/140ae44a444863ef738c18a5c1fb94fddbd6e01d/modules/org.restlet/src/org/restlet/engine/security/DigestUtils.java][toHMac][12] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> result=mac.doFinal(source.getBytes(),)@ } CATCH(NoSuchAlgorithmException) { -> throw new RuntimeException("Could not find the SHA-1 algorithm. HMac conversion failed.",nsae,)@ } CATCH(InvalidKeyException) { -> throw new RuntimeException("Invalid key exception detected. HMac conversion failed.",ike,)@ }
results[https://github.com/CloudStack-extras/CloudBridge-archive/blob/e0657e7e1137592b51f61a284b4796698b35d370/src/com/cloud/bridge/util/S3SoapAuth.java][calculateRFC2104HMAC][1] = -> TRY { -> hmacSha1=Mac.getInstance("HmacSHA1",)@ -> hmacSha1.init(key,)@ -> rawHmac=hmacSha1.doFinal(signIt.getBytes(),)@ -> result=new String(Base64.encodeBase64(rawHmac,),)@ } CATCH(Exception) { -> logger.error("Failed to generate keyed HMAC on soap request: "+e.getMessage(),)@ }
results[https://github.com/spring-projects/spring-social-facebook/blob/b66c8bee82c36c0d0197ebd6878f43f0f87339c2/spring-social-facebook-web/src/main/java/org/springframework/social/facebook/web/SignedRequestDecoder.java][encrypt][1] = -> TRY { -> mac=Mac.getInstance(HMAC_SHA256_MAC_NAME,)@ -> mac.init(secretKeySpec,)@ -> return mac.doFinal(base.getBytes(),)@ } CATCH(NoSuchAlgorithmException) { -> throw new IllegalStateException(e,)@ } CATCH(InvalidKeyException) { -> throw new IllegalStateException(e,)@ }
results[https://github.com/anycook/anycook-api/blob/f58b56099cf33b039e83b5d659b6bac3f0a69819/src/main/java/de/anycook/social/facebook/FacebookHandler.java][verifySigSHA256][2] = -> TRY { -> mac=Mac.getInstance("HmacSHA256",)@ -> mac.init(secret,)@ -> digest=mac.doFinal(payload.getBytes(),)@ -> expected_sig=new String(digest,)@ -> IF { -> return true@sig.equals(expected_sig,) } } CATCH(NoSuchAlgorithmException | InvalidKeyException) { -> LOGGER.error(e,e,)@ }
results[https://github.com/RamesesDev/osiris2/blob/dcc688b9e1713b5414715744d53d90b6242d2e60/common/rameses-common/test/research/KeySpecTest.java][testHello2][4] = -> TRY {  -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(skey,)@ -> bytes=mac.doFinal(pwd.getBytes(),)@ -> System.out.println(Encoder.SHA1.toHexString(bytes,),)@ -> System.out.println(Encoder.SHA1.encode(pwd,key,),)@ } CATCH(Exception) {}
results[https://github.com/spring-projects/spring-social-facebook/blob/e98c81ef2d0bd91d4c76b38e6af72379de4aebf4/spring-social-facebook-web/src/main/java/org/springframework/social/facebook/web/RealTimeUpdateController.java][verifySignature][1] = -> TRY {  -> IF { -> return false@!(signature.startsWith("sha1=",)) } -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@!(!(signature.startsWith("sha1=",))) -> mac.init(signingKey,)@!(!(signature.startsWith("sha1=",))) -> rawHmac=mac.doFinal(payload.getBytes(),)@!(!(signature.startsWith("sha1=",))) -> actual=new String(Hex.encode(rawHmac,),)@!(!(signature.startsWith("sha1=",))) } CATCH(Exception) {}
results[https://github.com/dscho/Xpra/blob/0cdda8a9119ed1094ddfdb2b2aea2bd117f1e1a4/java/src/xpra/AbstractClient.java][hmac_password][2] = -> TRY { -> mac=Mac.getInstance("HMACMD5",)@ -> mac.init(secret,)@ -> digest=mac.doFinal(salt.getBytes(),)@ -> this.log("hmac_password("+salt+")=byte["+digest.length+"]",)@ -> enc_pass=hexlify_raw(digest,)@ -> this.log("hmac_password("+salt+")="+enc_pass,)@ } CATCH(Exception) { -> log("hmac_password("+salt+") failed: "+e.getMessage(),)@ }
results[https://github.com/copperflake/SAT/blob/05bee53ed64e5cb7d3991d14832987fcad05d270/src/sat/external/twitter/Twitter.java][main][2] = -> TRY {  -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(secret,)@ -> binarySignature=mac.doFinal(signatureBaseString.getBytes(),)@ } CATCH(Exception) { -> e.printStackTrace()@ } } CATCH(IOException) {}
results[https://github.com/hoccer/java-api/blob/58c21fe11c72334308630ceaaa120c87d18c6f76/src/com/hoccer/api/ApiSigningTools.java][digest][1] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(url.getBytes(),)@ -> return Base64.encodeBytes(rawHmac,)@ } CATCH(NoSuchAlgorithmException) { -> e.printStackTrace()@ } CATCH(InvalidKeyException) { -> e.printStackTrace()@ }
results[https://github.com/WhisperSystems/RedPhone/blob/09a4ae4a3ed0438198b89b6c29c7157079d2d4ad/src/org/thoughtcrime/redphone/crypto/Otp.java][calculateOtp][1] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(key,)@ -> return Base64.encodeBytes(mac.doFinal(counter+"".getBytes(),),)@ } CATCH(NoSuchAlgorithmException) { -> throw new AssertionError(nsae,)@ } CATCH(InvalidKeyException) { -> throw new AssertionError(e,)@ }
results[https://github.com/momoplan/Android/blob/b85f02d4695dd7e0d427b84ecd6d3a8d7a9dff4f/Ruyicai_168/v3.5.5/src/com/third/share/AccessTokenHeader.java][generateSignature][64] = -> TRY { -> mac=Mac.getInstance(HttpHeaderFactory.CONST_HMAC_SHA1,)@ -> mac.init(spec,)@ -> byteHMAC=mac.doFinal(data.getBytes(),)@ } CATCH(NoSuchAlgorithmException) { -> e.printStackTrace()@ } CATCH(InvalidKeyException) { -> e.printStackTrace()@ } -> return String.valueOf(Utility.base64Encode(byteHMAC,),)@
results[https://github.com/jclouds/jclouds/blob/1eb4619faa3d4915e56e4af273eae53ebb97d663/core/src/main/java/org/jclouds/util/internal/JCEEncryptionService.java][hmac][3] = -> TRY { -> mac=Mac.getInstance(algorithm,)@ } CATCH(NoSuchAlgorithmException) { -> throw new RuntimeException("Could not find the "+algorithm+" algorithm",e,)@ } -> TRY { -> mac.init(signingKey,)@ } CATCH(InvalidKeyException) { -> throw new RuntimeException("Could not initialize the "+algorithm+" algorithm",e,)@ } -> return mac.doFinal(toEncode.getBytes(),)@
results[https://github.com/sunlin901203/sunny/blob/b66cd086cb24d6fa7bdf0bb94dff57d5194993b8/sunny-basic/sunny-common/src/main/java/com/sunny/common/util/SecureUtil.java][encryptHMAC_SHA1][2] = -> TRY { -> mac=Mac.getInstance(HMAC_SHA1,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(source.getBytes(),)@ } CATCH(NoSuchAlgorithmException) { -> throw new RuntimeException("失败："+e.getMessage(),)@ } CATCH(InvalidKeyException) { -> throw new RuntimeException("失败："+e.getMessage(),)@ }
results[https://github.com/briandwyer/cas-hudson/blob/3d3e6b51362b42603c6b7f130a3e94fb2bc75c8c/cas-server-3.4.2/cas-server-support-openid/src/main/java/org/jasig/cas/support/openid/authentication/principal/OpenIdService.java][generateHash][3] = -> TRY { -> sha1=Mac.getInstance("HmacSHA1",)@ -> sha1.init(this.sharedSecret,)@ -> return Base64.encodeBase64String(sha1.doFinal(value.getBytes(),),)@ } CATCH(Exception) { -> LOG.error(e.getMessage(),e,)@ -> return Base64.encodeBase64String(ENCODER.encode(value,).getBytes(),)@ }
results[https://github.com/korman/HHHH/blob/e41d7b3943e09b255d02fe562f714b9176c27508/version1.0/ClientLancher/proj.android/src/org/DeNA/DHLJ/OAuthSupport.java][makeSignature][1] = -> TRY { -> mac=Mac.getInstance(key.getAlgorithm(),)@ -> mac.init(key,)@ -> res=mac.doFinal(basestring.getBytes(),)@ -> signature=encB64(res,)@ } CATCH(InvalidKeyException) { -> Log.e(TAG,"makeSignature error",ex,)@ } CATCH(NoSuchAlgorithmException) { -> Log.e(TAG,"makeSignature error",ex,)@ }
results[https://github.com/greese/dasein-cloud-cloudstack/blob/b806784162e2d87cd7b7d45610dd3263435ff141/src/main/java/org/dasein/cloud/cloudstack/CloudstackMethod.java][calculateHmac][2] = -> TRY {  -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> return mac.doFinal(data.getBytes(),)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(SignatureException) {}
results[https://github.com/dustinlucien/project-platypus/blob/c666a21fb20ba03faa86cad20b411b88baec1ae2/src/java/com/platypus/util/SignatureUtil.java][generateHMACMD5][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance(MD5_ALGORITHM,)@ -> mac.init(signingKey,)@ -> raw=mac.doFinal(data.getBytes(),)@ -> result=Base64.encodeBytes(raw,)@ } CATCH(Exception) { -> throw new SignatureException("Could not generate MD5 Signature",)@ } } CATCH(SignatureException) {}
results[https://github.com/Kastle2/GoFetch/blob/44aaef02d992555c23f91d791260f004107503a0/GoFetch/src/com/gofetch/seomoz/Authenticator.java][getAuthenticationStr][1] = -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ } CATCH(NoSuchAlgorithmException) { -> e.printStackTrace()@ } CATCH(InvalidKeyException) { -> e.printStackTrace()@ } -> rawHmac=mac.doFinal(stringToSign.getBytes(),)@ -> urlSafeSignature=URLEncoder.encode(EncodeBase64(rawHmac,),)@
results[https://github.com/the9ull/microbit/blob/45b43d5387fd4168bd67b62acc2d3ad59ecaa4ad/src/org/silix/the9ull/microbit/control/SHA1.java][HMAC_digest][2] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(keySpec,)@ -> rawHmac=mac.doFinal(message.getBytes(),)@ } CATCH(NoSuchAlgorithmException) { -> e.printStackTrace()@ } CATCH(InvalidKeyException) { -> e.printStackTrace()@ } -> return String.format("%x",new BigInteger(1,rawHmac,),)@
results[https://github.com/cmccabe/hadoop/blob/9a9fcf826d455aacdc24948300bdf3015302d0f5/mapreduce/src/contrib/dynamic-scheduler/src/java/org/apache/hadoop/mapred/PriorityAuthorization.java][hmac][36] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=new String(Base64.encodeBase64(rawHmac,),)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e,e,)@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/wso2/commons/blob/6adfc623c63fd98791a12e57612156db7d00b67e/qa/automation/system-test-framework/scenario/org.wso2.stratos.test.scenario/src/test/java/org/wso2/startos/system/test/stratosUtils/msUtils/MessageBoxSubClient.java][calculateRFC2104HMAC][4] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=Base64.encode(rawHmac,)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/kencochrane/raven-java/blob/4a991caf68d42e24ee6894dc5d9504c1f40585fd/raven-client/src/main/java/net/kencochrane/sentry/RavenUtils.java][calculateHMAC][3] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=hexEncode(rawHmac,)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/mariotaku/twidere/blob/3afb572b28dfba286e4320244b9de80705c17479/src/twitter4j/auth/OAuthAuthorization.java][generateSignature][7] = -> TRY { -> mac=Mac.getInstance(HMAC_SHA1,)@ -> mac.init(spec,)@ -> byteHMAC=mac.doFinal(data.getBytes(),)@ } CATCH(InvalidKeyException) { -> logger.error("Failed initialize \"Message Authentication Code\" (MAC)",ike,)@ -> throw new AssertionError(ike,)@ } CATCH(NoSuchAlgorithmException) { -> logger.error("Failed to get HmacSHA1 \"Message Authentication Code\" (MAC)",nsae,)@ -> throw new AssertionError(nsae,)@ } -> return BASE64Encoder.encode(byteHMAC,)@
results[https://github.com/rajrajamani/Marketo/blob/014809ff5a6ce70a4d2817c8294f9e6b77b8bb16/2waySMS/app/com/marketo/mktows/client/Signature.java][calculateHMAC][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HMAC_SHA1,)@ -> mac.init(secretKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> hexChars=Hex.encodeHex(rawHmac,)@ } CATCH(Exception) { -> throw new SignatureException("Error generating HMAC signature: "+e.getMessage(),e,)@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/thesmith/eventhorizon/blob/2230dce8dc3b5a4f9c8ceefd7b341e08ad51d3ed/src/main/java/thesmith/eventhorizon/service/impl/UserServiceImpl.java][calculateRFC2104HMAC][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> return Base64.encode(rawHmac,)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(SignatureException) {}
results[https://github.com/jersey/jersey/blob/ced9586f24b6731ab98410afa36ff49096c9ceb4/security/oauth1-signature/src/main/java/org/glassfish/jersey/oauth1/signature/HmaSha1Method.java][sign][4] = -> TRY { -> mac=Mac.getInstance(SIGNATURE_ALGORITHM,)@ } CATCH(NoSuchAlgorithmException) { -> throw new IllegalStateException(nsae,)@ } -> TRY { -> mac.init(spec,)@ } CATCH(InvalidKeyException) { -> throw new IllegalStateException(ike,)@ } -> return Base64.encode(mac.doFinal(baseString.getBytes(),),)@
results[https://github.com/anycook/anycook-core/blob/46e2432a9d4ed0796d6902d69bc7e1c8b7826b89/src/anycook/facebook/FacebookHandler.java][verifySigSHA256][1] = -> TRY { -> mac=Mac.getInstance("HmacSHA256",)@ -> mac.init(secret,)@ -> digest=mac.doFinal(payload.getBytes(),)@ -> expected_sig=new String(digest,)@ -> IF { -> return true@sig.equals(expected_sig,) } } CATCH(NoSuchAlgorithmException) { -> logger.error(e,)@ } CATCH(InvalidKeyException) { -> logger.error(e,)@ }
results[https://github.com/daisy-consortium/pipeline-framework/blob/9373cbeedebc9b1c94ac75b4e4dee4fd4698ea5e/webservice/src/main/java/org/daisy/pipeline/webservice/Authenticator.java][calculateRFC2104HMAC][2] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingSecret,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=Base64.encodeBase64String(rawHmac,)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/vincentjanv/groepI/blob/643bbc2aa06b98b4698ad8f2158d5d431a0a49cd/src/main/java/be/kdg/groepi/utils/VuforiaSignatureUtil.java][calculateRFC2104HMAC][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=new String(Base64.encodeBase64(rawHmac,false,),)@ } CATCH(Exception) { -> e.printStackTrace()@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/TGAC/miso-lims/blob/155f3fa782e5f1358a7ff3edb821272d573b6f05/integration-tools/src/main/java/uk/ac/bbsrc/tgac/miso/integration/util/SignatureHelper.java][calculateHMAC][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> result=Base64.encodeBase64URLSafeString(rawHmac,)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/Mobicents/RestComm/blob/f2435bb0926adae90996019b9fb35474c0623342/restcomm.wrappers/java/src/main/java/com/twilio/sdk/TwilioUtils.java][validateRequest][4] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> data=new StringBuffer(url,)@ -> IF { -> LOOP { -> data.append(s,)@ -> data.append(v,)@ } } -> rawHmac=mac.doFinal(data.toString().getBytes(),)@ -> signature=new String(Base64.encodeBase64(rawHmac,),)@ }
results[https://github.com/CloudStack-extras/CloudBridge-archive/blob/93dec4aab545705109e08d6d0c11ab227a6b8958/src/com/cloud/stack/CloudStackCommand.java][calculateRFC2104HMAC][2] = -> TRY {  -> TRY { -> hmacSha1=Mac.getInstance("HmacSHA1",)@ -> hmacSha1.init(key,)@ -> rawHmac=hmacSha1.doFinal(signIt.getBytes(),)@ -> result=new String(Base64.encodeBase64(rawHmac,),)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate keyed HMAC on soap request: "+e.getMessage(),)@ } } CATCH(SignatureException) {}
results[https://github.com/Rathravane/drumlin/blob/e4b4ff2b6d473c9e749038b8766c0ff81fa27ea4/code/src/com/rathravane/till/data/sha1HmacSigner.java][sign][1] = -> TRY { -> mac=Mac.getInstance(kHmacSha1Algo,)@ -> mac.init(secretKey,)@ -> rawHmac=mac.doFinal(message.getBytes(),)@ -> return rrConvertor.base64Encode(rawHmac,)@ } CATCH(InvalidKeyException) { -> throw new RuntimeException(e,)@ } CATCH(NoSuchAlgorithmException) { -> throw new RuntimeException(e,)@ } CATCH(IllegalStateException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/ybrs/hazelcastforked/blob/6d494fa5ef514816a415adb7e2e13314d67bbf87/hazelcast-cloud/src/main/java/com/hazelcast/aws/security/RFC2104HMAC.java][calculateRFC2104HMAC][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance(SIGNATURE_METHOD,)@ -> mac.init(signingKey,)@ -> rawSignature=mac.doFinal(data.getBytes(),)@ -> result=new String(encode(rawSignature,),)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(SignatureException) {}
results[https://github.com/TGAC/miso-lims/blob/8d1cdc14f0caaa83f63a562f588b75619a841e44/core/src/main/java/uk/ac/bbsrc/tgac/miso/core/security/PasswordCodecService.java][encryptHMACSHA1][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(plaintext.getBytes(),)@ -> result=new Base64().encodeToString(rawHmac,)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate HMAC : "+e.getMessage(),)@ } } CATCH(java.security.SignatureException) {}
results[https://github.com/GrantSparks/mtgox-java/blob/97d5ec3d1cbaecab75eb3369b0d9c084e0e0a9e9/src/main/java/to/sparks/mtgox/MTGOXAPI.java][getMtGoxHTTPInputStream][3] = -> TRY {  -> post_data=buildQueryString(args,)@ -> mac=Mac.getInstance("HmacSHA512",)@ -> mac.init(secret_spec,)@ -> signature=new String(Base64Coder.encode(mac.doFinal(post_data.getBytes(),),),).replaceAll("\n","",)@ -> connection.setRequestProperty("Rest-Sign",signature,)@ -> connection.getOutputStream().write(post_data.getBytes(),)@ } CATCH(IOException,NoSuchAlgorithmException,InvalidKeyException) {}
results[https://github.com/mandylu/android/blob/4f5896c800a0b31ec2803fabb74f2bb986553242/ThirdParty/com_weibo_android/src/com/weibo/net/RequestHeader.java][generateSignature][16] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HttpHeaderFactory.CONST_HMAC_SHA1,)@ -> mac.init(spec,)@ -> byteHMAC=mac.doFinal(data.getBytes(),)@ } CATCH(InvalidKeyException) { -> throw new WeiboException(e,)@ } CATCH(NoSuchAlgorithmException) { -> throw new WeiboException(e,)@ } -> return String.valueOf(Utility.base64Encode(byteHMAC,),)@ } CATCH(WeiboException) {}
results[https://github.com/codefirst/dashbozu/blob/3a28db511b2f046043e4c6a3b60b258d086a8f8a/app/lib/pusher/Pusher.java][hmacsha256Representation][3] = -> TRY { -> mac=Mac.getInstance("HmacSHA256",)@ -> mac.init(signingKey,)@ -> digest=mac.doFinal(data.getBytes("UTF-8",),)@ -> digest=mac.doFinal(data.getBytes(),)@ -> bigInteger=new BigInteger(1,digest,)@ } CATCH(NoSuchAlgorithmException) { -> throw new RuntimeException("No HMac SHA256 algorithm",)@ } CATCH(UnsupportedEncodingException) { -> throw new RuntimeException("No UTF-8",)@ } CATCH(InvalidKeyException) { -> throw new RuntimeException("Invalid key exception while converting to HMac SHA256",)@ }
results[https://github.com/commoncrawl/commoncrawl-crawler/blob/5d0444e8a326c2ea5d698b35a477fe7ae0d3c5a2/src/org/commoncrawl/util/S3Utils.java][encode][12] = -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ } CATCH(NoSuchAlgorithmException) { -> throw new RuntimeException("Could not find sha1 algorithm",e,)@ } -> TRY { -> mac.init(signingKey,)@ } CATCH(InvalidKeyException) { -> throw new RuntimeException("Could not initialize the MAC algorithm",e,)@ } -> b64=Base64.encodeBytes(mac.doFinal(canonicalString.getBytes(),),)@ -> IF { -> return urlencode(b64,)@ }
results[https://github.com/darrenjl/pdfrun/blob/1b3be26c3328e1ede55801432c36eaf528bc23b1/external_sources/httpclient-4.1.1/httpclient-contrib/src/main/java/org/apache/http/contrib/auth/AWSScheme.java][calculateRFC2104HMAC][3] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> return Base64.encodeBase64String(rawHmac,)@ } CATCH(InvalidKeyException) { -> throw new AuthenticationException("Failed to generate HMAC: "+ex.getMessage(),ex,)@ } CATCH(NoSuchAlgorithmException) { -> throw new AuthenticationException(HMAC_SHA1_ALGORITHM+" algorithm is not supported",ex,)@ } } CATCH(AuthenticationException) {}
results[https://github.com/zendtech/zendserver-sdk-java/blob/fed64f4eb19a63f402d7afa51acd8af8351df18f/zendserver-webapi-java/org.zend.webapi.core/src/org/zend/webapi/internal/core/Utils.java][hashMac][2] = -> TRY {  -> TRY { -> mac=Mac.getInstance(sk.getAlgorithm(),)@ -> mac.init(sk,)@ -> hmac=mac.doFinal(text.getBytes(),)@ -> return toHexString(hmac,)@ } CATCH(NoSuchAlgorithmException) { -> throw new SignatureException("error building signature, no such algorithm "+HASH_ALGORITHM,)@ } CATCH(InvalidKeyException) { -> throw new SignatureException("error building signature, invalid key "+HASH_ALGORITHM,)@ } } CATCH(SignatureException) {}
results[https://github.com/sosilent/euca/blob/54fd3c97a69a5054705bc777a5b6f1403a72ba1e/clc/modules/walrus/src/main/java/com/eucalyptus/auth/login/WalrusLoginModule.java][checkSignature][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance(Hmac.HmacSHA1.toString(),)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(subject.getBytes(),)@ -> return new String(Base64.encode(rawHmac,),).replaceAll("=","",)@ } CATCH(Exception) { -> LOG.error(e,e,)@ -> throw new AuthenticationException("Failed to compute signature",)@ } } CATCH(AuthenticationException) {}
results[https://github.com/Rhinofly/kerst2012/blob/ecafda643fe801e5794900085e02454ab85e9c60/android/twelveTalk/src/de/tavendo/autobahn/WampCraConnection.java][authSignature][2] = -> TRY {  -> TRY { -> mac=Mac.getInstance(sk.getAlgorithm(),)@ -> mac.init(sk,)@ -> hmac=mac.doFinal(authChallenge.getBytes(),)@ -> return Base64.encodeToString(hmac,Base64.NO_WRAP,)@ } CATCH(NoSuchAlgorithmException) { -> throw new SignatureException("error building signature, no such algorithm in device "+HASH_ALGORITHM,)@ } CATCH(InvalidKeyException) { -> throw new SignatureException("error building signature, invalid key "+HASH_ALGORITHM,)@ } } CATCH(SignatureException) {}
results[https://github.com/piascikj/fincayra/blob/65cd440336e5f35b20ba5d0ba32dfb4cfd5093c3/src/main/java/org/innobuilt/fincayra/fps/SignatureUtils.java][sign][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance(signatureMethod,)@ -> mac.init(new SecretKeySpec(key.getBytes(),signatureMethod,),)@ -> signature=new String(Base64.encodeBase64(mac.doFinal(data.getBytes(UTF_8_Encoding,),),),)@ } CATCH(Exception) { -> throw new SignatureException("Failed to generate signature: "+e.getMessage(),e,)@ } } CATCH(SignatureException) {}
results[https://github.com/jonnyzzz/maragogype/blob/489744b898b649d8d9216265dab829988ce9a1e8/tags/v1.3/java/com/xerox/amazonws/common/AWSConnection.java][encode][1] = -> IF { -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@mac==null||!(lastSecretKey.equals(awsSecretKey,)) } CATCH(NoSuchAlgorithmException) { -> throw new RuntimeException("Could not find sha1 algorithm",e,)@mac==null||!(lastSecretKey.equals(awsSecretKey,)) } -> TRY { -> mac.init(signingKey,)@mac==null||!(lastSecretKey.equals(awsSecretKey,)) } CATCH(InvalidKeyException) { -> throw new RuntimeException("Could not initialize the MAC algorithm",e,)@mac==null||!(lastSecretKey.equals(awsSecretKey,)) } } -> signedBytes=mac.doFinal(canonicalString.getBytes(),)@!(mac==null||!(lastSecretKey.equals(awsSecretKey,))) -> b64=new String(Base64.encodeBase64(signedBytes,),)@!(mac==null||!(lastSecretKey.equals(awsSecretKey,)))
results[https://github.com/jonnyzzz/maragogype/blob/489744b898b649d8d9216265dab829988ce9a1e8/tags/v1.1/java/com/xerox/amazonws/common/AWSConnection.java][encode][10] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ } CATCH(NoSuchAlgorithmException) { -> throw new RuntimeException("Could not find sha1 algorithm",e,)@ } -> TRY { -> mac.init(signingKey,)@ } CATCH(InvalidKeyException) { -> throw new RuntimeException("Could not initialize the MAC algorithm",e,)@ } -> b64=new String(Base64Coder.encode(mac.doFinal(canonicalString.getBytes(),),),)@ -> IF { -> return urlencode(b64,)@ }
results[https://github.com/GrantSparks/mtgox-java/blob/fb73f107080ac15499e7f7b92dbc34e46c9eeca0/src/main/java/to/sparks/mtgox/net/HTTPAuthenticator.java][getMtGoxHTTPInputStream][1] = -> TRY {  -> post_data=buildQueryString(args,)@ -> IF { -> mac=Mac.getInstance("HmacSHA512",)@ -> mac.init(secret_spec,)@ -> signature=new String(Base64Coder.encode(mac.doFinal(post_data.getBytes(),),),).replaceAll("\n","",)@ -> connection.setRequestProperty("Rest-Sign",signature,)@ } -> connection.getOutputStream().write(post_data.getBytes(),)@ } CATCH(IOException,NoSuchAlgorithmException,InvalidKeyException) {}
results[https://github.com/GrantSparks/mtgox-java/blob/6fdffe56670ef374dcd8fd05ce2ed114301cf4c5/src/main/java/to/sparks/mtgox/net/MtGoxHTTPAuthenticator.java][getMtGoxHTTPInputStream][2] = -> TRY {  -> post_data=buildQueryString(args,)@ -> IF { -> mac=Mac.getInstance("HmacSHA512",)@ -> mac.init(secret_spec,)@ -> signature=new String(Base64Coder.encode(mac.doFinal(post_data.getBytes(),),),).replaceAll("\n","",)@ } -> connection.setRequestProperty("Rest-Sign",signature,)@ -> connection.getOutputStream().write(post_data.getBytes(),)@ } CATCH(IOException,NoSuchAlgorithmException,InvalidKeyException) {}
results[https://github.com/jenkinsci/sauce-ondemand-plugin/blob/022d240886a1ba1e88b683796ce5d2f4dd6fbfc2/src/main/java/hudson/plugins/sauce_ondemand/SauceOnDemandReport.java][getAuth][3] = -> TRY {  -> TRY { -> mac=Mac.getInstance(sks.getAlgorithm(),)@ -> mac.init(sks,)@ -> hmacBytes=mac.doFinal(id.getBytes(),)@ -> hexBytes=new Hex().encode(hmacBytes,)@ } CATCH(NoSuchAlgorithmException) { -> throw new IOException("Could not generate Sauce-OnDemand access code",e,)@ } CATCH(InvalidKeyException) { -> throw new IOException("Could not generate Sauce-OnDemand access code",e,)@ } CATCH(UnsupportedEncodingException) { -> throw new IOException("Could not generate Sauce-OnDemand access code",e,)@ } } CATCH(IOException) {}
results[https://github.com/Lavanyajey/Zappa/blob/1fcb562264e3927ce40733dfdcea8aaa07aeec49/java/twillioAPI/src/com/twilio/sdk/TwilioUtils.java][validateRequest][1] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> data=new StringBuffer(url,)@ -> IF { -> LOOP { -> data.append(s,)@ -> data.append(v,)@ } } -> rawHmac=mac.doFinal(data.toString().getBytes(),)@ -> signature=new String(Base64.encodeBase64(rawHmac,),)@ } CATCH(NoSuchAlgorithmException) { -> e.printStackTrace()@ } CATCH(InvalidKeyException) { -> e.printStackTrace()@ }
results[https://github.com/MMS-Projects/copyit-server/blob/3841f72a097106662fe5d5d3c82bdf64172c01b6/src/main/java/net/mms_projects/copy_it/api/oauth/HeaderVerifier.java][checkSignature][1] = -> TRY {  -> raw=createRaw(postRequestDecoder,https,)@ -> TRY { -> mac=Mac.getInstance(HMAC_SHA1,)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(raw.getBytes(),)@ -> signature=new String(Base64.encodeBase64(rawHmac,),)@ -> IF { -> throw new OAuthException(ErrorMessages.INVALID_SIGNATURE,)@!(URLDecoder.decode(signed_with,UTF_8,).equals(signature,)) } } CATCH(NoSuchAlgorithmException) { -> e.printStackTrace()@ } CATCH(InvalidKeyException) { -> e.printStackTrace()@ } } CATCH(UnsupportedEncodingException,URISyntaxException,OAuthException) {}
results[https://github.com/jimbarritt/amber/blob/8cef55a5086c0ff3349e6eb1fa8b2301bc48bfed/signature-api/src/main/java/org/apache/amber/signature/hmac/HmacSha1Method.java][calculate][1] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ } CATCH(NoSuchAlgorithmException) { -> throw new SignatureException("HMAC-SHA1 Algorithm not supported",e,)@ } -> TRY { -> mac.init(secretKeySpec,)@ } CATCH(InvalidKeyException) { -> throw new SignatureException(new StringBuilder("Signing key '",).append(key,).append("' caused HMAC-SHA1 error",).toString(),e,)@ } -> rawHmac=mac.doFinal(baseString.getBytes(),)@ -> return encodeBase64(rawHmac,)@ } CATCH(SignatureException) {}
results[https://github.com/apache/oltu/blob/55b75c43959aef9c7c59ec61654463277861cbdf/signature-api/src/main/java/org/apache/labs/amber/signature/signers/hmac/HmacSha1MethodAlgorithm.java][encode][4] = -> TRY {  -> TRY { -> mac=Mac.getInstance(HMAC_SHA1_ALGORITHM,)@ } CATCH(NoSuchAlgorithmException) { -> throw new SignatureException("HMAC-SHA1 Algorithm not supported",e,)@ } -> TRY { -> mac.init(secretKeySpec,)@ } CATCH(InvalidKeyException) { -> throw new SignatureException(new StringBuilder("Signing key '",).append(key,).append("' caused HMAC-SHA1 error",).toString(),e,)@ } -> rawHmac=mac.doFinal(baseString.getBytes(),)@ -> return base64Encode(rawHmac,)@ } CATCH(SignatureException) {}
results[https://github.com/jonnyzzz/maragogype/blob/489744b898b649d8d9216265dab829988ce9a1e8/tags/v1.4.1/java/com/xerox/amazonws/common/AWSConnection.java][encode][1] = -> IF { -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@mac==null||!(lastSecretKey.equals(awsSecretKey,)) } CATCH(NoSuchAlgorithmException) { -> throw new RuntimeException("Could not find sha1 algorithm",e,)@mac==null||!(lastSecretKey.equals(awsSecretKey,)) } -> TRY { -> mac.init(signingKey,)@mac==null||!(lastSecretKey.equals(awsSecretKey,)) } CATCH(InvalidKeyException) { -> throw new RuntimeException("Could not initialize the MAC algorithm",e,)@mac==null||!(lastSecretKey.equals(awsSecretKey,)) } } -> TRY { -> signedBytes=mac.doFinal(canonicalString.getBytes("UTF-8",),)@!(mac==null||!(lastSecretKey.equals(awsSecretKey,))) } CATCH(UnsupportedEncodingException) { -> signedBytes=mac.doFinal(canonicalString.getBytes(),)@!(mac==null||!(lastSecretKey.equals(awsSecretKey,))) } -> b64=new String(Base64.encodeBase64(signedBytes,),)@!(mac==null||!(lastSecretKey.equals(awsSecretKey,)))
results[https://github.com/jonnyzzz/maragogype/blob/489744b898b649d8d9216265dab829988ce9a1e8/tags/v1.7/java/com/xerox/amazonws/common/AWSConnection.java][encode][9] = -> mac=macMap.get(algorithm,)@ -> IF { -> TRY { -> mac=Mac.getInstance(algorithm,)@mac==null||!(lastSecretKey.equals(awsSecretKey,)) } CATCH(NoSuchAlgorithmException) { -> throw new RuntimeException("Could not find sha1 algorithm",e,)@mac==null||!(lastSecretKey.equals(awsSecretKey,)) } -> TRY { -> mac.init(signingKey,)@mac==null||!(lastSecretKey.equals(awsSecretKey,)) -> macMap.put(algorithm,mac,)@mac==null||!(lastSecretKey.equals(awsSecretKey,)) } CATCH(InvalidKeyException) { -> throw new RuntimeException("Could not initialize the MAC algorithm",e,)@mac==null||!(lastSecretKey.equals(awsSecretKey,)) } } -> TRY { -> signedBytes=mac.doFinal(canonicalString.getBytes("UTF-8",),)@!(mac==null||!(lastSecretKey.equals(awsSecretKey,))) } CATCH(UnsupportedEncodingException) { -> signedBytes=mac.doFinal(canonicalString.getBytes(),)@!(mac==null||!(lastSecretKey.equals(awsSecretKey,))) } -> b64=new String(Base64.encodeBase64(signedBytes,),)@!(mac==null||!(lastSecretKey.equals(awsSecretKey,)))
results[https://github.com/willnorris/java-openid/blob/15ff878c1aff30dcdd8bff152555426324257772/src/main/java/edu/internet2/middleware/openid/security/SecurityUtils.java][calculateSignature][1] = -> TRY {  -> log.debug("signature data = {}",data,)@ -> TRY { -> mac=Mac.getInstance(association.getMacKey().getAlgorithm(),)@ -> mac.init(association.getMacKey(),)@ -> rawHmac=mac.doFinal(data.getBytes(),)@ -> return new String(Base64.encodeBase64(rawHmac,),)@ } CATCH(InvalidKeyException) { -> log.error("Unable to generate MAC - "+e.getMessage(),)@ -> throw new SecurityException("Unable to generate MAC",e,)@ } CATCH(NoSuchAlgorithmException) { -> log.error("Unable to generate MAC - "+e.getMessage(),)@ -> throw new SecurityException("Unable to generate MAC",e,)@ } } CATCH(SecurityException) {}
results[https://github.com/n3phele/core/blob/d6ce78bc86f8cacf362ccf680585d0ea525c33b8/n3phele/src/n3phele/storage/swift/CloudStorageImpl.java][signSwiftQueryString][1] = -> TRY { -> mac=Mac.getInstance("HmacSHA1",)@ -> mac.init(signingKey,)@ -> rawHmac=mac.doFinal(stringToSign.getBytes(),)@ -> hexBytes=new Hex().encode(rawHmac,)@ } CATCH(IllegalStateException) { -> log.log(Level.SEVERE,"Signing error",e,)@ -> throw new IllegalArgumentException(e.getMessage(),)@ } CATCH(InvalidKeyException) { -> log.log(Level.SEVERE,"Signing error",e,)@ -> throw new IllegalArgumentException(e.getMessage(),)@ } CATCH(NoSuchAlgorithmException) { -> log.log(Level.SEVERE,"Signing error",e,)@ -> throw new IllegalArgumentException(e.getMessage(),)@ } CATCH(UnsupportedEncodingException) { -> log.log(Level.SEVERE,"Signing error",e,)@ -> throw new IllegalArgumentException(e.getMessage(),)@ }
results[https://github.com/jonnyzzz/maragogype/blob/489744b898b649d8d9216265dab829988ce9a1e8/tags/v1.5/java/com/xerox/amazonws/common/AWSConnection.java][encode][1] = -> mac=macMap.get(getAlgorithm(),)@ -> IF { -> TRY { -> mac=Mac.getInstance(getAlgorithm(),)@mac==null||!(lastSecretKey.equals(awsSecretKey,)) } CATCH(NoSuchAlgorithmException) { -> throw new RuntimeException("Could not find sha1 algorithm",e,)@mac==null||!(lastSecretKey.equals(awsSecretKey,)) } -> TRY { -> mac.init(signingKey,)@mac==null||!(lastSecretKey.equals(awsSecretKey,)) -> macMap.put(getAlgorithm(),mac,)@mac==null||!(lastSecretKey.equals(awsSecretKey,)) } CATCH(InvalidKeyException) { -> throw new RuntimeException("Could not initialize the MAC algorithm",e,)@mac==null||!(lastSecretKey.equals(awsSecretKey,)) } } -> TRY { -> signedBytes=mac.doFinal(canonicalString.getBytes("UTF-8",),)@!(mac==null||!(lastSecretKey.equals(awsSecretKey,))) } CATCH(UnsupportedEncodingException) { -> signedBytes=mac.doFinal(canonicalString.getBytes(),)@!(mac==null||!(lastSecretKey.equals(awsSecretKey,))) } -> b64=new String(Base64.encodeBase64(signedBytes,),)@!(mac==null||!(lastSecretKey.equals(awsSecretKey,)))
