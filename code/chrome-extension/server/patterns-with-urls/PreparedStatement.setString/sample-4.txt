results[https://github.com/xtnm/Aion-Unique-API-Server/blob/d180acd2bb90f19f797a6d832d5138355dc6e4a4/AE-go_GameServer/data/scripts/system/database/mysql5/MySQL5LegionMemberDAO.java][setParams][214] = -> TRY {  -> stmt.setString(1,playerName,)@ } CATCH(SQLException) {}
results[https://github.com/oxhead/decoupled-hadoop/blob/fda683bf06f52e3c0999fec65d994f9f74fb3c50/hadoop-mapreduce/src/examples/org/apache/hadoop/examples/DBCountPageView.java][write][80] = -> TRY {  -> statement.setString(1,url,)@ -> statement.setLong(2,pageview,)@ } CATCH(SQLException) {}
results[https://github.com/vladsdisciples/3f00project/blob/080da9d529be4d1cea54d0257c1fd37fc39a6456/Derby Example Programs/scores/java/client/org/apache/derbyDemo/scores/data/Data.java][getKeyFinder][12] = -> TRY {  -> ps=Utils.prepare(conn,"select testID from Test where testName = ?",)@ -> ps.setString(1,_testName,)@ } CATCH(SQLException) {}
results[https://github.com/progutvikling/picture-browser/blob/13c267fc14f07405b1f8f4ec63dd4f258b797b51/src/main/java/dal/admin/ConfigsStore.java][getConfig][2] = -> TRY { -> statement.setString(1,name,)@ } CATCH(SQLException) { -> e.printStackTrace()@ }
results[https://github.com/leth/ng4j/blob/081d8e9b5314686b13c9d76f01004ba0b2e769cf/src/de/fuberlin/wiwiss/ng4j/db/QuadDB.java][setSubjectColumn][1] = -> TRY {  -> statement.setString(SUBJECT_INDEX,resourceAsSqlString(subject,),)@ } CATCH(SQLException) {}
results[https://github.com/SIB-Colombia/sib-dataportal/blob/90bf0799cc1a20941b0ff34d361ef3abd5ea04c8/portal-index/src/main/java/org/gbif/portal/dao/impl/jdbc/RawIdentifierDAOImpl.java][setValues][1] = -> TRY {  -> ps.setString(1,identifiers.get(index,),)@ } CATCH(SQLException) {}
results[https://github.com/gyulanemeth/ITK-Stock/blob/48197c5ee05aeba9838cb016999359bd9969e096/src/hu/ppke/itk/itkStock/dbaccess/UserManager.java][removeUser][7] = -> TRY {  -> this.removeUser.setString(1,username,)@ -> this.removeUser.executeUpdate()@ } CATCH(SQLException) {}
results[https://github.com/utgenome/utgb/blob/32d35f3e65789ef68808f42099c8bc4ad90d887e/utgb-core/src/main/java/org/utgenome/format/wig/WIGDatabaseGenerator.java][readBrowserLine][1] = -> TRY {  -> p1.setString(1,line,)@ -> p1.execute()@ } CATCH(SQLException) {}
results[https://github.com/geotools/geotools/blob/f97d4fca552fb1c5c3bb7acbaac81ded276c2be2/modules/library/jdbc/src/main/java/org/geotools/sql/SqlUtil.java][set][1] = -> TRY {  -> log(s,)@ -> ps.setString(++pos,s,)@ } CATCH(SQLException) {}
results[https://github.com/Activiti/Activiti/blob/7cbcbdcaab15d0a8db3a9ec301ae67460e87479b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/db/IbatisVariableTypeHandler.java][setParameter][32] = -> TRY {  -> typeName=(Type) parameter.getTypeName()@ -> ps.setString(i,typeName,)@ } CATCH(SQLException) {}
results[https://github.com/Qi4j/qi4j-sdk/blob/dc2d52200a4333de13580cc7fb29df2ef02a6627/extensions/entitystore-sql/src/main/java/org/qi4j/entitystore/sql/database/AbstractDatabaseService.java][prepareRemoveEntityStatement][37] = -> TRY {  -> removeEntity=connection.prepareStatement(SQLUtil.REMOVE_STATE_SQL,)@ -> removeEntity.setString(1,identity,)@ } CATCH(SQLException) {}
results[https://github.com/Union-Investment/Crud2Go/blob/19b8b43852b1b8c379d520dd7bc5b8b052473767/eai-portal-webapp-administration/src/main/java/de/unioninvestment/eai/portal/portlet/crud/persistence/MySQLConfigurationDao.java][createPreparedStatement][1] = -> TRY {  -> stmt=con.prepareStatement("INSERT INTO RESOURCEID_PRIMKEY (RESOURCEID) values (?)",Statement.RETURN_GENERATED_KEYS,)@ -> stmt.setString(1,resourceId,)@ } CATCH(SQLException) {}
results[https://github.com/UWCS/choob/blob/ccfe86441930d8e69c0322082e42f69999b91522/src/main/plugins-alpha/Mood.java][exec][24] = -> TRY {  -> s.setString(3,textLike,)@ -> u=s.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/drepshas/hib-core/blob/d8d6d82e30960e0c255950eaf875ad48831b12b0/code/core/src/main/java/org/hibernate/type/CharacterType.java][set][23] = -> TRY {  -> st.setString(index,value.toString(),)@ } CATCH(SQLException) {}
results[https://github.com/jdbc-bare/spring-jdbc-bare/blob/ee9b9d6a5757371b64cfd5ac062a7f58a6e6ed7f/org.springframework.jdbc/src/test/java/org/springframework/jdbc/core/StatementCreatorUtilsTests.java][testSetParameterValueWithStringAndUnknownType][18] = -> TRY {  -> ps.setString(1,"test",)@ -> StatementCreatorUtils.setParameterValue(ps,1,SqlTypeValue.TYPE_UNKNOWN,null,"test",)@ } CATCH(SQLException) {}
results[https://github.com/yudis/h2database/blob/bbbd03bbec22ce2fe58ce3872ae01e2168b99b31/h2/src/test/org/h2/test/db/Db.java][set][8] = -> TRY { -> prep.setString(++index,x,)@ } CATCH(SQLException) { -> throw convert(e,)@ }
results[https://github.com/leth/ng4j/blob/3997a55309a0219c71cde37f167f378f3cfc1753/src/de/fuberlin/wiwiss/ng4j/db/specific/DbCompatibility.java][getDeleteGraphStmt][5] = -> TRY {  -> deleteGraphStmt.setString(1,graphName.getURI(),)@ } CATCH(SQLException) {}
results[https://github.com/ElrondEru/Aion-Energy-Life-/blob/fd73c6aaf4da68108eab6d3994b34702288826fb/AL-Login/data/scripts/system/database/mysql5/MySQL5BannedIpDAO.java][setParams][4] = -> TRY {  -> preparedStatement.setString(1,bannedIP.getMask(),)@ } CATCH(SQLException) {}
results[https://github.com/teoware/refapp/blob/0946d80bf80ea5282764ce760477111919a593ce/code/refapp-infrastructure-dao/src/main/java/com/teoware/refapp/dao/util/Converters.java][setParam][3] = -> TRY {  -> statement.setString(index,convert(param,),)@ } CATCH(SQLException) {}
results[https://github.com/camptocamp/cartoweb3/blob/c98b4252861c18205f39c328ac80a9b1768e6c8f/scripts/stats/src/main/java/org/cartoweb/stats/report/filter/LayerFilter.java][setupStatement][2] = -> TRY {  -> stmt.setString(1,cur.replace('*','%',),)@ } CATCH(SQLException) {}
results[https://github.com/mayocat/mayocat-shop/blob/198879043dbb2d301ad9c420a072643ab6074d42/shop/billing/internal/src/main/java/org/mayocat/shop/billing/store/jdbi/argument/CurrencyAsCurrencyCodeArgumentFactory.java][apply][3] = -> TRY {  -> statement.setString(position,value.getCurrencyCode(),)@ } CATCH(SQLException) {}
results[https://github.com/gakuzzzz/doma/blob/adfb7631b1e497ae506d17b2a78cec0f247e50ab/doma/src/main/java/org/seasar/doma/jdbc/type/EnumType.java][doSetValue][3] = -> TRY {  -> preparedStatement.setString(index,value.name(),)@ } CATCH(SQLException) {}
results[https://github.com/makkus/infosystems/blob/054fd9d24cda8f0c9ee4835c55cfcc0d40adadf5/mysql-mds/src/main/java/org/bestgrid/mds/SQLQueryClient.java][setString][4] = -> TRY { -> s.setString(i,string,)@ } CATCH(SQLException) { -> throw new RuntimeException(ex,)@ }
results[https://github.com/hibernate/hibernate-orm/blob/219707df1d85596af9fda12cbb7a65c612d71bba/hibernate-core/src/main/java/org/hibernate/type/descriptor/sql/VarcharTypeDescriptor.java][doBind][17] = -> TRY {  -> st.setString(index,javaTypeDescriptor.unwrap(value,String.class,options,),)@ } CATCH(SQLException) {}
results[https://github.com/hibernate/hibernate-orm/blob/d8d6d82e30960e0c255950eaf875ad48831b12b0/code/core/src/main/java/org/hibernate/type/CharBooleanType.java][set][5] = -> TRY {  -> st.setString(index,toCharacter(value,),)@ } CATCH(SQLException) {}
results[https://github.com/Qi4j/qi4j-sdk/blob/6dfd102acfe9cd22bfdf0e3771265d0d37be3398/extensions/entitystore-sql/src/main/java/org/qi4j/entitystore/sql/database/DatabaseSQLServiceStatementsMixin.java][populateGetEntityStatement][5] = -> TRY {  -> ps.setString(1,ref.identity(),)@ } CATCH(SQLException) {}
results[https://github.com/roman-himself/MyActiviti/blob/6f30c8eca8ddd3701471cefa44dbe881a0616053/modules/activiti-upgrade/src/test/java/org/activiti/upgrade/ProxyStatement.java][setString][14] = -> TRY {  -> parameters.put(parameterIndex,"'"+x+"'",)@ -> preparedStatement.setString(parameterIndex,x,)@ } CATCH(SQLException) {}
results[https://github.com/k0fis/kfsWfl/blob/b37c73df6893dec3e8f767754fdb3e839f5c1ebe/src/main/java/kfs/kfsDbi/kfsString.java][setParam][2] = -> TRY {  -> ps.setString(inx,getString(data,),)@ } CATCH(SQLException) {}
results[https://github.com/mayocat/mayocat-shop/blob/ea8f830900d84287e263af7a7a8173885c960aa7/shop/shipping/src/main/java/org/mayocat/shop/shipping/store/jdbi/argument/StrategyArgumentFactory.java][apply][2] = -> TRY {  -> statement.setString(position,value.toJson(),)@ } CATCH(SQLException) {}
results[https://github.com/cyounes/jmbs/blob/ab6545578a7bb7c14498449eb470ef1544d153f1/jmbs_maven/Server/src/main/java/jmbs/server/DAO.java][setString][3] = -> TRY { -> stmt.setString(index,s,)@ } CATCH(SQLException) { -> System.err.println("Unable to set string: \""+s+"\"",)@ }
results[https://github.com/ebean-orm/avaje-ebeanorm/blob/7aae897def16ec72ab474bbd433ad988c25752cf/src/main/java/com/avaje/ebeaninternal/server/type/DataBind.java][setChar][1] = -> TRY {  -> pstmt.setString(++pos,String.valueOf(v,),)@ } CATCH(SQLException) {}
results[https://github.com/specify/specify/blob/7664035c3c35b0441a45c12f5135c8c68f36e13e/src/edu/ku/brc/specify/tasks/CleanupToolsTask.java][setColumn][2] = -> TRY {  -> pStmt.setString(inx,(StringUtils.isNotEmpty(str,))?str:null,)@ } CATCH(SQLException) {}
results[https://github.com/roman-himself/MyActiviti/blob/8b2d307ad4657983dd90ae6d97c6e57431f96d52/modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/ByteArrayRefTypeHandler.java][setParameter][2] = -> TRY {  -> ps.setString(i,getValueToSet(parameter,),)@ } CATCH(SQLException) {}
results[https://github.com/janaz/play2_tutorial_app/blob/4d51be03f70f722ceefd08ba5a9a371422315fe2/app/com/neutrino/data_loader/PrecoreDataLoader.java][setup][1] = -> TRY {  -> pstmt.setLong(1,10,)@ -> pstmt.setString(2,"blah",)@ } CATCH(SQLException) {}
results[https://github.com/djspiewak/activeobjects/blob/5fd579750cd3b535eec60ff8136319b2b53ad908/ActiveObjects/test/net/java/ao/types/ClassType.java][putToDatabase][3] = -> TRY {  -> stmt.setString(index,value.getName(),)@ } CATCH(SQLException) {}
results[https://github.com/mybatis/mybatis-3/blob/16360092170cdcdd0cf925a8cc04f5edd9e12b34/src/test/java/org/apache/ibatis/submitted/typehandler/StringTrimmingTypeHandler.java][setParameter][1] = -> TRY {  -> ps.setString(i,trim(parameter,),)@ } CATCH(SQLException) {}
results[https://github.com/gridengine/arco/blob/9205d4d4dbdee6cc331b85b54120a8992c64e658/source/dbwriter/src/com/sun/grid/reporting/dbwriter/db/StringField.java][setValueForPSTM][4] = -> TRY {  -> pstm.setString(index,this.getValue(),)@ } CATCH(SQLException) {}
results[https://github.com/repshak/BeeQueue/blob/f8c895b38c24870834619cbe5a13bdd0e3801e50/src/org/beequeue/sql/SqlConstants.java][invoke][3] = -> TRY {  -> pstmt.setString(idx.next(),input,)@ } CATCH(SQLException) {}
results[https://github.com/jOOQ/jOOQ/blob/316916d37b9013115827681a91ee87c95c04e678/jOOQ-sql-console/src/org/jooq/debugger/UsageTrackingPreparedStatement.java][setString][1] = -> TRY {  -> stmt.setString(parameterIndex,x,)@ -> logValue(parameterIndex,(x==null)?null:'"'+x+'"',)@ } CATCH(SQLException) {}
results[https://github.com/mperdikeas/playground/blob/1ec5d7849855d3757de40335fe02d9c75687fb35/java/batch-update-tests/04/loader/src/Table_I_Inserter.java][work][2] = -> TRY {  -> s.setInt(1,row.i,)@ -> s.setString(2,row.s,)@ } CATCH(SQLException) {}
results[https://github.com/anagri/SmartPool/blob/a743127440244156c4967264466dd0554ce97365/src/smartpool/data/typeHandler/BuddyTypeHandler.java][setParameter][1] = -> TRY {  -> ps.setString(i,(parameter==null)?null:parameter.getUserName(),)@ } CATCH(SQLException) {}
results[https://github.com/oobium/framework/blob/8df615b1e5cb6946b64487c758ea9753d65bf809/org.oobium.persist.db/src/org/oobium/persist/db/internal/LoggingPreparedStatement.java][setString][1] = -> TRY {  -> connection.writeln("-setString("+parameterIndex+", "+x+")",)@ -> statement.setString(parameterIndex,x,)@ } CATCH(SQLException) {}
results[https://github.com/idega/com.idega.core/blob/748a822f288335a66c92264db6b1d8bc69092acc/src/java/com/idega/data/DatastoreInterface.java][setStringForPreparedStatement][1] = -> TRY {  -> statement.setString(index,entity.getStringColumnValue(columnName,),)@ } CATCH(SQLException) {}
results[https://github.com/mybatis/generator/blob/5a12e01ce8969a5a785c1ff0c28f7c918696b4ae/core/mybatis-generator-systests-mybatis3/src/main/java/mbg/test/mb3/common/StringBooleanTypeHandler.java][setParameter][1] = -> TRY {  -> s=(parameter==null)?"N":(parameter.booleanValue())?"Y":"N"@ -> ps.setString(columnIndex,s,)@ } CATCH(SQLException) {}
results[https://github.com/binwiederhier/syncany/blob/3f58c1e7d1c4b105c3fac62c17fe3449593491db/syncany-lib/src/main/java/org/syncany/database/dao/FileHistorySqlDao.java][getFileHistoriesWithLastVersionByChecksum][6] = -> TRY { -> preparedStatement.setString(1,fileContentChecksum.toString(),)@ } CATCH(SQLException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/anycook/anycook-api/blob/0d3f4b119aba15e1907581efd04d9469bcf8e038/src/main/java/de/anycook/db/mysql/DBUser.java][deleteCookieId][15] = -> TRY {  -> pStatement=connection.prepareStatement("DELETE FROM permanent_cookies WHERE id = ?",)@ -> pStatement.setString(1,id,)@ -> pStatement.executeUpdate()@ } CATCH(SQLException) {}
results[https://github.com/ttasterisco/malleterisk/blob/2fecb05fb3f684f6bb17c0e70784fbc10bc6ddc7/src/main/java/data/loader/db/DbDataAccess.java][getEmailParticipant][88] = -> TRY {  -> ps=c.prepareStatement(sql,)@ -> ps.setString(1,participantAddress,)@ -> rs=ps.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/mycase/webdebate/blob/a8e8a19e6cd43924cef576fb39a7ae43d2273c23/src/portlet/docroot/WEB-INF/src/com/arguments/functional/store/sql/ArgsDB.java][setString][2] = -> TRY { -> theQuery.setString(aKey,aValue,)@ } CATCH(SQLException) { -> throw new ArgsSQLStoreException("Can't set arguments ("+aKey+", "+aValue+") on query "+theFixedQuery,anException,)@ } -> theSqlArgumentMap.put(aKey,aValue,)@
results[https://github.com/charleso/naca/blob/83088533c2eed1c35e2fde3caa64293c55911ce6/NacaRT/src/nacaLib/sqlSupport/RecordColTypeManagerOther.java][transfer][1] = -> TRY { -> csValue=resultSetSource.getString(m_nColSourceIndex,)@ -> insertStatementInsert.setString(m_nColSourceIndex,csValue,)@ } CATCH(SQLException) { -> e.printStackTrace()@ }
results[https://github.com/repshak/BeeQueue/blob/ed18c626912f6c78503703e0b8e26a6d6e2a12a4/src/org/beequeue/shastore/ShaStoreQueries.java][invoke][1] = -> TRY {  -> pstmt.setString(idx.next(),input.toString(),)@ } CATCH(SQLException) {}
results[https://github.com/yukoff/concourse-connect/blob/c4bbb00bbf206bcb9ce8ecb6630e2de39edf64b2/src/main/java/com/concursive/connect/web/modules/login/dao/AuthenticationClassesLookupList.java][prepareFilter][3] = -> TRY {  -> IF { -> pst.setString(++i,this.loginMode,)@loginMode!=null } } CATCH(SQLException) {}
results[https://github.com/unitycoders/uc_pircbotx/blob/2c1e60989a9fde39db9e296278574f273aebaf25/src/main/java/uk/co/unitycoders/pircbotx/data/db/FactoidModel.java][getFactoid][3] = -> TRY {  -> readStmt.clearParameters()@ -> readStmt.setString(1,factoid,)@ -> rs=readStmt.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/bbcf/bbcfutils/blob/748aac3225373f34e7e228d2e45b3646ca0ec2a3/JAVA/src/ch/epfl/bbcf/bbcfutils/sqlite/SQLiteAccess.java][searchForGeneNameOnChromosome][1] = -> TRY {  -> prep=connection.prepareStatement(query,)@ -> prep.setString(1,name,)@ -> r=getResultSet(prep,query,)@ } CATCH(SQLException) {}
results[https://github.com/kraktos/DBPediaMapping/blob/9a094404af8d6f5cb318a4aca5b9d420b986b359/EntityLinker/src/de/dws/mapper/dbConnectivity/DBWrapper.java][findPerfectSubjectMatches][20] = -> TRY { -> getAllSubPredPrepStmnt.setString(1,pred,)@ -> rs=getAllSubPredPrepStmnt.executeQuery()@ } CATCH(SQLException) { -> e.printStackTrace()@ }
results[https://github.com/portaloffreedom/parcoDB/blob/65dbe98305d5b89663595aca098eed6aa51ef42b/src/parcodb/database/objects/Struttura.java][getStruttura][2] = -> TRY {  -> preparedStatement=conn.prepareQueryStatement("SELECT nome, indirizzo, orario_apertura, periodo_inizio, periodo_fine, localizzazione "+"FROM Struttura "+"WHERE nome = ? ",)@ -> preparedStatement.setString(1,nome,)@ -> result=preparedStatement.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/opentree/aionj-hungary/blob/96dbc5954ed14b8255beb590722763682ddad918/Login/data/scripts/system/database/mysql5/MySQL5AccountDAO.java][handleInsertUpdate][3] = -> TRY {  -> preparedStatement.setString(1,ip,)@ -> preparedStatement.setInt(2,accountId,)@ -> preparedStatement.execute()@ } CATCH(SQLException) {}
results[https://github.com/intalio/tempo/blob/a875e2a8d7a31e3f50da049af13e34b6b1f358a8/wds-service/src/main/java/org/intalio/tempo/workflow/wds/core/JdbcItemDaoConnection.java][itemExists][3] = -> TRY { -> _checkStatement.setString(1,uri,)@ -> resultSet=_checkStatement.executeQuery()@ } CATCH(SQLException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/sunsuk7tp/MyCassandra/blob/65568183bd3864bc8958fe96a8db2358a7550458/MyCassandra-0.2.0/src/java/org/apache/cassandra/db/engine/MySQLInstance.java][doUpdate][6] = -> TRY {  -> pstUpdate.setBytes(1,cfValue,)@ -> pstUpdate.setString(2,rowKey,)@ -> return pstUpdate.executeUpdate()@ } CATCH(SQLException) {}
results[https://github.com/majorProject/IAnnotate/blob/f94b80b5ab64c0f5595cf68d2f32031592d7c42d/src/iannotate/database/SqlQuery.java][delete][9] = -> TRY {  -> deletus=connection.prepareStatement("DELETE FROM user "+"WHERE username = ?",)@ -> deletus.setString(1,userName,)@ -> r=deletus.execute()@ } CATCH(SQLException) {}
results[https://github.com/groldan/geotools_trunk/blob/bc2a70262df86935ef948db0c4bc95220ab1065c/modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java][getDimensionsForMethod][4] = -> TRY {  -> stmt=prepareStatement("MethodDimensions","SELECT SOURCE_CRS_CODE,"+" TARGET_CRS_CODE"+" FROM [Coordinate_Operation]"+" WHERE COORD_OP_METHOD_CODE = ?"+" AND SOURCE_CRS_CODE IS NOT NULL"+" AND TARGET_CRS_CODE IS NOT NULL",)@ -> stmt.setString(1,code,)@ -> result=stmt.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/Aldeon/Aldeon/blob/4173391b42ffb0c6058a81135765a5b8fb208978/src/main/java/org/aldeon/db/DbImpl.java][setIdentifiableInPreparedStatement][1] = -> TRY {  -> preparedStatement.setString(parameterIndex,hex.encode(byteSource.getByteBuffer(),),)@ } CATCH(SQLException) {}
results[https://github.com/projectrsc/ProjectRSC/blob/be9e2e1854a0e4b93816e52712c9fe37ff7dfc39/ProjectRSC/Development/Server/src/org/darkquest/gs/db/query/StaffLog.java][prepareStatement][2] = -> TRY {  -> statement=connection.prepareStatement(query,)@ -> statement.setString(1,message,)@ -> statement.setLong(2,time,)@ } CATCH(SQLException) {}
results[https://github.com/floralvikings/jenjin/blob/35b558aefb6facd7d78222fb0abce59801be92ca/jgsf/src/main/java/com/jenjinstudios/sql/SQLHandler.java][makeUserQuery][2] = -> TRY {  -> statement=dbConnection.prepareStatement(USER_QUERY,TYPE_SCROLL_SENSITIVE,CONCUR_UPDATABLE,)@ -> statement.setString(1,username,)@ -> return statement.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/bella24988/guanabana-store/blob/094a6a67bd89be4f33bad97ad3749ca1f3d63e8a/guanabana/src/server/DataBase.java][aggiornaStatoOrdine][1] = -> TRY {  -> stAggiornaStatoOrdine.setString(1,stato,)@ -> stAggiornaStatoOrdine.setInt(2,numeroOrdine,)@ -> stAggiornaStatoOrdine.executeUpdate()@ } CATCH(SQLException) {}
results[https://github.com/intalio/tempo/blob/b1994bceecd2918b484ea729ef265de87dd2eb06/wds-service/src/main/java/org/intalio/tempo/workflow/wds/core/tms/TMSConnection.java][deletePipaTask][2] = -> TRY { -> _deletePipaTaskStatement.setString(1,formUrl,)@ -> _deletePipaTaskStatement.execute()@ } CATCH(SQLException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/moravianlibrary/xcncip2toolkit/blob/fa44579901caa05be0733c26c22167add0023de9/connectors/voyager/7.2/trunk/voyager/jar/src/main/java/org/extensiblecatalog/ncip/v2/voyager/VoyagerRemoteServiceManager.java][getBibIdForItemId][1] = -> TRY { -> pstmt.setString(1,itemId,)@ -> rs=pstmt.executeQuery()@ } CATCH(SQLException) { -> log.error("An SQL Exception error occurred while getting "+"the bibliographic Id from the database.",e,)@ }
results[https://github.com/desruisseaux/geotoolkit/blob/5253fb1b862ba024ec3135d3395e717aafb61fc8/modules/coverage/geotk-coverage-sql/src/main/java/org/geotoolkit/coverage/sql/TileTable.java][exists][1] = -> TRY {  -> statement.setString(indexOf(query.byLayer,),layer.getName(),)@ } CATCH(SQLException) {}
results[https://github.com/samtingleff/valkyrie/blob/dacabadac29ce201a21f5b79faca1817c2a44598/src/main/java/com/othersonline/kv/backends/sql/DefaultJdbcDAO.java][prepareExists][5] = -> TRY {  -> ps=conn.prepareStatement(String.format("select %1$s from %2$s where %1$s = ?",keyField,table,),)@ -> ps.setString(1,key,)@ } CATCH(SQLException) {}
results[https://github.com/CTSIatUCSF/shindigorng/blob/c7a773800490a961decb29f2a682069ff5bbf032/java/vivo-connector/src/main/java/edu/ucsf/profiles/shindig/spi/ProfilesMessageService.java][getMessageCollections][2] = -> TRY {  -> ps=conn.prepareCall(sql,)@ -> ps.setString(++index,user,)@ -> rs=ps.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/wso2/commons/blob/0eb8ee0ef1e742c04b98150c4a9836657477cff1/openjpa-2.2.0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FoxProDictionary.java][setNull][2] = -> TRY {  -> stmnt.setBytes(idx,null,)@ -> stmnt.setString(idx,null,)@ -> super.setNull(stmnt,idx,colType,col,)@ } CATCH(SQLException) {}
results[https://github.com/johnmay/mdk/blob/2005ae15dd570100ffb0ad4ff2cd070fedbfa375/service/derby-service/src/main/java/uk/ac/ebi/mdk/service/schema/ReactionSchema.java][getCompoundId][3] = -> TRY {  -> getCompoundID.setString(1,accession,)@ -> getCompoundID.execute()@ -> rs=getCompoundID.getResultSet()@ } CATCH(SQLException) {}
results[https://github.com/repshak/BeeQueue/blob/f9b34b62aaef4218339e67967add65ecf17e5eaa/java/src/org/beequeue/sql/mapping/EnumNameType.java][set][2] = -> TRY {  -> pstmt.setString(idx.next(),(Enum) value.name(),)@ } CATCH(SQLException) {}
results[https://github.com/obazoud/springbatch-in-action/blob/1c2405df5d61ee5502044b5f8f34ea8b301befcf/sandbox/src/test/java/com/manning/sbia/sandbox/chunk/LocalChunkTest.java][setValues][2] = -> TRY {  -> ps.setString(1,String.valueOf(i,),)@ -> ps.setBoolean(2,false,)@ } CATCH(SQLException) {}
results[https://github.com/stevearc/Battlecode-Server-Tester/blob/6bcc1b7f8daca4cfa20b1d18c0acce2f7b9ca6cb/src/backend/Server.java][getTeamNameOrAlias][1] = -> TRY {  -> st=db.prepare("SELECT * FROM tags WHERE tag LIKE ?",)@ -> st.setString(1,team,)@ -> r=db.query(st,)@ } CATCH(SQLException) {}
results[https://github.com/walkerart/services/blob/7c677bdfead853bae2654a7312c65fb890e6121c/services/common/src/main/java/org/collectionspace/services/common/storage/PreparedStatementSimpleBuilder.java][preparePrepared][6] = -> TRY {  -> LOOP { -> preparedStatement.setString(i,param,)@ } } CATCH(SQLException) {}
results[https://github.com/ravn/jt400/blob/3fe062d12954d94bc4197c87140de4a05297512e/src/com/ibm/as400/access/jdbcClient/Main.java][handleUnicodeStringParm][1] = -> TRY {  -> stuffString=(String) getParameterObject(thisParm,out1,)@ -> cstmt1.setString(parm,stuffString,)@ -> warning=cstmt1.getWarnings()@ } CATCH(SQLException) {}
results[https://github.com/unitycoders/uc_pircbotx/blob/b6775bfbb82a1659f64780b9001880385d5f7cef/src/main/java/uk/co/unitycoders/pircbotx/data/db/ProfileModel.java][createProfile][2] = -> TRY {  -> createProfile.clearParameters()@ -> createProfile.setString(1,name,)@ -> createProfile.executeUpdate()@ } CATCH(SQLException) {}
results[https://github.com/SonarSource/sonar/blob/3e934474787351585471e30b512c61f0ccc3e223/sonar-server/src/main/java/org/sonar/server/db/migrations/packageKeys42/PackageKeysMigration.java][convert][1] = -> TRY {  -> updateStatement.setString(1,convertKey(row.key,),)@ -> updateStatement.setLong(2,row.id,)@ } CATCH(SQLException) {}
results[https://github.com/samtingleff/valkyrie/blob/dacabadac29ce201a21f5b79faca1817c2a44598/src/main/java/com/othersonline/kv/backends/sql/DefaultJdbcDAO.java][prepareSelect][2] = -> TRY {  -> ps=conn.prepareStatement(String.format("select %3$s, %1$s from %2$s where %3$s = ?",valueField,table,keyField,),)@ -> ps.setString(1,key,)@ } CATCH(SQLException) {}
results[https://github.com/apache/derby/blob/5d1201527d2b4a19a8bbc9a72a39d8e883b72abb/java/testing/org/apache/derbyTesting/junit/BigDecimalHandler.java][setBigDecimalString][2] = -> TRY {  -> bd=(bdString==null)?null:new BigDecimal(bdString,)@ -> ps.setBigDecimal(parameterIndex,bd,)@ -> ps.setString(parameterIndex,bdString,)@ } CATCH(SQLException) {}
results[https://github.com/SOLA-FAO/services/blob/cdc3f188f35e2fcc6d4cc9f5b67abf1bf67664a3/services-common/src/main/java/org/sola/services/common/repository/CharTypeHandler.java][setParameter][2] = -> TRY {  -> ps.setString(i,Character.toString((Character) parameter.charValue(),),)@ } CATCH(SQLException) {}
results[https://github.com/bella24988/guanabana-store/blob/094a6a67bd89be4f33bad97ad3749ca1f3d63e8a/guanabana/src/server/DataBase.java][cercaDipendente][2] = -> TRY {  -> stConsultaDipendente.setInt(1,id,)@ -> stConsultaDipendente.setString(2,password,)@ -> result=stConsultaDipendente.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/jOOQ/jOOQ/blob/7c60d72448cf98cb1e4cb3b10d2581fbd1253fc8/jOOQ-console/src/main/java/org/jooq/tools/debug/impl/TrackingPreparedStatement.java][setString][4] = -> TRY {  -> stmt.setString(parameterIndex,x,)@ -> logValue(parameterIndex,(x==null)?null:'\''+x.replace("'","''",)+'\'',)@ } CATCH(SQLException) {}
results[https://github.com/sunsuk7tp/MyCassandra/blob/62569bff9b6b5d588a5d3e01715437ab7cb2f14e/src/java/org/apache/cassandra/db/MySQLInstance.java][doInsert][1] = -> TRY {  -> pstInsert.setString(1,rowKey,)@ -> pstInsert.setBytes(2,cfValue,)@ -> return pstInsert.executeUpdate()@ } CATCH(SQLException) {}
results[https://github.com/bbockelm/DBS/blob/2c433c520b2af53e80501cbcc8f177e5d0d59e23/DBS3/Server/JAVA/src/cms/dbs/commons/db/PreparedStatementWrapper.java][setString][1] = -> TRY {  -> embedded.setString(parameterIndex,x,)@ -> bindParams.put(new Integer(parameterIndex,),x,)@ } CATCH(SQLException) {}
results[https://github.com/unitycoders/uc_pircbotx/blob/2c1e60989a9fde39db9e296278574f273aebaf25/src/main/java/uk/co/unitycoders/pircbotx/data/db/FactoidModel.java][deleteFactoid][1] = -> TRY {  -> deleteStmt.clearParameters()@ -> deleteStmt.setString(1,factoid,)@ -> return deleteStmt.execute()@ } CATCH(SQLException) {}
results[https://github.com/portaloffreedom/parcoDB/blob/65dbe98305d5b89663595aca098eed6aa51ef42b/src/parcodb/database/objects/Tappa.java][getTappeInteresseCaratteristica][1] = -> TRY {  -> preparedStatement=conn.prepareQueryStatement("SELECT T.inizio,T.fine,T.lunghezza,T.tempo,T.tipo "+"FROM Interesse AS I,Tappa AS T "+"WHERE I.caratteristica = ? "+"AND I.tappa_inizio = T.inizio "+"AND I.tappa_fine = T.fine "+"ORDER BY T.inizio,T.fine",)@ -> preparedStatement.setString(1,caratteristica,)@ -> return populateTappe(preparedStatement,nomeFunzione,1,2,3,4,5,)@ } CATCH(SQLException) {}
results[https://github.com/kraktos/DBPediaMapping/blob/9a094404af8d6f5cb318a4aca5b9d420b986b359/EntityLinker/src/de/dws/mapper/dbConnectivity/DBWrapper.java][getRankedPredicates][1] = -> TRY { -> pstmt.setString(1,predicate,)@ -> rs=pstmt.executeQuery()@ } CATCH(SQLException) { -> logger.error("Error while getting ranked list of prediucates..",)@ }
results[https://github.com/CeIa/DBase/blob/5273e46ecb6841ad8888d1bf3bab0b3a0f1c49d9/src/Database/DeleteDAO.java][verwijderOnderdeel][2] = -> TRY { -> ps.setString(1,naam,)@ -> ps.execute()@ } CATCH(SQLException) { -> e.printStackTrace()@ }
results[https://github.com/binwiederhier/syncany/blob/36e2e0fa1c5d7a6be36d9355c3a6ac66d03fcb5a/syncany-lib/src/main/java/org/syncany/database/dao/DatabaseVersionSqlDao.java][getMaxDirtyVectorClock][1] = -> TRY { -> preparedStatement.setMaxRows(1,)@ -> preparedStatement.setString(1,machineName,)@ } CATCH(SQLException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/gye-tgm/schat/blob/85b5175b9e10c3e067252f63023415ef8c266684/common/src/data/SQLiteManager.java][removeUser][1] = -> TRY { -> pstmt.setString(1,id,)@ -> pstmt.executeUpdate()@ } CATCH(SQLException) { -> e.printStackTrace()@ }
results[https://github.com/apache/derby/blob/22d64f57ef38696c84d9245ca6d3d3a1aefcf27a/java/tools/org/apache/derby/impl/tools/dblook/DB_Alias.java][generateDDL][1] = -> TRY {  -> ps.setString(1,new String( new char[],),)@ -> rs=ps.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/portaloffreedom/parcoDB/blob/65dbe98305d5b89663595aca098eed6aa51ef42b/src/parcodb/database/objects/Comune.java][getComuniDiCaratteristica][1] = -> TRY {  -> preparedStatement=conn.prepareQueryStatement("SELECT Comune.nome, Comune.provincia, Comune.superficie "+"FROM Comune,Appartiene "+"WHERE Comune.nome = Appartiene.comune "+"AND Comune.provincia = Appartiene.provincia "+"AND Appartiene.caratteristica = ? "+"ORDER BY Comune.provincia,Comune.nome ",)@ -> preparedStatement.setString(1,caratteristica,)@ -> return populateComuni(preparedStatement,nomeFunzione,1,2,3,)@ } CATCH(SQLException) {}
results[https://github.com/Silverpeas/Silverpeas-Core/blob/f00ddcf8d30a673f7ad615904e5c704e0c424383/lib-core/src/main/java/com/stratelia/webactiv/organization/GroupUserRoleTable.java][prepareInsert][1] = -> TRY {  -> insert.setInt(1,usr.id,)@ -> insert.setInt(2,usr.groupId,)@ -> insert.setString(3,usr.roleName,)@ } CATCH(SQLException) {}
results[https://github.com/SonarSource/sonar/blob/fac55bf34a7a4bc24b4a5864a3ff6ff44a8431de/sonar-server/src/main/java/org/sonar/server/db/migrations/v43/DevelopmentCostMeasuresMigration.java][convert][1] = -> TRY {  -> updateStatement.setString(1,convertDebtForDays(row.value,),)@ -> updateStatement.setLong(2,row.id,)@ } CATCH(SQLException) {}
results[https://github.com/anycook/anycook-core/blob/ac9d44853517b36dce62874cdb9f256e6c012b1a/src/main/java/de/anycook/notifications/db/DBNotifications.java][getSubjectAndMessage][1] = -> TRY {  -> pStatement=connection.prepareStatement("SELECT subject, message from mailnotifications WHERE type = ?",)@ -> pStatement.setString(1,type.toString(),)@ } CATCH(SQLException) {}
results[https://github.com/duggankimani/JBPMHT/blob/8f07b77fc4a112cbd8d5ee67903c32fea4b668ad/src/com/duggan/workflow/server/db/DBExecute.java][setString][1] = -> TRY {  -> log.debug("DBCall [PARAM]"+paramValue+"="+(val==null)?"<null>":val.toString(),)@ -> preparedStatement.setString(paramValue,val,)@ } CATCH(SQLException) {}
results[https://github.com/dCache/dcache/blob/2962b546f98dded928f07f39503a1ac229880889/modules/dCache/src/main/java/diskCacheV111/replicaManager/ReplicaDbV1.java][<init>][2] = -> TRY {  -> statement=conn.prepareStatement(sql,)@ -> statement.setString(1,poolName,)@ -> rset=statement.executeQuery(sql,)@ } CATCH(SQLException) {}
results[https://github.com/ncats/bard/blob/28156a5bdfc212843417c20cb86a637e9195519a/src/gov/nih/ncgc/bard/resourcemgr/extresource/pubchem/BardCompoundPubchemExtrasLoader.java][haveCompoundSynonym][1] = -> TRY {  -> checkCIDSIDMatchPS.setInt(1,type,)@ -> checkCIDSIDMatchPS.setLong(2,cid,)@ -> checkCIDSIDMatchPS.setString(3,syn,)@ } CATCH(SQLException) {}
results[https://github.com/mperdikeas/playground/blob/e9a214067f36cad58142ed8fc32553c8e8c0bbbc/java/batch-update-tests/02/loader/src/InserterPreparedStatement.java][work][1] = -> TRY {  -> pstm=(PreparedStatement) s@ -> pstm.setInt(1,row.i,)@ -> pstm.setString(2,row.s,)@ -> pstm.addBatch()@ } CATCH(SQLException) {}
