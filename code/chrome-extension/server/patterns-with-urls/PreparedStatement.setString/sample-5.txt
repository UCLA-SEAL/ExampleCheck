results[https://github.com/Qi4j/qi4j-sdk/blob/dc2d52200a4333de13580cc7fb29df2ef02a6627/extensions/entitystore-sql/src/main/java/org/qi4j/entitystore/sql/database/AbstractDatabaseService.java][prepareRemoveEntityStatement][37] = -> TRY {  -> removeEntity=connection.prepareStatement(SQLUtil.REMOVE_STATE_SQL,)@ -> removeEntity.setString(1,identity,)@ } CATCH(SQLException) {}
results[https://github.com/investovator/investovator-core/blob/123bf80915d27ecd152229fcc70055b4fce17901/src/main/java/org/investovator/core/data/rssexplorer/utils/MysqlConnector.java][getUserJoinedGames][148] = -> TRY {  -> preparedStatement=con.prepareStatement(query,)@ -> preparedStatement.setString(1,username,)@ -> return preparedStatement.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/anycook/anycook-api/blob/0d3f4b119aba15e1907581efd04d9469bcf8e038/src/main/java/de/anycook/db/mysql/DBUser.java][deleteCookieId][17] = -> TRY {  -> pStatement=connection.prepareStatement("DELETE FROM permanent_cookies WHERE id = ?",)@ -> pStatement.setString(1,id,)@ -> pStatement.executeUpdate()@ } CATCH(SQLException) {}
results[https://github.com/anycook/anycook-core/blob/ac9d44853517b36dce62874cdb9f256e6c012b1a/src/main/java/de/anycook/notifications/db/DBNotifications.java][getSubjectAndMessage][1] = -> TRY {  -> pStatement=connection.prepareStatement("SELECT subject, message from mailnotifications WHERE type = ?",)@ -> pStatement.setString(1,type.toString(),)@ } CATCH(SQLException) {}
results[https://github.com/bbcf/bbcfutils/blob/748aac3225373f34e7e228d2e45b3646ca0ec2a3/JAVA/src/ch/epfl/bbcf/bbcfutils/sqlite/SQLiteAccess.java][searchForGeneNameOnChromosome][1] = -> TRY {  -> prep=connection.prepareStatement(query,)@ -> prep.setString(1,name,)@ -> r=getResultSet(prep,query,)@ } CATCH(SQLException) {}
results[https://github.com/majorProject/IAnnotate/blob/f94b80b5ab64c0f5595cf68d2f32031592d7c42d/src/iannotate/database/SqlQuery.java][delete][13] = -> TRY {  -> deletus=connection.prepareStatement("DELETE FROM user "+"WHERE username = ?",)@ -> deletus.setString(1,userName,)@ -> r=deletus.execute()@ } CATCH(SQLException) {}
results[https://github.com/projectrsc/ProjectRSC/blob/be9e2e1854a0e4b93816e52712c9fe37ff7dfc39/ProjectRSC/Development/Server/src/org/darkquest/gs/db/query/StaffLog.java][prepareStatement][5] = -> TRY {  -> statement=connection.prepareStatement(query,)@ -> statement.setString(1,message,)@ -> statement.setLong(2,time,)@ } CATCH(SQLException) {}
results[https://github.com/samtingleff/valkyrie/blob/01ebbcd91b089173f3472f6baebee7c470af975a/test/com/othersonline/kv/test/sql/SampleValueObjectDAO.java][prepareSelect][6] = -> TRY {  -> ps=conn.prepareStatement(String.format("select id, x, y, s from %1$s where %2$s = ?",table,keyField,),)@ -> ps.setString(1,key,)@ } CATCH(SQLException) {}
results[https://github.com/dCache/dcache/blob/2962b546f98dded928f07f39503a1ac229880889/modules/dCache/src/main/java/diskCacheV111/replicaManager/ReplicaDbV1.java][<init>][2] = -> TRY {  -> statement=conn.prepareStatement(sql,)@ -> statement.setString(1,poolName,)@ -> rset=statement.executeQuery(sql,)@ } CATCH(SQLException) {}
results[https://github.com/samtingleff/valkyrie/blob/dacabadac29ce201a21f5b79faca1817c2a44598/src/main/java/com/othersonline/kv/backends/sql/DefaultJdbcDAO.java][prepareSelect][3] = -> TRY {  -> ps=conn.prepareStatement(String.format("select %3$s, %1$s from %2$s where %3$s = ?",valueField,table,keyField,),)@ -> ps.setString(1,key,)@ } CATCH(SQLException) {}
results[https://github.com/anycook/anycook-api/blob/0b32d18fb7465a5aca880eeac43bc0b546e55f4b/src/main/java/de/anycook/db/mysql/DBAutocomplete.java][autocompleteIngredient][1] = -> TRY {  -> pStatement=connection.prepareStatement("SELECT name from zutaten WHERE name LIKE ? LIMIT ?",)@ -> pStatement.setString(1,q+"%",)@ -> pStatement.setInt(2,size,)@ } CATCH(SQLException) {}
results[https://github.com/Silverpeas/Silverpeas-Components/blob/89029a3a29c6e1f7972b1c64e153af01e40fd41d/kmelia/kmelia-ejb/src/main/java/com/silverpeas/kmelia/dao/TopicSearchDaoImpl.java][createPreparedStatement][1] = -> TRY {  -> ps=connection.prepareStatement(QUERY_GET_LIST_MOST_INTERESTED_QUERY,)@ -> ps.setString(1,getInstanceId(),)@ } CATCH(SQLException) {}
results[https://github.com/anycook/anycook-core/blob/c146d234142617128b2889efc327ec38539f709d/src/de/anycook/db/mysql/DBBackend.java][getNumZutatenChilds][99] = -> TRY { -> pStatement=connection.prepareStatement("SELECT count(name) AS count FROM zutaten WHERE parent_zutaten_name = ? GROUP BY name",)@ -> pStatement.setString(1,parent,)@ -> data=pStatement.executeQuery()@ } CATCH(SQLException) { -> logger.error("execute MySQL-query failed at getNumZutatenChilds",e,)@ }
results[https://github.com/OlegSmelov/kuro-apskaitos-sistema/blob/281dbde43b369392c076361bfda121890caffae1/src/lib/Fuel.java][fetchListByCarRegistrationNumber][14] = -> TRY { -> ps=connection.prepareStatement("SELECT fuel.* FROM fuel, car_uses_fuel "+"WHERE fuel.code = car_uses_fuel.fuel_code "+"AND car_uses_fuel.car_registration_number = ?;",)@ -> ps.setString(1,registration_number,)@ -> result=Fuel.fetch(ps,)@ } CATCH(SQLException) { -> System.err.println(ex,)@ }
results[https://github.com/jak786/VASE/blob/ebbbaa6874d318de0244c88928400c10af1161a4/server/src/org/oryxeditor/server/SimpleStorageServlet.java][showResource][24] = -> TRY {  -> stmt=database.prepareStatement("SELECT ID, Site FROM sites WHERE Name = ?",)@ -> stmt.setString(1,this.currentResource,)@ -> stmt.execute()@ -> rs=stmt.getResultSet()@ } CATCH(SQLException) {}
results[https://github.com/uib/matterhorn/blob/bcabfd34ac83ae92486829368857ee5fdcc34c9b/modules/opencast-scheduler-impl/src/main/java/org/opencastproject/scheduler/impl/dao/SchedulerServiceImplDAO.java][getAttendees][53] = -> TRY {  -> s=con.prepareStatement("SELECT attendee FROM ATTENDEES WHERE eventid = ?",)@ -> s.setString(1,eventID,)@ -> rs=s.executeQuery()@ -> s.close()@ } CATCH(SQLException) {}
results[https://github.com/UWCS/choob/blob/5ddd565d751da82660555cd9268d7908626c0543/src/main/plugins/See.java][getDataFor][3] = -> TRY {  -> s=conn.prepareStatement("CREATE TEMPORARY TABLE `tempt1` AS SELECT `Time` FROM `History` WHERE `Time` > "+System.currentTimeMillis()-1000*60*60*24*days+" AND (CASE INSTR(`Nick`,'|') WHEN 0 THEN `Nick` ELSE LEFT(`Nick`, INSTR(`Nick`,'|')-1) END)=? AND `Channel`IS NOT NULL ORDER BY `Time`; ",)@ -> s.setString(1,nick,)@ -> s.executeUpdate()@ } CATCH(SQLException) {}
results[https://github.com/sneaker/Mediastopf/blob/9466a31c05e4251eb584e27776e6d0f4efe7af31/Code/src/ch/nomoresecrets/mediastopf/server/database/ActiveRecordManager.java][createStatementWithArguments][4] = -> TRY {  -> prep=conn.prepareStatement(prepStmt,)@ -> LOOP { -> prep.setString(i+1,arguments[i],)@i<arguments.length } } CATCH(SQLException) {}
results[https://github.com/meltingwax/anonircd/blob/e41a5a113bc06489c89def40949bcbfe1628cafc/src/net/meltingwax/anonircd/conf/ConfigDir.java][getChannelTopic][86] = -> TRY { -> statement=dbConn.prepareStatement("SELECT * FROM channel_meta WHERE name = ?;",)@ -> statement.setString(1,channelName,)@ -> results=statement.executeQuery()@ } CATCH(SQLException) { -> e.printStackTrace()@ }
results[https://github.com/gldpi2/gldpi2/blob/63d1a6826d9551411b002ebc9d3d4568f4a6577f/Exemplos/FGASaLa/src/db/EquipDAO.java][editarEquipStatus][8] = -> TRY {  -> stmt=conex.prepareStatement(sql,)@ -> stmt.setString(1,"EMUSO",)@ -> stmt.execute()@ -> stmt.close()@ } CATCH(SQLException) {}
results[https://github.com/toddsarratt/gausstrader/blob/6b885a12e7b553c68d5474112fc95eef7ed0c614/src/main/java/net/toddsarratt/GaussTrader/Portfolio.java][getDbPortfolioSummary][4] = -> TRY {  -> portfolioSummaryStatement=dbConnection.prepareStatement("SELECT * FROM portfolios WHERE name = ?",)@ -> portfolioSummaryStatement.setString(1,name,)@ -> LOGGER.debug("Executing SELECT * FROM portfolios WHERE name = {}",name,)@ -> portfolioSummaryResultSet=portfolioSummaryStatement.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/anycook/anycook-core/blob/c146d234142617128b2889efc327ec38539f709d/src/de/anycook/db/mysql/DBBackend.java][deleteAllZutaten][64] = -> TRY { -> pStatement=connection.prepareStatement("DELETE FROM versions_has_zutaten WHERE versions_gerichte_name = ?",)@ -> pStatement.setString(1,recipe,)@ -> pStatement.executeUpdate()@ } CATCH(SQLException) { -> logger.error("execute MySQL-query failed at deleteAllZutaten.",e,)@ }
results[https://github.com/mangstadt/emc-shopkeeper/blob/07013883cec1811c8e252f4e4943020214e5e1a5/src/test/java/emcshop/db/DirbyDbDaoTest.java][delete][1] = -> TRY {  -> stmt=conn.prepareStatement("DELETE FROM items WHERE name = ?",)@ -> stmt.setString(1,name,)@ -> assertTrue(stmt.executeUpdate()>0,)@ } CATCH(SQLException) {}
results[https://github.com/RICJ2/CJ2/blob/5b2c493d2fbb8ad68dd63a1737d6e5b34adeb6c5/NetBeansProjects/LoginScreen/src/loginscreen/Student.java][getMajorNum][13] = -> TRY { -> prestmt=c.prepareStatement(user_query,)@ -> prestmt.setString(1,loginN,)@ -> rs=prestmt.executeQuery()@ } CATCH(SQLException) { -> JOptionPane.showMessageDialog(null,e,)@ }
results[https://github.com/Mateful/Twitchess/blob/653e77dd40967a0e93e6263f39739104031a6738/src/de/fhb/projects/Twitchess/data/ChessStateDAO.java][findGameByPlayer][3] = -> TRY {  -> getGame=connection.prepareStatement(GET_GAME_STATEMENT,)@ -> getGame.clearParameters()@ -> getGame.setString(1,playerName,)@ -> resultSet=getGame.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/niccholaspage/Fe/blob/16cdae532d93abf341932c563c479b50c2b325cf/src/org/melonbrew/fe/database/databases/SQLDB.java][removeAccount][8] = -> TRY { -> statement=connection.prepareStatement("DELETE FROM "+accountsName+" WHERE "+accountsColumnUser+"=?",)@ -> statement.setString(1,name,)@ -> statement.execute()@ } CATCH(SQLException) { -> e.printStackTrace()@ }
results[https://github.com/sconealone/cs304/blob/56d83f2bac3c75d8c89366f75b8f23248c5370b0/tables/HoldRequest.java][getAll][2] = -> TRY {  -> ps=c.prepareStatement("SELECT * FROM HoldRequest WHERE callNumber = ?",)@ -> ps.setString(1,b.getCallNumber(),)@ -> rs=ps.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/vnc-biz/vnc-zcs-crm/blob/ba7911969a3c830e45be89ef984750effa8490a3/src/lib_vnc_crm/src/biz/vnc/helpers/SectionHelper.java][getRecordByName][16] = -> TRY { -> preparedStatement=DBUtility.connection.prepareStatement(query,)@ -> preparedStatement.setString(1,name,)@ } CATCH(SQLException) { -> ZLog.err("VNC CRM for Zimbra","Error in recordById in SectionHelper",e,)@ } -> rs=dbu.select(preparedStatement,)@
results[https://github.com/Tumas/labs/blob/ef8eaa53645f6e5951d42de2525a14d6dc7a5103/III_semester/dbms/src/db2lab23/PlayerManager.java][getPlainPlayerAK][4] = -> TRY {  -> st=getConnection().prepareStatement(SQL_PLAIN_PLAYER_AK,)@ -> st.setString(1,ak,)@ -> return st.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/CompendiumNG/CompendiumNG/blob/fe498da63efa51272ecd52096dc47636c075c70a/application/src/main/java/com/compendium/ui/DatabaseUpdate.java][insertDefaultLinkGroup][14] = -> TRY {  -> pstmt=con.prepareStatement(INSERT_LINK_GROUP,)@ -> pstmt.setString(1,"1",)@ -> nRowCount=pstmt.executeUpdate()@ -> pstmt.close()@ } CATCH(SQLException) {}
results[https://github.com/Arquisoft/Entrecine4/blob/1ca529815b0492b3f86d738e47f5098b231cc2d7/API/src/main/java/impl/entrecine4/persistence/UserJdbcDAO.java][get][2] = -> TRY {  -> ps=con.prepareStatement(GET_USER_BY_USERNAME,)@ -> ps.setString(1,username,)@ -> rs=ps.executeQuery()@ -> Jdbc.close(rs,ps,)@ } CATCH(SQLException) {}
results[https://github.com/101companies/101repo/blob/4cc79f41d4dbc34259c8cf75a04141bbc9ebc20c/jdbc/org/softlang/features/Cut.java][cut][4] = -> TRY { -> stm=connection.prepareStatement(sqlCut,)@ -> stm.setString(1,name,)@ -> stm.executeUpdate()@ } CATCH(SQLException) { -> e.printStackTrace()@ }
results[https://github.com/ybonnel/CodeStory/blob/bffa50926378644a7d9bd71ee925b6424653be3f/src/main/java/fr/ybonnel/codestory/database/LogDao.java][findByType][1] = -> TRY { -> statement=conn.prepareStatement("SELECT HEURE, TYPE_LOG, MESSAGE FROM LOG WHERE TYPE_LOG = ? ORDER BY HEURE DESC",)@ -> statement.setString(1,type,)@ -> resultSet=statement.executeQuery()@ } CATCH(SQLException) { -> Throwables.propagate(sqlException,)@ }
results[https://github.com/dCache/dcache/blob/d629bd1e35fad905a1b48b4cbfccc228d6fdec1e/modules/dCache/diskCacheV111/replicaManager/ReplicaDbV1.java][<init>][3] = -> TRY {  -> statement=conn.prepareStatement(sql,)@ -> statement.setString(1,pnfsId.toString(),)@ -> rset=statement.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/omarowns/feisbun/blob/2dbfaa22aa8971a5256150cc1dd38eb8280b17f1/feisbun/src/java/mysql/MySqlConn.java][getNameFrom][6] = -> TRY { -> ps=conn.prepareStatement("SELECT username FROM users WHERE email=?",)@ -> ps.setString(1,user,)@ -> rs=ps.executeQuery()@ } CATCH(SQLException) { -> printErrors(ex,)@ }
results[https://github.com/borislit/sceprojectbackend/blob/70809a49efd410dfc409eefc3f41e40bfc0bd1c0/src/main/java/sce/finalprojects/sceprojectbackend/database/DatabaseOperations.java][setArticleNumOfComments][2] = -> TRY {  -> sqlQuerry=conn.prepareStatement("UPDATE articles SET number_of_comments = ? WHERE article_id = ? ;",)@ -> sqlQuerry.setInt(1,numberOfComments,)@ -> sqlQuerry.setString(2,articleId,)@ -> sqlQuerry.execute()@ } CATCH(SQLException) {}
results[https://github.com/vnc-biz/vnc-zcs-crm/blob/3a49f11ce2f63c9eaec6878edc3618d2d0e53701/src/lib_vnc_crm/src/biz/vnc/helpers/LeadHelper.java][deleteSharedItems][1] = -> TRY { -> preparedStatement=DBUtility.connection.prepareStatement(query,)@ -> preparedStatement.setString(1,leadId,)@ } CATCH(SQLException) { -> ZLog.err("VNC CRM for Zimbra","Error in deleteSharedItems in LeadHelper",e,)@ } -> operationStatus=dbu.delete(preparedStatement,)@
results[https://github.com/alagopus/fraglets/blob/b3291953df7bc2d9b50ac7061b3f11ea9c8c75ae/zeig/src/net/sourceforge/fraglets/zeig/model/PlainTextFactory.java][createPlainText][1] = -> TRY {  -> ps=cf.prepareStatement("insert into pt (hc,v) values (?,?)",)@ -> ps.setLong(1,hc,)@ -> ps.setString(2,text,)@ -> return cf.executeInsert(ps,1,)@ } CATCH(SQLException) {}
results[https://github.com/yukoff/concourse-connect/blob/c4bbb00bbf206bcb9ce8ecb6630e2de39edf64b2/src/main/java/com/concursive/connect/web/modules/translation/dao/LanguagePackConfig.java][queryIdByName][15] = -> TRY {  -> pst=db.prepareStatement("SELECT id FROM language_config "+"WHERE config_name = ? "+"AND language_id = ? ",)@ -> pst.setString(1,configName,)@ -> pst.setInt(2,languagePackId,)@ -> rs=pst.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/PaloAlto/jbilling/blob/56856536c02c4f4aa61af33e3f995f670915c709/classes/com/sapienter/jbilling/tools/ConvertToBinHexa.java][updateUserRow][18] = -> TRY {  -> stmt=connection.prepareStatement("UPDATE base_user set password = ? where ID = ?",)@ -> stmt.setString(1,password,)@ -> stmt.setInt(2,id,)@ -> stmt.executeUpdate()@ } CATCH(SQLException) {}
results[https://github.com/ivartj/minerva/blob/accd1d01246afd591b48a5a133ff553327308bc9/app/models/Topic.java][removeUser][1] = -> TRY {  -> stmt=conn.prepareStatement("delete from interest where user = ? and topic = ?",)@ -> stmt.setLong(1,user.id,)@ -> stmt.setString(2,name,)@ -> stmt.executeUpdate()@ } CATCH(SQLException) {}
results[https://github.com/anycook/anycook-api/blob/f58b56099cf33b039e83b5d659b6bac3f0a69819/src/main/java/de/anycook/db/mysql/DBDiscussion.java][checkForNew][11] = -> TRY {  -> pStatement=connection.prepareStatement("SELECT id FROM discussions WHERE id >? "+"AND gerichte_name = ?",)@ -> pStatement.setInt(1,oldId,)@ -> pStatement.setString(2,recipeName,)@ -> data=pStatement.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/anycook/anycook-api/blob/0d3f4b119aba15e1907581efd04d9469bcf8e038/src/main/java/de/anycook/db/mysql/DBUser.java][setActivationId][16] = -> TRY {  -> pStatement=connection.prepareStatement("INSERT INTO activationids(users_id, activationid) VALUES (?,?)",)@ -> pStatement.setInt(1,userId,)@ -> pStatement.setString(2,activationId,)@ -> pStatement.executeUpdate()@ } CATCH(SQLException) {}
results[https://github.com/maiklos/squirrel-sql/blob/afadc74304f4ba69cbdb71508239e090a7a812b7/sql12/plugins/firebird/src/main/java/org/firebirdsql/squirrel/tab/ViewSourceTab.java][createStatement][8] = -> TRY {  -> doi=getDatabaseObjectInfo()@ -> pstmt=conn.prepareStatement(SQL,)@ -> pstmt.setString(1,doi.getSimpleName(),)@ } CATCH(SQLException) {}
results[https://github.com/tloehr/Offene-Pflege.de/blob/97488c5f702279cad868158ff42191ee9ca93e8f/src/op/OPDE.java][getDBVersion][1] = -> TRY { -> stmt=jdbcConnection.prepareStatement(query,)@ -> stmt.setString(1,"dbstructure",)@ -> rs=stmt.executeQuery()@ } CATCH(SQLException) { -> fatal(e,)@ }
results[https://github.com/apache/derby/blob/4ce6a9b488aff11cc705a26c1ca30d61091a3ca2/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java][checkMatchingProcedures][1] = -> TRY {  -> ps=conn.prepareStatement("select schemaname, alias, "+"    cast (((javaclassname || '.' ) || "+"    cast (aliasinfo as varchar(1000))) as varchar(2000))"+"        as signature "+"from sys.sysaliases A, sys.sysschemas S "+"where alias like ? and A.schemaid = S.schemaid order by 1,2,3",)@ -> ps.setString(1,procedureName,)@ -> rs=ps.executeQuery()@ -> rs=dmd.getProcedures(null,null,procedureName,)@ } CATCH(SQLException) {}
results[https://github.com/hibernate/hibernate-orm/blob/d3b640cb755e20db84d5d528b03e1ae474bb68e7/hibernate-core/src/matrix/java/org/hibernate/test/collection/list/PersistentListTest.java][execute][2] = -> TRY {  -> preparedStatement=connection.prepareStatement(select.toStatementString(),)@ -> preparedStatement.setString(1,"root",)@ -> resultSet=preparedStatement.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/jfbulanadi/external-tempoplus/blob/c524d76220b39ffaf71e01aa2149be34c4081218/src/main/java/hk/com/novare/tempoplus/sendmail/SendEmailDAO.java][retrieveSingleRecipient][2] = -> TRY { -> ps=connection.prepareStatement(RETRIEVE_EMPLOYEE_NAME,)@ -> ps.setString(1,email,)@ -> resultSet=(ResultSet) ps.executeQuery()@ } CATCH(SQLException) { -> logger.info("Error on Getting Employee Name",)@ }
results[https://github.com/ferquies/2dam/blob/3449ac78542b4597a76f1860dc4ce81472854e44/AD/Tema 2/h2/src/test/org/h2/test/db/TestView.java][testParameterizedView][7] = -> TRY {  -> ps=conn.prepareStatement("CREATE VIEW Test_View AS SELECT f2 FROM Test WHERE f1=?",)@ -> ps.setString(1,"value1",)@ -> assertThrows(ErrorCode.FEATURE_NOT_SUPPORTED_1,ps,).executeUpdate()@ } CATCH(SQLException) {}
results[https://github.com/fabriciorcsilva/Software-AGE-System/blob/02775d37ae140e21b84221a6a749ae6638413a79/Age System/src/br/com/triforce/model/MatriculaDAO.java][pesquisaMat][2] = -> TRY { -> stmt=connection.prepareStatement(sql,)@ -> stmt.setString(1,codAlu,)@ -> rs=stmt.executeQuery()@ } CATCH(SQLException) { -> JOptionPane.showMessageDialog(null,"ERRO DE CONEXAO COM O SERVIDOR!!","ERRO",3,)@ }
results[https://github.com/bdunnagan/XModel/blob/e5780c3e613bb6464e980e658f5e3dc2cf5662ba/src/org/xmodel/caching/sql/SQLDirectCachingPolicy.java][createRowSelectStatement][4] = -> TRY {  -> statement=connection.prepareStatement(sb.toString(),)@ -> statement.setString(1,reference.getID(),)@ } CATCH(SQLException) {}
results[https://github.com/apache/derby/blob/070d37e30600755f16216090af3cc2a8987d2972/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java][getDatabaseProperty][1] = -> TRY {  -> ps=prepareStatement("VALUES SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY(?)",)@ -> ps.setString(1,propertyName,)@ -> rs=ps.executeQuery()@ -> closeStatement(ps,)@ } CATCH(SQLException) {}
results[https://github.com/sconealone/cs304/blob/f79cad3680a1e082cbef52bdf4da91e341d4a648/tables/Borrower.java][<init>][1] = -> TRY {  -> type=(rs.wasNull())?null:t@ -> ps=con.prepareStatement("SELECT bookTimeLimit "+"FROM BorrowerType "+"WHERE type = ?",)@ -> ps.setString(1,type,)@ -> timeLimitResultSet=ps.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/anycook/anycook-api/blob/972d9c4d13b204ef26d37bcbca64c1f6ce27d00e/src/main/java/de/anycook/db/mysql/DBSaveRecipe.java][newRecipe][2] = -> TRY {  -> pStatement=connection.prepareStatement("INSERT INTO gerichte(name, eingefuegt) "+"VALUES (?, NOW())",)@ -> pStatement.setString(1,name,)@ -> pStatement.executeUpdate()@ } CATCH(SQLException) {}
results[https://github.com/Zenika/DORM/blob/f8138d6d31145fc639fa0a81b883d4ba997719a0/core/core/src/main/java/com/zenika/dorm/core/dao/sql/JdbcSinglePushService.java][getDependencyId][1] = -> TRY {  -> statement=connection.prepareStatement("SELECT id FROM dorm_metadata WHERE metadata_qualifier = ?",)@ -> statement.setString(1,metadata.getQualifier(),)@ -> result=statement.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/angusmacdonald/h2o/blob/ed126b7fbb4c26ab1a890b30a9fe7674b3eb1ac6/src/main/org/h2/fulltext/FullText.java][setIgnoreList][1] = -> TRY {  -> setIgnoreList(setting,commaSeparatedList,)@ -> prep=conn.prepareStatement("INSERT INTO "+SCHEMA+".IGNORELIST VALUES(?)",)@ -> prep.setString(1,commaSeparatedList,)@ -> prep.execute()@ } CATCH(SQLException) {}
results[https://github.com/ByronWang/noc/blob/dadf297bdb30116f584c15b68502a7ccb83a15e8/noc2_frame/src/noc/frame/persister/db/TablePersister.java][delete][1] = -> TRY { -> p=conn.prepareStatement(SQL_DELETE,)@ -> p.setString(1,this.KEY_FIELD,)@ -> p.execute()@ } CATCH(SQLException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/Tumas/labs/blob/ef8eaa53645f6e5951d42de2525a14d6dc7a5103/III_semester/dbms/src/db2lab23/PlayerManager.java][deletePlayer][1] = -> TRY {  -> stmt=getConnection().prepareStatement(SQL_DELETE_PLAYER,)@ -> stmt.setString(1,ak,)@ -> return stmt.executeUpdate()@ } CATCH(SQLException) {}
results[https://github.com/omarowns/feisbun/blob/2dbfaa22aa8971a5256150cc1dd38eb8280b17f1/feisbun/src/java/mysql/MySqlConn.java][markOffline][2] = -> TRY { -> ps=conn.prepareStatement("UPDATE users SET online=FALSE WHERE email=?",)@ -> ps.setString(1,email,)@ -> ps.executeUpdate()@ } CATCH(SQLException) { -> printErrors(ex,)@ }
results[https://github.com/Aulie/Freerider/blob/613d2a9bb22ddee4189a4794d7f536d1fb357842/Freerider_backend/src/no/ntnu/idi/freerider/backend/DBConnector.java][getNotifications][1] = -> TRY {  -> stmt=conn.prepareStatement("SELECT time_sent, concerning_journey, type,	sender,	startpoint::geometry, endpoint::geometry, comment, recipient, name || ' ' || surname AS fullname, is_read FROM notifications INNER JOIN users ON sender=id WHERE recipient=? ORDER BY time_sent DESC",)@ -> stmt.setString(1,user.getID(),)@ -> rs=stmt.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/anycook/anycook-core/blob/ac5c8eb656520b816090df551b3f16a43739d9f3/src/anycook/mysql/DBUser.java][deletePasswordID][2] = -> TRY { -> pStatement=connection.prepareStatement("DELETE FROM resetpasswordids WHERE resetpasswordid = ?",)@ -> pStatement.setString(1,resetpasswordid,)@ -> pStatement.execute()@ } CATCH(SQLException) { -> logger.error("execute MySQL-query failed at resetPassword.",e,)@ }
results[https://github.com/NCIP/cadsr-util/blob/01c082d5c7f07cafccba3cd44be6ff1cb6e1e940/cadsrutil/src/java/gov/nih/nci/ncicb/cadsr/common/security/jboss/CaDsrUserCredentials.java][execute][3] = -> TRY {  -> _pstmt=_conn.prepareStatement(_sql,)@ -> _pstmt.setString(1,_localUser,)@ -> _pstmt.execute()@ -> _failed=_pstmt.getUpdateCount()==0@ } CATCH(SQLException) {}
results[https://github.com/TfT-02/Assassin/blob/7b6e76e8224951ef5b993beb5bc3a461725d0e76/src/main/java/com/me/tft_02/assassin/database/SQLDatabaseManager.java][readId][1] = -> TRY { -> statement=connection.prepareStatement("SELECT id FROM "+tablePrefix+"users WHERE user = ?",)@ -> statement.setString(1,playerName,)@ -> id=readInt(statement,)@ } CATCH(SQLException) { -> printErrors(ex,)@ }
results[https://github.com/anycook/anycook-api/blob/050ba82604f32eb0d097f88799d2f3710713898a/src/main/java/de/anycook/db/mysql/DBTag.java][create][2] = -> TRY {  -> pStatement=connection.prepareStatement("INSERT INTO tags VALUES (?)",)@ -> pStatement.setString(1,tag,)@ -> pStatement.executeUpdate()@ -> logger.info("new Tag '"+tag+"'",)@ } CATCH(SQLException) {}
results[https://github.com/jjnguy/PublicFun/blob/54a6e508bb16291e0030fb81db072b8af84fab42/coms_362_java/src/databaseAccess/QueryDB.java][getHashedPassword][2] = -> TRY { -> q=conn.prepareStatement("SELECT * FROM "+USER_TABLE+" WHERE username = ?;",)@ -> q.setString(1,user,)@ -> rs=q.executeQuery()@ } CATCH(SQLException) { -> handleSQLException(e,)@ }
results[https://github.com/anycook/anycook-core/blob/c1856a5220855ce05f3d113064906b8b0fa4e2eb/src/de/anycook/db/mysql/DBApps.java][getAppSecret][4] = -> TRY { -> pStatement=connection.prepareStatement("SELECT secret from apps WHERE id = ?",)@ -> pStatement.setString(1,appID,)@ -> data=pStatement.executeQuery()@ } CATCH(SQLException) { -> logger.error(e,)@ }
results[https://github.com/kimory/devfly_java/blob/f1cd0d0d1bb047f4419998fbdeadae0731204901/src/dao/MysqlDao.java][getVolEnAttenteById][2] = -> TRY {  -> stmt=connection.prepareStatement(sql,)@ -> stmt.setString(1,id,)@ -> result=stmt.executeQuery()@ -> return new Vol(id,aeroportDepart,aeroportArrivee,dateHeureDepart,dateHeureArrivee,duree,tarif,codePilote,codeCopilote,codeHotesseSt1,codeHotesseSt2,codeHotesseSt3,)@ } CATCH(SQLException) {}
results[https://github.com/deathmarine/Ultrabans/blob/716dd49c9c847038006821392eafdde73541ee04/src/com/modcrafting/ultrabans/db/Database.java][clearWarns][1] = -> TRY { -> ps=connection.prepareStatement("DELETE FROM "+bantable+" WHERE name = ? AND type = 2",)@ -> ps.setString(1,player,)@ -> close(ps,null,)@ } CATCH(SQLException) { -> Error.execute(plugin,ex,)@ }
results[https://github.com/Zenika/DORM/blob/2696449040b840480d3d4e221aaf59644c6119fc/core/core/src/main/java/com/zenika/dorm/core/dao/sql/JDBCSinglePushService.java][getDependencyId][1] = -> TRY {  -> statement=connection.prepareStatement("SELECT id FROM dorm_metadata WHERE metadata_qualifier = ?",)@ -> statement.setString(1,metadata.getName(),)@ -> result=statement.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/RaphaelJ/Cours-3eme-ann-e/blob/19c31454a67b5e7121d724cbf3f1f0e077646b2f/Java/FerryInpres/src/data_bean/DatabaseBean.java][utilisateurAuthorise][1] = -> TRY {  -> instruc=this.getConn().prepareStatement("SELECT * FROM agents WHERE id = ?",)@ -> instruc.setString(1,numeroCarte,)@ -> rs=instruc.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/kimory/devfly_java/blob/f1cd0d0d1bb047f4419998fbdeadae0731204901/src/dao/MysqlDao.java][getAeroportByVille][2] = -> TRY {  -> stmt=connection.prepareStatement(sql,)@ -> stmt.setString(1,ville,)@ -> result=stmt.executeQuery()@ -> return new Aeroport(code,ville,pays,)@ } CATCH(SQLException) {}
results[https://github.com/mvsaturno/WebCarStore/blob/2241e73a99dcffaef1ed838169c30e99e3e30196/src/java/dao/VeiculoDAO.java][inserirMarca][1] = -> TRY {  -> vel=(Veiculo) obj@ -> stmt=conexao.prepareStatement(sql,)@ -> stmt.setString(1,vel.getMarca(),)@ -> stmt.execute()@ } CATCH(SQLException) {}
results[https://github.com/sakai-mirror/blog/blob/c7eeff602108b66c2340814ae656679104f2a395/api-impl/src/java/uk/ac/lancs/e_science/sakaiproject/impl/blogger/persistence/sql/util/SQLGenerator.java][doInsertStatementForPost][1] = -> xml=postAsXML.replaceAll("'",APOSTROFE,)@ -> TRY { -> ps=connection.prepareStatement(sql,)@ -> ps.setString(1,xml,)@ } CATCH(SQLException) { -> sqle.printStackTrace()@ }
results[https://github.com/dougkoellmer/swarm/blob/74f7b2524f4d6d2337a290ec58ae53366c94aeaa/src/swarm/server/account/smAccountDatabase.java][containsSignInCredentials][1] = -> TRY {  -> statement=connection.prepareStatement(smS_AccountQuery.CONTAINS_SIGNIN,)@ -> statement.setString(1,email,)@ -> statement.setBytes(2,passwordHash,)@ -> return getUserSessionFromSignInQuery(statement,)@ } CATCH(SQLException) {}
results[https://github.com/UWCS/choob/blob/25503df1232a9b9b3a8b2b74e9cd7324be81a16b/src/uk/co/uwcs/choob/ChoobSetup.java][createUserAndReturnId][1] = -> TRY {  -> addUserStmt=conn.prepareStatement(ADD_USER_SQL,)@ -> addUserStmt.setString(1,userName,)@ -> addUserStmt.executeUpdate()@ -> idSet=addUserStmt.getGeneratedKeys()@ } CATCH(SQLException) {}
results[https://github.com/ivartj/minerva/blob/accd1d01246afd591b48a5a133ff553327308bc9/app/models/Topic.java][hasUser][1] = -> TRY {  -> stmt=conn.prepareStatement("select topic from interest where user = ? and topic = ?",)@ -> stmt.setLong(1,user.id,)@ -> stmt.setString(2,name,)@ -> result=stmt.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/Fellesprosjekt-2013-G29/Fellesprosjekt/blob/33510564ab9f164a29e43d7c6160e23e2448b39a/Server/server/DbConnection.java][getUser][1] = -> TRY {  -> stmt=connection.prepareStatement(query,)@ -> stmt.setMaxRows(1,)@ -> stmt.setString(1,email,)@ -> res=stmt.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/OlegSmelov/kuro-apskaitos-sistema/blob/6593fd6f4f49f317cdb7a0d71c918b75611be8eb/src/lib/Trip.java][fetchByEmployeeSSN][1] = -> TRY { -> ps=connection.prepareStatement("SELECT trip.* FROM trip, employee_makes_trip WHERE employee_makes_trip.trip_id = trip.id AND employee_makes_trip.employee_ssn = ?;",)@ -> ps.setString(1,employee_ssn,)@ } CATCH(SQLException) { -> System.err.println(ex,)@ } -> return Trip.fetch(ps,)@
results[https://github.com/binwiederhier/syncany/blob/dae012381657ec1b514cf8eaaefbd0175bc2c994/syncany-lib/src/main/java/org/syncany/database/BasicDatabaseDAO.java][getFileVersionByPath][1] = -> TRY { -> preparedStatement=connection.prepareStatement("select * from fileversion fv "+"where fv.path=? "+"and fv.status<>'DELETED' "+"and fv.version=(select max(fv1.version) from fileversion fv1 where fv.filehistory_id=fv1.filehistory_id)",)@ -> preparedStatement.setString(1,path,)@ -> resultSet=preparedStatement.executeQuery()@ } CATCH(SQLException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/cedeel/Ultrabans-Lite/blob/468c688325286a360c408f39451070abad50d958/src/com/modcrafting/ultrabans/db/SQLite.java][getBanReason][1] = -> TRY { -> ps=conn.prepareStatement("SELECT * FROM banlist WHERE name = ? AND (type = 0 OR type = 1) ORDER BY time DESC LIMIT 1",)@ -> ps.setString(1,player,)@ -> rs=ps.executeQuery()@ -> close(conn,ps,rs,)@ } CATCH(SQLException) { -> Error.execute(plugin,ex,)@ }
results[https://github.com/mvsaturno/WebCarStore/blob/2241e73a99dcffaef1ed838169c30e99e3e30196/src/java/dao/VeiculoDAO.java][inserirItem][1] = -> TRY {  -> item=(Item) obj@ -> stmt=conexao.prepareStatement(sql,)@ -> stmt.setString(1,item.getNome(),)@ -> stmt.execute()@ -> stmt.close()@ } CATCH(SQLException) {}
results[https://github.com/anycook/anycook-core/blob/ac5c8eb656520b816090df551b3f16a43739d9f3/src/anycook/mysql/DBBackend.java][makeNewKategorie][1] = -> TRY { -> pStatement=connection.prepareStatement("INSERT INTO kategorien (name, sortid) VALUES (?,?)",)@ -> pStatement.setString(1,kategorie,)@ -> pStatement.setInt(2,position,)@ -> pStatement.executeUpdate()@ } CATCH(SQLException) { -> logger.error("execute MySQL-query failed at makeNewKategorie.",e,)@ }
results[https://github.com/ShoppingSidekick/bigsky/blob/cfbb070b70bb18cb9dbd2ee11a4ac833264e4936/ShoppingSidekick/src/com/ISU/shoppingsidekick/DatabaseAPI.java][getFoodByFuzzyFoodGroupMatch][1] = -> TRY { -> ps=connection.prepareStatement("SELECT * FROM Food WHERE FoodGroup LIKE ?",)@ -> ps.setString(1,"%"+foodGroup+"%",)@ -> rs=ps.executeQuery()@ } CATCH(SQLException) { -> System.out.println("There was an error in the getFoodByFuzzyFoodGroupMatch method. Error message: "+e.getMessage(),)@ }
results[https://github.com/cedeel/Ultrabans-Lite/blob/40cec1239ae0c56234335e77663846d293ec2ec5/src/main/java/com/modcrafting/ultrabans/db/SQL.java][getAdmin][3] = -> TRY { -> ps=conn.prepareStatement("SELECT * FROM "+bantable+" WHERE name = ? AND (type = 0 OR type = 1) ORDER BY time DESC LIMIT 1",)@ -> ps.setString(1,player,)@ -> rs=ps.executeQuery()@ -> close(ps,rs,)@ } CATCH(SQLException) { -> Error.execute(plugin,ex,)@ }
results[https://github.com/anycook/anycook-core/blob/c750eed4ed2f8e23d0a7bd1254c9ac7ea16b0b7a/src/main/java/de/anycook/db/mysql/DBGetRecipe.java][checkZutatforChildrens][1] = -> TRY {  -> pStatement=connection.prepareStatement("SELECT * FROM zutaten WHERE parent_zutaten_name = ? GROUP BY name",)@ -> pStatement.setString(1,ingredientName,)@ -> data=pStatement.executeQuery()@ -> IF { -> return true@data.next() } } CATCH(SQLException) {}
results[https://github.com/Bukkit-Forge-Plugins/Essentials/blob/e015cad131dc5167ce56d5dc3689f0d78e7aef85/EssentialsProtect/src/com/earth2me/essentials/protect/data/ProtectedBlockSQLite.java][getStatementDeleteByLocation][1] = -> TRY {  -> ps=conn.prepareStatement(QueryDeleteByLocation,)@ -> ps.setString(1,world,)@ -> ps.setInt(2,x,)@ -> ps.setInt(3,y,)@ -> ps.setInt(4,z,)@ } CATCH(SQLException) {}
results[https://github.com/geotools/geotools/blob/c774cfdc48979a8c4ba076dc5bdced59ed009c6d/modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCDataStore.java][selectGeometrySQLPS][1] = -> TRY {  -> ps=cx.prepareStatement(sql.toString(),)@ -> IF { -> ps.setString(1,gid,)@gid!=null } } CATCH(SQLException) {}
results[https://github.com/jidc28/SEP/blob/2f8bd2d9dad9d17082f05b8e24a7f571545a6df3/src/java/DBMS/DBMS.java][obtenerCodigoDecanato][1] = -> TRY { -> ps=conexion.prepareStatement("SELECT * FROM decanato WHERE nombre = ?",)@ -> ps.setString(1,u.getNombre(),)@ -> rs=ps.executeQuery()@ } CATCH(SQLException) { -> ex.printStackTrace()@ }
results[https://github.com/apache/derby/blob/4ce6a9b488aff11cc705a26c1ca30d61091a3ca2/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java][insertRow][1] = -> TRY {  -> ps=conn.prepareStatement("insert into t1 values (?, ?)",)@ -> ps.setInt(1,p1,)@ -> ps.setString(2,p2,)@ -> ps.executeUpdate()@ -> ps.close()@ } CATCH(SQLException) {}
results[https://github.com/sunsuk7tp/MyCassandra/blob/0a14549a1893247063668d407d50248614e701dc/MyCassandra-0.2.1/src/java/org/apache/cassandra/db/engine/MySQLInstance.java][select][1] = -> TRY { -> pstSelect=conn.prepareStatement(getSt,)@ -> pstSelect.setString(1,rowKey,)@ -> rs=pstSelect.executeQuery()@ -> pstSelect.close()@ } CATCH(SQLException) { -> errorMsg("db select error",e,)@ }
results[https://github.com/yukoff/concourse-connect/blob/2ac3fe97b16f7fee7d23cc4e1fc8230d07ff1a0e/src/main/java/com/concursive/connect/cms/portal/dao/ProjectItemList.java][updateName][1] = -> TRY {  -> pst=db.prepareStatement("UPDATE "+table+" "+"SET item_name = ? "+"WHERE code = ? ",)@ -> pst.setString(++i,name,)@ -> pst.setInt(++i,id,)@ -> pst.executeUpdate()@ -> pst.close()@ } CATCH(SQLException) {}
results[https://github.com/anycook/anycook-core/blob/1b1c4c3e70b020e40bae24617f99884f2e455d43/src/anycook/db/mysql/DBSaveGericht.java][checkSchmeckt][1] = -> TRY { -> pStatement=connection.prepareStatement("SELECT * FROM schmeckt WHERE users_id = ? AND gerichte_name = ?",)@ -> pStatement.setInt(1,userid,)@ -> pStatement.setString(2,gericht,)@ -> data=pStatement.executeQuery()@ } CATCH(SQLException) { -> logger.error("execute MySQL-query failed at checkSchmeckt.",e,)@ }
results[https://github.com/deathmarine/Ultrabans/blob/716dd49c9c847038006821392eafdde73541ee04/src/com/modcrafting/ultrabans/db/Database.java][removeFromJaillist][1] = -> TRY { -> ps=connection.prepareStatement("DELETE FROM "+bantable+" WHERE name = ? AND type = 6",)@ -> ps.setString(1,player,)@ -> ps.executeUpdate()@ -> close(ps,null,)@ } CATCH(SQLException) { -> Error.execute(plugin,ex,)@ }
results[https://github.com/xiebiao/Abator/blob/da5b6e504d7c9e625bcabe62254b7afae3e87ab6/src/main/java/com/xiebiao/tools/db/Config.java][getTables][1] = -> TRY { -> preparedStatement=connection.prepareStatement(sql,)@ -> preparedStatement.setString(1,this.getProperty("db.name",),)@ -> rs=preparedStatement.executeQuery()@ } CATCH(SQLException) { -> e.printStackTrace()@ }
results[https://github.com/anycook/anycook-core/blob/feaecd4d4ff6580ddd57d73232949c2c3f49912b/src/main/java/de/anycook/discussion/db/DBDiscussion.java][getLikeCount][1] = -> TRY { -> pStatement=connection.prepareStatement("SELECT count(users_id) AS votes FROM discussions_like WHERE discussions_gerichte_name = ? AND discussions_id = ? GROUP BY discussions_id",)@ -> pStatement.setString(1,gericht,)@ -> pStatement.setInt(2,id,)@ -> data=pStatement.executeQuery()@ } CATCH(SQLException) { -> logger.error("execute MySQL-query failed at getLikeCount",e,)@ }
results[https://github.com/jidc28/SEP/blob/2f8bd2d9dad9d17082f05b8e24a7f571545a6df3/src/java/DBMS/DBMS.java][obtenerDatosMateria][1] = -> TRY { -> ps=conexion.prepareStatement("SELECT * FROM MATERIA WHERE codigo = ?;",)@ -> ps.setString(1,materia.getCodigo(),)@ -> rs=ps.executeQuery()@ } CATCH(SQLException) { -> ex.printStackTrace()@ }
results[https://github.com/iweinzierl/passsafe/blob/ba4a88ba5df2f7fd444d7aeebaca39e3ad93e43d/swing-gui/src/main/java/de/iweinzierl/passsafe/gui/data/SqliteDataSource.java][findId][1] = -> TRY { -> find=conn.prepareStatement(SQL_FIND_ENTRY_ID,)@ -> find.setString(1,entry.getTitle(),)@ -> resultSet=find.executeQuery()@ } CATCH(SQLException) { -> LOGGER.error("Cannot find id for entry '{}'",entry,e,)@ }
results[https://github.com/stas-bob/Projektmanager/blob/3d6da630a658245bfc8dd8db9a6f2a77a55ae4c1/src/java/servlet/Modules.java][getModules][1] = -> TRY { -> ps=c.prepareStatement("SELECT name, status, id FROM module WHERE projectname = ?",)@ -> ps.setString(1,projectName,)@ -> rs=ps.executeQuery()@ -> ps.close()@ } CATCH(SQLException) { -> ex.printStackTrace()@ }
results[https://github.com/codefollower/H2-Research/blob/b002b3eb4d2c623fcb28bab5a3a22e03fd493bfc/src/test/org/h2/test/unit/TestPageStore.java][testLargeIndex][1] = -> TRY {  -> prep=conn.prepareStatement("insert into test values(?, space(500))",)@ -> LOOP { -> prep.setString(1,""+i,)@i<20000 -> prep.executeUpdate()@ } } CATCH(SQLException) {}
results[https://github.com/Gabriel1580/BookBucket/blob/681b0d380e024dd82d258799dcb0682265a983c0/BookBucket/src/dao/EmprestimoDao.java][listaEmprestimoNome][1] = -> TRY { -> ps=c.prepareStatement(sql,)@ -> ps.setString(1,"%"+emprestimo.getNomeAssociado()+"%",)@ -> rs=ps.executeQuery()@ } CATCH(SQLException) { -> e.printStackTrace()@ }
