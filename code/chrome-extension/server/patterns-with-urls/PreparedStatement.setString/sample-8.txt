results[https://github.com/LucidDB/luciddb/blob/d322a8b657b243a85e965487dcf95bbcbd36550c/farrago/src/net/sf/farrago/test/FarragoJdbcTest.java][checkSetInvalidIndex][1] = -> TRY {  -> TRY { -> preparedStmt.setString(column,null,)@ } } CATCH(Exception) {}
results[https://github.com/trygvis/daucus/blob/79c6c1d042fdad06294f4db57c5b8c91b6a0e5d0/src/main/java/io/trygvis/esper/testing/gitorious/GitoriousEventDao.java][countEntryId][3] = -> TRY {  -> TRY { -> s.setString(1,entryId,)@ } } CATCH(SQLException) {}
results[https://github.com/CoderSpotting/pam-mysql-webadmin/blob/3ffa54052e14997643120c13c18a115add61331b/src/main/java/coderspotting/pam/mysql/admin/db/GroupDao.java][findOne][3] = -> TRY { -> TRY { -> prepStmt.setString(1,name,)@ } } CATCH(SQLException) { -> logger.error(ex,)@ }
results[https://github.com/trygvis/daucus/blob/e243a6fd6c444b451398ceb659ea4963a19122d0/src/main/java/io/trygvis/esper/testing/gitorious/GitoriousProjectDao.java][insertProject][3] = -> TRY {  -> TRY { -> s.setString(1,slug,)@ -> s.executeUpdate()@ } } CATCH(SQLException) {}
results[https://github.com/revan-kun/inTouch/blob/084756e34f74eb0b6451de50221cf5c8ecd183e5/src/main/java/com/epam/lab/intouch/dao/member/skill/DefaultMemberSkillsDAO.java][getSkills][3] = -> TRY {  -> TRY { -> preparedStatement.setString(1,login,)@ -> memberResult=preparedStatement.executeQuery()@ } } CATCH(SQLException) {}
results[https://github.com/hjohn/MediaSystem/blob/2885063411b10ae92ea3327b6822a26ebb4f8700/Mediasystem/src/main/java/hs/mediasystem/db/ItemsDao.java][getMediaDataByUri][2] = -> TRY { -> TRY { -> statement.setString(1,uri,)@ } } CATCH(SQLException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/dCache/dcache/blob/b8108fecaa3308f435d1c8a77d4c7814a42a1644/modules/chimera/src/main/java/org/dcache/chimera/FsSqlDriver.java][getAllTags][1] = -> TRY {  -> TRY { -> stGetAllTags.setString(1,inode.toString(),)@ } } CATCH(SQLException,IOException) {}
results[https://github.com/trygvis/daucus/blob/eb6cbd28992cec9025a8e95f8f03ae3839699e0b/src/main/java/io/trygvis/esper/testing/gitorious/GitoriousRepositoryDao.java][selectForProject][1] = -> TRY {  -> TRY { -> s.setString(1,projectSlug,)@ -> return executeQuery(s,)@ } } CATCH(SQLException) {}
results[https://github.com/trygvis/daucus/blob/863c4b739d1d3544edd03704c4ede088e79ecf5c/src/main/java/io/trygvis/esper/testing/nexus/NexusDao.java][findRepositories][1] = -> TRY {  -> TRY { -> s.setString(1,nexusUrl.toASCIIString(),)@ } } CATCH(SQLException) {}
results[https://github.com/trygvis/daucus/blob/fd953370ba0daea03c5de58aac30e097f86826c6/src/main/java/io/trygvis/esper/testing/core/db/BuildDao.java][selectPersonsFromBuildParticipant][2] = -> TRY {  -> TRY { -> s.setString(i,build.toString(),)@ -> return toList(s,PersonDao.person,)@ } } CATCH(SQLException) {}
results[https://github.com/moguonyanko/moglabo/blob/9afe5d37d1518ee8b8745b5d3803207d39670c43/src/org/geese/ci/classifier/db/dao/rdbms/RDBMSCategoryCountDao.java][select][1] = -> TRY {  -> TRY { -> ps.setString(1,category.getName(),)@ -> rs=ps.executeQuery()@ } } CATCH(SQLException) {}
results[https://github.com/JacenLakiir/StockSim/blob/ca9cd95a0529ceb8b91bf9f8e429de28625cd1e7/src/db/StockSimDB.java][getPortfolioName][3] = -> TRY {  -> TRY { -> ps=_preparedStatements.get(PreparedStatementID.GET_PORTFOLIO_NAME_BY_PID,)@ -> ps.setString(1,PID,)@ -> rs=ps.executeQuery()@ } } CATCH(SQLException) {}
results[https://github.com/TheSavior/NEL/blob/5583a4436b114b8090d7fea7e8f8be03abb66d0c/src/com/cse454/nel/mysql/DocumentConnect.java][getDocumentByName][2] = -> TRY {  -> TRY { -> st=connection.prepareStatement("SELECT sentenceID, tokens, ner, gold FROM sentences WHERE docName = ? ORDER BY sentenceID",)@ -> st.setString(1,name,)@ } -> return getDocument(st,)@ } CATCH(SQLException) {}
results[https://github.com/zalox/ProCatering/blob/984345a4b17bdbc4ef2b9581f142ce0a1b1c6b65/database/Database.java][getIngredient][1] = -> TRY { -> TRY { -> prepStat.setString(1,Helper.capitalFirst(ingredientName,),)@ } CATCH(SQLException) { -> cleanup.dbRollback(con,)@ } }
results[https://github.com/ha-jdbc/ha-jdbc/blob/63b5efc784f6de5cfe9e352bb003e914fcfb27da/src/main/java/net/sf/hajdbc/state/sql/SQLStateManager.java][execute][1] = -> TRY {  -> TRY { -> statement.setString(1,event.getSource(),)@ -> statement.executeUpdate()@ } } CATCH(SQLException) {}
results[https://github.com/khreenberg/my-tunes/blob/6b860a827a5c53b6c935ea51a73799bd8e23fa62/src/dal/DBManager.java][getSongsByName][1] = -> TRY {  -> TRY { -> ps=con.prepareStatement(sql,)@ -> ps.setString(1,songTitle,)@ -> rs=ps.executeQuery()@ } } CATCH(SQLException) {}
results[https://github.com/trygvis/daucus/blob/fd953370ba0daea03c5de58aac30e097f86826c6/src/main/java/io/trygvis/esper/testing/core/db/PersonDao.java][selectJenkinsUserUuidsByPerson][1] = -> TRY {  -> TRY { -> s.setString(i,person.toUuidString(),)@ -> return toList(s,getUUID,)@ } } CATCH(SQLException) {}
results[https://github.com/trygvis/daucus/blob/863c4b739d1d3544edd03704c4ede088e79ecf5c/src/main/java/io/trygvis/esper/testing/nexus/NexusDao.java][deleteArtifact][1] = -> TRY {  -> TRY { -> s.setString(i,uuid.toString(),)@ -> s.executeUpdate()@ } } CATCH(SQLException) {}
results[https://github.com/khreenberg/my-champ/blob/4aeacce221fb8ca53ee33497ff42b96d6749f2ba/Project/src/dal/GroupAccess.java][getGroupByname][1] = -> TRY {  -> TRY { -> ps=con.prepareStatement(sql,)@ -> ps.setString(1,name,)@ -> rs=ps.executeQuery()@ } } CATCH(SQLServerException,SQLException) {}
results[https://github.com/Jonasjakobsen/Belman/blob/83d367b5a2b1d086f9fc6ca4d9b8c92b7f695b37/Belman/src/DAL/DALProduktionDBManager.java][getOrderByMaterial][1] = -> TRY {  -> TRY { -> ps=con.prepareStatement(sql,)@ -> ps.setString(1,p.getCoilCode(),)@ -> rs=ps.executeQuery()@ } } CATCH(SQLException) {}
results[https://github.com/stas/pos/blob/28a926cf440cb7fb74dbec5158acec8a8a4fb3fd/src-data/com/openbravo/data/loader/PreparedSentence.java][setString][1] = -> TRY {  -> TRY { -> m_ps.setString(paramIndex,sValue,)@ } CATCH(SQLException) { -> throw new BasicException(eSQL,)@ } } CATCH(BasicException) {}
results[https://github.com/svn2github/apache-commons-dbcp/blob/ff98f0575ffcd15053fb786e2f9cfa9447c08820/tags/DBCP_1_2_1/src/java/org/apache/commons/dbcp/DelegatingPreparedStatement.java][setString][6] = -> TRY {  -> TRY { -> _stmt.setString(parameterIndex,x,)@ } CATCH(SQLException) { -> handleException(e,)@ } } CATCH(SQLException) {}
results[https://github.com/johnrun262/CSC540_Public/blob/d00d64e7e6c81cd431e88c6e762e3ad96a817ea6/src/Sale.java][execShip][1] = -> TRY {  -> TRY { -> updateStatement=connection.prepareStatement(sql,)@ -> updateStatement.setString(1,STATUS_SHIPPED,)@ -> updateStatement.setInt(2,orderId,)@ -> updateStatement.executeUpdate()@ } } CATCH(ValidationException,SQLException) {}
results[https://github.com/arenger/hilas/blob/408c8c624fa6ac4c2a87a9aae25c6e73ccd7b777/src/main/java/edu/uccs/arenger/hilas/dal/Analysis.java][insErr][2] = -> TRY {  -> TRY { -> ps.setString(1,domainId,)@ -> IF { -> throw new SQLException("expected return of 1",)@ps.executeUpdate()!=1 } } } CATCH(SQLException) {}
results[https://github.com/resteasy/Resteasy/blob/779b6568c29ca0ff64633b98cdd479e1f72ba9ab/jaxrs/eagledns/src/main/java/se/unlogic/standardutils/dao/querys/PreparedStatementQuery.java][setString][2] = -> TRY {  -> TRY { -> pstmt.setString(arg0,arg1,)@ } CATCH(SQLException) { -> this.abort()@ } } CATCH(SQLException) {}
results[https://github.com/mdaniel/svn-caucho-com-resin/blob/e984537069875451506d3014fd23a5b757678a20/modules/resin/src/com/caucho/profiler/PreparedStatementWrapper.java][setString][2] = -> TRY {  -> TRY { -> _preparedStatement.setString(parameterIndex,x,)@ } FINALLY { -> profiler.finish()@ } } CATCH(SQLException) {}
results[https://github.com/jentrata/jentrata/blob/543062b2ff916e5c73570191242e4c48486ace34/ebms-msh-jdbc-store/src/main/java/org/jentrata/ebms/messaging/internal/sql/AbstractRepositoryManager.java][selectRepositoryBy][1] = -> TRY { -> TRY { -> stmt.setString(1,value,)@ -> result=stmt.executeQuery()@ } } CATCH(SQLException) { -> LOG.warn("failed to get payload from repository:"+ex,)@ -> LOG.debug("",ex,)@ }
results[https://github.com/conan513/MoopleDEV/blob/b47a73146dae30c992aa957ea870fccc6daa80fa/src/client/MapleCharacter.java][getIdByName][1] = -> TRY { -> TRY { -> ps.setString(1,name,)@ -> TRY { -> IF { -> ps.close()@ } } } }
results[https://github.com/JacenLakiir/StockSim/blob/ca9cd95a0529ceb8b91bf9f8e429de28625cd1e7/src/db/StockSimDB.java][getTransactionHistoryByNumber][1] = -> TRY {  -> TRY { -> ps=_preparedStatements.get(PreparedStatementID.GET_TRANSACTION_HISTORY_BY_NUMBER,)@ -> ps.setString(1,PID,)@ -> ps.setInt(2,numTransactions,)@ -> rs=ps.executeQuery()@ } } CATCH(SQLException) {}
results[https://github.com/Jonasjakobsen/Belman/blob/e5936cf1b386796fc86a993929ace39d3d793a04/Belman/src/DAL/DALLagerDBManager.java][getStockByOrderMaterial][1] = -> TRY {  -> TRY { -> ps=con.prepareStatement(sql,)@ -> ps.setString(1,l.getCode(),)@ -> rs=ps.executeQuery()@ } } CATCH(SQLException) {}
results[https://github.com/trygvis/daucus/blob/fd953370ba0daea03c5de58aac30e097f86826c6/src/main/java/io/trygvis/esper/testing/core/db/PersonDao.java][selectBadgeProgresses][1] = -> TRY {  -> TRY { -> s.setString(i,person.toUuidString(),)@ -> return toList(s,personBadgeProgress,)@ } } CATCH(SQLException) {}
results[https://github.com/moguonyanko/moglabo/blob/9afe5d37d1518ee8b8745b5d3803207d39670c43/src/org/geese/ci/classifier/db/dao/rdbms/RDBMSCategoryCountDao.java][insert][1] = -> TRY {  -> TRY { -> ps.setString(1,category.getName(),)@ -> ps.setDouble(2,1.0,)@ -> result=ps.execute()@ } } CATCH(SQLException) {}
results[https://github.com/zalox/ProCatering/blob/984345a4b17bdbc4ef2b9581f142ce0a1b1c6b65/database/Database.java][addCategory][1] = -> TRY { -> TRY { -> prepStat.setString(1,Helper.capitalFirst(name,),)@ -> prepStat.executeUpdate()@ } CATCH(SQLException) { -> cleanup.dbRollback(con,)@ } }
results[https://github.com/trygvis/daucus/blob/9199316feef9d751ce73bb71d065345b585d3126/src/main/java/io/trygvis/esper/testing/core/TablePoller.java][getLastSequenceForPoller][1] = -> TRY {  -> TRY { -> s.setString(1,pollerName,)@ -> return fromRs(s.executeQuery(),).map(getInt,)@ } } CATCH(SQLException) {}
results[https://github.com/Chrisbh/Tie-Break/blob/4ca68c13cde7ad01dad0fb9b93b3a95c6a94ba5b/Tie-Break/src/DAL/MembersDBManager.java][checkUserNameAndPassword][1] = -> TRY {  -> TRY { -> ps=con.prepareStatement(sql,)@ -> ps.setInt(1,ID,)@ -> ps.setString(2,Password,)@ -> rs=ps.executeQuery()@ } } CATCH(SQLException) {}
results[https://github.com/moguonyanko/moglabo/blob/9afe5d37d1518ee8b8745b5d3803207d39670c43/src/org/geese/ci/classifier/db/dao/rdbms/RDBMSCategoryCountDao.java][update][1] = -> TRY {  -> TRY { -> ps.setDouble(1,count,)@ -> ps.setString(2,category.getName(),)@ -> effectCount=ps.executeUpdate()@ } } CATCH(SQLException) {}
results[https://github.com/JacenLakiir/StockSim/blob/ca9cd95a0529ceb8b91bf9f8e429de28625cd1e7/src/db/StockSimDB.java][getTransactionHistoryByTime][1] = -> TRY {  -> TRY { -> ps=_preparedStatements.get(PreparedStatementID.GET_TRANSACTION_HISTORY_BY_TIME,)@ -> ps.setString(1,PID,)@ -> ps.setObject(2,interval,)@ -> rs=ps.executeQuery()@ } } CATCH(SQLException) {}
results[https://github.com/patrickvane/school_6/blob/46da98ada899f23999784ee1f885c9acfcb3bcca/01a. My Objects/My_Database_Connection_Pool/MyConnection.java][getDatabaseDataValue][10] = -> TRY {  -> TRY { -> statementGetDatabaseDataValue.setString(1,key,)@ -> result=openResultSet(statementGetDatabaseDataValue,)@ } CATCH(Exception) { -> throw new MyException(e,)@ } } CATCH(MyException) {}
results[https://github.com/east825/repoll/blob/97791b6385de322d3efdc3ba4578e16f7e8e16c3/server/src/main/java/repoll/server/rest/SearchUtil.java][findUserByLogin][4] = -> TRY { -> TRY { -> statement.setString(1,login,)@ -> resultSet=statement.executeQuery()@ -> IF { -> return null@!(resultSet.next()) } } } CATCH(SQLException | MapperException) { -> LOG.throwing("SearchUtil","findUserByLogin",e,)@ }
results[https://github.com/Makja/Mytunes/blob/3e138c22246d45c4c9b2127f57a0ade763c19071/MyTunes/src/DAL/ArtistDBManager.java][getArtistName][4] = -> TRY {  -> TRY { -> ps=con.prepareStatement(sql,)@ -> ps.setString(1,artistName,)@ -> rs=ps.executeQuery()@ -> IF { -> return a@rs.next() } } } CATCH(SQLException) {}
results[https://github.com/AE97/AeBot/blob/823fd885b31ebf530ac160162bbfdf9caedb747e/RalexBot/src/main/java/com/lordralex/ralexbot/mysql/MySQLConnection.java][getString][4] = -> TRY {  -> TRY { -> st=conn.prepareStatement("USE 1",)@ -> st.setString(1,table,)@ } CATCH(SQLException) { -> throw new IOException(ex,)@ } } CATCH(IOException) {}
results[https://github.com/jeromewagener/Sammelbox/blob/1ed24aeb3b66ccb533ee35d5cf70b14f72337d03/collector-desktop/src/collector/desktop/model/database/operations/UpdateOperations.java][removeAlbumFromAlbumMasterTable][3] = -> TRY {  -> TRY { -> preparedStatement.setString(1,albumName,)@ -> preparedStatement.executeUpdate()@ } CATCH(SQLException) { -> throw new DatabaseWrapperOperationException(DBErrorState.ErrorWithDirtyState,e,)@ } } CATCH(DatabaseWrapperOperationException) {}
results[https://github.com/patrickanderson/fingerpaint-project-code/blob/39d04ff669d433b72edaa59af59cc029ed2a3ca7/pdfdoclet/example/laby/com/jlaby/jdbc/oracle/IdGenerator.java][createNewID][1] = -> TRY {  -> TRY { -> ms_prepGetNewUniqueID.setString(1,m_sequenceName,)@ -> Log.info("IdGenerator","createNewID","Execute query for sequence "+m_sequenceName,)@ } CATCH(Exception) { -> throw new LabySQLException(e,)@ } } CATCH(LabySQLException) {}
results[https://github.com/sabersamus/Bytecraft/blob/eb79bef81b92056a2b5091bf14a0159ca42f1c0c/src/info/bytecraft/database/db/DBHomeDAO.java][getHomeNames][6] = -> TRY {  -> TRY { -> stm.setString(1,playerName,)@ -> stm.execute()@ } CATCH(SQLException) { -> throw new DAOException(sql,e,)@ } } CATCH(DAOException) {}
results[https://github.com/jdmr/mateo/blob/04651fd779fb3990afd5fd69f7e18447f584e2d1/src/main/java/mx/edu/um/mateo/inscripciones/model/ccobro/InstitucionHObrero1.java][savePorcentajeInstituciones][2] = -> TRY {  -> TRY { -> pstmt=conn.prepareStatement(str.toString(),)@ -> pstmt.setString(1,matricula,)@ -> pstmt.executeUpdate()@ -> pstmt.close()@ } } CATCH(SQLException) {}
results[https://github.com/linkedin/databus/blob/f628aca4393d7fb01464eecea7fc351b74886f97/databus-bootstrap-utils/databus-bootstrap-utils-impl/src/main/java/com/linkedin/databus/bootstrap/utils/BootstrapAuditMain.java][getRecord][2] = -> TRY {  -> TRY { -> _pointRecordStmt.setString(1,destKey,)@ -> rs=_pointRecordStmt.executeQuery()@ } CATCH(SQLException) { -> DBHelper.close(rs,_pointRecordStmt,null,)@ } } CATCH(SQLException) {}
results[https://github.com/east825/repoll/blob/ef71c29438fe01af514916e39eb021e99630276b/repoll-rmi/server/src/main/java/repoll/util/SearchUtil.java][findUserByLogin][2] = -> TRY { -> TRY { -> statement.setString(1,login,)@ -> resultSet=statement.executeQuery()@ -> IF { -> return null@!(resultSet.next()) } } } CATCH(SQLException | MapperException) { -> LOG.error(e,)@ }
results[https://github.com/jentrata/jentrata/blob/543062b2ff916e5c73570191242e4c48486ace34/ebms-msh-jdbc-store/src/main/java/org/jentrata/ebms/messaging/internal/sql/AbstractRepositoryManager.java][selectMessageBy][1] = -> TRY { -> fields.put(columnName,value,)@ -> TRY { -> stmt.setString(1,value,)@ -> result=stmt.executeQuery()@ } } CATCH(SQLException) { -> LOG.warn("failed to get message from repository:"+ex,)@ -> LOG.debug("",ex,)@ }
results[https://github.com/noselusbe/noselus-backend/blob/3f92fe14c30b15b9aad750bd5bb4d9612fe666fe/src/main/java/be/noselus/db/SqlRequester.java][updatePersonAssemblyId][1] = -> TRY {  -> TRY { -> stat.setInt(1,id,)@ -> stat.setString(2,name.trim().replace(' ',' ',),)@ -> stat.execute()@ } } CATCH(SQLException) {}
results[https://github.com/sunsuk7tp/MyCassandra/blob/62569bff9b6b5d588a5d3e01715437ab7cb2f14e/src/java/org/apache/cassandra/db/MySQLInstance.java][delete][1] = -> TRY {  -> TRY { -> pstDelete.setString(1,columnValue,)@ -> return pstDelete.executeUpdate()@ } CATCH(SQLException) { -> System.out.println("db connection error "+e,)@ } } CATCH(SQLException) {}
results[https://github.com/zalox/ProCatering/blob/984345a4b17bdbc4ef2b9581f142ce0a1b1c6b65/database/Database.java][findDishes][1] = -> TRY { -> TRY { -> prepStat.setString(1,value,)@ -> rs=prepStat.executeQuery()@ } CATCH(SQLException) { -> gui.Gui.showErrorMessage(DATABASE_NUMBER,1,ePrepState,)@ -> cleanup.dbRollback(con,)@ } -> gui.Gui.showErrorMessage(DATABASE_NUMBER,2,eCon,)@ }
results[https://github.com/trygvis/daucus/blob/fd953370ba0daea03c5de58aac30e097f86826c6/src/main/java/io/trygvis/esper/testing/core/db/PersonDao.java][selectPersonByMail][2] = -> TRY {  -> TRY { -> s.setString(i,mail,)@ -> return fromRs(s.executeQuery(),).map(person,)@ } } CATCH(SQLException) {}
results[https://github.com/cmusatyalab/pathfind/blob/13891c91bf317112107437e2255335d7fec7b33f/src/edu/cmu/cs/diamond/pathfind/SQLAnnotationStore.java][getAnnotations][1] = -> TRY {  -> TRY { -> selectStatement.setString(1,quickhash1,)@ -> r=selectStatement.executeQuery()@ } CATCH(SQLException) { -> throw new IOException(e,)@ } } CATCH(IOException) {}
results[https://github.com/NubCoda/Java/blob/e25eb5ca4a1c52b216acbdcd726c6c5d93585d4b/MailManagementSystem/src/emailverwaltung/EmailKontaktDao.java][select][1] = -> TRY {  -> TRY { -> prStatement=conn.prepareStatement(sql,)@ -> prStatement.setString(1,mailAdresse_,)@ -> prStatement.setInt(2,benutzerLogin.getId(),)@ -> resultSet=prStatement.executeQuery()@ } } CATCH(SQLException) {}
results[https://github.com/enonic/cms-ce/blob/04f905b4ec315fb93c87000bea71026cf70c5ec9/modules/cms-core/src/main/java/com/enonic/vertical/engine/handlers/GroupHandler.java][buildGroupMembersDOM][1] = -> TRY {  -> TRY { -> preparedStmt.setString(1,gKey,)@ -> resultSet=preparedStmt.executeQuery()@ } FINALLY { -> close(resultSet,)@ } } CATCH(SQLException) {}
results[https://github.com/arenger/hilas/blob/2985f9aa2672aef1f1b6c6c4c0ca9dee0b3e7fce/src/main/java/edu/uccs/arenger/hilas/dal/Domain.java][getFromDb][2] = -> TRY {  -> TRY { -> ps.setString(1,domain,)@ -> rs=ps.executeQuery()@ } CATCH(SQLException) { -> throw new DalException(e,)@ } } CATCH(DalException) {}
results[https://github.com/sabersamus/Bytecraft/blob/9164aeb56de9b8d848f9849ac0c89edb7b9daa17/src/info/bytecraft/database/db/DBWarpDAO.java][getWarp][1] = -> TRY {  -> TRY { -> stm.setString(1,name,)@ -> stm.execute()@ } CATCH(SQLException) { -> throw new RuntimeException(e,)@ } } CATCH(DAOException) {}
results[https://github.com/trygvis/daucus/blob/e0433a61af4e1b9796cee8f095486fec85eb136f/src/main/java/io/trygvis/esper/testing/jenkins/JenkinsDao.java][selectBuildByEntryId][1] = -> TRY {  -> TRY { -> s.setString(i,id,)@ -> return fromRs(s.executeQuery(),).map(jenkinsBuild,)@ } } CATCH(SQLException) {}
results[https://github.com/forcedotcom/phoenix/blob/df0a4d487e44d55471bf3ffac486dd504fd23dc3/src/test/java/com/salesforce/phoenix/end2end/QueryTest.java][testNotEqualsByFloat][43] = -> TRY {  -> TRY { -> statement=conn.prepareStatement(query,)@ -> statement.setString(1,tenantId,)@ -> rs=statement.executeQuery()@ } FINALLY { -> conn.close()@ } } CATCH(Exception) {}
results[https://github.com/thkoch2001/jamwiki-wiki-conversion-wip2/blob/d873cf4e587b75f49dfa5ba92725101271b6efe5/jamwiki-web/src/main/java/org/jamwiki/db/AnsiQueryHandler.java][lookupWikiUser][24] = -> TRY {  -> TRY { -> stmt=conn.prepareStatement(STATEMENT_SELECT_WIKI_USER_LOGIN,)@ -> stmt.setString(1,username,)@ -> rs=stmt.executeQuery()@ } FINALLY { -> DatabaseConnection.closeConnection(null,stmt,rs,)@ } } CATCH(SQLException) {}
results[https://github.com/hoevenvd/java_for_weather/blob/a6dce25910ea11ba52c6abd715ae45139f9e197e/java/jdk/db/demo/programs/localcal/src/RequestManager.java][deleteRequestsForEvent][4] = -> TRY {  -> TRY { -> pstmt=conn.prepareStatement("DELETE FROM "+DatabaseManager.REQUESTS_TABLE+" WHERE event_id = ?",)@ -> pstmt.setString(1,eventId,)@ -> pstmt.executeUpdate()@ } FINALLY { -> DatabaseManager.releaseConnection(conn,)@ } } CATCH(Exception) {}
results[https://github.com/sinuni/Fellesprosjektet/blob/de8db6bbf6666c24b8b07cd2934d6eac1c90aba6/mysql-connector-java-5.1.18/src/testsuite/regression/StatementRegressionTest.java][testTruncationWithChar][1] = -> TRY {  -> TRY { -> this.pstmt=this.conn.prepareStatement("INSERT INTO testTruncationWithChar VALUES (?)",)@ -> this.pstmt.setString(1,"00",)@ -> this.pstmt.executeUpdate()@ } FINALLY { -> this.stmt.executeUpdate("DROP TABLE IF EXISTS testTruncationWithChar",)@ } } CATCH(Exception) {}
results[https://github.com/khreenberg/my-tunes/blob/6b860a827a5c53b6c935ea51a73799bd8e23fa62/src/dal/DBManager.java][getCategoryByName][1] = -> TRY {  -> TRY { -> ps=con.prepareStatement(sql,)@ -> ps.setString(1,categoryName,)@ -> rs=ps.executeQuery()@ -> IF { -> return new Category(id,name,)@rs.next() } } } CATCH(SQLException) {}
results[https://github.com/sabersamus/Bytecraft/blob/7dd0c4f8f2372f5952616055b14262429ab73fa5/src/info/bytecraft/database/db/DBZoneDAO.java][addLotUser][2] = -> TRY {  -> TRY { -> stmt.setInt(1,lotId,)@ -> stmt.setString(2,name,)@ -> stmt.execute()@ } CATCH(SQLException) { -> throw new DAOException(sql,e,)@ } } CATCH(DAOException) {}
results[https://github.com/ckamm/gerrit/blob/47369dee03db719fda0eb323345181faca4d9ba2/appjar/src/main/java/com/google/gerrit/pgm/ImportGerrit1.java][findId][10] = -> TRY {  -> ps=sql.prepareStatement("SELECT ar_id FROM gerrit1.approval_rights"+" WHERE gae_key=?",)@ -> TRY { -> ps.setString(1,arKey,)@ -> rs=ps.executeQuery()@ } FINALLY { -> ps.close()@!(rs.next()) } } CATCH(SQLException) {}
results[https://github.com/kkvnlxy/cs304/blob/086871c3dee6d3b9c86477c44adab443565424fb/AMSStore/src/sale/SearchCtrl.java][searchBySinger][1] = -> TRY {  -> TRY { -> stmt=conn.prepareStatement(sql,)@ -> stmt.setString(1,singer,)@ -> result=stmt.executeQuery()@ } FINALLY { -> stmt.close()@ } } CATCH(SQLException,ClassNotFoundException,IOException) {}
results[https://github.com/thkoch2001/jamwiki-wiki-conversion-wip2/blob/68da1c12b30ded0cc40975be592bd44e1ce37593/jamwiki-core/src/main/java/org/jamwiki/db/AnsiQueryHandler.java][deleteUserAuthorities][5] = -> TRY {  -> TRY { -> stmt=conn.prepareStatement(STATEMENT_DELETE_AUTHORITIES,)@ -> stmt.setString(1,username,)@ -> stmt.executeUpdate()@ } FINALLY { -> DatabaseConnection.closeStatement(stmt,)@ } } CATCH(SQLException) {}
results[https://github.com/Snowball239/BookStore/blob/7847f7596855d72154f968f876ab41f99c0bba55/src/main/java/db/UserMapper.java][find][2] = -> TRY {  -> TRY { -> statement.setString(1,login,)@ -> return createUser(statement,)@ } CATCH(SQLException) { -> throw new DataMapperException("Error occurred while searching for user: "+e.getMessage(),)@ } } CATCH(DataMapperException) {}
results[https://github.com/svn2github/SpagoBI-V4x/blob/71c0db54ecd44ff060c010f6714a6191fdde2bd3/paloviewapi/src/org/palo/viewapi/internal/dbmappers/UserRoleAssociation.java][getRoles][6] = -> TRY {  -> TRY { -> stmt=connection.prepareStatement(FIND_BY_USER_STMT,)@ -> stmt.setString(1,userId,)@ -> results=stmt.executeQuery()@ } FINALLY { -> cleanUp(stmt,results,)@ } } CATCH(SQLException) {}
results[https://github.com/Silverpeas/Silverpeas-Core/blob/f00ddcf8d30a673f7ad615904e5c704e0c424383/ejb-core/calendar/src/main/java/com/stratelia/webactiv/calendar/model/ToDoDAO.java][getOrganizerToDoHeaders][2] = -> TRY {  -> TRY { -> prepStmt=con.prepareStatement(selectStatement,)@ -> prepStmt.setString(1,organizerId,)@ -> rs=prepStmt.executeQuery()@ } FINALLY { -> DBUtil.close(rs,prepStmt,)@ } } CATCH(SQLException,CalendarException) {}
results[https://github.com/trygvis/daucus/blob/e0433a61af4e1b9796cee8f095486fec85eb136f/src/main/java/io/trygvis/esper/testing/jenkins/JenkinsDao.java][selectBuildCountForServer][1] = -> TRY {  -> TRY { -> s.setString(1,uuid.toString(),)@ -> return fromRs(s.executeQuery(),).map(getInt,).get()@ } } CATCH(SQLException) {}
results[https://github.com/BaseballCardTracker/bbct/blob/dbb5194375d98f9249e631ffde03df010ac5e5b3/src/bbct/common/data/JDBCBaseballCardIO.java][getBaseballCardsByPlayerName][1] = -> TRY {  -> TRY { -> stmt=this.conn.prepareStatement(sqlQuery,)@ -> stmt.setString(1,playerName,)@ -> rs=stmt.executeQuery()@ } CATCH(SQLException) { -> msg=BBCTStringResources.ErrorResources.DATABASE_SELECT_ERROR+" (player name: "+playerName+")"@ -> throw new BBCTIOException(msg,ex,)@ } } CATCH(BBCTIOException) {}
results[https://github.com/sleuthkit/sleuthkit/blob/866aa55a6bb84153094a171a095192d2f748d419/bindings/java/src/org/sleuthkit/datamodel/SleuthkitCase.java][addFilePath][1] = -> TRY {  -> TRY { -> addPathSt.setLong(1,objId,)@ -> addPathSt.setString(2,path,)@ -> addPathSt.executeUpdate()@ } FINALLY { -> addPathSt.clearParameters()@ } } CATCH(SQLException) {}
results[https://github.com/trygvis/daucus/blob/e7b1958ce5e93ead2d7d3c74eabe00a4186a048a/src/main/java/io/trygvis/esper/testing/core/CoreDao.java][selectPersonByJenkinsUuid][2] = -> TRY {  -> TRY { -> s.setString(i,jenkinsUser.toString(),)@ -> return fromRs(s.executeQuery(),).map(person,)@ } } CATCH(SQLException) {}
results[https://github.com/NCIP/cadsr-cdecurate/blob/7d5cfe9015f111b6cee5c9ae08998c050dfc2a0a/src/gov/nih/nci/cadsr/cdecurate/database/DBAccess.java][deleteAlt][1] = -> TRY {  -> TRY { -> pstmt=_conn.prepareStatement(sql_,)@ -> pstmt.setString(1,idseq_,)@ -> pstmt.executeUpdate()@ } FINALLY { -> pstmt=SQLHelper.closePreparedStatement(pstmt,)@ } } CATCH(SQLException) {}
results[https://github.com/Silverpeas/Silverpeas-Core/blob/f00ddcf8d30a673f7ad615904e5c704e0c424383/ejb-core/mylinks/src/main/java/com/silverpeas/myLinks/dao/LinkDAO.java][deleteLinksOfObject][4] = -> TRY {  -> TRY { -> prepStmt=con.prepareStatement(query,)@ -> prepStmt.setString(1,objectId,)@ -> prepStmt.executeUpdate()@ } FINALLY { -> DBUtil.close(prepStmt,)@ } } CATCH(SQLException) {}
results[https://github.com/ddumontatibm/Landos-App/blob/61f0a26d58e9ec1e52c8217583c620dc2f32f0ee/src/main/java/com/ibm/opensocial/landos/BaseServlet.java][isAdmin][1] = -> TRY {  -> TRY { -> stmt=conn.prepareStatement("SELECT * FROM `subscribed` WHERE `user`=? AND `admin`=1",)@ -> stmt.setString(1,user,)@ -> results=stmt.executeQuery()@ } FINALLY { -> close(results,stmt,conn,)@ } } CATCH(SQLException) {}
results[https://github.com/Silverpeas/Silverpeas-Components/blob/89029a3a29c6e1f7972b1c64e153af01e40fd41d/blog/blog-jar/src/main/java/com/silverpeas/blog/dao/PostDAO.java][getAllEvents][6] = -> TRY {  -> TRY { -> prepStmt=con.prepareStatement(query,)@ -> prepStmt.setString(1,instanceId,)@ -> rs=prepStmt.executeQuery()@ } FINALLY { -> DBUtil.close(rs,prepStmt,)@ } } CATCH(SQLException) {}
results[https://github.com/trygvis/daucus/blob/fd953370ba0daea03c5de58aac30e097f86826c6/src/main/java/io/trygvis/esper/testing/core/db/PersonDao.java][selectPerson][1] = -> TRY {  -> TRY { -> s.setString(i,uuid.toUuidString(),)@ -> return fromRs(s.executeQuery(),).map(person,)@ } } CATCH(SQLException) {}
results[https://github.com/trygvis/daucus/blob/fd953370ba0daea03c5de58aac30e097f86826c6/src/main/java/io/trygvis/esper/testing/core/db/BuildDao.java][selectBuild][1] = -> TRY {  -> TRY { -> s.setString(i,uuid.toString(),)@ -> return fromRs(s.executeQuery(),).map(build,)@ } } CATCH(SQLException) {}
results[https://github.com/sabersamus/Bytecraft/blob/7dd0c4f8f2372f5952616055b14262429ab73fa5/src/info/bytecraft/database/db/DBPlayerDAO.java][getRank][4] = -> TRY {  -> TRY { -> stm.setString(1,player.getName(),)@ -> stm.execute()@ } CATCH(SQLException) { -> throw new DAOException(sql,e,)@ } } CATCH(DAOException) {}
results[https://github.com/partakein/partake/blob/27e36ee3915f41aa2ee720fcf5ba7bffe01d2c0a/Partake/app/in/partake/model/dao/postgres9/Postgres9IndexDao.java][remove][1] = -> TRY {  -> TRY { -> ps=con.prepareStatement(sql,)@ -> ps.setString(1,value,)@ -> ps.execute()@ } FINALLY { -> close(ps,)@ } } CATCH(SQLException) {}
results[https://github.com/mensonge/mensonge/blob/9d6502739b46f3e3e70d8d3b09b651b62e4527f5/src/main/java/mensonge/core/BaseDeDonnees/BaseDeDonneesModele.java][getCategorie][3] = -> TRY {  -> TRY { -> ps=connexion.prepareStatement("SELECT idcat FROM categorie WHERE nomcat=?;",)@ -> ps.setString(1,nomCat,)@ -> rs=ps.executeQuery()@ } FINALLY { -> closeRessource(ps,null,rs,)@ } } CATCH(SQLException) {}
results[https://github.com/talos/caustic/blob/ad00188c0f00b9373d1a974307235741028b934f/implementation/sqlite-jdbc/src/net/microscraper/impl/database/JDBCSqliteConnection.java][bindStrings][1] = -> TRY {  -> TRY { -> LOOP { -> statement.setString(i+1,strings[i],)@i<strings.length } } CATCH(SQLException) { -> throw new SQLConnectionException(e,)@ } } CATCH(SQLConnectionException) {}
results[https://github.com/kkvnlxy/cs304/blob/086871c3dee6d3b9c86477c44adab443565424fb/AMSStore/src/sale/SearchCtrl.java][searchByTitle][1] = -> TRY {  -> TRY { -> stmt=conn.prepareStatement(sql,)@ -> stmt.setString(1,tlt,)@ -> result=stmt.executeQuery()@ } FINALLY { -> stmt.close()@ } } CATCH(ClassNotFoundException,IOException,SQLException) {}
results[https://github.com/trygvis/daucus/blob/e0433a61af4e1b9796cee8f095486fec85eb136f/src/main/java/io/trygvis/esper/testing/jenkins/JenkinsDao.java][selectBuild][1] = -> TRY {  -> TRY { -> s.setString(i,uuid.toString(),)@ -> return fromRs(s.executeQuery(),).map(jenkinsBuild,)@ } } CATCH(SQLException) {}
results[https://github.com/ericdes/nuxeo-platform/blob/76ea3fdeac135ea41b33903768d0b649004bccdc/nuxeo-platform-directory-sql/src/main/java/org/nuxeo/ecm/directory/sql/TableReference.java][removeLinksFor][1] = -> TRY {  -> TRY { -> ps=session.sqlConnection.prepareStatement(sql,)@ -> ps.setString(1,entryId,)@ -> ps.execute()@ } CATCH(SQLException) { -> throw new DirectoryException("error remove links to "+entryId,e,)@ } } CATCH(DirectoryException) {}
results[https://github.com/pcoriente/LaAnita/blob/749c76c92cced6b38145becd3d7de00a3fa2c7c1/LaAnita/src/java/usuarios/dao/DAOUsuarios.java][obtenerUsuario][1] = -> TRY {  -> TRY { -> sentencia=cn.prepareStatement(strSQL,)@ -> sentencia.setString(1,login,)@ -> rs=sentencia.executeQuery()@ } FINALLY { -> cn.close()@ } } CATCH(SQLException) {}
results[https://github.com/Torinson/SEPM_Faktura/blob/f253261c31e6bc18091360ccd9844ebdaf4c5eeb/sepm/src/dao/JDBCProductDAOImpl.java][findByName][1] = -> TRY {  -> TRY { -> findProductByName.setString(1,name,)@ -> r=findProductByName.executeQuery()@ } CATCH(SQLException) { -> logger.error("Error finding Product by name",)@ -> throw new JDBCProductDAOImplException("Error finding Product by name",)@ } } CATCH(JDBCProductDAOImplException) {}
results[https://github.com/trygvis/daucus/blob/5c8c3467906d996c04210cc8350edbd027ccc32a/src/main/java/io/trygvis/esper/testing/core/db/FileDao.java][loadByUrl][1] = -> TRY {  -> TRY { -> s.setString(1,uri.toASCIIString(),)@ -> rs=s.executeQuery()@ -> IF { -> return none()@!(rs.next()) } } } CATCH(SQLException) {}
results[https://github.com/moravianlibrary/Kramerius/blob/e8ab543e6ca5ca0a36acc34f1eb4ca76c47480aa/common/src/main/java/cz/incad/kramerius/processes/database/ProcessDatabaseUtils.java][deleteProcess][1] = -> TRY {  -> prepareStatement=con.prepareStatement("delete from processes where UUID = ?",)@ -> TRY { -> prepareStatement.setString(1,uuid,)@ -> prepareStatement.executeUpdate()@ } FINALLY { -> DatabaseUtils.tryClose(prepareStatement,)@ } } CATCH(SQLException) {}
results[https://github.com/endosnipe/ENdoSnipe/blob/b4ab7ab23f16c5a8232591575f9cf3617f076da7/ENdoSnipeDataAccessor/src/main/java/jp/co/acroquest/endosnipe/data/dao/JavelinMeasurementItemDao.java][deleteByMeasurementItemId][1] = -> TRY {  -> TRY { -> delegated=getDelegatingStatement(pstmt,)@ -> delegated.setString(1,measurementItemName,)@ } FINALLY { -> SQLUtil.closeStatement(pstmt,)@ -> SQLUtil.closeConnection(conn,)@ } } CATCH(SQLException) {}
results[https://github.com/pitosalas/blogbridge/blob/0d6d0d15e87bffee630a0d5ef259a0183388de8b/src/com/salas/bb/persistence/backend/HsqlPersistenceManager.java][getApplicationProperty][1] = -> TRY {  -> TRY { -> stmt=getPreparedStatement("SELECT value FROM APP_PROPERTIES WHERE name = ?",)@ -> stmt.setString(1,key,)@ -> rs=stmt.executeQuery()@ } CATCH(SQLException) { -> throw new PersistenceException("Failed to get application property ("+key+")",e,)@ } } CATCH(PersistenceException) {}
results[https://github.com/idega/com.idega.slide/blob/f61f96d2bf2712fcb915eab7d9cddcd4c38460a7/src/java/org/apache/slide/store/impl/rdbms/H2RDBMSAdapter.java][getID][1] = -> TRY {  -> TRY { -> statement=connection.prepareStatement("select URI_ID from URI where URI_STRING = ?",)@ -> statement.setString(1,uriString,)@ -> rs=statement.executeQuery()@ } FINALLY { -> close(statement,rs,)@ } } CATCH(SQLException) {}
results[https://github.com/moravianlibrary/MEditor/blob/8989f119490abc8ce246cdfda06334ec62811929/editor-dao/src/main/java/cz/mzk/editor/server/DAO/ImageResolverDAOImpl.java][getItemDeleteStatement][1] = -> TRY {  -> TRY { -> deleteItemStmt=getConnection().prepareStatement(DELETE_ITEM_STATEMENT,)@ -> deleteItemStmt.setString(1,identifier,)@ } CATCH(SQLException) { -> LOGGER.error("Could not get delete item statement "+deleteItemStmt,ex,)@ } } CATCH(DatabaseException) {}
results[https://github.com/CoderSpotting/pam-mysql-webadmin/blob/3ffa54052e14997643120c13c18a115add61331b/src/main/java/coderspotting/pam/mysql/admin/db/UserDao.java][changePassword][1] = -> cryptPassword=Sha2Crypt.sha512Crypt(password.getBytes(),)@ -> TRY { -> TRY { -> prepStmt.setString(1,cryptPassword,)@ -> prepStmt.setInt(2,uid,)@ -> prepStmt.execute()@ } } CATCH(SQLException) { -> logger.error(ex,)@ }
results[https://github.com/trygvis/daucus/blob/e0433a61af4e1b9796cee8f095486fec85eb136f/src/main/java/io/trygvis/esper/testing/jenkins/JenkinsDao.java][selectUser][1] = -> TRY {  -> TRY { -> s.setString(i,uuid.toString(),)@ -> return fromRs(s.executeQuery(),).map(jenkinsUser,)@ } } CATCH(SQLException) {}
results[https://github.com/BaseballCardTracker/bbct/blob/f2dbf1274ef111257f32bb7c8b74a33cc836f8ed/src/bbct/data/BaseballCardJDBCIO.java][getBaseballCardsByPlayerName][1] = -> TRY {  -> TRY { -> stmt=this.conn.prepareStatement(sqlQuery,)@ -> stmt.setString(1,playerName,)@ -> rs=stmt.executeQuery()@ } CATCH(SQLException) { -> throw new BBCTIOException(ex,)@ } } CATCH(BBCTIOException) {}
results[https://github.com/khreenberg/my-tunes/blob/6b860a827a5c53b6c935ea51a73799bd8e23fa62/src/dal/DBManager.java][getArtistByName][1] = -> TRY {  -> TRY { -> ps=con.prepareStatement(sql,)@ -> ps.setString(1,artistName,)@ -> rs=ps.executeQuery()@ -> IF { -> return new Artist(id,name,)@rs.next() } } } CATCH(SQLException) {}
results[https://github.com/arenger/hilas/blob/d17cfc11657f7cf2cb5e96eae40b959bfc440a6f/src/main/java/edu/uccs/arenger/hilas/dal/Css.java][get][1] = -> TRY {  -> TRY { -> ps.setString(1,Util.md5(content,),)@ -> rs=ps.executeQuery()@ } CATCH(SQLException) { -> throw new DalException(e,)@ } } CATCH(DalException) {}
