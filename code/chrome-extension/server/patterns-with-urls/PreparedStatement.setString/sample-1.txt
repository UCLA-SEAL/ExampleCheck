results[https://github.com/xtnm/Aion-Unique-API-Server/blob/d180acd2bb90f19f797a6d832d5138355dc6e4a4/AE-go_GameServer/data/scripts/system/database/mysql5/MySQL5LegionMemberDAO.java][setParams][214] = -> TRY {  -> stmt.setString(1,playerName,)@ } CATCH(SQLException) {}
results[https://github.com/chenillekit/chenillekit/blob/1b1b6a48c50d93461831295e421e8b6d41a99a72/chenillekit-hibernate/src/main/java/org/chenillekit/hibernate/types/RTrimStringType.java][nullSafeSet][4] = -> TRY {  -> st.setString(index,(String) value,)@ } CATCH(HibernateException,SQLException) {}
results[https://github.com/segasai/SAI-CAS/blob/57fd594e72c6d8d6c11ae2cd7ccbca2dab67351a/src/sai_cas/db/DBInterface.java][set][1] = -> TRY {  -> pstmt.setString(i,value,)@ } CATCH(java.sql.SQLException) {}
results[https://github.com/NowBaseline/nebula/blob/76fffc03c61ad12688023a428e93415eae7886a7/nebula-engine/src/main/java/nebula/data/db/BasicTypeAdapter.java][writeTo][6] = -> TRY {  -> res.setString(index,(String) v,)@ } CATCH(Exception) {}
results[https://github.com/xwiki-contrib/retired/blob/4806730b62c64f03d9f9e705bf774196db6d97f1/xunit/src/xunit/database/datatypes/StringDataType.java][setSqlValue][1] = -> TRY {  -> statement.setString(column,(String) typeCast(value,),)@ } CATCH(TypeCastException,SQLException) {}
results[https://github.com/oxhead/decoupled-hadoop/blob/fda683bf06f52e3c0999fec65d994f9f74fb3c50/hadoop-mapreduce/src/examples/org/apache/hadoop/examples/DBCountPageView.java][write][80] = -> TRY {  -> statement.setString(1,url,)@ -> statement.setLong(2,pageview,)@ } CATCH(SQLException) {}
results[https://github.com/vladsdisciples/3f00project/blob/080da9d529be4d1cea54d0257c1fd37fc39a6456/Derby Example Programs/scores/java/client/org/apache/derbyDemo/scores/data/Data.java][getKeyFinder][12] = -> TRY {  -> ps=Utils.prepare(conn,"select testID from Test where testName = ?",)@ -> ps.setString(1,_testName,)@ } CATCH(SQLException) {}
results[https://github.com/adrianfish/clog/blob/2b8460ecb6a359b5e297cf6af37601f31f4ad700/impl/src/java/org/sakaiproject/clog/impl/sql/SQLGenerator.java][getDeleteAutosavedCopyStatement][5] = -> TRY {  -> st=connection.prepareStatement("DELETE FROM "+TABLE_AUTOSAVED_POST+" WHERE "+POST_ID+" = ?",)@ -> st.setString(1,postId,)@ } CATCH(Exception) {}
results[https://github.com/progutvikling/picture-browser/blob/13c267fc14f07405b1f8f4ec63dd4f258b797b51/src/main/java/dal/admin/ConfigsStore.java][getConfig][2] = -> TRY { -> statement.setString(1,name,)@ } CATCH(SQLException) { -> e.printStackTrace()@ }
results[https://github.com/leth/ng4j/blob/081d8e9b5314686b13c9d76f01004ba0b2e769cf/src/de/fuberlin/wiwiss/ng4j/db/QuadDB.java][setSubjectColumn][1] = -> TRY {  -> statement.setString(SUBJECT_INDEX,resourceAsSqlString(subject,),)@ } CATCH(SQLException) {}
results[https://github.com/SIB-Colombia/sib-dataportal/blob/90bf0799cc1a20941b0ff34d361ef3abd5ea04c8/portal-index/src/main/java/org/gbif/portal/dao/impl/jdbc/RawIdentifierDAOImpl.java][setValues][1] = -> TRY {  -> ps.setString(1,identifiers.get(index,),)@ } CATCH(SQLException) {}
results[https://github.com/gyulanemeth/ITK-Stock/blob/48197c5ee05aeba9838cb016999359bd9969e096/src/hu/ppke/itk/itkStock/dbaccess/UserManager.java][removeUser][7] = -> TRY {  -> this.removeUser.setString(1,username,)@ -> this.removeUser.executeUpdate()@ } CATCH(SQLException) {}
results[https://github.com/utgenome/utgb/blob/32d35f3e65789ef68808f42099c8bc4ad90d887e/utgb-core/src/main/java/org/utgenome/format/wig/WIGDatabaseGenerator.java][readBrowserLine][1] = -> TRY {  -> p1.setString(1,line,)@ -> p1.execute()@ } CATCH(SQLException) {}
results[https://github.com/geotools/geotools/blob/f97d4fca552fb1c5c3bb7acbaac81ded276c2be2/modules/library/jdbc/src/main/java/org/geotools/sql/SqlUtil.java][set][1] = -> TRY {  -> log(s,)@ -> ps.setString(++pos,s,)@ } CATCH(SQLException) {}
results[https://github.com/obiba/magma/blob/a0fb541a3829b2886bf9ed5ce8e1b04fbc219ba2/hibernate/hibernate-common/src/main/java/org/obiba/magma/hibernate/type/ValueTypeHibernateType.java][set][9] = -> TRY {  -> st.setString(index,toString(value,),)@ } CATCH(HibernateException,SQLException) {}
results[https://github.com/Activiti/Activiti/blob/7cbcbdcaab15d0a8db3a9ec301ae67460e87479b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/db/IbatisVariableTypeHandler.java][setParameter][32] = -> TRY {  -> typeName=(Type) parameter.getTypeName()@ -> ps.setString(i,typeName,)@ } CATCH(SQLException) {}
results[https://github.com/obiba/magma/blob/b7d8c6f7b47dd0d50820a7083f223930aa49de00/magma-datasource-hibernate/src/main/java/org/obiba/magma/datasource/hibernate/type/ValueTypeHibernateType.java][set][1] = -> TRY {  -> st.setString(index,toString(value,),)@ } CATCH(HibernateException,SQLException) {}
results[https://github.com/Qi4j/qi4j-sdk/blob/dc2d52200a4333de13580cc7fb29df2ef02a6627/extensions/entitystore-sql/src/main/java/org/qi4j/entitystore/sql/database/AbstractDatabaseService.java][prepareRemoveEntityStatement][37] = -> TRY {  -> removeEntity=connection.prepareStatement(SQLUtil.REMOVE_STATE_SQL,)@ -> removeEntity.setString(1,identity,)@ } CATCH(SQLException) {}
results[https://github.com/Union-Investment/Crud2Go/blob/19b8b43852b1b8c379d520dd7bc5b8b052473767/eai-portal-webapp-administration/src/main/java/de/unioninvestment/eai/portal/portlet/crud/persistence/MySQLConfigurationDao.java][createPreparedStatement][1] = -> TRY {  -> stmt=con.prepareStatement("INSERT INTO RESOURCEID_PRIMKEY (RESOURCEID) values (?)",Statement.RETURN_GENERATED_KEYS,)@ -> stmt.setString(1,resourceId,)@ } CATCH(SQLException) {}
results[https://github.com/openmrs/openmrs-module-reporting/blob/7e8fe88fdc3088cbf3a47ceb0662c09db28799b6/api/src/main/java/org/openmrs/module/reporting/report/service/db/ReportDefinitionType.java][nullSafeSet][1] = -> TRY {  -> val=(d==null)?null:d.getUuid()@ -> st.setString(index,val,)@ } CATCH(HibernateException,SQLException) {}
results[https://github.com/UWCS/choob/blob/ccfe86441930d8e69c0322082e42f69999b91522/src/main/plugins-alpha/Mood.java][exec][24] = -> TRY {  -> s.setString(3,textLike,)@ -> u=s.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/patrickvane/my_java_library/blob/dd7751bc525015c5392d1d45fd9f17f357a03117/01a. My Common Objects/mylib/My_Database_Connection_Pool/MyConnection.java][doesTableExist][7] = -> TRY {  -> statementDoesTableExist.setString(1,table,)@ -> result=openResultSet(statementDoesTableExist,)@ } CATCH(Exception) {}
results[https://github.com/drepshas/hib-core/blob/d8d6d82e30960e0c255950eaf875ad48831b12b0/code/core/src/main/java/org/hibernate/type/CharacterType.java][set][23] = -> TRY {  -> st.setString(index,value.toString(),)@ } CATCH(SQLException) {}
results[https://github.com/jdbc-bare/spring-jdbc-bare/blob/ee9b9d6a5757371b64cfd5ac062a7f58a6e6ed7f/org.springframework.jdbc/src/test/java/org/springframework/jdbc/core/StatementCreatorUtilsTests.java][testSetParameterValueWithStringAndUnknownType][18] = -> TRY {  -> ps.setString(1,"test",)@ -> StatementCreatorUtils.setParameterValue(ps,1,SqlTypeValue.TYPE_UNKNOWN,null,"test",)@ } CATCH(SQLException) {}
results[https://github.com/yudis/h2database/blob/bbbd03bbec22ce2fe58ce3872ae01e2168b99b31/h2/src/test/org/h2/test/db/Db.java][set][8] = -> TRY { -> prep.setString(++index,x,)@ } CATCH(SQLException) { -> throw convert(e,)@ }
results[https://github.com/leth/ng4j/blob/3997a55309a0219c71cde37f167f378f3cfc1753/src/de/fuberlin/wiwiss/ng4j/db/specific/DbCompatibility.java][getDeleteGraphStmt][5] = -> TRY {  -> deleteGraphStmt.setString(1,graphName.getURI(),)@ } CATCH(SQLException) {}
results[https://github.com/ElrondEru/Aion-Energy-Life-/blob/fd73c6aaf4da68108eab6d3994b34702288826fb/AL-Login/data/scripts/system/database/mysql5/MySQL5BannedIpDAO.java][setParams][4] = -> TRY {  -> preparedStatement.setString(1,bannedIP.getMask(),)@ } CATCH(SQLException) {}
results[https://github.com/teoware/refapp/blob/0946d80bf80ea5282764ce760477111919a593ce/code/refapp-infrastructure-dao/src/main/java/com/teoware/refapp/dao/util/Converters.java][setParam][3] = -> TRY {  -> statement.setString(index,convert(param,),)@ } CATCH(SQLException) {}
results[https://github.com/camptocamp/cartoweb3/blob/c98b4252861c18205f39c328ac80a9b1768e6c8f/scripts/stats/src/main/java/org/cartoweb/stats/report/filter/LayerFilter.java][setupStatement][2] = -> TRY {  -> stmt.setString(1,cur.replace('*','%',),)@ } CATCH(SQLException) {}
results[https://github.com/mayocat/mayocat-shop/blob/198879043dbb2d301ad9c420a072643ab6074d42/shop/billing/internal/src/main/java/org/mayocat/shop/billing/store/jdbi/argument/CurrencyAsCurrencyCodeArgumentFactory.java][apply][3] = -> TRY {  -> statement.setString(position,value.getCurrencyCode(),)@ } CATCH(SQLException) {}
results[https://github.com/gakuzzzz/doma/blob/adfb7631b1e497ae506d17b2a78cec0f247e50ab/doma/src/main/java/org/seasar/doma/jdbc/type/EnumType.java][doSetValue][3] = -> TRY {  -> preparedStatement.setString(index,value.name(),)@ } CATCH(SQLException) {}
results[https://github.com/makkus/infosystems/blob/054fd9d24cda8f0c9ee4835c55cfcc0d40adadf5/mysql-mds/src/main/java/org/bestgrid/mds/SQLQueryClient.java][setString][4] = -> TRY { -> s.setString(i,string,)@ } CATCH(SQLException) { -> throw new RuntimeException(ex,)@ }
results[https://github.com/hibernate/hibernate-orm/blob/219707df1d85596af9fda12cbb7a65c612d71bba/hibernate-core/src/main/java/org/hibernate/type/descriptor/sql/VarcharTypeDescriptor.java][doBind][17] = -> TRY {  -> st.setString(index,javaTypeDescriptor.unwrap(value,String.class,options,),)@ } CATCH(SQLException) {}
results[https://github.com/hibernate/hibernate-orm/blob/d8d6d82e30960e0c255950eaf875ad48831b12b0/code/core/src/main/java/org/hibernate/type/CharBooleanType.java][set][5] = -> TRY {  -> st.setString(index,toCharacter(value,),)@ } CATCH(SQLException) {}
results[https://github.com/Qi4j/qi4j-sdk/blob/6dfd102acfe9cd22bfdf0e3771265d0d37be3398/extensions/entitystore-sql/src/main/java/org/qi4j/entitystore/sql/database/DatabaseSQLServiceStatementsMixin.java][populateGetEntityStatement][5] = -> TRY {  -> ps.setString(1,ref.identity(),)@ } CATCH(SQLException) {}
results[https://github.com/roman-himself/MyActiviti/blob/6f30c8eca8ddd3701471cefa44dbe881a0616053/modules/activiti-upgrade/src/test/java/org/activiti/upgrade/ProxyStatement.java][setString][14] = -> TRY {  -> parameters.put(parameterIndex,"'"+x+"'",)@ -> preparedStatement.setString(parameterIndex,x,)@ } CATCH(SQLException) {}
results[https://github.com/k0fis/kfsWfl/blob/b37c73df6893dec3e8f767754fdb3e839f5c1ebe/src/main/java/kfs/kfsDbi/kfsString.java][setParam][2] = -> TRY {  -> ps.setString(inx,getString(data,),)@ } CATCH(SQLException) {}
results[https://github.com/harvimt/Group9_CS300_Project/blob/ad0dd3fb3168030e0ca26dbef0d1c3e6a7e9d5d0/src/pdx/edu/cs300_group9/Provider.java][getProviders][1] = -> TRY {  -> search_stmt.setString(1,partial_provider_name,)@ -> rs=search_stmt.executeQuery()@ } CATCH(Exception) {}
results[https://github.com/mayocat/mayocat-shop/blob/ea8f830900d84287e263af7a7a8173885c960aa7/shop/shipping/src/main/java/org/mayocat/shop/shipping/store/jdbi/argument/StrategyArgumentFactory.java][apply][2] = -> TRY {  -> statement.setString(position,value.toJson(),)@ } CATCH(SQLException) {}
results[https://github.com/enonic/cms-ce/blob/04f905b4ec315fb93c87000bea71026cf70c5ec9/modules/cms-core/src/main/java/com/enonic/cms/store/hibernate/type/PreferenceKeyUserType.java][set][3] = -> TRY {  -> st.setString(index,value.toString(),)@ } CATCH(HibernateException,SQLException) {}
results[https://github.com/cyounes/jmbs/blob/ab6545578a7bb7c14498449eb470ef1544d153f1/jmbs_maven/Server/src/main/java/jmbs/server/DAO.java][setString][3] = -> TRY { -> stmt.setString(index,s,)@ } CATCH(SQLException) { -> System.err.println("Unable to set string: \""+s+"\"",)@ }
results[https://github.com/ebean-orm/avaje-ebeanorm/blob/7aae897def16ec72ab474bbd433ad988c25752cf/src/main/java/com/avaje/ebeaninternal/server/type/DataBind.java][setChar][1] = -> TRY {  -> pstmt.setString(++pos,String.valueOf(v,),)@ } CATCH(SQLException) {}
results[https://github.com/specify/specify/blob/7664035c3c35b0441a45c12f5135c8c68f36e13e/src/edu/ku/brc/specify/tasks/CleanupToolsTask.java][setColumn][2] = -> TRY {  -> pStmt.setString(inx,(StringUtils.isNotEmpty(str,))?str:null,)@ } CATCH(SQLException) {}
results[https://github.com/roman-himself/MyActiviti/blob/8b2d307ad4657983dd90ae6d97c6e57431f96d52/modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/ByteArrayRefTypeHandler.java][setParameter][2] = -> TRY {  -> ps.setString(i,getValueToSet(parameter,),)@ } CATCH(SQLException) {}
results[https://github.com/janaz/play2_tutorial_app/blob/4d51be03f70f722ceefd08ba5a9a371422315fe2/app/com/neutrino/data_loader/PrecoreDataLoader.java][setup][1] = -> TRY {  -> pstmt.setLong(1,10,)@ -> pstmt.setString(2,"blah",)@ } CATCH(SQLException) {}
results[https://github.com/nBdde/l2jserver/blob/57967c7939f82a6eccd3fc6bcef5ada3d4dea214/L2J_Server/java/com/l2jserver/loginserver/mail/BaseMail.java][getUserMail][3] = -> TRY { -> statement.setString(1,username,)@ } CATCH(Exception) { -> _log.warning("Cannot select user mail: Exception",)@ }
results[https://github.com/djspiewak/activeobjects/blob/5fd579750cd3b535eec60ff8136319b2b53ad908/ActiveObjects/test/net/java/ao/types/ClassType.java][putToDatabase][3] = -> TRY {  -> stmt.setString(index,value.getName(),)@ } CATCH(SQLException) {}
results[https://github.com/mybatis/mybatis-3/blob/16360092170cdcdd0cf925a8cc04f5edd9e12b34/src/test/java/org/apache/ibatis/submitted/typehandler/StringTrimmingTypeHandler.java][setParameter][1] = -> TRY {  -> ps.setString(i,trim(parameter,),)@ } CATCH(SQLException) {}
results[https://github.com/gridengine/arco/blob/9205d4d4dbdee6cc331b85b54120a8992c64e658/source/dbwriter/src/com/sun/grid/reporting/dbwriter/db/StringField.java][setValueForPSTM][4] = -> TRY {  -> pstm.setString(index,this.getValue(),)@ } CATCH(SQLException) {}
results[https://github.com/amegginson/jbpm-bpel-ftl/blob/934bd77e927be1b401048f1f86114e6e6f504c1f/modules/jpdl/core/src/main/java/org/jbpm/db/hibernate/ConverterEnumType.java][nullSafeSet][2] = -> TRY {  -> converterDatabaseId=Converters.getConverterId((Converter) value,)@ -> preparedStatement.setString(index,converterDatabaseId,)@ } CATCH(HibernateException,SQLException) {}
results[https://github.com/repshak/BeeQueue/blob/f8c895b38c24870834619cbe5a13bdd0e3801e50/src/org/beequeue/sql/SqlConstants.java][invoke][3] = -> TRY {  -> pstmt.setString(idx.next(),input,)@ } CATCH(SQLException) {}
results[https://github.com/mbezjak/vhdllab/blob/6334128fcfec62eaf438d6bcdffa92baba97c9e6/vhdllab-server/src/test/java/hr/fer/zemris/vhdllab/dao/impl/AbstractEntityDaoTest.java][doInPreparedStatement][1] = -> TRY {  -> ps.setString(1,name,)@ -> return ps.execute()@ } CATCH(SQLException,DataAccessException) {}
results[https://github.com/jOOQ/jOOQ/blob/316916d37b9013115827681a91ee87c95c04e678/jOOQ-sql-console/src/org/jooq/debugger/UsageTrackingPreparedStatement.java][setString][1] = -> TRY {  -> stmt.setString(parameterIndex,x,)@ -> logValue(parameterIndex,(x==null)?null:'"'+x+'"',)@ } CATCH(SQLException) {}
results[https://github.com/mperdikeas/playground/blob/1ec5d7849855d3757de40335fe02d9c75687fb35/java/batch-update-tests/04/loader/src/Table_I_Inserter.java][work][2] = -> TRY {  -> s.setInt(1,row.i,)@ -> s.setString(2,row.s,)@ } CATCH(SQLException) {}
results[https://github.com/anagri/SmartPool/blob/a743127440244156c4967264466dd0554ce97365/src/smartpool/data/typeHandler/BuddyTypeHandler.java][setParameter][1] = -> TRY {  -> ps.setString(i,(parameter==null)?null:parameter.getUserName(),)@ } CATCH(SQLException) {}
results[https://github.com/oobium/framework/blob/8df615b1e5cb6946b64487c758ea9753d65bf809/org.oobium.persist.db/src/org/oobium/persist/db/internal/LoggingPreparedStatement.java][setString][1] = -> TRY {  -> connection.writeln("-setString("+parameterIndex+", "+x+")",)@ -> statement.setString(parameterIndex,x,)@ } CATCH(SQLException) {}
results[https://github.com/idega/com.idega.core/blob/748a822f288335a66c92264db6b1d8bc69092acc/src/java/com/idega/data/DatastoreInterface.java][setStringForPreparedStatement][1] = -> TRY {  -> statement.setString(index,entity.getStringColumnValue(columnName,),)@ } CATCH(SQLException) {}
results[https://github.com/apache/derby/blob/f668d94de58a55f31318cfe288b5d57ec9b5d8d2/java/engine/org/apache/derby/iapi/types/SQLChar.java][setInto][1] = -> TRY {  -> ps.setString(position,getString(),)@ } CATCH(SQLException,StandardException) {}
results[https://github.com/mybatis/generator/blob/5a12e01ce8969a5a785c1ff0c28f7c918696b4ae/core/mybatis-generator-systests-mybatis3/src/main/java/mbg/test/mb3/common/StringBooleanTypeHandler.java][setParameter][1] = -> TRY {  -> s=(parameter==null)?"N":(parameter.booleanValue())?"Y":"N"@ -> ps.setString(columnIndex,s,)@ } CATCH(SQLException) {}
results[https://github.com/kimchy/compass/blob/fc151a168682e373b81f06535011855a8927fd01/src/main/src/org/apache/lucene/store/jdbc/index/FetchOnOpenJdbcIndexInput.java][fillPrepareStatement][1] = -> TRY {  -> ps.setFetchSize(1,)@ -> ps.setString(1,name,)@ } CATCH(Exception) {}
results[https://github.com/openmrs/openmrs-module-reporting/blob/89410d0804581192ec96f59819c01b5388ed36e0/api/src/main/java/org/openmrs/module/reporting/report/service/db/PropertiesType.java][nullSafeSet][1] = -> TRY {  -> val=(String) disassemble(value,)@ -> st.setString(index,val,)@ } CATCH(HibernateException,SQLException) {}
results[https://github.com/binwiederhier/syncany/blob/3f58c1e7d1c4b105c3fac62c17fe3449593491db/syncany-lib/src/main/java/org/syncany/database/dao/FileHistorySqlDao.java][getFileHistoriesWithLastVersionByChecksum][1] = -> TRY { -> preparedStatement.setString(1,fileContentChecksum.toString(),)@ } CATCH(SQLException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/anycook/anycook-api/blob/0d3f4b119aba15e1907581efd04d9469bcf8e038/src/main/java/de/anycook/db/mysql/DBUser.java][deleteCookieId][4] = -> TRY {  -> pStatement=connection.prepareStatement("DELETE FROM permanent_cookies WHERE id = ?",)@ -> pStatement.setString(1,id,)@ -> pStatement.executeUpdate()@ } CATCH(SQLException) {}
results[https://github.com/ttasterisco/malleterisk/blob/2fecb05fb3f684f6bb17c0e70784fbc10bc6ddc7/src/main/java/data/loader/db/DbDataAccess.java][getEmailParticipant][18] = -> TRY {  -> ps=c.prepareStatement(sql,)@ -> ps.setString(1,participantAddress,)@ -> rs=ps.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/cubing/tnoodle/blob/0f98ba7d463830760a6e76edd683d729035d9350/server/Test.java][main][2] = -> TRY {  -> ps=conn.prepareStatement("INSERT INTO Test (name) VALUES(?)",)@ -> ps.setString(1,"Jeremy Fleischman",)@ -> ps.executeUpdate()@ } CATCH(Exception) {}
results[https://github.com/mycase/webdebate/blob/a8e8a19e6cd43924cef576fb39a7ae43d2273c23/src/portlet/docroot/WEB-INF/src/com/arguments/functional/store/sql/ArgsDB.java][setString][1] = -> TRY { -> theQuery.setString(aKey,aValue,)@ } CATCH(SQLException) { -> throw new ArgsSQLStoreException("Can't set arguments ("+aKey+", "+aValue+") on query "+theFixedQuery,anException,)@ } -> theSqlArgumentMap.put(aKey,aValue,)@
results[https://github.com/charleso/naca/blob/83088533c2eed1c35e2fde3caa64293c55911ce6/NacaRT/src/nacaLib/sqlSupport/RecordColTypeManagerOther.java][transfer][1] = -> TRY { -> csValue=resultSetSource.getString(m_nColSourceIndex,)@ -> insertStatementInsert.setString(m_nColSourceIndex,csValue,)@ } CATCH(SQLException) { -> e.printStackTrace()@ }
results[https://github.com/repshak/BeeQueue/blob/ed18c626912f6c78503703e0b8e26a6d6e2a12a4/src/org/beequeue/shastore/ShaStoreQueries.java][invoke][1] = -> TRY {  -> pstmt.setString(idx.next(),input.toString(),)@ } CATCH(SQLException) {}
results[https://github.com/dustin/snippets/blob/3098f6a5b24578d42f8f5b2772a04d7d91addb05/java/servlet/dsservlet/net/spy/dsservlet/DSBean.java][list][2] = -> TRY {  -> pst=db.prepareStatement("select * from show_distribution\n"+"  where submitted_to=? order by submitted",)@ -> pst.setString(1,username,)@ -> rs=pst.executeQuery()@ } CATCH(Exception) {}
results[https://github.com/yukoff/concourse-connect/blob/c4bbb00bbf206bcb9ce8ecb6630e2de39edf64b2/src/main/java/com/concursive/connect/web/modules/login/dao/AuthenticationClassesLookupList.java][prepareFilter][1] = -> TRY {  -> IF { -> pst.setString(++i,this.loginMode,)@loginMode!=null } } CATCH(SQLException) {}
results[https://github.com/unitycoders/uc_pircbotx/blob/2c1e60989a9fde39db9e296278574f273aebaf25/src/main/java/uk/co/unitycoders/pircbotx/data/db/FactoidModel.java][getFactoid][2] = -> TRY {  -> readStmt.clearParameters()@ -> readStmt.setString(1,factoid,)@ -> rs=readStmt.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/bbcf/bbcfutils/blob/748aac3225373f34e7e228d2e45b3646ca0ec2a3/JAVA/src/ch/epfl/bbcf/bbcfutils/sqlite/SQLiteAccess.java][searchForGeneNameOnChromosome][1] = -> TRY {  -> prep=connection.prepareStatement(query,)@ -> prep.setString(1,name,)@ -> r=getResultSet(prep,query,)@ } CATCH(SQLException) {}
results[https://github.com/kraktos/DBPediaMapping/blob/9a094404af8d6f5cb318a4aca5b9d420b986b359/EntityLinker/src/de/dws/mapper/dbConnectivity/DBWrapper.java][findPerfectSubjectMatches][2] = -> TRY { -> getAllSubPredPrepStmnt.setString(1,pred,)@ -> rs=getAllSubPredPrepStmnt.executeQuery()@ } CATCH(SQLException) { -> e.printStackTrace()@ }
results[https://github.com/Minestar/ContaoTwo/blob/6dc5bb8e07c58041fd90be85ea842e0c6ef26d0f/src/main/java/de/minestar/contao2/manager/DatabaseManager.java][getContaoID][1] = -> TRY { -> selectContaoId.setString(1,"%"+username+"%",)@ -> result=selectContaoId.executeQuery()@ } CATCH(Exception) { -> ConsoleUtils.printException(e,Core.NAME,"Can't get ContaoID from tl_member! Username="+username,)@ }
results[https://github.com/tashiscool/spring/blob/6c4941bbc5cd63789a65b515e8363b62b08c456c/org.springframework.jdbc/src/test/java/org/springframework/jdbc/support/DefaultLobHandlerTests.java][testSetClobAsString][1] = -> TRY {  -> ps=(PreparedStatement) psControl.getMock()@ -> ps.setString(1,content,)@ -> lobCreator.setClobAsString(ps,1,content,)@ } CATCH(SQLException,IOException) {}
results[https://github.com/BandwidthOnDemand/bandwidth-on-demand/blob/f49583ec04a100dc4816cea038ad564b6f50702a/src/main/java/nl/surfnet/bod/util/JaxbUserType.java][nullSafeSet][1] = -> TRY {  -> string=toXmlString(type.cast(value,),)@ -> st.setString(index,string,)@ } CATCH(HibernateException,SQLException) {}
results[https://github.com/portaloffreedom/parcoDB/blob/65dbe98305d5b89663595aca098eed6aa51ef42b/src/parcodb/database/objects/Struttura.java][getStruttura][1] = -> TRY {  -> preparedStatement=conn.prepareQueryStatement("SELECT nome, indirizzo, orario_apertura, periodo_inizio, periodo_fine, localizzazione "+"FROM Struttura "+"WHERE nome = ? ",)@ -> preparedStatement.setString(1,nome,)@ -> result=preparedStatement.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/opentree/aionj-hungary/blob/96dbc5954ed14b8255beb590722763682ddad918/Login/data/scripts/system/database/mysql5/MySQL5AccountDAO.java][handleInsertUpdate][1] = -> TRY {  -> preparedStatement.setString(1,ip,)@ -> preparedStatement.setInt(2,accountId,)@ -> preparedStatement.execute()@ } CATCH(SQLException) {}
results[https://github.com/Ziktofel/L2J-Server-Ziktofel/blob/7d28e22b42b29e9fefbeea724976b6d8d9c1938b/java/com/l2jserver/gameserver/security/SecondaryPasswordAuth.java][loadPassword][1] = -> TRY { -> statement.setString(1,_activeClient.getAccountName(),)@ } CATCH(Exception) { -> _log.log(Level.SEVERE,"Error while reading password.",e,)@ }
results[https://github.com/Minestar/MineStarWarp/blob/dbafcfb70ecce5a1c15a343251816c3f481bf248/src/com/minestar/MineStarWarp/dataManager/DatabaseManager.java][deleteWarp][1] = -> TRY { -> deleteWarp.setString(1,name,)@ -> deleteWarp.executeUpdate()@ } CATCH(Exception) { -> Main.log.printError("Error removing warp from database!",e,)@ }
results[https://github.com/intalio/tempo/blob/a875e2a8d7a31e3f50da049af13e34b6b1f358a8/wds-service/src/main/java/org/intalio/tempo/workflow/wds/core/JdbcItemDaoConnection.java][itemExists][1] = -> TRY { -> _checkStatement.setString(1,uri,)@ -> resultSet=_checkStatement.executeQuery()@ } CATCH(SQLException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/sunsuk7tp/MyCassandra/blob/65568183bd3864bc8958fe96a8db2358a7550458/MyCassandra-0.2.0/src/java/org/apache/cassandra/db/engine/MySQLInstance.java][doUpdate][3] = -> TRY {  -> pstUpdate.setBytes(1,cfValue,)@ -> pstUpdate.setString(2,rowKey,)@ -> return pstUpdate.executeUpdate()@ } CATCH(SQLException) {}
results[https://github.com/majorProject/IAnnotate/blob/f94b80b5ab64c0f5595cf68d2f32031592d7c42d/src/iannotate/database/SqlQuery.java][delete][2] = -> TRY {  -> deletus=connection.prepareStatement("DELETE FROM user "+"WHERE username = ?",)@ -> deletus.setString(1,userName,)@ -> r=deletus.execute()@ } CATCH(SQLException) {}
results[https://github.com/groldan/geotools_trunk/blob/bc2a70262df86935ef948db0c4bc95220ab1065c/modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java][getDimensionsForMethod][1] = -> TRY {  -> stmt=prepareStatement("MethodDimensions","SELECT SOURCE_CRS_CODE,"+" TARGET_CRS_CODE"+" FROM [Coordinate_Operation]"+" WHERE COORD_OP_METHOD_CODE = ?"+" AND SOURCE_CRS_CODE IS NOT NULL"+" AND TARGET_CRS_CODE IS NOT NULL",)@ -> stmt.setString(1,code,)@ -> result=stmt.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/Aldeon/Aldeon/blob/4173391b42ffb0c6058a81135765a5b8fb208978/src/main/java/org/aldeon/db/DbImpl.java][setIdentifiableInPreparedStatement][1] = -> TRY {  -> preparedStatement.setString(parameterIndex,hex.encode(byteSource.getByteBuffer(),),)@ } CATCH(SQLException) {}
results[https://github.com/projectrsc/ProjectRSC/blob/be9e2e1854a0e4b93816e52712c9fe37ff7dfc39/ProjectRSC/Development/Server/src/org/darkquest/gs/db/query/StaffLog.java][prepareStatement][1] = -> TRY {  -> statement=connection.prepareStatement(query,)@ -> statement.setString(1,message,)@ -> statement.setLong(2,time,)@ } CATCH(SQLException) {}
results[https://github.com/reshet/NCLodger/blob/14c02e9c0e89f854f0b49b4a908a8c00a3964a11/src/main/java/com/nclodger/dao/SMDao.java][doMethod][1] = -> TRY {  -> prep=dataBase.prepareStatement("SELECT ID_SM FROM MANAGER WHERE MANAGER.ID_USER IN"+"(SELECT ID_USER FROM USERS WHERE USERS.EMAIL = ?)",)@ -> prep.setString(1,email,)@ -> res=prep.executeQuery()@ } CATCH(SQLException,MyException) {}
results[https://github.com/harvimt/Group9_CS300_Project/blob/ec8a0ea4ceef902090db883246e08a77a1a84bbc/src/entity/Service.java][getServices][1] = -> TRY {  -> partial_name=partial_name.replaceAll("[?%!]","!$0",)@ -> search_stmt.setString(1,partial_name,)@ -> rs=search_stmt.executeQuery()@ } CATCH(Exception) {}
results[https://github.com/floralvikings/jenjin/blob/35b558aefb6facd7d78222fb0abce59801be92ca/jgsf/src/main/java/com/jenjinstudios/sql/SQLHandler.java][makeUserQuery][1] = -> TRY {  -> statement=dbConnection.prepareStatement(USER_QUERY,TYPE_SCROLL_SENSITIVE,CONCUR_UPDATABLE,)@ -> statement.setString(1,username,)@ -> return statement.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/bella24988/guanabana-store/blob/094a6a67bd89be4f33bad97ad3749ca1f3d63e8a/guanabana/src/server/DataBase.java][aggiornaStatoOrdine][1] = -> TRY {  -> stAggiornaStatoOrdine.setString(1,stato,)@ -> stAggiornaStatoOrdine.setInt(2,numeroOrdine,)@ -> stAggiornaStatoOrdine.executeUpdate()@ } CATCH(SQLException) {}
results[https://github.com/forcedotcom/phoenix/blob/b05bfc9d8c83a51698a639108d8e8244f796e5cf/phoenix-core/src/test/java/com/salesforce/phoenix/compile/QueryMetaDataTest.java][testStringConcatMetaData][1] = -> TRY {  -> statement=conn.prepareStatement(query,)@ -> statement.setString(1,"foo",)@ -> pmd=statement.getParameterMetaData()@ } CATCH(Exception) {}
results[https://github.com/intalio/tempo/blob/b1994bceecd2918b484ea729ef265de87dd2eb06/wds-service/src/main/java/org/intalio/tempo/workflow/wds/core/tms/TMSConnection.java][deletePipaTask][1] = -> TRY { -> _deletePipaTaskStatement.setString(1,formUrl,)@ -> _deletePipaTaskStatement.execute()@ } CATCH(SQLException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/moravianlibrary/xcncip2toolkit/blob/fa44579901caa05be0733c26c22167add0023de9/connectors/voyager/7.2/trunk/voyager/jar/src/main/java/org/extensiblecatalog/ncip/v2/voyager/VoyagerRemoteServiceManager.java][getBibIdForItemId][1] = -> TRY { -> pstmt.setString(1,itemId,)@ -> rs=pstmt.executeQuery()@ } CATCH(SQLException) { -> log.error("An SQL Exception error occurred while getting "+"the bibliographic Id from the database.",e,)@ }
results[https://github.com/desruisseaux/geotoolkit/blob/5253fb1b862ba024ec3135d3395e717aafb61fc8/modules/coverage/geotk-coverage-sql/src/main/java/org/geotoolkit/coverage/sql/TileTable.java][exists][1] = -> TRY {  -> statement.setString(indexOf(query.byLayer,),layer.getName(),)@ } CATCH(SQLException) {}
results[https://github.com/Containing/Containing-Core/blob/b720e31bbaceef3fb0dda04e21b45b69351a08df/src/Vehicles/GenerateDepartureVehicles.java][getWidthHeight][1] = -> TRY {  -> stm=Database.createPreparedStatement(query,)@ -> stm.setString(1,kindSchip,)@ -> getBoats=Database.executeQuery(stm,)@ } CATCH(Exception) {}
results[https://github.com/fqntxmqee/webframe/blob/54461322a531478ff490e11397eb2e3989158709/wf-web-page/src/main/java/org/webframe/web/page/adapter/jdbc/util/setter/SasDateSetter.java][set][1] = -> TRY {  -> date=formatter.parse((String) value,)@ -> query.setString(++index,sasFormatter.format(date,),)@ } CATCH(SQLException,ParseException) {}
results[https://github.com/triceo/SchedVis/blob/5ed1b3529c5e3861a1713f17b3f4f9d2ffd7b79a/src/cz/muni/fi/spc/SchedVis/model/entities/Group.java][getIdWithName][1] = -> TRY { -> stmt=Entity.getStatement("SELECT id_machine_groups FROM machine_groups WHERE name = ?",)@ -> stmt.setString(1,name,)@ -> rs=stmt.executeQuery()@ } ELSE { -> return Entity.INVALID_KEY_VALUE@!(rs.first()) }
results[https://github.com/hibernate/hibernate-orm/blob/4ad49a02c9058831e2652e84de722220335b2780/hibernate-core/src/test/java/org/hibernate/test/jdbc/proxies/BatchingTest.java][testNonBatchingUsage][1] = -> TRY {  -> insert=insertBatch.getBatchStatement(insertSql,false,)@ -> insert.setLong(1,1,)@ -> insert.setString(2,"name",)@ } CATCH(Exception) {}
results[https://github.com/Rauks/Brutes/blob/0710d7528890236b54f750e8881c0b9a3d1eac8d/src/brutes/server/db/entity/UserEntity.java][findByToken][1] = -> TRY {  -> psql=DatasManager.prepare("SELECT * FROM Users WHERE token = ?",)@ -> psql.setString(1,token,)@ -> rs=psql.executeQuery()@ } CATCH(IOException,SQLException) {}
results[https://github.com/samtingleff/valkyrie/blob/dacabadac29ce201a21f5b79faca1817c2a44598/src/main/java/com/othersonline/kv/backends/sql/DefaultJdbcDAO.java][prepareExists][1] = -> TRY {  -> ps=conn.prepareStatement(String.format("select %1$s from %2$s where %1$s = ?",keyField,table,),)@ -> ps.setString(1,key,)@ } CATCH(SQLException) {}
