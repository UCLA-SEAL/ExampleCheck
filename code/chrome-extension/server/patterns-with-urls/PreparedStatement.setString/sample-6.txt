results[https://github.com/adempiere/adempiere/blob/fe6b581479527f51a8701719ad7cc50ef5cc43fa/dbPort/src/org/compiere/model/MTable.java][getTable_ID][2] = -> TRY { -> pstmt=DB.prepareStatement(SQL,null,)@ -> pstmt.setString(1,tableName,)@ -> rs=pstmt.executeQuery()@ -> pstmt.close()@ }
results[https://github.com/seanhodges/Tesla/blob/0b4f109395d4ede4a4aa7f3b1d0193e5f1eab48e/src/net/roarsoftware/lastfm/cache/DatabaseCache.java][remove][6] = -> TRY { -> stmt=conn.prepareStatement("DELETE FROM "+TABLE_NAME+" WHERE key = ?;",)@ -> stmt.setString(1,cacheEntryName,)@ -> stmt.execute()@ -> stmt.close()@ }
results[https://github.com/Snorremd/AndroidInfo331/blob/d6290299d2bb308eb727129cd426b22b6796def6/GeoMusic/src/de/umass/lastfm/cache/DatabaseCache.java][contains][6] = -> TRY { -> stmt=connection.prepareStatement("SELECT id FROM "+tableName+" WHERE id = ?",)@ -> stmt.setString(1,cacheEntryName,)@ -> result=stmt.executeQuery()@ -> stmt.close()@ }
results[https://github.com/jfbulanadi/external-tempoplus/blob/c524d76220b39ffaf71e01aa2149be34c4081218/src/main/java/hk/com/novare/tempoplus/bmnmanager/timesheet/TimesheetDao.java][updateMantisTimesheetRecord][3] = -> TRY { -> preparedStatement=connection.prepareStatement("UPDATE timesheets SET mantisId = 1 WHERE description = ?",)@ -> preparedStatement.setString(1,description,)@ -> preparedStatement.executeUpdate()@ -> preparedStatement.close()@ }
results[https://github.com/dryade/chouette/blob/67beb39441784fc2a420ce2da67d240ba4511380/chouette-exchange-gtfs/src/main/java/fr/certu/chouette/exchange/gtfs/model/neptune/DbVehicleJourneyFactory.java][deleteVehicleJourney][3] = -> TRY { -> stmt=conn.prepareStatement(deleteSql,)@ -> stmt.setString(1,vj.getObjectId(),)@ -> stmt.execute()@ -> stmt.close()@ }
results[https://github.com/conan513/MoopleDEV/blob/b47a73146dae30c992aa957ea870fccc6daa80fa/src/net/server/channel/handlers/CouponCodeHandler.java][getNXCode][8] = -> TRY { -> ps=DatabaseConnection.getConnection().prepareStatement("SELECT `"+type+"` FROM nxcode WHERE code = ?",)@ -> ps.setString(1,code,)@ -> rs=ps.executeQuery()@ -> ps.close()@ }
results[https://github.com/mixxit/npcx/blob/90ec89ff3922dd2f28a2ab4c4fcd1d70048edc2c/src/net/gamerservices/npcx/myUniverse.java][hasResearchInProgress][2] = -> TRY { -> s1=conn.prepareStatement(sql,)@ -> s1.setString(2,playername,)@ -> s1.setInt(1,researchid,)@ -> rs1=s1.executeQuery()@ -> s1.close()@ }
results[https://github.com/apache/aries/blob/628add49463cd394c77ffa1b7c9e4b04d4f8f333/daytrader-sample/modules/daytrader-persist-jdbc/src/main/java/org/apache/geronimo/samples/daytrader/persist/jdbc/TradeJDBCDirect.java][getAccountProfileData][32] = -> TRY {  -> stmt=getStatement(conn,getAccountProfileSQL,)@ -> stmt.setString(1,userID,)@ -> rs=stmt.executeQuery()@ -> stmt.close()@ } CATCH(Exception) {}
results[https://github.com/apache/derby/blob/431cbeb5320ced59a4b24b4bfbaffd7b56d396d9/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java][routineExists][9] = -> TRY {  -> ps=chattyPrepare(conn,"select count (*) from sys.sysaliases where alias = ?",)@ -> ps.setString(1,functionName,)@ -> rs=ps.executeQuery()@ -> ps.close()@ } CATCH(Exception) {}
results[https://github.com/corydoras/Mailouts/blob/ef4d90a52f8f7ed1d21b69c3ddaf11720a313dfb/src/mailouts/command/CreateMailout.java][getMailoutIdByName][5] = -> TRY {  -> s=c.prepareStatement("select id from mailout where name=?",)@ -> s.setString(1,name,)@ -> r=s.executeQuery()@ -> s.close()@ } CATCH(ClassNotFoundException,SQLException) {}
results[https://github.com/uib/matterhorn/blob/bcabfd34ac83ae92486829368857ee5fdcc34c9b/modules/opencast-scheduler-impl/src/main/java/org/opencastproject/scheduler/impl/dao/SchedulerServiceImplDAO.java][getAttendees][53] = -> TRY {  -> s=con.prepareStatement("SELECT attendee FROM ATTENDEES WHERE eventid = ?",)@ -> s.setString(1,eventID,)@ -> rs=s.executeQuery()@ -> s.close()@ } CATCH(SQLException) {}
results[https://github.com/ThatGuyOverTher/Frost/blob/11c82513d1b7203d6ff0f8738a28f51ffa65a278/frost-wot/source/frost/storage/database/applayer/UnsendMessageDatabaseTable.java][deleteMessage][1] = -> TRY {  -> ps=db.prepare("DELETE FROM UNSENDMESSAGES WHERE messageid=?",)@ -> ps.setString(1,messageId,)@ -> updated=ps.executeUpdate()@ -> ps.close()@ } CATCH(SQLException) {}
results[https://github.com/gldpi2/gldpi2/blob/63d1a6826d9551411b002ebc9d3d4568f4a6577f/Exemplos/FGASaLa/src/db/EquipDAO.java][editarEquipStatus][8] = -> TRY {  -> stmt=conex.prepareStatement(sql,)@ -> stmt.setString(1,"EMUSO",)@ -> stmt.execute()@ -> stmt.close()@ } CATCH(SQLException) {}
results[https://github.com/CompendiumNG/CompendiumNG/blob/fe498da63efa51272ecd52096dc47636c075c70a/application/src/main/java/com/compendium/ui/DatabaseUpdate.java][insertDefaultLinkGroup][14] = -> TRY {  -> pstmt=con.prepareStatement(INSERT_LINK_GROUP,)@ -> pstmt.setString(1,"1",)@ -> nRowCount=pstmt.executeUpdate()@ -> pstmt.close()@ } CATCH(SQLException) {}
results[https://github.com/apache/openejb/blob/58a45847142e7dd8f4ee531395eb1880394ac082/openejb2/itests/openejb-itests-core/src/main/java/org/openejb/test/stateless/ContainerTxStatelessBean.java][retreiveAccount][9] = -> TRY { -> stmt=con.prepareStatement("select * from Account where SSN = ?",)@ -> stmt.setString(1,ssn,)@ -> rs=stmt.executeQuery()@ -> IF { -> return null@!(rs.next()) } -> stmt.close()@!(!(rs.next())) }
results[https://github.com/jsanda/cassandra-jdbc/blob/01bfdb4496d4457d47367e5f0c01d04860b2eff4/src/test/java/org/apache/cassandra/cql/jdbc/PooledDataSourceTest.java][preparedStatement][17] = -> TRY {  -> statement=connection.prepareStatement("SELECT someInt FROM pooled_test WHERE somekey = ?",)@ -> statement.setString(1,"world",)@ -> resultSet=statement.executeQuery()@ -> statement.close()@ } CATCH(Exception) {}
results[https://github.com/jkingdon/mayfly/blob/5a6a03852cf25ebdd4e72335a1596eed0b1d6ee4/test/net/sourceforge/mayfly/acceptance/StatementTest.java][testSetToNull][1] = -> TRY {  -> prepared=connection.prepareStatement("insert into foo (a) values (?)",)@ -> prepared.setString(1,null,)@ -> prepared.executeUpdate()@ -> prepared.close()@ } CATCH(Exception) {}
results[https://github.com/conan513/MoopleDEV/blob/b47a73146dae30c992aa957ea870fccc6daa80fa/src/client/MapleClient.java][setPic][4] = -> TRY { -> ps=DatabaseConnection.getConnection().prepareStatement("UPDATE accounts SET pic = ? WHERE id = ?",)@ -> ps.setString(1,pic,)@ -> ps.setInt(2,accId,)@ -> ps.executeUpdate()@ -> ps.close()@ }
results[https://github.com/nelsonsilva/vaadin/blob/ec5899ee34ad76ceb5e86eadd54a1a90f3af9726/tests/server-side/com/vaadin/data/util/sqlcontainer/query/TableQueryTest.java][storeRow_noVersionColumn_shouldSucceed][3] = -> TRY {  -> stmt=conn.prepareStatement("SELECT * FROM PEOPLE WHERE \"NAME\" = ?",)@ -> stmt.setString(1,"R2D2",)@ -> rs=stmt.executeQuery()@ -> stmt.close()@ } CATCH(UnsupportedOperationException,SQLException) {}
results[https://github.com/gh0stbust3rs/OnlineShop/blob/2a885ac9fff072f96c84561de084525d56e386cf/src/java/pkgOnlineShop/Database.java][newCategory][2] = -> TRY {  -> pstm=con.prepareStatement(sql,)@ -> pstm.setString(1,name,)@ -> pstm.execute()@ -> pstm.close()@ } CATCH(Exception) {}
results[https://github.com/apache/derby/blob/911d88c46edfdcd38c2f52d0f6a7ed514b1d704d/java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLTypeAndOpsTest.java][testXMLParse][1] = -> TRY {  -> pSt=prepareStatement("insert into paramInsert values XMLPARSE(document "+"cast (? as CLOB) preserve whitespace)",)@ -> pSt.setString(1,"<ay>caramba</ay>",)@ -> assertUpdateCount(pSt,1,)@ -> pSt.close()@ } CATCH(Exception) {}
results[https://github.com/corydoras/Mailouts/blob/4c3754ddc29826784d45cfac1472f8be14ff0c10/src/mailouts/DAO.java][getMailoutSummary][1] = -> TRY {  -> s=c.prepareStatement("select distinct m.id,m.name,r1.role is not null, r2.role is not null, r3.role is not null "+"from  token t join person p on (p.id=t.person_id and t.token=?) "+"  join role r on (p.id=r.person_id) "+"  join mailout m on (r.mailout_id=m.id) "+"  left join role r1 on (r1.person_id=p.id and r1.mailout_id=m.id and r1.role='Editor') "+"  left join role r2 on (r2.person_id=p.id and r2.mailout_id=m.id and r2.role='Approver') "+"  left join role r3 on (r3.person_id=p.id and r3.mailout_id=m.id and r3.role='Quicksend') "+"order by m.name",)@ -> s.setString(1,token,)@ -> r=s.executeQuery()@ -> s.close()@ } CATCH(SQLException,ClassNotFoundException) {}
results[https://github.com/apache/derby/blob/e33b8d871ece038784769f3e95d16bc1b259eb09/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java][getConglomerateID][1] = -> TRY {  -> ps=conn.prepareStatement("select c.conglomeratenumber\n"+"from sys.sysconglomerates c, sys.systables t\n"+"where t.tablename = ? and t.tableid = c.tableid",)@ -> ps.setString(1,tableName,)@ -> result=getScalarLong(ps,)@ -> ps.close()@ } CATCH(Exception) {}
results[https://github.com/sunsuk7tp/MyCassandra/blob/85f7ebc12c7531e2835d8415ee52b3107fe4de15/MyCassandra-0.7.5/src/java/org/apache/cassandra/db/MySQLInstance.java][select][1] = -> TRY {  -> pstSelect=conn.prepareStatement(getSt,)@ -> pstSelect.setString(1,rowKey,)@ -> rs=pstSelect.executeQuery()@ -> pstSelect.close()@ } CATCH(SQLException,IOException) {}
results[https://github.com/PedroGomes/TPCw-benchmark/blob/c51bd9a779225f187373119669984aa00a4f15b0/TPCW_MySQL_Implementation/src/org/uminho/gsd/benchmarks/TPCW_MySQL/executor/TPCW_MySQL_Executor.java][newProducts][1] = -> TRY { -> statement=connection.prepareStatement(benchmark_queries.get("@sql.getNewProducts",),)@ -> statement.setString(1,field,)@ -> rs=statement.executeQuery()@ -> statement.close()@ } CATCH(java.lang.Exception) { -> ex.printStackTrace()@ }
results[https://github.com/jdmr/mateo/blob/04651fd779fb3990afd5fd69f7e18447f584e2d1/src/main/java/mx/edu/um/mateo/inscripciones/model/ccobro/poliza/Metodos1.java][getNombreLibro][1] = -> TRY {  -> pstmt=conn.prepareStatement(COMANDO,)@ -> pstmt.setString(1,strIDLibro,)@ -> rset=pstmt.executeQuery()@ -> pstmt.close()@ } CATCH(SQLException,Exception) {}
results[https://github.com/fucking007/PrimeraFaseAyD1/blob/bed900a18f67c26afbddac02674cfe40a36008c0/Tienda/src/main/java/Logica/Categoria.java][AgregarNuevaCategoria][1] = -> TRY { -> IF { -> stmt2=conn.prepareStatement(consulta2,)@ -> stmt2.setString(1,nombre,)@ -> stmt2.executeUpdate()@ -> stmt2.close()@ } }
results[https://github.com/mvsaturno/WebCarStore/blob/2241e73a99dcffaef1ed838169c30e99e3e30196/src/java/dao/VeiculoDAO.java][inserirItem][1] = -> TRY {  -> item=(Item) obj@ -> stmt=conexao.prepareStatement(sql,)@ -> stmt.setString(1,item.getNome(),)@ -> stmt.execute()@ -> stmt.close()@ } CATCH(SQLException) {}
results[https://github.com/aaronweiss74/Orpheus/blob/079717bf936cf9e9cd580a05f13652d68cdc8b89/src/client/MapleClient.java][hasBannedIP][2] = -> TRY { -> ps=DatabaseConnection.getConnection().prepareStatement("SELECT COUNT(*) FROM ipbans WHERE ? LIKE CONCAT(ip, '%')",)@ -> ps.setString(1,session.getRemoteAddress().toString(),)@ -> rs=ps.executeQuery()@ -> ps.close()@ }
results[https://github.com/apache/derby/blob/4ce6a9b488aff11cc705a26c1ca30d61091a3ca2/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java][insertRow][4] = -> TRY {  -> ps=conn.prepareStatement("insert into t1 values (?, ?)",)@ -> ps.setInt(1,p1,)@ -> ps.setString(2,p2,)@ -> ps.executeUpdate()@ -> ps.close()@ } CATCH(SQLException) {}
results[https://github.com/Hidendra/LWC/blob/2b6653b024968174a8d1149a35a0ed9f71ae39fd/src/com/griefcraft/sql/MemDB.java][unregisterPlayer][8] = -> TRY { -> statement=connection.prepareStatement("DELETE FROM `sessions` WHERE `player` = ?",)@ -> statement.setString(1,player,)@ -> statement.executeUpdate()@ -> statement.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/sunsuk7tp/MyCassandra/blob/0a14549a1893247063668d407d50248614e701dc/MyCassandra-0.2.1/src/java/org/apache/cassandra/db/engine/MySQLInstance.java][select][6] = -> TRY { -> pstSelect=conn.prepareStatement(getSt,)@ -> pstSelect.setString(1,rowKey,)@ -> rs=pstSelect.executeQuery()@ -> pstSelect.close()@ } CATCH(SQLException) { -> errorMsg("db select error",e,)@ }
results[https://github.com/yukoff/concourse-connect/blob/2ac3fe97b16f7fee7d23cc4e1fc8230d07ff1a0e/src/main/java/com/concursive/connect/cms/portal/dao/ProjectItemList.java][updateName][7] = -> TRY {  -> pst=db.prepareStatement("UPDATE "+table+" "+"SET item_name = ? "+"WHERE code = ? ",)@ -> pst.setString(++i,name,)@ -> pst.setInt(++i,id,)@ -> pst.executeUpdate()@ -> pst.close()@ } CATCH(SQLException) {}
results[https://github.com/stas-bob/Projektmanager/blob/3d6da630a658245bfc8dd8db9a6f2a77a55ae4c1/src/java/servlet/Modules.java][getModules][26] = -> TRY { -> ps=c.prepareStatement("SELECT name, status, id FROM module WHERE projectname = ?",)@ -> ps.setString(1,projectName,)@ -> rs=ps.executeQuery()@ -> ps.close()@ } CATCH(SQLException) { -> ex.printStackTrace()@ }
results[https://github.com/ekirkilevics/Spring/blob/2c7d3673a81e9abe839e05e0981612b052d45551/org.springframework.testsuite/src/test/java/org/springframework/jdbc/core/JdbcTemplateTests.java][testPreparedStatementSetterFails][7] = -> TRY {  -> mockPreparedStatement=(PreparedStatement) ctrlPreparedStatement.getMock()@ -> mockPreparedStatement.setString(1,name,)@ -> mockPreparedStatement.executeUpdate()@ -> mockPreparedStatement.close()@ -> ctrlConnection.setReturnValue(mockPreparedStatement,)@ } CATCH(Exception) {}
results[https://github.com/uib/matterhorn/blob/a7bfd14d1b46b81d8713a859d4fe6563ae90dcaf/modules/opencast-scheduler-impl/trunk/src/main/java/org/opencastproject/scheduler/impl/dao/SchedulerServiceImplDAO.java][updateAttendees][4] = -> TRY {  -> s=con.prepareStatement("DELETE FROM ATTENDEES WHERE eventid = ? ",)@ -> s.setString(1,eventID,)@ -> s.executeUpdate()@ -> s.close()@ -> saveAttendees(eventID,attendees,con,)@ } CATCH(SQLException) {}
results[https://github.com/markokr/pgjdbc-test/blob/8b67d5ea9eb81c77ac33086df708c1c84c71e4c1/org/postgresql/test/jdbc2/ResultSetMetaDataTest.java][testPreparedUpdate][3] = -> TRY {  -> pstmt=conn.prepareStatement("INSERT INTO rsmd1(a,b) VALUES(?,?)",)@ -> pstmt.setInt(1,1,)@ -> pstmt.setString(2,"hello",)@ -> rsmd=pstmt.getMetaData()@ -> pstmt.close()@ } CATCH(SQLException) {}
results[https://github.com/apache/derby/blob/f16776261c331f4b37a4e702a7be2d6539e571a7/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java][testPrimaryKeyPageSizeDerby3947][1] = -> TRY {  -> ps=prepareStatement("insert into d3947 values (?)",)@ -> ps.setString(1,new String(chars,),)@ -> ps.executeUpdate()@ -> ps.close()@ } CATCH(SQLException) {}
results[https://github.com/seanhodges/Tesla/blob/0b4f109395d4ede4a4aa7f3b1d0193e5f1eab48e/src/net/roarsoftware/lastfm/cache/DatabaseCache.java][isExpired][6] = -> TRY { -> stmt=conn.prepareStatement("SELECT expiration_date FROM "+TABLE_NAME+" WHERE key = ?;",)@ -> stmt.setString(1,cacheEntryName,)@ -> result=stmt.executeQuery()@ -> IF { -> stmt.close()@!(result.next()) -> return expirationDate<System.currentTimeMillis()@result.next() } }
results[https://github.com/pressgang-ccms/PressGangCCMSREST/blob/a941c64d636c0750a90c45c68a2baecd271aee8e/src/main/java/org/jboss/pressgang/ccms/server/contentspec/TeiidBugzillaBugLinkStrategy.java][getProductId][2] = -> TRY {  -> statement=connection.prepareStatement("SELECT id, products.name FROM Bugzilla.products products WHERE products.name = ?",)@ -> statement.setString(1,product,)@ -> resultSet=statement.executeQuery()@ -> statement.close()@ -> return (product.equals(name,))?projectId:null@ } CATCH(SQLException) {}
results[https://github.com/stas-bob/Projektmanager/blob/942e1ff64d10c86befbb645501e7fe8c55f05971/src/java/util/ValidateEmailServlet.java][validateEmail][7] = -> TRY { -> ps=c.prepareStatement("SELECT * FROM user WHERE email = ?",)@ -> ps.setString(1,emailName,)@ -> rs=ps.executeQuery()@ -> ps.close()@ } CATCH(Exception) { -> ex.printStackTrace()@ }
results[https://github.com/apache/derby/blob/3f5c48a93f9606e6cb021dac0f5914ce71205b63/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DynamicLikeOptimizationTest.java][testEscapeSyntax5][2] = -> TRY {  -> ps=prepareStatement("select 1 from t1 where 'Z%foobar' like ? escape 'Z'",)@ -> ps.setString(1,"ZZZ%foo%a_",)@ -> JDBC.assertSingleValueResultSet(ps.executeQuery(),"1",)@ -> ps.close()@ } CATCH(SQLException) {}
results[https://github.com/opentree/aionj-hungary/blob/5bcf2001d1e75ae6a92891f3a9d931717e26c181/GameServer/data/scripts/system/database/mysql5/MySQL5PlayerDAO.java][getAccountIdByName][3] = -> TRY { -> s=con.prepareStatement("SELECT `account_id` FROM `players` WHERE `name` = ?",)@ -> s.setString(1,name,)@ -> rs=s.executeQuery()@ -> s.close()@ } FINALLY { -> DatabaseFactory.close(con,)@ }
results[https://github.com/shresthap/clubuml2013/blob/cf471e392c74dff7453c845a9a24abeb427bb3e3/tags/release-1.0/Intergrated-Code/src/java/repository/ProjectDAO.java][retrieveProject][14] = -> TRY { -> pstmt=conn.prepareStatement("SELECT * FROM project where projectName = ? ;",)@ -> pstmt.setString(1,PROJECT_NAME,)@ -> rs=pstmt.executeQuery()@ -> pstmt.close()@ } CATCH(SQLException) { -> System.out.println("Using default model.",)@ }
results[https://github.com/macavity23/robonobo/blob/3d8b6f0b66b5164ea8c7bcd49d035f9ec2cb059f/core/src/java/com/robonobo/core/storage/PageInfoMgr.java][haveGotPage][1] = -> TRY {  -> ps=conn.prepareStatement(GET_PAGE_INFO_SQL,)@ -> ps.setString(1,streamId,)@ -> ps.setLong(2,pageNum,)@ -> rs=ps.executeQuery()@ -> ps.close()@ } CATCH(SQLException) {}
results[https://github.com/floralvikings/jenjin/blob/e3be564e17a9c1f6a39c9c92e66646e760b4c0d5/jgsf/src/main/java/com/jenjinstudios/jgsf/world/sql/WorldSqlHandler.java][updatePlayer][4] = -> TRY {  -> username=player.getName()@ -> updatePlayerStatement=super.dbConnection.prepareStatement(updateLoggedInQuery,)@ -> updatePlayerStatement.setString(1,username,)@ -> updatePlayerStatement.executeUpdate()@ -> updatePlayerStatement.close()@ } CATCH(SQLException) {}
results[https://github.com/yukoff/concourse-connect/blob/2ac3fe97b16f7fee7d23cc4e1fc8230d07ff1a0e/src/main/java/com/concursive/connect/web/modules/login/dao/User.java][getIdByEmailAddress][2] = -> TRY {  -> pst=db.prepareStatement("SELECT user_id "+"FROM users "+"WHERE lower(email) = ? ",)@ -> pst.setString(1,email.toLowerCase(),)@ -> rs=pst.executeQuery()@ -> pst.close()@ } CATCH(SQLException) {}
results[https://github.com/NCIP/lexevs/blob/9f630d706a6fd62ab01ab2bfdb9f8bbae2a7743a/lgConverter/src/edu/mayo/informatics/lexgrid/convert/directConversions/SQLLiteToLdap.java][loadCodingSchemeSupportedAttributes][2] = -> TRY {  -> log.debug("loadCodingSchemeSupportedAttributes called - name:"+name+" codingSchemeName:"+codingSchemeName,)@ -> getCodingSchemeSupportedAttributesModifications=sqlConnection_.prepareStatement("SELECT * FROM codingSchemeSupportedAttributes"+" WHERE codingSchemeName = ? ORDER BY supportedAttributeTag",)@ -> getCodingSchemeSupportedAttributesModifications.setString(1,codingSchemeName,)@ -> results=getCodingSchemeSupportedAttributesModifications.executeQuery()@ -> getCodingSchemeSupportedAttributesModifications.close()@ } CATCH(Exception) {}
results[https://github.com/tivv/davepgjdbc/blob/e9c4b330eee92e366c08efa20a7ca7f2f9817ad3/org/postgresql/test/jdbc2/PreparedStatementTest.java][doSetBinaryStream][3] = -> TRY {  -> pstmt=conn.prepareStatement("INSERT INTO streamtable (bin,str) VALUES (?,?)",)@ -> pstmt.setBinaryStream(1,bais,length,)@ -> pstmt.setString(2,null,)@ -> pstmt.executeUpdate()@ -> pstmt.close()@ } CATCH(SQLException) {}
results[https://github.com/lusabo/sharecar/blob/bb21b66a43cd15967ee23608dfc398020d938dab/src/main/java/persistence/UserDAO.java][loadByUsername][2] = -> TRY {  -> pstmt=connection.prepareStatement(sql.toString(),)@ -> pstmt.setString(1,username,)@ -> rs=pstmt.executeQuery()@ -> pstmt.close()@ } CATCH(Exception) {}
results[https://github.com/yukoff/concourse-connect/blob/c4bbb00bbf206bcb9ce8ecb6630e2de39edf64b2/src/main/java/com/concursive/connect/web/modules/login/dao/Group.java][insert][1] = -> TRY {  -> pst=db.prepareStatement("INSERT INTO groups "+"(group_name, enabled) VALUES (?, ?) ",)@ -> pst.setString(1,name,)@ -> pst.setBoolean(2,enabled,)@ -> pst.execute()@ -> pst.close()@ } CATCH(SQLException) {}
results[https://github.com/yukoff/concourse-connect/blob/840e9ca7bfcdd4e68cc80b052ba1ad2f89cb777a/src/main/java/com/concursive/connect/web/modules/processes/dao/Process.java][queryRecord][1] = -> TRY {  -> pst=db.prepareStatement(sql.toString(),)@ -> pst.setString(++i,description,)@ -> rs=pst.executeQuery()@ -> pst.close()@ } CATCH(SQLException) {}
results[https://github.com/codefollower/H2-Research/blob/2efda0eb90f9f0163dabacddca5456201e54407f/test/my/test/JDBCTest.java][testJdbcConnection][5] = -> TRY {  -> ps=conn.prepareStatement("insert into t values(?,?)",)@ -> ps.setInt(2,20,)@ -> ps.setString(1,"aaa",)@ -> ps.executeUpdate()@ -> ps.close()@ } CATCH(Exception) {}
results[https://github.com/uib/matterhorn/blob/a7bfd14d1b46b81d8713a859d4fe6563ae90dcaf/modules/opencast-scheduler-impl/trunk/src/main/java/org/opencastproject/scheduler/impl/dao/SchedulerServiceImplDAO.java][updateResources][4] = -> TRY {  -> s=con.prepareStatement("DELETE FROM RESOURCES WHERE eventid = ? ",)@ -> s.setString(1,eventID,)@ -> s.executeUpdate()@ -> s.close()@ -> saveResources(eventID,resources,con,)@ } CATCH(SQLException) {}
results[https://github.com/CompendiumNG/CompendiumNG/blob/15c6105a0bed593ed9ae4e6d0327b01ebb4378cd/src/com/compendium/core/db/management/DBAdminDerbyDatabase.java][deleteDatabase][3] = -> TRY {  -> file=new File("System"+sFS+"resources"+sFS+"Databases"+sFS+sDatabaseName,)@ -> pstmt=con.prepareStatement(DELETE_PROJECT,)@ -> pstmt.setString(1,sDatabaseName,)@ -> pstmt.executeUpdate()@ -> pstmt.close()@ } CATCH(SecurityException,SQLException,DBProjectListException) {}
results[https://github.com/zoomzoom83/elastic/blob/ee8f0dc3e7d2d9a0ad7fe0e2eb40d6e06a2455bf/src/com/faulkner/elastic/apps/services/MySQLContentStorage.java][getTransitionUIDsForState][2] = -> TRY { -> stmt=conn.prepareStatement("SELECT transition_uid FROM cms_state_transitions WHERE state_uid = ?",)@ -> stmt.setString(1,state_uid,)@ -> rs=stmt.executeQuery()@ -> stmt.close()@ } CATCH(SQLException) { -> throw new ConnectionException(e,)@ }
results[https://github.com/yukoff/concourse-connect/blob/c4bbb00bbf206bcb9ce8ecb6630e2de39edf64b2/src/main/java/com/concursive/connect/web/modules/translation/dao/LanguageDictionaryList.java][queryDefaultId][1] = -> TRY {  -> pst=db.prepareStatement("SELECT id "+"FROM language_dictionary "+"WHERE param_name IN (SELECT param_name FROM language_dictionary WHERE id = ?) "+"AND config_id IN (SELECT id FROM language_config WHERE language_id IN "+"(SELECT id FROM language_pack WHERE language_locale = ?)) ",)@ -> pst.setInt(1,dictionaryItemId,)@ -> pst.setString(2,LanguagePack.DEFAULT_LOCALE,)@ -> rs=pst.executeQuery()@ -> pst.close()@ } CATCH(SQLException) {}
results[https://github.com/Igman/MappedRacer/blob/f12da0414ae4da09a9d81f79dd1b634108da8ba8/site/src/Beans/User.java][getUserID][1] = -> TRY {  -> ps=c.prepareStatement("SELECT uid FROM Users WHERE uname = ?",)@ -> ps.setString(1,PrepString(userName,),)@ -> rs=ps.executeQuery()@ -> ps.close()@ } CATCH(SQLException) {}
results[https://github.com/adempiere/adempiere/blob/9c55fc4c044c9da0ebf5b5b0cd3fcf160af7f372/base/src/org/compiere/model/MTable.java][getTable_ID][1] = -> TRY { -> pstmt=DB.prepareStatement(SQL,null,)@ -> pstmt.setString(1,tableName,)@ -> rs=pstmt.executeQuery()@ -> pstmt.close()@ } CATCH(Exception) { -> s_log.log(Level.SEVERE,SQL,e,)@ }
results[https://github.com/sunsuk7tp/MyCassandra/blob/0a14549a1893247063668d407d50248614e701dc/MyCassandra-0.2.1/src/java/org/apache/cassandra/db/engine/MySQLInstance.java][delete][6] = -> TRY { -> pstDelete=conn.prepareStatement(deleteSt,)@ -> pstDelete.setString(1,rowKey,)@ -> res=pstDelete.executeUpdate()@ -> pstDelete.close()@ } CATCH(SQLException) { -> return errorMsg("db row deletion error",e,)@ }
results[https://github.com/yukoff/concourse-connect/blob/662980a1a0caf910d4936d2c8475e42b642fcbd7/src/main/java/com/concursive/connect/web/modules/profile/dao/ProjectList.java][queryIdFromKey][2] = -> TRY {  -> pst=db.prepareStatement("SELECT project_id "+"FROM projects "+"WHERE portal_key = ? "+"AND portal = ? "+"AND approvaldate IS NOT NULL ",)@ -> pst.setString(1,key,)@ -> pst.setBoolean(2,true,)@ -> rs=pst.executeQuery()@ -> pst.close()@ } CATCH(SQLException) {}
results[https://github.com/Azrielg13/innovative/blob/e2418dc635f390b847014a29c50a9a897748a544/eclipse/qee/war/WEB-INF/src/com/digitald4/pm/Client.java][refresh][8] = -> TRY {  -> ps=con.prepareStatement(SELECT+" FROM "+TABLE+" "+WHERE,)@ -> ps.setString(1,User.KEY,)@ -> ps.setInt(2,id,)@ -> rs=ps.executeQuery()@ -> ps.close()@ } CATCH(Exception) {}
results[https://github.com/PedroGomes/TPCw-benchmark/blob/c51bd9a779225f187373119669984aa00a4f15b0/TPCW_MySQL_Implementation/src/org/uminho/gsd/benchmarks/TPCW_MySQL/executor/TPCW_MySQL_Executor.java][BestSellers][1] = -> TRY { -> statement=connection.prepareStatement(benchmark_queries.get("@sql.getBestSellers",),)@ -> statement.setInt(1,3333,)@ -> statement.setString(2,field,)@ -> rs=statement.executeQuery()@ -> statement.close()@ } CATCH(java.lang.Exception) { -> ex.printStackTrace()@ }
results[https://github.com/PedroGomes/TPCw-benchmark/blob/c51bd9a779225f187373119669984aa00a4f15b0/TPCW_MySQL_Implementation/src/org/uminho/gsd/benchmarks/TPCW_MySQL/executor/TPCW_MySQL_Executor.java][getNewProducts][1] = -> TRY { -> new_products=getReadConnection().prepareStatement(benchmark_queries.get("@sql.getNewProducts",),)@ -> new_products.setString(1,subject,)@ -> rs=new_products.executeQuery()@ -> new_products.close()@ } CATCH(java.lang.Exception) { -> ex.printStackTrace()@ }
results[https://github.com/magmax/master-java/blob/463784abdfd4fe5fd0f1de2dd1e2c659c88c63d3/practicas/practica7/src/main/java/org/magmax/practica7/persistence/Persistence.java][delete][1] = -> TRY {  -> statement=connection.prepareStatement("delete from person where dni = ?",)@ -> statement.setString(1,person.getDni(),)@ -> statement.executeUpdate()@ -> statement.close()@ } CATCH(SQLException,DatabaseNotDefinedException) {}
results[https://github.com/thiagovsk/Fast-Request/blob/ac5c284073e5a4e399d4a80ae7b2f89667968a0b/Grupo3-FastRequest/src/br/com/fastrequest/dao/ProdutoDAO.java][encontrarNome][3] = -> TRY {  -> stmt=getConnection().prepareStatement(select,)@ -> stmt.setString(1,nome,)@ -> rs=stmt.executeQuery()@ -> stmt.close()@ } CATCH(SQLException) {}
results[https://github.com/taskurotta/taskurotta/blob/faebf3e9164e544aa64dc5beb97e39309c784d8f/wf-backend-ora/src/main/java/ru/taskurotta/backend/ora/dao/OraQueueDao.java][queueExists][3] = -> TRY {  -> ps=connection.prepareStatement(query,)@ -> ps.setString(1,queueName.toUpperCase(),)@ -> rs=ps.executeQuery()@ -> ps.close()@ } CATCH(SQLException) {}
results[https://github.com/jkingdon/mayfly/blob/5a6a03852cf25ebdd4e72335a1596eed0b1d6ee4/test/net/sourceforge/mayfly/acceptance/StatementTest.java][testStringJdbcParameter][2] = -> TRY {  -> prepared=connection.prepareStatement("insert into foo (s) values (?)",)@ -> prepared.setString(1,"can't",)@ -> assertEquals(1,prepared.executeUpdate(),)@ -> prepared.close()@ } CATCH(Exception) {}
results[https://github.com/adempiere/adempiere/blob/3c2efd1c161325b544cb22f6fc6e1781b5c71cfe/dbPort/src/org/compiere/model/MSysConfig.java][getValue][1] = -> TRY { -> pstmt=DB.prepareStatement(sql,null,)@ -> pstmt.setString(1,Name,)@ -> rs=pstmt.executeQuery()@ -> pstmt.close()@ } CATCH(SQLException) { -> s_log.log(Level.SEVERE,"getValue",e,)@ }
results[https://github.com/apache/derby/blob/3f5c48a93f9606e6cb021dac0f5914ce71205b63/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DynamicLikeOptimizationTest.java][testTabs][1] = -> TRY {  -> ps=prepareStatement("select c10 from test where c10 like ?",)@ -> ps.setString(1,"asd%",)@ -> JDBC.assertUnorderedResultSet(ps.executeQuery(),expected,)@ -> ps.close()@ } CATCH(SQLException) {}
results[https://github.com/fabriciorcsilva/Software-AGE-System/blob/02775d37ae140e21b84221a6a749ae6638413a79/Age System/src/br/com/triforce/controller/ValidaCadastro.java][cadastrarNovaTurma][1] = -> TRY { -> stmt=connection.prepareStatement(sql,)@ -> stmt.setString(1,nomeModTur,)@ -> rs=stmt.executeQuery()@ -> stmt.close()@ } -> IF { -> tur.setNomeMod(nomeModTur,)@ }
results[https://github.com/calpaterson/TAberystwyth/blob/b2cd9793b9051f7637a1e7d97e4a4fe92e0388e3/src/taberystwyth/view/OverviewFrame.java][getInstitution][3] = -> TRY { -> teamStatement=conn.prepareStatement("select \"speaker1\", \"speaker2\" from teams "+" where teams.\"name\" = ?;",)@ -> teamStatement.setString(1,teamName,)@ -> rs=teamStatement.executeQuery()@ -> teamStatement.close()@ } CATCH(SQLException) { -> LOG.error("Unable to find what institution two speakers are from.",e,)@ }
results[https://github.com/tkessels/publicMain/blob/79e66eb26da9aef19d2ee5b7d2b012d7932c5f23/publicMAIN/src/org/publicmain/sql/BackupDBConnection.java][userexists][1] = -> TRY {  -> prp=getCon().prepareStatement("Select backupUserID from t_backupUser where username like ?",)@ -> prp.setString(1,userName,)@ -> tmp_rs=prp.executeQuery()@ -> prp.close()@ } CATCH(SQLException) {}
results[https://github.com/corydoras/Base/blob/9778bed51ed117d69161ad6bd402671ddeaa07cb/src/base/jee/api/sql/util/GetGroupRoles.java][getGroupRoles][1] = -> TRY {  -> q=c.prepareStatement("select distinct role, resource_type, resource_uid "+"from role "+"where assignee_uuid=? "+"order by role, resource_type, resource_uid",)@ -> q.setString(1,uuid.toString(),)@ -> r=q.executeQuery()@ -> q.close()@ } CATCH(SQLException) {}
results[https://github.com/apache/derby/blob/643e68c9a99bf42b30075bd09da416ed6d132ce1/java/tools/org/apache/derby/impl/tools/planexporter/AccessDatabase.java][time][4] = -> TRY {  -> ps=conn.prepareStatement("select '<time>'||TRIM(CHAR(XPLAIN_TIME))||"+"'</time>' from SYSXPLAIN_STATEMENTS "+"where STMT_ID = ?",)@ -> ps.setString(1,getQuery(),)@ -> results=ps.executeQuery()@ -> ps.close()@ } CATCH(SQLException) {}
results[https://github.com/investovator/investovator-core/blob/123bf80915d27ecd152229fcc70055b4fce17901/src/main/java/org/investovator/core/data/rssexplorer/utils/MysqlConnector.java][dropGameInstanceFrmGameInstancesTable][1] = -> TRY {  -> preparedStatement=con.prepareStatement(query,)@ -> preparedStatement.setString(1,StringConverter.keepOnlyAlphaNumeric(gameInstanceName,),)@ -> preparedStatement.executeUpdate()@ -> preparedStatement.close()@ } CATCH(SQLException) {}
results[https://github.com/FenixXx/orion/blob/02ee7bb520fdc8e75705af10533300b1fc893b3a/src/com/orion/dao/ClientDaoMySql.java][loadByGroup][2] = -> TRY {  -> this.statement=this.storage.getConnection().prepareStatement(LOAD_BY_GROUP_KEYWORD,)@ -> this.statement.setString(1,keyword,)@ -> this.resultset=statement.executeQuery()@ -> this.statement.close()@ } CATCH(ClassNotFoundException,SQLException,UnknownHostException) {}
results[https://github.com/noelbush/programd/blob/a9c9b761e321ec16d1b7c599f7645dc01247623d/src/org/aitools/programd/graph/DBNodemapper.java][setTemplate][1] = -> TRY { -> insert=connection.prepareStatement("INSERT INTO `templates` (`label`) VALUES (?)",)@ -> insert.setString(1,template,)@ -> results=insert.executeQuery()@ -> insert.close()@ } CATCH(SQLException) { -> LOGGER.error(e,)@ }
results[https://github.com/apache/derby/blob/3f5c48a93f9606e6cb021dac0f5914ce71205b63/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DynamicLikeOptimizationTest.java][testDynamicLikeOptimization][1] = -> TRY {  -> ps=prepareStatement("select id from test where vc10 like ?",)@ -> ps.setString(1,"%",)@ -> JDBC.assertDrainResults(ps.executeQuery(),)@ -> ps.close()@ } CATCH(SQLException) {}
results[https://github.com/apache/derby/blob/d9b64a640c331bb964d7a33722dee972c40735e5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceTest.java][goodSequence][1] = -> TRY {  -> ps=chattyPrepare(conn,"select sequencedatatype, startvalue, minimumvalue, maximumvalue, increment, cycleoption\n"+"from sys.syssequences\n"+"where sequencename = ?",)@ -> ps.setString(1,sequenceName.toUpperCase(),)@ -> rs=ps.executeQuery()@ -> ps.close()@ } CATCH(Exception) {}
results[https://github.com/thilinapiy/SRDBS/blob/e668575074d7efdd0c389afe9073a143774cc582/src/main/java/org/srdbs/core/DbConnect.java][saveUploadSPFiles][1] = -> TRY {  -> ps=connection.prepareStatement(sql,)@ -> ps.setString(1,path,)@ -> ps.addBatch()@ -> ps.executeBatch()@ -> ps.close()@ } CATCH(SQLException) {}
results[https://github.com/TeamCommitted/SafetyGame-Sources/blob/719973267fb5b938ceb6e555d8ab032cc9703e64/com/safetyGame/back/access/access/Indirizzo.java][inserisciRigaSql][1] = -> TRY { -> pstmt=conn.prepareStatement("INSERT INTO "+tabella+" ("+colonne.trim()+") values "+val,)@ -> LOOP { -> pstmt.setString(i,valori[i],)@i<valori.length } -> pstmt.execute()@ -> pstmt.close()@ }
results[https://github.com/apache/derby/blob/38c638d9487035ba6d57b1e84cc32457ee2b3d8a/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java][testSignedJar][1] = -> TRY {  -> ps=prepareStatement("VALUES EMC.GETSIGNERS(?)",)@ -> ps.setString(1,"org.apache.derbyTesting.databaseclassloader.emc",)@ -> JDBC.assertSingleValueResultSet(ps.executeQuery(),null,)@ -> ps.close()@ } CATCH(SQLException,MalformedURLException) {}
results[https://github.com/ameenudeen/FileHaven/blob/e3bc9f3468701c71a39dacee84d0568a475aad5c/FileHaven_2.4/src/database/DepartmentDBAO.java][getCompanyDepartment][2] = -> TRY { -> prepStmt=con.prepareStatement(selectStatement,)@ -> prepStmt.setString(1,user,)@ -> rs=prepStmt.executeQuery()@ -> prepStmt.close()@ } CATCH(SQLException) { -> ex.printStackTrace()@ -> releaseConnection()@ }
results[https://github.com/yukoff/concourse-connect/blob/2ac3fe97b16f7fee7d23cc4e1fc8230d07ff1a0e/src/main/java/com/concursive/connect/web/webdav/WebdavManager.java][validateUser][1] = -> TRY {  -> username=(String) params.get("username",)@ -> pst=db.prepareStatement("SELECT user_id, webdav_password "+"FROM users "+"WHERE username = ? "+"AND enabled = ? ",)@ -> pst.setString(1,username,)@ -> pst.setBoolean(2,true,)@ -> rs=pst.executeQuery()@ -> pst.close()@ } CATCH(Exception) {}
results[https://github.com/CompendiumNG/CompendiumNG/blob/15c6105a0bed593ed9ae4e6d0327b01ebb4378cd/src/com/compendium/core/db/DBWorkspace.java][getWorkspace][13] = -> TRY {  -> IF { -> return null@con==null } -> pstmt=con.prepareStatement(GET_WORKSPACE_QUERY,)@!(con==null) -> pstmt.setString(1,sWorkspaceID,)@!(con==null) -> rs=pstmt.executeQuery()@!(con==null) -> pstmt.close()@!(con==null) } CATCH(SQLException) {}
results[https://github.com/killme2008/Metamorphosis/blob/91e022ba65d9ecadb509ac4c7141e5677c52de07/metamorphosis-example/src/main/java/com/taobao/metamorphosis/example/XATransactionProducer.java][execute][1] = -> TRY {  -> pstmt=conn.prepareStatement("insert into orders(uid,address) values(?,?)",)@ -> pstmt.setInt(1,uid,)@ -> pstmt.setString(2,null,)@ -> IF { -> return null@pstmt.executeUpdate()<=0 } -> pstmt.close()@!(pstmt.executeUpdate()<=0) } CATCH(Exception) {}
results[https://github.com/svn2github/H2-Mirror/blob/be56b39cc3dafcec2d9632785fe16bbc50c88bf3/h2/src/main/org/h2/jdbc/JdbcDatabaseMetaData.java][getMode][3] = -> TRY {  -> IF { -> prep=conn.prepareStatement("SELECT VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME=?",)@ -> prep.setString(1,"MODE",)@ -> rs=prep.executeQuery()@ -> prep.close()@ } } CATCH(SQLException) {}
results[https://github.com/srinath4ever/JavaTest/blob/828c876cf569b0783791a9bc3d8e55bc5238e10c/JavaTest/src/com/jdbc/practise/eg11.java][main][1] = -> TRY { -> ps=con.prepareStatement("insert into sam values ( ? ,? ) ",)@ -> ps.setString(1,name,)@ -> ps.setInt(2,no,)@ -> ps.executeUpdate()@ -> ps.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/nigel0913/se/blob/6747f3d874707386a6b76d1a95df8074a35422db/src/business/connectdb/db/RContainer.java][delContainer][1] = -> TRY { -> ps=conn.prepareStatement(sql,)@ -> ps.setString(1,container.getConid(),)@ -> row=ps.executeUpdate()@ -> ps.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/rmannibucau/batchee/blob/61f8cb831106f8404c768769392a66a725e9ee1a/jbatch/src/main/java/org/apache/batchee/container/services/persistence/JDBCPersistenceManager.java][setSchemaOnConnection][1] = -> TRY {  -> IF { -> return @schema==null } -> ps=connection.prepareStatement("set schema ?",)@!(schema==null) -> ps.setString(1,schema,)@!(schema==null) -> ps.executeUpdate()@!(schema==null) -> ps.close()@!(schema==null) } CATCH(SQLException) {}
results[https://github.com/ahajirnis/FallUML2013/blob/fd8e0f6dc2a10ca619dcee021e2afd6cb58fefe3/db/repository/ProjectDAO.java][removeProject][1] = -> TRY { -> pstmt=conn.prepareStatement("DELETE FROM project where projectName = ?;",)@ -> pstmt.setString(1,PROJECT_NAME,)@ -> pstmt.executeUpdate()@ -> pstmt.close()@ } CATCH(SQLException) { -> throw new IllegalArgumentException(e.getMessage(),e,)@ }
results[https://github.com/jdeolive/geotools-old/blob/99d81dac6923766910e67373a3c404cc576b76be/modules/plugin/jdbc/jdbc-h2/src/test/java/org/geotools/data/h2/H2LobTestSetup.java][createLobTable][5] = -> TRY {  -> ps=cx.prepareStatement("INSERT INTO \"testlob\" (\"blob_field\","+"\"clob_field\",\"raw_field\") VALUES (?,?,?)",)@ -> ps.setBytes(1, new byte[],)@ -> ps.setString(2,"small clob",)@ -> ps.setBytes(3, new byte[],)@ -> ps.execute()@ -> ps.close()@ } CATCH(Exception) {}
results[https://github.com/mrdon/jforum-plugins/blob/5a53b34b519c9aaba6e9dcea4f325e610659f762/src/net/jforum/drivers/generic/UserModel.java][isUsernameRegistered][3] = -> TRY {  -> p=JForum.getConnection().prepareStatement(SystemGlobals.getSql("UserModel.isUsernameRegistered",),)@ -> p.setString(1,username,)@ -> rs=p.executeQuery()@ -> p.close()@ } CATCH(Exception) {}
results[https://github.com/apache/openejb/blob/0eb9e7d12518206132c6aea242cc04fb672450ed/openejb2/modules/openejb-core/src/java/org/openejb/config/ValidationTable.java][_getLastValidated][1] = -> TRY { -> stmt=conn.prepareStatement(_selectValidated,)@ -> stmt.setString(1,jarFileURL,)@ -> results=stmt.executeQuery()@ } FINALLY { -> TRY { -> conn.close()@ } }
results[https://github.com/gothfox/Tiny-Tiny-IRC/blob/cbd26d3ad34c0844a32c5c73a6a230648cdc10fb/src/org/fox/ttirc/NativeConnectionHandler.java][removeChannel][1] = -> TRY {  -> ps=getConnection().prepareStatement("DELETE FROM ttirc_channels WHERE "+"channel = ? AND connection_id = ?",)@ -> ps.setString(1,channel,)@ -> ps.setInt(2,connectionId,)@ -> ps.execute()@ -> ps.close()@ } CATCH(SQLException) {}
results[https://github.com/vorburger/mifos-head/blob/84767d176897cd9a8916e0eaf72daba6a10a6f80/mifos/src/org/mifos/framework/persistence/Upgrade.java][insertMessage][1] = -> TRY {  -> statement=connection.prepareStatement("insert into LOOKUP_VALUE_LOCALE("+"LOCALE_ID,LOOKUP_ID,LOOKUP_VALUE) "+"VALUES(?,?,?)",)@ -> statement.setInt(1,localeToInsert,)@ -> statement.setInt(2,lookupId,)@ -> statement.setString(3,message,)@ -> statement.executeUpdate()@ -> statement.close()@ } CATCH(SQLException) {}
results[https://github.com/chris-martin/h2/blob/a639abcdfd5928ea23b7dd3827cb8567e162a0a1/h2/src/test/org/h2/test/db/TestLob.java][testLobCleanupSessionTemporaries][1] = -> TRY {  -> prep=conn.prepareStatement("INSERT INTO test(data) VALUES(?)",)@ -> name=new String( new char[],).replace((char) 0,'x',)@ -> prep.setString(1,name,)@ -> prep.execute()@ -> prep.close()@ } CATCH(SQLException) {}
results[https://github.com/apache/derby/blob/b91e25a351d41551eaeae72bc6882a60e33259c5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/BigDataTest.java][insertOneRow][1] = -> TRY {  -> ps=prepareStatement(sql,)@ -> LOOP { -> ps.setString(i,columns[i-1],)@i<=columns.length } -> ps.executeUpdate()@ -> ps.close()@ } CATCH(SQLException) {}
results[https://github.com/thelineva/tilitin/blob/cbd157363c39cce6d30b3f608f6ca0c2b6acd6f5/src/kirjanpito/db/sql/SQLReportStructureDAO.java][executeUpdateQuery][1] = -> TRY {  -> stmt=getUpdateQuery()@ -> setValuesToStatement(stmt,obj,)@ -> stmt.setString(3,obj.getId(),)@ -> updated=stmt.executeUpdate()>0@ -> stmt.close()@ } CATCH(SQLException) {}
