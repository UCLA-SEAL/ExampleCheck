results[https://github.com/adrianfish/clog/blob/2b8460ecb6a359b5e297cf6af37601f31f4ad700/impl/src/java/org/sakaiproject/clog/impl/sql/SQLGenerator.java][getDeleteAutosavedCopyStatement][5] = -> TRY {  -> st=connection.prepareStatement("DELETE FROM "+TABLE_AUTOSAVED_POST+" WHERE "+POST_ID+" = ?",)@ -> st.setString(1,postId,)@ } CATCH(Exception) {}
results[https://github.com/Qi4j/qi4j-sdk/blob/dc2d52200a4333de13580cc7fb29df2ef02a6627/extensions/entitystore-sql/src/main/java/org/qi4j/entitystore/sql/database/AbstractDatabaseService.java][prepareRemoveEntityStatement][37] = -> TRY {  -> removeEntity=connection.prepareStatement(SQLUtil.REMOVE_STATE_SQL,)@ -> removeEntity.setString(1,identity,)@ } CATCH(SQLException) {}
results[https://github.com/anycook/anycook-api/blob/0d3f4b119aba15e1907581efd04d9469bcf8e038/src/main/java/de/anycook/db/mysql/DBUser.java][deleteCookieId][17] = -> TRY {  -> pStatement=connection.prepareStatement("DELETE FROM permanent_cookies WHERE id = ?",)@ -> pStatement.setString(1,id,)@ -> pStatement.executeUpdate()@ } CATCH(SQLException) {}
results[https://github.com/ttasterisco/malleterisk/blob/2fecb05fb3f684f6bb17c0e70784fbc10bc6ddc7/src/main/java/data/loader/db/DbDataAccess.java][getEmailParticipant][148] = -> TRY {  -> ps=c.prepareStatement(sql,)@ -> ps.setString(1,participantAddress,)@ -> rs=ps.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/cubing/tnoodle/blob/0f98ba7d463830760a6e76edd683d729035d9350/server/Test.java][main][3] = -> TRY {  -> ps=conn.prepareStatement("INSERT INTO Test (name) VALUES(?)",)@ -> ps.setString(1,"Jeremy Fleischman",)@ -> ps.executeUpdate()@ } CATCH(Exception) {}
results[https://github.com/dustin/snippets/blob/3098f6a5b24578d42f8f5b2772a04d7d91addb05/java/servlet/dsservlet/net/spy/dsservlet/DSBean.java][list][12] = -> TRY {  -> pst=db.prepareStatement("select * from show_distribution\n"+"  where submitted_to=? order by submitted",)@ -> pst.setString(1,username,)@ -> rs=pst.executeQuery()@ } CATCH(Exception) {}
results[https://github.com/bbcf/bbcfutils/blob/748aac3225373f34e7e228d2e45b3646ca0ec2a3/JAVA/src/ch/epfl/bbcf/bbcfutils/sqlite/SQLiteAccess.java][searchForGeneNameOnChromosome][1] = -> TRY {  -> prep=connection.prepareStatement(query,)@ -> prep.setString(1,name,)@ -> r=getResultSet(prep,query,)@ } CATCH(SQLException) {}
results[https://github.com/majorProject/IAnnotate/blob/f94b80b5ab64c0f5595cf68d2f32031592d7c42d/src/iannotate/database/SqlQuery.java][delete][13] = -> TRY {  -> deletus=connection.prepareStatement("DELETE FROM user "+"WHERE username = ?",)@ -> deletus.setString(1,userName,)@ -> r=deletus.execute()@ } CATCH(SQLException) {}
results[https://github.com/projectrsc/ProjectRSC/blob/be9e2e1854a0e4b93816e52712c9fe37ff7dfc39/ProjectRSC/Development/Server/src/org/darkquest/gs/db/query/StaffLog.java][prepareStatement][5] = -> TRY {  -> statement=connection.prepareStatement(query,)@ -> statement.setString(1,message,)@ -> statement.setLong(2,time,)@ } CATCH(SQLException) {}
results[https://github.com/reshet/NCLodger/blob/14c02e9c0e89f854f0b49b4a908a8c00a3964a11/src/main/java/com/nclodger/dao/SMDao.java][doMethod][1] = -> TRY {  -> prep=dataBase.prepareStatement("SELECT ID_SM FROM MANAGER WHERE MANAGER.ID_USER IN"+"(SELECT ID_USER FROM USERS WHERE USERS.EMAIL = ?)",)@ -> prep.setString(1,email,)@ -> res=prep.executeQuery()@ } CATCH(SQLException,MyException) {}
results[https://github.com/forcedotcom/phoenix/blob/b05bfc9d8c83a51698a639108d8e8244f796e5cf/phoenix-core/src/test/java/com/salesforce/phoenix/compile/QueryMetaDataTest.java][testStringConcatMetaData][9] = -> TRY {  -> statement=conn.prepareStatement(query,)@ -> statement.setString(1,"foo",)@ -> pmd=statement.getParameterMetaData()@ } CATCH(Exception) {}
results[https://github.com/samtingleff/valkyrie/blob/dacabadac29ce201a21f5b79faca1817c2a44598/src/main/java/com/othersonline/kv/backends/sql/DefaultJdbcDAO.java][prepareExists][6] = -> TRY {  -> ps=conn.prepareStatement(String.format("select %1$s from %2$s where %1$s = ?",keyField,table,),)@ -> ps.setString(1,key,)@ } CATCH(SQLException) {}
results[https://github.com/samtingleff/valkyrie/blob/01ebbcd91b089173f3472f6baebee7c470af975a/src/com/othersonline/kv/backends/sql/DefaultJdbcDAO.java][prepareDelete][3] = -> TRY {  -> ps=conn.prepareStatement(String.format("delete from %1$s where %2$s = ?",table,keyField,),)@ -> ps.setString(1,key,)@ } CATCH(SQLException,IOException) {}
results[https://github.com/KLIM8D/ucn-2semproject-dm79-group2/blob/7e981f15b0422eec6b124cb66b581d420ff54e75/src/db/DBUser.java][getUserByUserName][5] = -> TRY {  -> query=con.prepareStatement("SELECT * FROM Users WHERE userName = ?",)@ -> query.setString(1,userName,)@ -> userResult=_da.callCommandGetRow(query,con,)@ } CATCH(Exception) {}
results[https://github.com/Technologiya/dbreplicator2/blob/c21b7b89d1be961d72b6e05efe707f48c77305ac/src/test/java/ru/taximaxim/dbreplicator2/Helper.java][executeSqlFromSql][1] = -> TRY {  -> statement=connection.prepareStatement(sql,)@ -> statement.setString(1,name,)@ -> statement.execute()@ } CATCH(IOException,SQLException) {}
results[https://github.com/samtingleff/valkyrie/blob/dacabadac29ce201a21f5b79faca1817c2a44598/src/main/java/com/othersonline/kv/backends/sql/DefaultJdbcDAO.java][prepareSelect][3] = -> TRY {  -> ps=conn.prepareStatement(String.format("select %3$s, %1$s from %2$s where %3$s = ?",valueField,table,keyField,),)@ -> ps.setString(1,key,)@ } CATCH(SQLException) {}
results[https://github.com/magmax/master-java/blob/ff8e2e5da09da8c421102b240d4b80301d3df14b/temajava13/jsp-propuestos/src/ej5/Persistence.java][aÃ±adirTema][1] = -> TRY {  -> st=conn.prepareStatement("insert into Temas (tema) values (?)",)@ -> st.setString(1,tema,)@ -> st.executeUpdate()@ } CATCH(SQLException,ClassNotFoundException) {}
results[https://github.com/forcedotcom/phoenix/blob/b05bfc9d8c83a51698a639108d8e8244f796e5cf/phoenix-core/src/test/java/com/salesforce/phoenix/end2end/ReverseFunctionTest.java][initTable][2] = -> TRY {  -> stmt=conn.prepareStatement(dml,)@ -> stmt.setString(1,s,)@ -> stmt.execute()@ } CATCH(Exception) {}
results[https://github.com/tOgg1/PotentialNinja/blob/7f51aae12511cf325679ef825976de213e1de794/src/db/DatabaseHandler.java][authenticate][2] = -> TRY { -> query=this.db.prepareStatement("SELECT id, password FROM user WHERE username = ?",)@ -> query.setString(1,account,)@ -> rs=query.executeQuery()@ -> IF { -> return -1@!(rs.next()) } }
results[https://github.com/jdmr/mateo/blob/04651fd779fb3990afd5fd69f7e18447f584e2d1/src/main/java/mx/edu/um/mateo/inscripciones/model/ccobro/poliza/Metodos1.java][getEjercicios][1] = -> TRY {  -> pstmt=conn.prepareStatement(COMANDO,)@ -> pstmt.setString(1,(String) session.getAttribute("login",),)@ } CATCH(SQLException,Exception) {}
results[https://github.com/angusmacdonald/h2o/blob/d526c604cf8fa3349a5839da4d2990f767e5607c/src/test/org/h2/test/db/TestIndex.java][testLike][1] = -> TRY {  -> prep=conn.prepareStatement("SELECT * FROM ABC WHERE NAME LIKE CAST(? AS VARCHAR)",)@ -> prep.setString(1,"Hi%",)@ -> prep.execute()@ } CATCH(SQLException,IOException) {}
results[https://github.com/anycook/anycook-core/blob/ac9d44853517b36dce62874cdb9f256e6c012b1a/src/main/java/de/anycook/notifications/db/DBNotifications.java][getSubjectAndMessage][1] = -> TRY {  -> pStatement=connection.prepareStatement("SELECT subject, message from mailnotifications WHERE type = ?",)@ -> pStatement.setString(1,type.toString(),)@ } CATCH(SQLException) {}
results[https://github.com/dCache/dcache/blob/2962b546f98dded928f07f39503a1ac229880889/modules/dCache/src/main/java/diskCacheV111/replicaManager/ReplicaDbV1.java][<init>][2] = -> TRY {  -> statement=conn.prepareStatement(sql,)@ -> statement.setString(1,poolName,)@ -> rset=statement.executeQuery(sql,)@ } CATCH(SQLException) {}
results[https://github.com/debop/jvm-experiments/blob/a32de3b2c36c2f896cb96b8aca803dfbb6a15d11/jvm-experiments-spring/src/main/java/springbook/user/dao/UserDao.java][delete][1] = -> TRY {  -> ps=conn.prepareStatement("DELETE FROM Users WHERE id=?",)@ -> ps.setString(1,id,)@ -> ps.executeUpdate()@ } CATCH(ClassNotFoundException,SQLException) {}
results[https://github.com/debop/jvm-experiments/blob/a32de3b2c36c2f896cb96b8aca803dfbb6a15d11/jvm-experiments-spring/src/main/java/springbook/user/dao/UserDao.java][get][1] = -> TRY {  -> ps=conn.prepareStatement("SELECT * FROM Users WHERE id=?",)@ -> ps.setString(1,id,)@ -> rs=ps.executeQuery()@ } CATCH(ClassNotFoundException,SQLException) {}
results[https://github.com/anycook/anycook-api/blob/0b32d18fb7465a5aca880eeac43bc0b546e55f4b/src/main/java/de/anycook/db/mysql/DBAutocomplete.java][autocompleteIngredient][1] = -> TRY {  -> pStatement=connection.prepareStatement("SELECT name from zutaten WHERE name LIKE ? LIMIT ?",)@ -> pStatement.setString(1,q+"%",)@ -> pStatement.setInt(2,size,)@ } CATCH(SQLException) {}
results[https://github.com/davidknezic/JSF-Forum/blob/eb993b9224c7aa60ed87a8ffa95d9cc56ccec26d/src/models/UserModel.java][getUserByUsername][1] = -> TRY {  -> stmt=conn.prepareStatement("SELECT userId FROM user WHERE username = ?",)@ -> stmt.setString(1,username,)@ -> res=stmt.executeQuery()@ } ELSE { -> return null@!(res.first()) } CATCH(Throwable) {}
results[https://github.com/Silverpeas/Silverpeas-Components/blob/89029a3a29c6e1f7972b1c64e153af01e40fd41d/kmelia/kmelia-ejb/src/main/java/com/silverpeas/kmelia/dao/TopicSearchDaoImpl.java][createPreparedStatement][1] = -> TRY {  -> ps=connection.prepareStatement(QUERY_GET_LIST_MOST_INTERESTED_QUERY,)@ -> ps.setString(1,getInstanceId(),)@ } CATCH(SQLException) {}
results[https://github.com/blindsidenetworks/bigbluebutton-sakai/blob/aceba896b0b638bb638eb15cb6825847587e833f/bbb-tool/impl/src/java/org/sakaiproject/bbb/impl/sql/DefaultSqlGenerator.java][getMarkMeetingAsDeletedStatements][1] = -> TRY {  -> meetingST=connection.prepareStatement("UPDATE BBB_MEETING SET DELETED = 1 WHERE MEETING_ID = ?",)@ -> meetingST.setString(1,meetingId,)@ -> statements.add(meetingST,)@ } CATCH(Exception) {}
results[https://github.com/anycook/anycook-core/blob/c146d234142617128b2889efc327ec38539f709d/src/de/anycook/db/mysql/DBBackend.java][getNumZutatenChilds][32] = -> TRY { -> pStatement=connection.prepareStatement("SELECT count(name) AS count FROM zutaten WHERE parent_zutaten_name = ? GROUP BY name",)@ -> pStatement.setString(1,parent,)@ -> data=pStatement.executeQuery()@ } CATCH(SQLException) { -> logger.error("execute MySQL-query failed at getNumZutatenChilds",e,)@ }
results[https://github.com/corydoras/Mailouts/blob/ef4d90a52f8f7ed1d21b69c3ddaf11720a313dfb/src/mailouts/command/CreateMailout.java][getMailoutIdByName][1] = -> TRY {  -> s=c.prepareStatement("select id from mailout where name=?",)@ -> s.setString(1,name,)@ -> r=s.executeQuery()@ -> s.close()@ } CATCH(ClassNotFoundException,SQLException) {}
results[https://github.com/UWCS/choob/blob/5ddd565d751da82660555cd9268d7908626c0543/src/main/plugins/See.java][getDataFor][1] = -> TRY {  -> s=conn.prepareStatement("CREATE TEMPORARY TABLE `tempt1` AS SELECT `Time` FROM `History` WHERE `Time` > "+System.currentTimeMillis()-1000*60*60*24*days+" AND (CASE INSTR(`Nick`,'|') WHEN 0 THEN `Nick` ELSE LEFT(`Nick`, INSTR(`Nick`,'|')-1) END)=? AND `Channel`IS NOT NULL ORDER BY `Time`; ",)@ -> s.setString(1,nick,)@ -> s.executeUpdate()@ } CATCH(SQLException) {}
results[https://github.com/meltingwax/anonircd/blob/e41a5a113bc06489c89def40949bcbfe1628cafc/src/net/meltingwax/anonircd/conf/ConfigDir.java][getChannelTopic][29] = -> TRY { -> statement=dbConn.prepareStatement("SELECT * FROM channel_meta WHERE name = ?;",)@ -> statement.setString(1,channelName,)@ -> results=statement.executeQuery()@ } CATCH(SQLException) { -> e.printStackTrace()@ }
results[https://github.com/conan513/MoopleDEV/blob/6748c518641ad5bca1a47422477ec45885e54838/src/net/server/channelhandlers/BuddylistModifyHandler.java][getCharacterIdAndNameFromDatabase][21] = -> TRY {  -> ps=con.prepareStatement("SELECT id, name, buddyCapacity FROM characters WHERE name LIKE ?",)@ -> ps.setString(1,name,)@ -> rs=ps.executeQuery()@ -> ps.close()@ } CATCH(SQLException) {}
results[https://github.com/gldpi2/gldpi2/blob/63d1a6826d9551411b002ebc9d3d4568f4a6577f/Exemplos/FGASaLa/src/db/EquipDAO.java][editarEquipStatus][3] = -> TRY {  -> stmt=conex.prepareStatement(sql,)@ -> stmt.setString(1,"EMUSO",)@ -> stmt.execute()@ -> stmt.close()@ } CATCH(SQLException) {}
results[https://github.com/toddsarratt/gausstrader/blob/6b885a12e7b553c68d5474112fc95eef7ed0c614/src/main/java/net/toddsarratt/GaussTrader/Portfolio.java][getDbPortfolioSummary][1] = -> TRY {  -> portfolioSummaryStatement=dbConnection.prepareStatement("SELECT * FROM portfolios WHERE name = ?",)@ -> portfolioSummaryStatement.setString(1,name,)@ -> LOGGER.debug("Executing SELECT * FROM portfolios WHERE name = {}",name,)@ -> portfolioSummaryResultSet=portfolioSummaryStatement.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/anycook/anycook-core/blob/c146d234142617128b2889efc327ec38539f709d/src/de/anycook/db/mysql/DBBackend.java][deleteAllZutaten][28] = -> TRY { -> pStatement=connection.prepareStatement("DELETE FROM versions_has_zutaten WHERE versions_gerichte_name = ?",)@ -> pStatement.setString(1,recipe,)@ -> pStatement.executeUpdate()@ } CATCH(SQLException) { -> logger.error("execute MySQL-query failed at deleteAllZutaten.",e,)@ }
results[https://github.com/mangstadt/emc-shopkeeper/blob/07013883cec1811c8e252f4e4943020214e5e1a5/src/test/java/emcshop/db/DirbyDbDaoTest.java][delete][1] = -> TRY {  -> stmt=conn.prepareStatement("DELETE FROM items WHERE name = ?",)@ -> stmt.setString(1,name,)@ -> assertTrue(stmt.executeUpdate()>0,)@ } CATCH(SQLException) {}
results[https://github.com/Mateful/Twitchess/blob/653e77dd40967a0e93e6263f39739104031a6738/src/de/fhb/projects/Twitchess/data/ChessStateDAO.java][findGameByPlayer][1] = -> TRY {  -> getGame=connection.prepareStatement(GET_GAME_STATEMENT,)@ -> getGame.clearParameters()@ -> getGame.setString(1,playerName,)@ -> resultSet=getGame.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/niccholaspage/Fe/blob/16cdae532d93abf341932c563c479b50c2b325cf/src/org/melonbrew/fe/database/databases/SQLDB.java][removeAccount][5] = -> TRY { -> statement=connection.prepareStatement("DELETE FROM "+accountsName+" WHERE "+accountsColumnUser+"=?",)@ -> statement.setString(1,name,)@ -> statement.execute()@ } CATCH(SQLException) { -> e.printStackTrace()@ }
results[https://github.com/RICJ2/CJ2/blob/5b2c493d2fbb8ad68dd63a1737d6e5b34adeb6c5/NetBeansProjects/LoginScreen/src/loginscreen/Student.java][getMajor][4] = -> TRY { -> prestmt=c.prepareStatement(user_query,)@ -> prestmt.setString(1,loginN,)@ -> rs=prestmt.executeQuery()@ } CATCH(SQLException) { -> JOptionPane.showMessageDialog(null,e,)@ }
results[https://github.com/CompendiumNG/CompendiumNG/blob/fe498da63efa51272ecd52096dc47636c075c70a/application/src/main/java/com/compendium/ui/DatabaseUpdate.java][insertDefaultLinkGroup][7] = -> TRY {  -> pstmt=con.prepareStatement(INSERT_LINK_GROUP,)@ -> pstmt.setString(1,"1",)@ -> nRowCount=pstmt.executeUpdate()@ -> pstmt.close()@ } CATCH(SQLException) {}
results[https://github.com/cinchapi/concourse/blob/b865b90781c04b3f594b10ebe977212c13957ffb/examples/twitter-cli/src/main/java/org/cinchapi/concourse/demo/twitter/MysqlTwitter.java][exists][10] = -> TRY {  -> stmt=mysql.prepareStatement("SELECT uid FROM users WHERE username = ?",)@ -> stmt.setString(1,username,)@ -> stmt.execute()@ -> result=stmt.getResultSet()@ } CATCH(SQLException) {}
results[https://github.com/101companies/101repo/blob/4cc79f41d4dbc34259c8cf75a04141bbc9ebc20c/jdbc/org/softlang/features/Cut.java][cut][3] = -> TRY { -> stm=connection.prepareStatement(sqlCut,)@ -> stm.setString(1,name,)@ -> stm.executeUpdate()@ } CATCH(SQLException) { -> e.printStackTrace()@ }
results[https://github.com/ybonnel/CodeStory/blob/bffa50926378644a7d9bd71ee925b6424653be3f/src/main/java/fr/ybonnel/codestory/database/LogDao.java][findByType][1] = -> TRY { -> statement=conn.prepareStatement("SELECT HEURE, TYPE_LOG, MESSAGE FROM LOG WHERE TYPE_LOG = ? ORDER BY HEURE DESC",)@ -> statement.setString(1,type,)@ -> resultSet=statement.executeQuery()@ } CATCH(SQLException) { -> Throwables.propagate(sqlException,)@ }
results[https://github.com/omarowns/feisbun/blob/2dbfaa22aa8971a5256150cc1dd38eb8280b17f1/feisbun/src/java/mysql/MySqlConn.java][getNameFrom][2] = -> TRY { -> ps=conn.prepareStatement("SELECT username FROM users WHERE email=?",)@ -> ps.setString(1,user,)@ -> rs=ps.executeQuery()@ } CATCH(SQLException) { -> printErrors(ex,)@ }
results[https://github.com/borislit/sceprojectbackend/blob/70809a49efd410dfc409eefc3f41e40bfc0bd1c0/src/main/java/sce/finalprojects/sceprojectbackend/database/DatabaseOperations.java][setArticleNumOfComments][1] = -> TRY {  -> sqlQuerry=conn.prepareStatement("UPDATE articles SET number_of_comments = ? WHERE article_id = ? ;",)@ -> sqlQuerry.setInt(1,numberOfComments,)@ -> sqlQuerry.setString(2,articleId,)@ -> sqlQuerry.execute()@ } CATCH(SQLException) {}
results[https://github.com/OlegSmelov/kuro-apskaitos-sistema/blob/a57aff6cde4c2761a96c18bf78ab13d0542d825b/src/lib/Employee.java][fetchByCompanyCode][5] = -> TRY { -> ps=connection.prepareStatement("SELECT employee.* FROM employee, employee_works_for WHERE employee_works_for.employee_ssn = employee.ssn AND employee_works_for.company_code = ?;",)@ -> ps.setString(1,company_code,)@ -> result=Employee.fetch(ps,)@ } CATCH(SQLException) { -> System.err.println(ex,)@ }
results[https://github.com/vnc-biz/vnc-zcs-crm/blob/3a49f11ce2f63c9eaec6878edc3618d2d0e53701/src/lib_vnc_crm/src/biz/vnc/helpers/LeadHelper.java][deleteSharedItems][1] = -> TRY { -> preparedStatement=DBUtility.connection.prepareStatement(query,)@ -> preparedStatement.setString(1,leadId,)@ } CATCH(SQLException) { -> ZLog.err("VNC CRM for Zimbra","Error in deleteSharedItems in LeadHelper",e,)@ } -> operationStatus=dbu.delete(preparedStatement,)@
results[https://github.com/alagopus/fraglets/blob/b3291953df7bc2d9b50ac7061b3f11ea9c8c75ae/zeig/src/net/sourceforge/fraglets/zeig/model/PlainTextFactory.java][createPlainText][1] = -> TRY {  -> ps=cf.prepareStatement("insert into pt (hc,v) values (?,?)",)@ -> ps.setLong(1,hc,)@ -> ps.setString(2,text,)@ -> return cf.executeInsert(ps,1,)@ } CATCH(SQLException) {}
results[https://github.com/yukoff/concourse-connect/blob/c4bbb00bbf206bcb9ce8ecb6630e2de39edf64b2/src/main/java/com/concursive/connect/web/modules/translation/dao/LanguagePackConfig.java][queryIdByName][5] = -> TRY {  -> pst=db.prepareStatement("SELECT id FROM language_config "+"WHERE config_name = ? "+"AND language_id = ? ",)@ -> pst.setString(1,configName,)@ -> pst.setInt(2,languagePackId,)@ -> rs=pst.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/sneaker/Mediastopf/blob/a4afbb032ea3ec0187dafbe50a55648d7bc522db/Code/src/ch/nomoresecrets/mediastopf/database/ActiveRecordManager.java][createStatementWithArguments][1] = -> TRY {  -> prep=conn.prepareStatement(prepStmt,)@ -> LOOP { -> prep.setString(i+1,arguments[i],)@i<arguments.length } } CATCH(SQLException) {}
results[https://github.com/anycook/anycook-core/blob/097208a4415ef745a4208c32e1f5ca8d7a3aaf63/src/main/java/de/anycook/db/mysql/DBUser.java][getUserIdFromCookieId][1] = -> TRY {  -> pStatement=connection.prepareStatement("SELECT users_id FROM permanent_cookies WHERE id = ?",)@ -> pStatement.setString(1,id,)@ -> data=pStatement.executeQuery()@ -> throw new CookieNotFoundException(id,)@!(data.next()) } CATCH(SQLException,CookieNotFoundException) {}
results[https://github.com/vnc-biz/vnc-zcs-crm/blob/3a49f11ce2f63c9eaec6878edc3618d2d0e53701/src/lib_vnc_crm/src/biz/vnc/helpers/OpportunityHelper.java][listAppointment][5] = -> TRY { -> preparedStatement=DBUtility.connection.prepareStatement(query,)@ -> preparedStatement.setString(1,leadId,)@ } CATCH(SQLException) { -> ZLog.err("VNC CRM for Zimbra","Error in list appointment in LeadHelper",e,)@ } -> rs=dbu.select(preparedStatement,)@
results[https://github.com/anycook/anycook-api/blob/0d3f4b119aba15e1907581efd04d9469bcf8e038/src/main/java/de/anycook/db/mysql/DBUser.java][setActivationId][8] = -> TRY {  -> pStatement=connection.prepareStatement("INSERT INTO activationids(users_id, activationid) VALUES (?,?)",)@ -> pStatement.setInt(1,userId,)@ -> pStatement.setString(2,activationId,)@ -> pStatement.executeUpdate()@ } CATCH(SQLException) {}
results[https://github.com/jsanda/cassandra-jdbc/blob/01bfdb4496d4457d47367e5f0c01d04860b2eff4/src/test/java/org/apache/cassandra/cql/jdbc/PooledDataSourceTest.java][preparedStatement][4] = -> TRY {  -> statement=connection.prepareStatement("SELECT someInt FROM pooled_test WHERE somekey = ?",)@ -> statement.setString(1,"world",)@ -> resultSet=statement.executeQuery()@ -> statement.close()@ } CATCH(Exception) {}
results[https://github.com/jkingdon/mayfly/blob/5a6a03852cf25ebdd4e72335a1596eed0b1d6ee4/test/net/sourceforge/mayfly/acceptance/StatementTest.java][testSetToNull][1] = -> TRY {  -> prepared=connection.prepareStatement("insert into foo (a) values (?)",)@ -> prepared.setString(1,null,)@ -> prepared.executeUpdate()@ -> prepared.close()@ } CATCH(Exception) {}
results[https://github.com/anycook/anycook-api/blob/972d9c4d13b204ef26d37bcbca64c1f6ce27d00e/src/main/java/de/anycook/db/mysql/DBGetRecipe.java][getActiveIdfromRecipe][3] = -> TRY {  -> pStatement=connection.prepareStatement("SELECT active_id FROM gerichte WHERE name = ?",)@ -> pStatement.setString(1,recipe,)@ -> data=pStatement.executeQuery()@ -> throw new RecipeNotFoundException(recipe,)@!(data.next()) } CATCH(SQLException,RecipeNotFoundException) {}
results[https://github.com/dpwhite2/csc440-project1/blob/4d95a11da1f056f15c0f5ac6370c061a15f6d98c/src/edu/ncsu/csc/csc440/project1/objs/ExerciseInfo.java][getAttempts][2] = -> TRY {  -> stmt=conn.prepareStatement("SELECT A.* FROM Attempt A WHERE A.eid=? AND A.sid=?",)@ -> stmt.setInt(1,eid,)@ -> stmt.setString(2,sid,)@ -> rs=stmt.executeQuery()@ } CATCH(Exception) {}
results[https://github.com/Aleciano/projLocadora-web/blob/012e4406e8463a766dbebf86c52e339ee9b96011/src/dao/FuncionarioDAO.java][getFuncionarioPorMatricula][2] = -> TRY {  -> pstm=bd.getConexao().prepareStatement(sql,)@ -> pstm.setString(1,matricula,)@ -> res=pstm.executeQuery()@ } CATCH(ClassNotFoundException,SQLException) {}
results[https://github.com/anycook/anycook-api/blob/f58b56099cf33b039e83b5d659b6bac3f0a69819/src/main/java/de/anycook/db/mysql/DBIngredient.java][newIngredient][2] = -> TRY {  -> pStatement=connection.prepareStatement("INSERT INTO zutaten(name) VALUES(?)",)@ -> pStatement.setString(1,ingredient,)@ -> pStatement.executeUpdate()@ -> logger.info("added Ingredient '"+ingredient+"'",)@ } CATCH(IOException,ParseException,SQLException) {}
results[https://github.com/if12b017/embedded_sensor_cloud/blob/a4be5940f3041bf1f52f10b65a827510d6ed9510/microerp/src/main/java/microerp/dao/strategies/CompanyByNameFilterStrategy.java][createSQLStatement][1] = -> TRY {  -> statement=connection.prepareStatement(super.resourceService.getQueryFromFile("select/comp_by_name.sql",),)@ -> statement.setString(1,(String) super.attributes.get(1,),)@ } CATCH(SQLFileException,SQLException) {}
results[https://github.com/apache/openejb/blob/2b0e9cd540be12f3ad1942c07666dfe3e8dd7262/openejb3/itest/openejb-itests/src/main/java/org/openejb/test/stateless/ContainerTxStatelessBean.java][retreiveAccount][3] = -> TRY { -> stmt=con.prepareStatement("select * from Account where SSN = ?",)@ -> stmt.setString(1,ssn,)@ -> rs=stmt.executeQuery()@ -> IF { -> return null@!(rs.next()) } -> stmt.close()@!(!(rs.next())) }
results[https://github.com/vnc-biz/vnc-zcs-crm/blob/3a49f11ce2f63c9eaec6878edc3618d2d0e53701/src/lib_vnc_crm/src/biz/vnc/helpers/OpportunityHelper.java][listHistory][1] = -> TRY { -> preparedStatement=DBUtility.connection.prepareStatement(query,)@ -> preparedStatement.setString(1,leadId,)@ } CATCH(Exception) { -> ZLog.err("VNC CRM for Zimbra","Error in addHistory Lead Helper Class",e,)@ } -> rs=dbu.select(preparedStatement,)@
results[https://github.com/hibernate/hibernate-orm/blob/d3b640cb755e20db84d5d528b03e1ae474bb68e7/hibernate-core/src/matrix/java/org/hibernate/test/collection/list/PersistentListTest.java][execute][2] = -> TRY {  -> preparedStatement=connection.prepareStatement(select.toStatementString(),)@ -> preparedStatement.setString(1,"root",)@ -> resultSet=preparedStatement.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/jfbulanadi/external-tempoplus/blob/c524d76220b39ffaf71e01aa2149be34c4081218/src/main/java/hk/com/novare/tempoplus/sendmail/SendEmailDAO.java][retrieveSingleRecipient][1] = -> TRY { -> ps=connection.prepareStatement(RETRIEVE_EMPLOYEE_NAME,)@ -> ps.setString(1,email,)@ -> resultSet=(ResultSet) ps.executeQuery()@ } CATCH(SQLException) { -> logger.info("Error on Getting Employee Name",)@ }
results[https://github.com/lemmy/Openfire4OSGi/blob/c63ea9e575539d9907b6bb84fb3417dd54ece767/src/java/org/jivesoftware/openfire/lockout/DefaultLockOutProvider.java][unsetDisabledStatus][2] = -> TRY { -> pstmt=con.prepareStatement(DELETE_FLAG,)@ -> pstmt.setString(1,username,)@ -> pstmt.executeUpdate()@ } FINALLY { -> DbConnectionManager.closeConnection(pstmt,con,)@ }
results[https://github.com/adrianfish/clog/blob/2b8460ecb6a359b5e297cf6af37601f31f4ad700/impl/src/java/org/sakaiproject/clog/impl/sql/SQLGenerator.java][getRestoreStatementsForPost][2] = -> TRY {  -> st=connection.prepareStatement("UPDATE "+TABLE_POST+" SET "+VISIBILITY+" = '"+Visibilities.PRIVATE+"' WHERE "+POST_ID+" = ?",)@ -> st.setString(1,post.getId(),)@ -> statements.add(st,)@ } CATCH(Exception) {}
results[https://github.com/Gruppe8DTU/Rejsekortet/blob/18701aa7cc524938a52e912bac2f8e176046010b/src/persistance/SQL_Connect.java][setRights][1] = -> TRY {  -> preparedStatement=connection.prepareStatement(executeQuery,)@ -> preparedStatement.setInt(1,right,)@ -> preparedStatement.setString(2,user,)@ -> preparedStatement.execute()@ } CATCH(Exception) {}
results[https://github.com/Calenria/GuildPress/blob/34c3fdca2d2c353d2bef48ef1b65f93bc85344aa/app/controllers/RaidTracker.java][showChar][1] = -> TRY {  -> ps=DB.getConnection().prepareStatement("select r.id raidId from Raid r join RaidMember rm on (r.id = rm.raid_id) where BINARY rm.name = ? order by r.id desc",)@ -> ps.setString(1,member.name,)@ -> rs=ps.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/anycook/anycook-api/blob/f58b56099cf33b039e83b5d659b6bac3f0a69819/src/main/java/de/anycook/db/mysql/DBApps.java][getAppSecret][3] = -> TRY {  -> pStatement=connection.prepareStatement("SELECT secret from apps WHERE id = ?",)@ -> pStatement.setString(1,appId,)@ -> data=pStatement.executeQuery()@ -> throw new AppNotFoundException(appId,)@!(data.next()) } CATCH(SQLException,AppNotFoundException) {}
results[https://github.com/agueganno/h2geometry/blob/5ff7451418e9a010ca05526d502324726f6ad049/h2/src/test/org/h2/test/db/TestView.java][testParameterizedView][1] = -> TRY {  -> ps=conn.prepareStatement("CREATE VIEW Test_View AS SELECT f2 FROM Test WHERE f1=?",)@ -> ps.setString(1,"value1",)@ -> assertThrows(ErrorCode.FEATURE_NOT_SUPPORTED_1,ps,).executeUpdate()@ } CATCH(SQLException) {}
results[https://github.com/ttasterisco/malleterisk/blob/3241d0df5b8e2fdb4c77390c868650a63a2bb1fd/src/main/java/data/enron/db/EnronDbDataAccess.java][getUser][2] = -> TRY {  -> ps=c.prepareStatement(sql,)@ -> ps.setInt(1,collectionId,)@ -> ps.setString(2,userName,)@ -> rs=ps.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/dCache/dcache/blob/772b9d9064b567cf979c58b12f1ded803714b681/modules/dcache/src/main/java/diskCacheV111/replicaManager/ReplicaDbV1.java][<init>][1] = -> TRY {  -> statement=conn.prepareStatement(sql,)@ -> statement.setString(1,pnfsId.toString(),)@ -> rset=statement.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/gh0stbust3rs/OnlineShop/blob/2a885ac9fff072f96c84561de084525d56e386cf/src/java/pkgOnlineShop/Database.java][newCategory][1] = -> TRY {  -> pstm=con.prepareStatement(sql,)@ -> pstm.setString(1,name,)@ -> pstm.execute()@ -> pstm.close()@ } CATCH(Exception) {}
results[https://github.com/apache/derby/blob/911d88c46edfdcd38c2f52d0f6a7ed514b1d704d/java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLTypeAndOpsTest.java][testXMLParse][1] = -> TRY {  -> pSt=prepareStatement("insert into paramInsert values XMLPARSE(document "+"cast (? as CLOB) preserve whitespace)",)@ -> pSt.setString(1,"<ay>caramba</ay>",)@ -> assertUpdateCount(pSt,1,)@ -> pSt.close()@ } CATCH(Exception) {}
results[https://github.com/ScootrNova/ClassyGames/blob/e20fc300db7311be608d1daea3192ab67a9ca5e0/projects/server/classygamesserver/src/edu/selu/android/classygames/Utilities.java][updateUserRegId][1] = -> TRY { -> sqlStatement=sqlConnection.prepareStatement(sqlStatementString,)@ -> sqlStatement.setString(1,reg_id,)@ -> sqlStatement.setLong(2,user_id,)@ } FINALLY { -> closeSQLStatement(sqlStatement,)@ }
results[https://github.com/Hidendra/LWC/blob/18f2fe44bd85e9c0b501e57e4df4f76c12bdd050/src/com/griefcraft/sql/MemoryDatabase.java][getActions][2] = -> TRY { -> statement=connection.prepareStatement("SELECT `action` FROM `actions` WHERE `player` = ?",)@ -> statement.setString(1,player,)@ -> set=statement.executeQuery()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/Zenika/DORM/blob/f8138d6d31145fc639fa0a81b883d4ba997719a0/core/core/src/main/java/com/zenika/dorm/core/dao/sql/JdbcSinglePushService.java][getDependencyId][1] = -> TRY {  -> statement=connection.prepareStatement("SELECT id FROM dorm_metadata WHERE metadata_qualifier = ?",)@ -> statement.setString(1,metadata.getQualifier(),)@ -> result=statement.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/corydoras/Mailouts/blob/4c3754ddc29826784d45cfac1472f8be14ff0c10/src/mailouts/DAO.java][getMailoutSummary][1] = -> TRY {  -> s=c.prepareStatement("select distinct m.id,m.name,r1.role is not null, r2.role is not null, r3.role is not null "+"from  token t join person p on (p.id=t.person_id and t.token=?) "+"  join role r on (p.id=r.person_id) "+"  join mailout m on (r.mailout_id=m.id) "+"  left join role r1 on (r1.person_id=p.id and r1.mailout_id=m.id and r1.role='Editor') "+"  left join role r2 on (r2.person_id=p.id and r2.mailout_id=m.id and r2.role='Approver') "+"  left join role r3 on (r3.person_id=p.id and r3.mailout_id=m.id and r3.role='Quicksend') "+"order by m.name",)@ -> s.setString(1,token,)@ -> r=s.executeQuery()@ -> s.close()@ } CATCH(SQLException,ClassNotFoundException) {}
results[https://github.com/anycook/anycook-api/blob/0d3f4b119aba15e1907581efd04d9469bcf8e038/src/main/java/de/anycook/db/mysql/DBUser.java][setCookieId][1] = -> TRY {  -> pStatement=connection.prepareStatement("INSERT INTO permanent_cookies(id, users_id) VALUES (?, ?)",)@ -> pStatement.setString(1,id,)@ -> pStatement.setInt(2,userId,)@ -> pStatement.executeUpdate()@ } CATCH(SQLException) {}
results[https://github.com/Tumas/labs/blob/ef8eaa53645f6e5951d42de2525a14d6dc7a5103/III_semester/dbms/src/db2lab23/PlayerManager.java][deletePlayer][1] = -> TRY {  -> stmt=getConnection().prepareStatement(SQL_DELETE_PLAYER,)@ -> stmt.setString(1,ak,)@ -> return stmt.executeUpdate()@ } CATCH(SQLException) {}
results[https://github.com/anycook/anycook-core/blob/ac5c8eb656520b816090df551b3f16a43739d9f3/src/anycook/mysql/DBUser.java][deletePasswordID][1] = -> TRY { -> pStatement=connection.prepareStatement("DELETE FROM resetpasswordids WHERE resetpasswordid = ?",)@ -> pStatement.setString(1,resetpasswordid,)@ -> pStatement.execute()@ } CATCH(SQLException) { -> logger.error("execute MySQL-query failed at resetPassword.",e,)@ }
results[https://github.com/apache/derby/blob/e33b8d871ece038784769f3e95d16bc1b259eb09/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java][getConglomerateID][1] = -> TRY {  -> ps=conn.prepareStatement("select c.conglomeratenumber\n"+"from sys.sysconglomerates c, sys.systables t\n"+"where t.tablename = ? and t.tableid = c.tableid",)@ -> ps.setString(1,tableName,)@ -> result=getScalarLong(ps,)@ -> ps.close()@ } CATCH(Exception) {}
results[https://github.com/sunsuk7tp/MyCassandra/blob/85f7ebc12c7531e2835d8415ee52b3107fe4de15/MyCassandra-0.7.5/src/java/org/apache/cassandra/db/MySQLInstance.java][select][1] = -> TRY {  -> pstSelect=conn.prepareStatement(getSt,)@ -> pstSelect.setString(1,rowKey,)@ -> rs=pstSelect.executeQuery()@ -> pstSelect.close()@ } CATCH(SQLException,IOException) {}
results[https://github.com/magictowers/bluefinder/blob/bccceb2913efdda24251e171f8f8f18a79d52cb5/BlueFinderRS/src/knn/clean/Statistics.java][supportForItem][1] = -> TRY {  -> pst=WikipediaConnector.getResultsConnection().prepareStatement(query,)@ -> pst.setString(1,pathQuery,)@ -> rs=pst.executeQuery()@ } CATCH(SQLException,ClassNotFoundException) {}
results[https://github.com/NCIP/cadsr-util/blob/01c082d5c7f07cafccba3cd44be6ff1cb6e1e940/cadsrutil/src/java/gov/nih/nci/ncicb/cadsr/common/security/jboss/CaDsrUserCredentials.java][execute][3] = -> TRY {  -> _pstmt=_conn.prepareStatement(_sql,)@ -> _pstmt.setString(1,_localUser,)@ -> _pstmt.execute()@ -> _failed=_pstmt.getUpdateCount()==0@ } CATCH(SQLException) {}
results[https://github.com/bdunnagan/XModel/blob/2eb45a10e18b5a6f3fadbbd3c836ace4104ad279/src/org/xmodel/external/sql/SQLTableCachingPolicy.java][createRowSelectStatement][1] = -> TRY {  -> statement=connection.prepareStatement(sb.toString(),)@ -> statement.setString(1,reference.getID(),)@ } CATCH(SQLException) {}
results[https://github.com/GotMilk/IRCBot/blob/de4c4bae7d406022e010034bde675ad63957b361/src/main/java/us/rddt/IRCBot/Handlers/GameStatus.java][resetUserStatus][1] = -> TRY {  -> statement=database.getConnection().prepareStatement("DELETE FROM GameStatus WHERE Nick = ?",)@ -> statement.setString(1,nick,)@ -> statement.executeUpdate()@ } CATCH(ClassNotFoundException,SQLException,IOException) {}
results[https://github.com/jjnguy/PublicFun/blob/54a6e508bb16291e0030fb81db072b8af84fab42/coms_362_java/src/databaseAccess/QueryDB.java][getHashedPassword][1] = -> TRY { -> q=conn.prepareStatement("SELECT * FROM "+USER_TABLE+" WHERE username = ?;",)@ -> q.setString(1,user,)@ -> rs=q.executeQuery()@ } CATCH(SQLException) { -> handleSQLException(e,)@ }
results[https://github.com/fabriciorcsilva/Software-AGE-System/blob/02775d37ae140e21b84221a6a749ae6638413a79/Age System/src/br/com/triforce/model/TurmaDAO.java][pesquisaTur][1] = -> TRY { -> stmt=connection.prepareStatement(sql,)@ -> stmt.setString(1,codTurma,)@ -> rs=stmt.executeQuery()@ } CATCH(SQLException) { -> JOptionPane.showMessageDialog(null,"ERRO DE CONEXAO COM O SERVIDOR!!","ERRO",3,)@ }
results[https://github.com/anycook/anycook-core/blob/c1856a5220855ce05f3d113064906b8b0fa4e2eb/src/de/anycook/db/mysql/DBApps.java][getAppSecret][1] = -> TRY { -> pStatement=connection.prepareStatement("SELECT secret from apps WHERE id = ?",)@ -> pStatement.setString(1,appID,)@ -> data=pStatement.executeQuery()@ } CATCH(SQLException) { -> logger.error(e,)@ }
results[https://github.com/magictowers/bluefinder/blob/98d9f12d8cf2d0230ab110a14781712cde8ee1d9/BlueFinderRS/src/utils/Wikipedia.java][categoryExists][1] = -> TRY {  -> stmt=wikiConn.prepareStatement(strQuery,)@ -> stmt.setInt(1,14,)@ -> stmt.setString(2,fullCategory,)@ -> results=stmt.executeQuery()@ } CATCH(ClassNotFoundException,SQLException) {}
results[https://github.com/ekirkilevics/TestSSQL/blob/c5c7a032b9820c025de4b398b85618b6e03bb1c0/sql12/plugins/firebird/src/org/firebirdsql/squirrel/tab/ViewSourceTab.java][createStatement][1] = -> TRY {  -> doi=getDatabaseObjectInfo()@ -> pstmt=conn.prepareStatement(SQL,)@ -> pstmt.setString(1,doi.getSimpleName(),)@ } CATCH(SQLException) {}
results[https://github.com/tavlima/fosstrak-epcis/blob/46013b1cad7ac7aa0f2c9a346b28946371cf0688/epcis-repository/src/main/java/org/fosstrak/epcis/repository/EpcisQueryInterface.java][fetchExistsSubscriptionId][1] = -> TRY {  -> pstmt=dbconnection.prepareStatement(query,)@ -> pstmt.setString(1,subscrId,)@ -> LOG.debug("       query param 1: "+subscrId,)@ -> rs=pstmt.executeQuery()@ } CATCH(SQLException,ImplementationException) {}
results[https://github.com/Aleciano/projLocadora-web/blob/8a5d649a6f014c46f521f842ddecffcfd24bb65b/src/dao/LocacaoDAO.java][getLocacaoMaxId][1] = -> TRY {  -> pstm=bd.getConexao().prepareStatement(sql,)@ -> pstm.setString(1,cliente,)@ -> res=pstm.executeQuery()@ } CATCH(SQLException,ClassNotFoundException) {}
results[https://github.com/RaphaelJ/Cours-3eme-ann-e/blob/19c31454a67b5e7121d724cbf3f1f0e077646b2f/Java/FerryInpres/src/data_bean/DatabaseBean.java][utilisateurAuthorise][1] = -> TRY {  -> instruc=this.getConn().prepareStatement("SELECT * FROM agents WHERE id = ?",)@ -> instruc.setString(1,numeroCarte,)@ -> rs=instruc.executeQuery()@ } CATCH(SQLException) {}
results[https://github.com/sainthxd/cassandra-jdbc/blob/2fc09b56384ec5a016221336611621719d0584e5/src/test/java/org/apache/cassandra/cql/jdbc/JdbcRegressionTest.java][testIssue65][1] = -> TRY {  -> pstatement=con.prepareStatement(update,)@ -> pstatement.setObject(1,mySet,Types.OTHER,)@ -> pstatement.setString(2,"key1",)@ -> pstatement.executeUpdate()@ } CATCH(Exception) {}
results[https://github.com/sainthxd/cassandra-jdbc/blob/2fc09b56384ec5a016221336611621719d0584e5/src/test/java/org/apache/cassandra/cql/jdbc/JdbcRegressionTest.java][testIssue33][1] = -> TRY {  -> statement=con.prepareStatement("update t33 set c=? where k=123",)@ -> statement.setString(1,"mark",)@ -> statement.executeUpdate()@ -> result=statement.executeQuery("SELECT * FROM t33;",)@ } CATCH(Exception) {}
results[https://github.com/anycook/anycook-core/blob/f0dfccece095c2eafd1e500e52dabac55b577599/src/main/java/de/anycook/db/mysql/DBTag.java][create][1] = -> TRY {  -> pStatement=connection.prepareStatement("INSERT INTO tags VALUES (?)",)@ -> pStatement.setString(1,tag,)@ -> pStatement.executeUpdate()@ -> logger.info("new Tag '"+tag+"'",)@ } CATCH(SQLException) {}
