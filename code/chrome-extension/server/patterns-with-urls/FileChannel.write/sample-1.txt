results[https://github.com/neo4j-attic/graphdb/blob/e82cead0f458a42bf4ee38059d51cc16cd8e1ae6/kernel/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/DirectLogBuffer.java][flipAndWrite][9] = -> TRY {  -> buffer.flip()@ -> fileChannel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/gingi/fastbit/blob/00770b6e3f2e3914f2a51a98154e41ca0b3b7107/java/gov/lbl/fastbit/FastBitStringWriter.java][flushBuffer][1] = -> TRY {  -> buf.flip()@ -> channel.write(buf,)@ -> buf.clear()@ } CATCH(IOException) {}
results[https://github.com/thobe/neo4j-advanced/blob/ab1e0c70e32d8fd4c51d6dc6e41764727f96ac8a/main/java/org/neo4j/index/impl/NioUtils.java][writeInt][24] = -> TRY {  -> buffer.clear()@ -> buffer.putInt(value,)@ -> buffer.flip()@ -> channel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/mariusaeriksen/cassandra/blob/9db8da81b7f269e5a8a7f896b751d482847d7082/src/org/apache/cassandra/io/SequenceFile.java][writeLong][7] = -> TRY {  -> byteBuffer=ByteBuffer.allocateDirect(8,)@ -> byteBuffer.putLong(value,)@ -> byteBuffer.flip()@ -> fc_.write(byteBuffer,)@ } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/5b31daddd2ab557dfe0c0cfd0d0a0357386d3117/kernel/tags/1.1-rc1/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/DirectLogBuffer.java][putLong][13] = -> TRY {  -> buffer.clear()@ -> buffer.putLong(l,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/kingargyle/exist-1.4.x/blob/09d678fd8a58728dd51005c63b942f1ab6541ebc/src/org/exist/storage/statistics/DataGuide.java][write][1] = -> TRY {  -> buffer=ByteBuffer.allocate(nodeCount*BYTES_PER_NODE+4,)@ -> root.write(buffer,symbols,)@ -> buffer.flip()@ -> fc.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/d4b587a7b17dc00fd878c7578162ee6029716f56/kernel/tags/1.1-rc/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][doneInternal][10] = -> TRY {  -> buffer.clear()@ -> buffer.put(DONE,).putInt(identifier,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/segfault/apache_cassandra/blob/9db8da81b7f269e5a8a7f896b751d482847d7082/src/org/apache/cassandra/io/SequenceFile.java][writeDirect][7] = -> TRY {  -> byteBuffer=ByteBuffer.allocateDirect(bytes.length,)@ -> byteBuffer.put(bytes,)@ -> byteBuffer.flip()@ -> fc_.write(byteBuffer,)@ -> return fc_.position()@ } CATCH(IOException) {}
results[https://github.com/apache/incubator-tajo/blob/fce88829d58885197f67c477699b57c632e7246d/tajo-core/tajo-core-storage/src/main/java/org/apache/tajo/storage/RawFile.java][flushBuffer][4] = -> TRY {  -> buffer.limit(buffer.position(),)@ -> buffer.flip()@ -> channel.write(buffer,)@ -> buffer.clear()@ } CATCH(IOException) {}
results[https://github.com/neo4j-attic/graphdb/blob/e82cead0f458a42bf4ee38059d51cc16cd8e1ae6/kernel/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][doneInternal][6] = -> TRY {  -> buffer.clear()@ -> LogIoUtils.writeDone(buffer,identifier,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@ -> fileChannel.force(false,)@ } CATCH(IOException) {}
results[https://github.com/jruby/jruby-cdc/blob/6813a3d165ec525137bf918973f4f22c260b7a75/src/org/jruby/util/IOHandlerSeekable.java][flushWrite][1] = -> TRY {  -> IF { -> return @reading||!(modes.isWritable())||buffer.position()==0 } -> buffer.flip()@!(reading||!(modes.isWritable())||buffer.position()==0) -> channel.write(buffer,)@!(reading||!(modes.isWritable())||buffer.position()==0) -> buffer.clear()@!(reading||!(modes.isWritable())||buffer.position()==0) } CATCH(IOException) {}
results[https://github.com/ggrandes/kvstore/blob/7ba19b7c23a0ff6db53097f400b61853f951b84c/src/main/java/org/infra/io/FileStreamStore.java][flushBuffer][1] = -> TRY {  -> IF { -> bufOutput.flip()@bufOutput.position()>0 -> fcOutput.write(bufOutput,)@bufOutput.position()>0 -> bufOutput.clear()@bufOutput.position()>0 } } CATCH(IOException) {}
results[https://github.com/uDig/udig-platform/blob/34a354b156e9afa4edbadb35216b7df0b34442c0/plugins/org.locationtech.udig.catalog/src/net/refractions/udig/catalog/CatalogPlugin.java][copy][3] = -> TRY {  -> buffer=ByteBuffer.allocate(BSIZE,)@ -> LOOP { -> buffer.flip()@in.read(buffer,)!=-1 -> out.write(buffer,)@in.read(buffer,)!=-1 -> buffer.clear()@in.read(buffer,)!=-1 } } CATCH(IOException) {}
results[https://github.com/zhwbqd/Java/blob/e05f6e0e4d023d9ddf4b75a1b69b874c52301ef6/java_conclusion/src/main/java/zhwb/study/javabase/nio/channel/FileHole.java][putData][2] = -> TRY {  -> buffer.clear()@ -> buffer.put(string.getBytes("US-ASCII",),)@ -> buffer.flip()@ -> channel.position(position,)@ -> channel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/7571d52cc7b459adf3bf110986562bd2c304cf9c/kernel/trunk/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][doneInternal][1] = -> TRY {  -> buffer.clear()@ -> buffer.put(DONE,).putInt(identifier,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@ -> fileChannel.force(false,)@ } CATCH(IOException) {}
results[https://github.com/feuyeux/quiland/blob/aa5679fbd3607fdda82c6c64b2a8f75ab6383ff2/java/air-io-network/src/main/java/creative/air/nio2/TestChannelCopy.java][copy2][2] = -> TRY { -> bytebuffer=ByteBuffer.allocateDirect(bufferSize,)@ -> LOOP { -> bytebuffer.flip()@fileChannel_from.read(bytebuffer,)>0 -> fileChannel_to.write(bytebuffer,)@fileChannel_from.read(bytebuffer,)>0 -> bytebuffer.clear()@fileChannel_from.read(bytebuffer,)>0 } } CATCH(IOException) { -> logger.error(ex,)@ }
results[https://github.com/feuyeux/quiland/blob/aa5679fbd3607fdda82c6c64b2a8f75ab6383ff2/java/air-io-network/src/main/java/creative/air/nio2/TestChannelCopy.java][copy1][2] = -> TRY { -> bytebuffer=ByteBuffer.allocate(bufferSize,)@ -> LOOP { -> bytebuffer.flip()@fileChannel_from.read(bytebuffer,)>0 -> fileChannel_to.write(bytebuffer,)@fileChannel_from.read(bytebuffer,)>0 -> bytebuffer.clear()@fileChannel_from.read(bytebuffer,)>0 } } CATCH(IOException) { -> logger.error(ex,)@ }
results[https://github.com/proofpoint/kairosdb/blob/6cf82bb8249d3695cd0cf64793590c837b1eceb5/src/main/java/net/opentsdb/core/datastore/CachedSearchResult.java][flushWriteBuffer][3] = -> TRY {  -> IF { -> m_writeBuffer.flip()@m_writeBuffer.position()!=0 -> LOOP { -> m_dataFileChannel.write(m_writeBuffer,)@m_writeBuffer.hasRemaining() && m_writeBuffer.position()!=0 } -> m_writeBuffer.clear()@m_writeBuffer.position()!=0 } } CATCH(IOException) {}
results[https://github.com/pquerna/cassandra/blob/9db8da81b7f269e5a8a7f896b751d482847d7082/src/org/apache/cassandra/io/SequenceFile.java][close][7] = -> TRY {  -> byteBuffer=ByteBuffer.allocateDirect(utfPrefix_+SequenceFile.marker_.length()+4+footer.length,)@ -> SequenceFile.writeUTF(byteBuffer,SequenceFile.marker_,)@ -> byteBuffer.putInt(size,)@ -> byteBuffer.put(footer,)@ -> byteBuffer.flip()@ -> fc_.write(byteBuffer,)@ } CATCH(IOException) {}
results[https://github.com/iansealy/picard-detct/blob/2c562e9a50f778ed8a81bb70f7068f4efda3fcc2/src/java/net/sf/picard/illumina/parser/fakers/FileFaker.java][fakeFile][1] = -> TRY {  -> channel=fileOutputStream.getChannel()@ -> buffer=ByteBuffer.allocate(size,)@ -> buffer.order(ByteOrder.LITTLE_ENDIAN,)@ -> fakeFile(buffer,)@ -> buffer.flip()@ -> channel.write(buffer,)@ -> CloserUtil.close(channel,)@ } CATCH(IOException) {}
results[https://github.com/desruisseaux/geotoolkit-pending/blob/030babc1514511df05a7dfec3bd182c19df8bd15/modules/datastore/geotk-shapefile/src/main/java/org/geotoolkit/data/shapefile/shp/ShapefileWriter.java][drain][2] = -> TRY {  -> shapeBuffer.flip()@ -> LOOP { -> shpChannel.write(shapeBuffer,)@shapeBuffer.remaining()>0 } -> shapeBuffer.flip().limit(shapeBuffer.capacity(),)@ } CATCH(IOException) {}
results[https://github.com/xnio/xnio/blob/ca17c029c6e20130e35325cc69ecf12d3b21f2f2/api/src/test/java/org/xnio/XnioFileChannelTestCase.java][map][1] = -> TRY {  -> buffer=ByteBuffer.allocate(10,)@ -> buffer.put("1234567890".getBytes(),).flip()@ -> assertEquals(10,fileChannel.write(buffer,),)@ -> mappedBuffer=fileChannel.map(MapMode.READ_WRITE,5,2,)@ } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/d5e843666905e90aa91e270aeb152b1cfa4cbec9/kernel/branches/new-index-api/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][open][9] = -> TRY {  -> fileChannel=new RandomAccessFile(fileToOpen,"rw",).getChannel()@ } ELSE { -> buffer.clear()@ -> buffer.putLong(logVersion,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@!(fileChannel.size()!=0) } CATCH(IOException) {}
results[https://github.com/RoCoVoMo/kinect/blob/efe9300c7c8964b391421ecf64af7eaf705eb224/de.rocovomo.e4.rcp.hmmrecorder/src/test/hmmview/view/SaveButton.java][save][6] = -> TRY {  -> channel=fileOutputStream.getChannel()@ -> channel.force(true,)@ -> buffer=ByteBuffer.allocate(bytes.length,)@ -> buffer.put(bytes,)@ -> buffer.flip()@ -> LOOP { -> channel.write(buffer,)@buffer.hasRemaining() } } CATCH(IOException) {}
results[https://github.com/gitools/gitools/blob/a72cc8b2b9f0b751aca0a7fd19e9099b40831d9a/zcalc-report/src/main/java/es/imim/bg/ztools/zcalc/report/Processor.java][copyFile][2] = -> TRY {  -> out=new FileOutputStream(dst,).getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> LOOP { -> buffer.flip()@in.read(buffer,)!=-1 -> out.write(buffer,)@in.read(buffer,)!=-1 -> buffer.clear()@in.read(buffer,)!=-1 } } CATCH(IOException) {}
results[https://github.com/burto/mkgmap/blob/97e66c15ce764589c69b4b36e777b449142f146a/src/uk/me/parabola/imgfmt/sys/FileNode.java][sync][3] = -> TRY {  -> rem=bs-file.position()%bs@ -> buf=ByteBuffer.allocate(blockManager.getBlockSize(),)@ -> LOOP { -> buf.put((byte) 0,)@ } -> buf.flip()@ -> file.write(buf,)@ } CATCH(IOException) {}
results[https://github.com/xnio/xnio/blob/ca17c029c6e20130e35325cc69ecf12d3b21f2f2/api/src/test/java/org/xnio/XnioFileChannelTestCase.java][transferBlockingFromFile1][1] = -> TRY {  -> buffer=ByteBuffer.allocate(10,)@ -> buffer.put("test".getBytes("UTF-8",),).flip()@ -> assertEquals(4,fileChannel.write(buffer,),)@ -> fileChannel.position(0,)@ -> fileChannel.transferTo(0,4,channelMock,)@ } CATCH(IOException) {}
results[https://github.com/encog/encog-java-core/blob/29b866701e81b105a1c988bc914b99296ec32be0/src/main/java/org/encog/neural/data/buffer/EncogEGBFile.java][checkWrite][2] = -> TRY {  -> IF { -> this.fc.position(writeLocation,)@ -> writeBuffer.flip()@!(writeBuffer.hasRemaining()) -> this.fc.write(writeBuffer,)@!(writeBuffer.hasRemaining()) -> writeLocation=this.fc.position()@ -> writeBuffer.clear()@!(writeBuffer.hasRemaining()) -> writeBuffer.order(ByteOrder.LITTLE_ENDIAN,)@!(writeBuffer.hasRemaining()) } } CATCH(IOException) {}
results[https://github.com/asascience/THREDDS/blob/24013a286a38fb3c7bb7d4717350dc736e48e825/cdm/src/main/java/ucar/nc2/geotiff/GeoTiff.java][writeHeader][2] = -> TRY {  -> channel.position(0,)@ -> buffer=ByteBuffer.allocate(8,)@ -> buffer.put((byte) 'M',)@ -> buffer.put((byte) 'M',)@ -> buffer.putShort((short) 42,)@ -> buffer.putInt(firstIFD,)@ -> buffer.flip()@ -> channel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/145fc1e0b3ea604e0b37684b18a0c6932ed51f5a/kernel/tags/1.1/src/main/java/org/neo4j/kernel/impl/transaction/TxLog.java][txDone][40] = -> TRY {  -> IF { -> throw new IllegalArgumentException("Null parameter",)@globalId==null } -> buffer.clear()@!(globalId==null) -> buffer.put(TX_DONE,).put((byte) globalId.length,).put(globalId,)@!(globalId==null) -> buffer.flip()@!(globalId==null) -> fileChannel.write(buffer,)@!(globalId==null) } CATCH(IOException) {}
results[https://github.com/twitter/bookkeeper/blob/c1c8bef6125cb70ed2da68e92bb49e45f4ea64a9/bookkeeper/src/main/java/org/apache/bookkeeper/bookie/BufferedChannel.java][flush][38] = -> TRY {  -> IF { -> return @writeBuffer==null } -> writeBuffer.flip()@!(writeBuffer==null) -> bc.write(writeBuffer,)@!(writeBuffer==null) -> writeBuffer.clear()@!(writeBuffer==null) -> writeBufferStartPosition=bc.position()@!(writeBuffer==null) -> IF { -> bc.force(false,)@!(writeBuffer==null) } } CATCH(IOException) {}
results[https://github.com/student2ua/myTaning/blob/9723adf39930f99142fccabc6567be08970746bc/src/tests/com/tor/io/FileCopyTest.java][copy][1] = -> TRY {  -> fout=new FileOutputStream(out,).getChannel()@ -> buff=ByteBuffer.allocate(4096,)@ -> LOOP { -> buff.flip()@fin.read(buff,)!=-1||buff.position()>0 -> fout.write(buff,)@fin.read(buff,)!=-1||buff.position()>0 -> buff.compact()@fin.read(buff,)!=-1||buff.position()>0 } -> fout.close()@ } CATCH(IOException) {}
results[https://github.com/apache/activemq/blob/02185be527e3a28eee8c82031e6d8ad6c6736916/activemq-console/src/main/java/org/apache/activemq/console/command/CreateCommand.java][writeFile][1] = -> TRY {  -> buf=ByteBuffer.allocate(data.length(),)@typeName.equals("winActivemq",) -> buf.put(data.getBytes(),)@typeName.equals("winActivemq",) -> buf.flip()@typeName.equals("winActivemq",) -> destinationChannel=new FileOutputStream(dest,).getChannel()@typeName.equals("winActivemq",) -> destinationChannel.write(buf,)@typeName.equals("winActivemq",) -> destinationChannel.close()@typeName.equals("winActivemq",) } CATCH(IOException) {}
results[https://github.com/dmontag/graphdb-traversal-context/blob/4e496d1a578fca9606f358b946108a6bd583c7ae/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][open][2] = -> TRY {  -> fileChannel=new RandomAccessFile(fileToOpen,"rw",).getChannel()@ } ELSE { -> buffer.clear()@ -> buffer.putLong(logVersion,)@ -> buffer.putLong(lastTxId,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@!(fileChannel.size()!=0) } CATCH(IOException) {}
results[https://github.com/axDev-JDK/jdk/blob/09c99a676d4e74af47b1d520efdbdd16b7ee5337/test/java/nio/channels/FileChannel/AtomicAppend.java][write][3] = -> TRY {  -> buf=ByteBuffer.allocate(1,)@ -> buf.put((byte) b,)@ -> buf.flip()@ -> IF { -> fc.write(bufs,)@ } ELSE { -> fc.write(buf,)@ } } CATCH(IOException) {}
results[https://github.com/Sciss/Eisenkraut/blob/ed3848a2a00aa8149af672a9b8de845c4ad660ab/trunk/src/de/sciss/eisenkraut/net/NRTFile.java][flush][2] = -> TRY {  -> b.clear()@ -> b.putInt(0,)@ -> bndl.encode(b,)@ -> pos2=b.position()@ -> b.position(0,)@ -> b.putInt(pos2-4,).position(pos2,)@ -> b.flip()@ -> fch.write(b,)@ } CATCH(IOException) {}
results[https://github.com/xnio/xnio/blob/ca17c029c6e20130e35325cc69ecf12d3b21f2f2/api/src/test/java/org/xnio/XnioFileChannelTestCase.java][transferBlockingFromFile3][1] = -> TRY {  -> buffer=ByteBuffer.allocate(10,)@ -> buffer.put("test".getBytes("UTF-8",),).flip()@ -> assertEquals(4,fileChannel.write(buffer,),)@ -> fileChannel.position(0,)@ -> fileChannel.transferTo(0,4,new BlockingByteChannel(channelMock,),)@ } CATCH(IOException) {}
results[https://github.com/cm4j/cm4j-all/blob/2543e6c70a6fb559e74e28000c0261d71e61bae3/cm4j-test/src/main/java/com/cm4j/test/syntax/nio/simple/Two_ChannelCopy.java][main][1] = -> TRY {  -> outch=new FileOutputStream(new File(args[1],),).getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> LOOP { -> buffer.flip()@inch.read(buffer,)!=-1 -> outch.write(buffer,)@inch.read(buffer,)!=-1 -> buffer.clear()@inch.read(buffer,)!=-1 } } CATCH(IOException) {}
results[https://github.com/jeromerobert/jCAE/blob/6ce5284de4bcc110daf2c8c3f6fd4a0b13e5b281/amibe/src/org/jcae/mesh/xmldata/UNVGenericWriter.java][appendFile][1] = -> TRY {  -> bb.clear()@ -> LOOP { -> bb.rewind()@ -> nr=fci.read(bb,)@ -> bb.flip()@ -> IF { -> fc.write(bb,)@ } } } CATCH(IOException) {}
results[https://github.com/iansealy/picard-detct/blob/f6a63aea966c0638bbcdc239422846c8380a77aa/src/java/net/sf/picard/illumina/parser/fakers/BciFileFaker.java][fakeBciFile][1] = -> TRY {  -> channel=fileOutputStream.getChannel()@ -> buffer=ByteBuffer.allocate(8*expectedTiles.size(),)@ -> buffer.order(ByteOrder.LITTLE_ENDIAN,)@ -> fakeFile(buffer,)@ -> buffer.flip()@ -> channel.write(buffer,)@ -> channel.force(true,)@ -> CloserUtil.close(channel,)@ } CATCH(IOException) {}
results[https://github.com/ggrandes/kvstore/blob/07a183ff9010ca688ea2e7cf40bbd2a07a34d1c3/src/main/java/org/kvstore/io/FileStreamStore.java][flushBuffer][1] = -> TRY {  -> IF { -> bufOutput.flip()@bufOutput.position()>0 -> fcOutput.write(bufOutput,)@bufOutput.position()>0 -> bufOutput.clear()@bufOutput.position()>0 -> offsetOutputUncommited=offsetOutputCommited=fcOutput.position()@ -> IF { -> fcOutput.force(false,)@ } } } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/b74938a6b9fc978783ac5eeb1ced8c52e9f8008c/index/tags/1.1/src/test/java/org/neo4j/index/lucene/TestRecovery.java][copyLogicalLog][7] = -> TRY {  -> buffer=ByteBuffer.allocate(1024,)@ -> dest=new RandomAccessFile(copy,"rw",).getChannel()@ -> LOOP { -> read=source.read(buffer,)@ -> buffer.flip()@ -> dest.write(buffer,)@ -> buffer.clear()@ } -> dest.close()@ } CATCH(IOException) {}
results[https://github.com/LuckyStars/nbc/blob/68178f825c92a07c932ea6931a15bc2a5d568e4b/function-schoolmaster2/java/function-masterdata/src/main/com/nbcedu/function/schoolmaster2/core/util/FileUtil.java][copyWithNIO][4] = -> TRY {  -> outChannel=outFile.getChannel()@ -> buffer=ByteBuffer.allocate(1024*1024,)@ -> LOOP { -> buffer.flip()@inChannel.read(buffer,)!=-1 -> LOOP { -> outChannel.write(buffer,)@inChannel.read(buffer,)!=-1 && buffer.hasRemaining() } -> buffer.clear()@inChannel.read(buffer,)!=-1 } -> outChannel.close()@ } CATCH(IOException) {}
results[https://github.com/neo4j-attic/graphdb/blob/e82cead0f458a42bf4ee38059d51cc16cd8e1ae6/kernel/src/main/java/org/neo4j/kernel/impl/transaction/TxLog.java][markAsCommitting][20] = -> TRY {  -> IF { -> throw new IllegalArgumentException("Null parameter",)@globalId==null } -> buffer.clear()@!(globalId==null) -> buffer.put(MARK_COMMIT,).put((byte) globalId.length,).put(globalId,)@!(globalId==null) -> buffer.flip()@!(globalId==null) -> fileChannel.write(buffer,)@!(globalId==null) -> fileChannel.force(false,)@!(globalId==null) } CATCH(IOException) {}
results[https://github.com/dmontag/graphdb-traversal-context/blob/8d98235f3926d4612537c342ec29bc31310fbc6d/src/test/unit/neo/store/TestXa.java][copyLogicalLog][5] = -> TRY {  -> dest=new RandomAccessFile("nioneo_logical.log.bak","rw",).getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> LOOP { -> read=source.read(buffer,)@ -> buffer.flip()@ -> dest.write(buffer,)@ -> buffer.clear()@ } -> dest.close()@ } CATCH(IOException) {}
results[https://github.com/xiaomo/rvm/blob/325039bbbcf0e46dfce9e0ef800a1c962971e981/code/red5Server/0_8_0/src/org/red5/io/flv/impl/FLVWriter.java][writeHeader][1] = -> TRY {  -> out.put((byte) 0x46,)@ -> out.put((byte) 0x4C,)@ -> out.put((byte) 0x56,)@ -> out.put((byte) 0x01,)@ -> out.put((byte) 0x05,)@ -> out.putInt(0x09,)@ -> out.putInt(0,)@ -> out.flip()@ -> channel.write(out.buf(),)@ } CATCH(IOException) {}
results[https://github.com/dancres/blitzjavaspaces/blob/6f12762f513b31206fd029f397c06f3436d32cf4/src/main/java/org/dancres/io/FileCopier.java][copy][2] = -> TRY {  -> myOut=myOutFile.getChannel()@ -> LOOP { -> myBytes=myIn.read(theBuffer,)@ -> IF { -> theBuffer.flip()@ -> myOut.write(theBuffer,)@ -> theBuffer.clear()@ } } -> myOut.close()@ } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/a5b1019cb2d9cc108829b2ac5d635e29483d5b69/neo/branches/neo-tx-fix/src/java/org/neo4j/impl/transaction/xaframework/XaLogicalLog.java][open][1] = -> TRY {  -> fileChannel=new RandomAccessFile(fileName,"rw",).getChannel()@ -> buffer=ByteBuffer.allocateDirect(9+Xid.MAXGTRIDSIZE+Xid.MAXBQUALSIZE*10,)@ } ELSE { -> buffer.clear()@ -> buffer.putLong(logCreated,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@!(fileChannel.size()!=0) -> writeBuffer=new LogBuffer(fileChannel,)@ } CATCH(IOException) {}
results[https://github.com/dvn/dvn-svn-import-test4/blob/38c19d0d1391b0c87496f81843eaef20703d38bc/dvn-app/trunk/src/DVN-web/src/edu/harvard/iq/dvn/core/web/ExploreDataPage.java][writeFile][9] = -> TRY { -> outChannel=outputFile.getChannel()@ -> buf=ByteBuffer.allocate(bufSize*2+1000,)@ -> LOOP { -> buf.putChar(ch,)@ } -> buf.flip()@ -> TRY { -> outChannel.write(buf,)@ } CATCH(IOException) { -> e.printStackTrace(System.err,)@ } -> throw new EJBException(e,)@ }
results[https://github.com/brettwooldridge/bitronix-hp/blob/2569783820523e213ce808e92eb673459624a9da/btm-nio-journal/src/main/java/bitronix/tm/journal/nio/NioJournalFile.java][writeJournalHeader][2] = -> TRY {  -> IF { -> throw new IllegalStateException("File channel is not positioned at the header location.",)@fileChannel.position()!=0 } -> buffer=getWriteBuffer(FIXED_HEADER_SIZE,)@!(fileChannel.position()!=0) -> buffer.put(JOURNAL_HEADER_PREFIX,)@!(fileChannel.position()!=0) -> NioJournalFileRecord.writeUUID(previousDelimiter,buffer,)@!(fileChannel.position()!=0) -> NioJournalFileRecord.writeUUID(delimiter,buffer,)@!(fileChannel.position()!=0) -> buffer.put(JOURNAL_HEADER_SUFFIX,)@!(fileChannel.position()!=0) -> fileChannel.write((ByteBuffer) buffer.flip(),)@!(fileChannel.position()!=0) -> fileChannel.position(FIXED_HEADER_SIZE,)@!(fileChannel.position()!=0) } CATCH(IOException) {}
results[https://github.com/jihoonson/tajo/blob/7f3a05cfe9203bc59665f23c7ee6844441fa5e5b/core/src/main/java/tajo/storage/RawFile.java][flushBufferAndReplace][4] = -> TRY {  -> IF { -> limit=buffer.position()@buffer.remaining()<sizeToBeWritten -> buffer.limit(recordOffset,)@buffer.remaining()<sizeToBeWritten -> buffer.flip()@buffer.remaining()<sizeToBeWritten -> channel.write(buffer,)@buffer.remaining()<sizeToBeWritten -> buffer.position(recordOffset,)@buffer.remaining()<sizeToBeWritten -> buffer.limit(limit,)@buffer.remaining()<sizeToBeWritten -> buffer.compact()@buffer.remaining()<sizeToBeWritten -> return true@buffer.remaining()<sizeToBeWritten } ELSE { -> return false@!(buffer.remaining()<sizeToBeWritten) } } CATCH(IOException) {}
results[https://github.com/NCIP/cadsr-cgmdr/blob/2d7c7a614a2a2589b64061f0cea812a14f40c1ac/src/org/exist/storage/journal/Journal.java][flushBuffer][1] = -> IF { -> return @currentBuffer==null } -> TRY { -> IF { -> currentBuffer.flip()@currentBuffer.position()>0 && !(currentBuffer==null) -> size=currentBuffer.remaining()@currentBuffer.position()>0 && !(currentBuffer==null) -> LOOP { -> channel.write(currentBuffer,)@currentBuffer.position()>0 && currentBuffer.hasRemaining() && !(currentBuffer==null) } -> currentBuffer.clear()@currentBuffer.position()>0 && !(currentBuffer==null) } } CATCH(IOException) { -> LOG.warn("Flushing log file failed!",e,)@!(currentBuffer==null) }
results[https://github.com/statsbiblioteket/sbutil/blob/2fbcc90095ff654ba5f4af01499df2dceb355ea2/sbutil-common/src/main/java/dk/statsbiblioteket/util/LineReader.java][flush][3] = -> TRY {  -> IF { -> IF { -> log.trace("flush: bufferStart="+bufferStart+", maxBufferPos="+maxBufferPos+", buffer.limit="+buffer.limit()+", position="+position,)@log.isTraceEnabled() } -> buffer.position(maxBufferPos,)@ -> buffer.flip()@ -> channelOut.position(bufferStart,)@ -> channelOut.write(buffer,)@ -> buffer.clear()@ } } CATCH(IOException) {}
results[https://github.com/swmaestro2012/somap312_17_CurFit/blob/1782c022cc5b9e96d1d92046758985962e59f69b/app/controllers/RestApp.java][fileOut][1] = -> TRY {  -> outChannel=new FileOutputStream(new File(LOCAL_IMAGE_PATH+"/"+fileName,),).getChannel()@ -> buf=ByteBuffer.allocate(1024,)@ -> LOOP { } ELSE { -> buf.flip()@!(inChannel.read(buf,)==-1) -> outChannel.write(buf,)@!(inChannel.read(buf,)==-1) -> buf.clear()@!(inChannel.read(buf,)==-1) } } CATCH(IOException) {}
results[https://github.com/FreakyPenguin/elexis-hilotec-base/blob/8f74705708c487add6d820f2d0c04680f0ffe73c/ch.elexis.importer.div/src/com/healthmarketscience/jackcess/Database.java][transferFrom][1] = -> TRY {  -> IF { -> channel.transferFrom(readChannel,0,MAX_EMPTYDB_SIZE,)@ } ELSE { -> bb=ByteBuffer.allocate(8096,)@ -> LOOP { -> bb.flip()@readChannel.read(bb,)>=0 -> channel.write(bb,)@readChannel.read(bb,)>=0 -> bb.clear()@readChannel.read(bb,)>=0 } } } CATCH(IOException) {}
results[https://github.com/czarneckid/blojsom-sourceforge/blob/d161d7c443a718e6185036920bc166078a26ecd2/branches/blojsom-2_25-final/blojsom-2.0/src/org/blojsom/util/BlojsomUtils.java][copyDirectory][7] = -> TRY {  -> IF { -> LOOP { -> fcout=fos.getChannel()@ -> buf=ByteBuffer.allocateDirect(8192,)@ -> LOOP { -> buf.clear()@ -> buf.flip()@ -> n+=fcout.write(buf,)@n<size } -> fcout.close()@ } } } CATCH(IOException) {}
results[https://github.com/CSCSI/Triana/blob/8cb9a119686ad57d5e84ea74e33c7914dc017205/triana-core/src/main/java/org/trianacode/enactment/Exec.java][writeFile][1] = -> TRY {  -> f=file.getChannel()@ -> fl=f.lock()@ -> IF { -> f.read(bb,)@!(lockfile.length()==4) -> IF { -> return @curr==ExecutionState.COMPLETE.ordinal() && lockfile.length()==4 } } -> bytes=ByteBuffer.allocate(4,)@!(lockfile.length()==4) -> bytes.putInt(command,).flip()@!(lockfile.length()==4) -> f.write(bytes,)@!(lockfile.length()==4) -> f.force(false,)@!(lockfile.length()==4) } CATCH(IOException) {}
results[https://github.com/irstv/H2GIS/blob/3a2fb2e34bcb06728c4d9921bf83d2e3bb2fd845/h2drivers/src/main/java/org/h2gis/drivers/utility/WriteBufferManager.java][prepareToAddBytes][2] = -> TRY {  -> IF { -> buffer.flip()@buffer.remaining()<numBytes -> channel.write(buffer,)@buffer.remaining()<numBytes -> IF { -> order=buffer.order()@bufferCapacity!=buffer.capacity() && buffer.remaining()<numBytes -> buffer=ByteBuffer.allocate(bufferCapacity,)@bufferCapacity!=buffer.capacity() && buffer.remaining()<numBytes -> buffer.order(order,)@bufferCapacity!=buffer.capacity() && buffer.remaining()<numBytes } ELSE { -> buffer.clear()@!(bufferCapacity!=buffer.capacity()) && buffer.remaining()<numBytes } } } CATCH(IOException) {}
results[https://github.com/strobecorp/kirk/blob/47363fb69ba8e3f0d6f8123bcde893d7c4ed784c/src/com/strobecorp/kirk/RewindableInputStream.java][bufferTo][1] = -> TRY {  -> LOOP { -> limit=Math.min(pos-buffered,buf.capacity(),)@buffered<pos -> buf.clear().limit((int) limit,)@!(buffered<pos) -> len=io.read(buf,)@!(buffered<pos) -> IF { -> return false@buffered<pos && len==-1 } -> buf.flip()@!(len==-1) && !(buffered<pos) -> tmpFile.position(buffered,)@buffered<pos && !(len==-1) -> tmpFile.write(buf,)@!(len==-1) && !(buffered<pos) } } CATCH(IOException) {}
results[https://github.com/kingargyle/exist-1.4.x/blob/09d678fd8a58728dd51005c63b942f1ab6541ebc/src/org/exist/storage/journal/Journal.java][flushBuffer][1] = -> IF { -> return @currentBuffer==null } -> TRY { -> IF { -> currentBuffer.flip()@currentBuffer.position()>0 && !(currentBuffer==null) -> size=currentBuffer.remaining()@currentBuffer.position()>0 && !(currentBuffer==null) -> LOOP { -> channel.write(currentBuffer,)@currentBuffer.position()>0 && currentBuffer.hasRemaining() && !(currentBuffer==null) } } } CATCH(IOException) { -> LOG.warn("Flushing log file failed!",e,)@!(currentBuffer==null) } FINALLY { -> currentBuffer.clear()@!(currentBuffer==null) }
results[https://github.com/zycgit/hasor/blob/9a38c82fd9a63532d297aa763685f66fb4030226/Trunk/src/src/org/more/util/FileCopy.java][forChannel][5] = -> TRY {  -> outC=out.getChannel()@ -> LOOP { -> IF { -> outC.close()@!(inC.position()==inC.size()) -> return new Date().getTime()-time@inC.position()==inC.size() } -> b=ByteBuffer.allocateDirect(length,)@!(inC.position()==inC.size()) -> inC.read(b,)@!(inC.position()==inC.size()) -> b.flip()@!(inC.position()==inC.size()) -> outC.write(b,)@!(inC.position()==inC.size()) -> outC.force(false,)@!(inC.position()==inC.size()) } } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/917c3d6d36dfef815e1fac5769f384687e9f29d0/kernel/tags/1.0-rc/src/main/java/org/neo4j/kernel/impl/transaction/TxLog.java][addBranch][20] = -> TRY {  -> IF { -> throw new IllegalArgumentException("Null global id",)@globalId==null } -> IF { -> throw new IllegalArgumentException("Null branch id",)@!(globalId==null) && branchId==null } -> buffer.clear()@!(globalId==null) && !(branchId==null) -> buffer.put(BRANCH_ADD,).put((byte) globalId.length,).put((byte) branchId.length,).put(globalId,).put(branchId,)@!(globalId==null) && !(branchId==null) -> buffer.flip()@!(globalId==null) && !(branchId==null) -> fileChannel.write(buffer,)@!(globalId==null) && !(branchId==null) } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/58c53f67d53062b1f7e2a1b7d0c425812f938d68/kernel/tags/1.0/src/test/java/org/neo4j/kernel/impl/nioneo/store/TestXa.java][truncateLogicalLog][1] = -> TRY {  -> fileChannel=new RandomAccessFile("nioneo_logical.log."+active,"rw",).getChannel()@ -> IF { -> fileChannel.truncate(size,)@fileChannel.size()>size } ELSE { -> fileChannel.position(size,)@!(fileChannel.size()>size) -> buf=ByteBuffer.allocate(1,)@ -> buf.put((byte) 0,).flip()@ -> fileChannel.write(buf,)@!(fileChannel.size()>size) } -> fileChannel.force(false,)@ -> fileChannel.close()@ } CATCH(IOException) {}
results[https://github.com/neo4j-attic/graphdb/blob/4e496d1a578fca9606f358b946108a6bd583c7ae/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][setActiveLog][16] = -> TRY {  -> IF { -> throw new IllegalArgumentException("Log must be either clean, "+"1 or 2",)@c!=CLEAN&&c!=LOG1&&c!=LOG2 } -> bb=ByteBuffer.wrap( new byte[],)@!(c==currentLog) && !(c!=CLEAN&&c!=LOG1&&c!=LOG2) -> bb.asCharBuffer().put(c,).flip()@!(c==currentLog) && !(c!=CLEAN&&c!=LOG1&&c!=LOG2) -> fc=new RandomAccessFile(fileName+".active","rw",).getChannel()@!(c==currentLog) && !(c!=CLEAN&&c!=LOG1&&c!=LOG2) -> wrote=fc.write(bb,)@!(c==currentLog) && !(c!=CLEAN&&c!=LOG1&&c!=LOG2) -> IF { -> throw new IllegalStateException("Expected to write 4 -> "+wrote,)@wrote!=4 && !(c==currentLog) && !(c!=CLEAN&&c!=LOG1&&c!=LOG2) } -> fc.force(false,)@!(c==currentLog) && !(wrote!=4) && !(c!=CLEAN&&c!=LOG1&&c!=LOG2) -> fc.close()@!(c==currentLog) && !(wrote!=4) && !(c!=CLEAN&&c!=LOG1&&c!=LOG2) } CATCH(IOException) {}
results[https://github.com/dmontag/graphdb-traversal-context/blob/844de5dfa3cdd64849e2c034e031929db57b2862/kernel/src/test/java/org/neo4j/kernel/impl/nioneo/store/TestXa.java][truncateLogicalLog][15] = -> TRY {  -> fileChannel=new RandomAccessFile(file("nioneo_logical.log."+active,),"rw",).getChannel()@ -> IF { -> fileChannel.truncate(size,)@fileChannel.size()>size } ELSE { -> fileChannel.position(size,)@!(fileChannel.size()>size) -> buf=ByteBuffer.allocate(1,)@ -> buf.put((byte) 0,).flip()@ -> fileChannel.write(buf,)@!(fileChannel.size()>size) } -> fileChannel.force(false,)@ -> fileChannel.close()@ } CATCH(IOException) {}
results[https://github.com/gurkerl83/millipede-xtreemfs/blob/ba3583c3fdb92050e88960eb18b0e3a6d55424b3/java/servers/src/org/xtreemfs/osd/storage/RealSingleFileStorageLayout.java][deleteObject][1] = -> TRY {  -> IF { } ELSE { -> IF { -> buf=BufferPool.allocate(stripeSize,)@ -> LOOP { -> buf.put((byte) 0,)@buf.hasRemaining() } -> buf.flip()@ -> c=ofile.getChannel()@ -> c.position(objFileOffset,)@ -> c.write(buf.getBuffer(),)@ } } } CATCH(IOException) {}
results[https://github.com/asascience/THREDDS/blob/24013a286a38fb3c7bb7d4717350dc736e48e825/cdm/src/main/java/ucar/nc2/geotiff/GeoTiff.java][writeMetadata][2] = -> TRY {  -> IF { -> start=writeHeader(channel,)@ } ELSE { -> channel.position(lastIFD,)@ -> buffer=ByteBuffer.allocate(4,)@ -> IF { -> System.out.println("position before writing nextIFD= "+channel.position()+" IFD is "+firstIFD,)@ } -> buffer.putInt(firstIFD,)@ -> buffer.flip()@ -> channel.write(buffer,)@ } -> writeIFD(channel,firstIFD,)@ } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/1cd37d152fae04ccd6e94294cbafc01c2719643a/kernel/branches/1.1-maint/src/main/java/org/neo4j/kernel/impl/nioneo/store/AbstractStore.java][createEmptyStore][18] = -> IF { -> throw new IllegalArgumentException("Null filename",)@fileName==null } -> IF { -> throw new IllegalStateException("Can't create store["+fileName+"], file already exists",)@!(fileName==null) && file.exists() } -> TRY { -> channel=new FileOutputStream(fileName,).getChannel()@!(fileName==null) && !(file.exists()) -> buffer=ByteBuffer.allocate(endHeaderSize,)@!(fileName==null) && !(file.exists()) -> buffer.put(typeAndVersionDescriptor.getBytes(),).flip()@!(fileName==null) && !(file.exists()) -> channel.write(buffer,)@!(fileName==null) && !(file.exists()) -> channel.force(false,)@!(fileName==null) && !(file.exists()) -> channel.close()@!(fileName==null) && !(file.exists()) } CATCH(IOException) { -> throw new UnderlyingStorageException("Unable to create store "+fileName,e,)@!(fileName==null) && !(file.exists()) }
results[https://github.com/wangyif2/4d19/blob/a59ce1366c9741d97a7a828331bff0bd8fde64e4/Lab4/src/zookeeper/contrib/bookkeeper/src/java/org/apache/bookkeeper/bookie/BufferedChannel.java][write][38] = -> TRY {  -> IF { -> writeBuffer=ByteBuffer.allocateDirect(capacity,)@writeBuffer==null } -> LOOP { -> IF { -> truncated=src.remaining()-writeBuffer.remaining()@writeBuffer.remaining()<src.remaining() && src.remaining()>0 } -> writeBuffer.put(src,)@src.remaining()>0 -> IF { -> writeBuffer.flip()@writeBuffer.remaining()==0 -> bc.write(writeBuffer,)@writeBuffer.remaining()==0 -> writeBuffer.clear()@writeBuffer.remaining()==0 -> writeBufferStartPosition=bc.position()@ } } } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/c7e879bc56b238829d4e681605d91a0ab216a4d7/kernel/branches/ha/src/main/java/org/neo4j/kernel/impl/nioneo/store/IdGeneratorImpl.java][createGenerator][18] = -> IF { -> throw new IllegalArgumentException("Null filename",)@fileName==null } -> IF { -> throw new IllegalStateException("Can't create IdGeneratorFile["+fileName+"], file already exists",)@!(fileName==null) && file.exists() } -> TRY { -> channel=new FileOutputStream(fileName,).getChannel()@!(fileName==null) && !(file.exists()) -> buffer=ByteBuffer.allocate(HEADER_SIZE,)@!(fileName==null) && !(file.exists()) -> buffer.put(CLEAN_GENERATOR,).putLong(0,).flip()@!(fileName==null) && !(file.exists()) -> channel.write(buffer,)@!(fileName==null) && !(file.exists()) -> channel.force(false,)@!(fileName==null) && !(file.exists()) -> channel.close()@!(fileName==null) && !(file.exists()) } CATCH(IOException) { -> throw new UnderlyingStorageException("Unable to create id generator"+fileName,e,)@!(fileName==null) && !(file.exists()) }
results[https://github.com/hugojosefson/neo4j-components-svn/blob/a5b1019cb2d9cc108829b2ac5d635e29483d5b69/neo/branches/neo-tx-fix/src/java/org/neo4j/impl/nioneo/store/IdGenerator.java][createGenerator][2] = -> IF { -> throw new IllegalArgumentException("Null filename",)@fileName==null } -> IF { -> throw new IllegalStateException("Can't create IdGeneratorFile["+fileName+"], file already exists",)@!(fileName==null) && file.exists() } -> TRY { -> channel=new FileOutputStream(fileName,).getChannel()@!(fileName==null) && !(file.exists()) -> buffer=ByteBuffer.allocate(HEADER_SIZE,)@!(fileName==null) && !(file.exists()) -> buffer.put(CLEAN_GENERATOR,).putInt(0,).flip()@!(fileName==null) && !(file.exists()) -> channel.write(buffer,)@!(fileName==null) && !(file.exists()) -> channel.force(false,)@!(fileName==null) && !(file.exists()) -> channel.close()@!(fileName==null) && !(file.exists()) } CATCH(IOException) { -> throw new StoreFailureException("Unable to create id generator"+fileName,e,)@!(fileName==null) && !(file.exists()) }
results[https://github.com/encog/encog-java-core/blob/c22c483c1e8a95caddceddf9cc169c10948fd4ae/src/main/java/org/encog/ml/data/buffer/EncogEGBFile.java][create][2] = -> TRY { -> this.fc=this.raf.getChannel()@ -> this.headerBuffer.clear()@ -> this.headerBuffer.order(ByteOrder.LITTLE_ENDIAN,)@ -> this.headerBuffer.put((byte) 'E',)@ -> this.headerBuffer.put((byte) 'N',)@ -> this.headerBuffer.put((byte) 'C',)@ -> this.headerBuffer.put((byte) 'O',)@ -> this.headerBuffer.put((byte) 'G',)@ -> this.headerBuffer.put((byte) '-',)@ -> this.headerBuffer.put((byte) '0',)@ -> this.headerBuffer.put((byte) '0',)@ -> this.headerBuffer.putDouble(input.length,)@ -> this.headerBuffer.putDouble(ideal.length,)@ -> this.headerBuffer.flip()@ -> this.fc.write(this.headerBuffer,)@ } CATCH(IOException) { -> throw new BufferedDataError(ex,)@ }
results[https://github.com/jeromerobert/jCAE/blob/1d508573646d6b192529200ecf27d9f60135ed30/amibe/src/org/jcae/mesh/oemm/RawStorage.java][action][1] = -> TRY { -> fco=new FileOutputStream(new File(oemm.getDirectory(),current.file+"v",),).getChannel()@ -> bbt.clear()@ -> bbtD=bbt.asDoubleBuffer()@ -> LOOP { -> bbt.position(8*bbtD.position(),)@ -> bbt.flip()@ -> fco.write(bbt,)@ } -> fco.close()@ } CATCH(IOException) { -> logger.severe("I/O error when converting coordinates file",)@ -> ex.printStackTrace()@ -> throw new RuntimeException(ex,)@ }
results[https://github.com/hugojosefson/neo4j-components-svn/blob/8832e1da94228bc88dce28f0e72bd66ab1677bd2/neo/branches/xa-log-rotate/src/java/org/neo4j/impl/nioneo/store/AbstractStore.java][createEmptyStore][1] = -> IF { -> throw new IllegalArgumentException("Null filename",)@fileName==null } -> IF { -> throw new IllegalStateException("Can't create store["+fileName+"], file already exists",)@!(fileName==null) && file.exists() } -> TRY { -> channel=new FileOutputStream(fileName,).getChannel()@!(fileName==null) && !(file.exists()) -> buffer=ByteBuffer.allocate(endHeaderSize,)@!(fileName==null) && !(file.exists()) -> buffer.put(typeAndVersionDescriptor.getBytes(),).flip()@!(fileName==null) && !(file.exists()) -> channel.write(buffer,)@!(fileName==null) && !(file.exists()) -> channel.force(false,)@!(fileName==null) && !(file.exists()) -> channel.close()@!(fileName==null) && !(file.exists()) } CATCH(IOException) { -> throw new StoreFailureException("Unable to create store "+fileName,e,)@!(fileName==null) && !(file.exists()) }
results[https://github.com/neo4j-attic/graphdb/blob/e82cead0f458a42bf4ee38059d51cc16cd8e1ae6/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/AbstractStore.java][createEmptyStore][1] = -> IF { -> throw new IllegalArgumentException("Null filename",)@fileName==null } -> IF { -> throw new IllegalStateException("Can't create store["+fileName+"], file already exists",)@!(fileName==null) && file.exists() } -> TRY { -> channel=new FileOutputStream(fileName,).getChannel()@!(fileName==null) && !(file.exists()) -> buffer=ByteBuffer.allocate(endHeaderSize,)@!(fileName==null) && !(file.exists()) -> buffer.put(UTF8.encode(typeAndVersionDescriptor,),).flip()@!(fileName==null) && !(file.exists()) -> channel.write(buffer,)@!(fileName==null) && !(file.exists()) -> channel.force(false,)@!(fileName==null) && !(file.exists()) -> channel.close()@!(fileName==null) && !(file.exists()) } CATCH(IOException) { -> throw new UnderlyingStorageException("Unable to create store "+fileName,e,)@!(fileName==null) && !(file.exists()) }
results[https://github.com/apavlo/h-store/blob/800c04c98a9ab597b38ebdeee323cd59445cd198/src/frontend/org/voltdb/utils/VoltFile.java][moveSubRootContents][2] = -> TRY {  -> LOOP { } ELSE { -> IF { -> IF { -> throw new IOException()@!(fInOtherSubroot.exists()) && !(fInOtherSubroot.createNewFile()) } -> buf=ByteBuffer.allocateDirect(8192,)@!(fInOtherSubroot.exists()) && !(!(fInOtherSubroot.createNewFile())) -> outputChannel=fos.getChannel()@!(fInOtherSubroot.exists()) && !(!(fInOtherSubroot.createNewFile())) -> LOOP { -> buf.flip()@!(fInOtherSubroot.exists()) && inputChannel.read(buf,)!=-1 && !(!(fInOtherSubroot.createNewFile())) -> outputChannel.write(buf,)@!(fInOtherSubroot.exists()) && inputChannel.read(buf,)!=-1 && !(!(fInOtherSubroot.createNewFile())) -> buf.clear()@!(fInOtherSubroot.exists()) && inputChannel.read(buf,)!=-1 && !(!(fInOtherSubroot.createNewFile())) } -> outputChannel.close()@!(fInOtherSubroot.exists()) && !(!(fInOtherSubroot.createNewFile())) } } } CATCH(IOException) {}
results[https://github.com/niloc132/mauve-gwt/blob/a0a4197f6b0b0b27460a1d12e8b94f42af1695ef/gnu/testlet/java/nio/channels/FileChannel/copyIO.java][copyIO][1] = -> TRY {  -> buffer=ByteBuffer.allocate(bufsize,)@ -> LOOP { -> buffer.clear()@ -> pos=buffer.position()@ -> limit=buffer.limit()@ -> LOOP { -> buffer.limit(i,)@i<=limit -> l=in.read(buffer,)@ } -> buffer.flip()@ -> pos=buffer.position()@ -> limit=buffer.limit()@ -> LOOP { -> buffer.limit(i,)@i<=limit -> out.write(buffer,)@ } } } CATCH(IOException) {}
results[https://github.com/kjetilv/vanadis/blob/915b29a84a87a9febb7429f53d3e3867b4596414/core/src/main/java/net/sf/vanadis/core/io/Files.java][copy][3] = -> buffer=ByteBuffer.allocate(8192,)@ -> outChannel=out.getChannel()@ -> TRY { -> LOOP { -> read=inChannel.read(buffer,)@ -> IF { -> buffer.flip()@read>0 -> outChannel.write(buffer,)@read>0 -> buffer.clear()@read>0 } ELSE { -> IF { -> return target@!(read>0) && read<0 } } } } CATCH(IOException) { -> throw new IORuntimeException("Failed to copy data from "+source+" to "+target,e,)@ } FINALLY { -> Closeables.close(in,out,)@ }
results[https://github.com/niloc132/mauve-gwt/blob/ab97ffbf30dfe377d3046183399f63f44ebf7445/gnu/testlet/java/nio/channels/FileChannel/offsetSingleDirectBuffer.java][test][1] = -> TRY { -> out=ByteBuffer.allocateDirect(50,)@ -> out.put(data,)@ -> out.flip()@ -> out.position(5,)@ -> fc=fOut.getChannel()@ -> numBytes=fc.write(out,)@ -> harness.check(numBytes,data.length-5,"Number of bytes written",)@ -> fc.close()@ } CATCH(UnsupportedEncodingException) { -> harness.fail("Unsupported Encoding",)@ } CATCH(SecurityException) { -> harness.fail("Unexpected exception: "+e,)@ } CATCH(FileNotFoundException) { -> harness.fail("Unexpected exception: "+e,)@ } CATCH(IOException) { -> harness.fail("Unexpected exception: "+e,)@ }
results[https://github.com/Morgothdev/semV___teoria_wspolbieznosci/blob/756d7818dbfa8b9a2b186098b3db5fc4fa8d7c20/src/pl/com/morgoth/studia/semV/TW/lab6/FileAppender.java][handleEvent][1] = -> TRY { -> LOOP { -> IF { -> IF { -> dst.put(System.lineSeparator().getBytes(),)@readed>0 && readed<dst.capacity() && (readed=pipe.source().read(dst,))!=0 } -> dst.flip()@readed>0 && (readed=pipe.source().read(dst,))!=0 -> wrote=fileChannel.write(dst,)@readed>0 && (readed=pipe.source().read(dst,))!=0 -> LogManager.getLogger(FileAppender.class,).log(Level.INFO,"file appender reads {}, wrote {}",readed,wrote,)@readed>0 && (readed=pipe.source().read(dst,))!=0 -> dst.clear()@readed>0 && (readed=pipe.source().read(dst,))!=0 } ELSE { -> return @!(readed>0) && (readed=pipe.source().read(dst,))!=0 } } } CATCH(IOException) { -> LogManager.getLogger(FileAppender.class,).error("run",e,)@ }
results[https://github.com/niloc132/mauve-gwt/blob/ab97ffbf30dfe377d3046183399f63f44ebf7445/gnu/testlet/java/nio/channels/FileChannel/offsetSingleBuffer.java][test][1] = -> TRY { -> out=ByteBuffer.allocate(50,)@ -> out.put(data,)@ -> out.flip()@ -> out.position(5,)@ -> fc=fOut.getChannel()@ -> numBytes=fc.write(out,)@ -> harness.check(numBytes,data.length-5,"Number of bytes written",)@ -> fc.close()@ } CATCH(UnsupportedEncodingException) { -> harness.fail("Unsupported Encoding",)@ } CATCH(SecurityException) { -> harness.fail("Unexpected exception: "+e,)@ } CATCH(FileNotFoundException) { -> harness.fail("Unexpected exception: "+e,)@ } CATCH(IOException) { -> harness.fail("Unexpected exception: "+e,)@ }
results[https://github.com/neo4j-attic/graphdb/blob/4e496d1a578fca9606f358b946108a6bd583c7ae/src/main/java/org/neo4j/kernel/impl/nioneo/store/AbstractDynamicStore.java][createEmptyStore][16] = -> IF { -> throw new IllegalArgumentException("Null filename",)@fileName==null } -> IF { -> throw new IllegalStateException("Can't create store["+fileName+"], file already exists",)@!(fileName==null) && file.exists() } -> TRY { -> channel=new FileOutputStream(fileName,).getChannel()@!(fileName==null) && !(file.exists()) && !(blockSize<1) -> buffer=ByteBuffer.allocate(endHeaderSize,)@!(fileName==null) && !(file.exists()) && !(blockSize<1) -> buffer.putInt(blockSize,)@!(fileName==null) && !(file.exists()) && !(blockSize<1) -> buffer.position(endHeaderSize-typeAndVersionDescriptor.length(),)@!(fileName==null) && !(file.exists()) && !(blockSize<1) -> buffer.put(typeAndVersionDescriptor.getBytes(),).flip()@!(fileName==null) && !(file.exists()) && !(blockSize<1) -> channel.write(buffer,)@!(fileName==null) && !(file.exists()) && !(blockSize<1) -> channel.force(false,)@!(fileName==null) && !(file.exists()) && !(blockSize<1) -> channel.close()@!(fileName==null) && !(file.exists()) && !(blockSize<1) } CATCH(IOException) { -> throw new UnderlyingStorageException("Unable to create store "+fileName,e,)@!(fileName==null) && !(file.exists()) && !(blockSize<1) }
results[https://github.com/neo4j-attic/graphdb/blob/e82cead0f458a42bf4ee38059d51cc16cd8e1ae6/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/AbstractDynamicStore.java][createEmptyStore][1] = -> IF { -> throw new IllegalArgumentException("Null filename",)@fileName==null } -> IF { -> throw new IllegalStateException("Can't create store["+fileName+"], file already exists",)@!(fileName==null) && file.exists() } -> TRY { -> channel=new FileOutputStream(fileName,).getChannel()@!(blockSize>0xFFFF) && !(fileName==null) && !(file.exists()) && !(blockSize<1) -> buffer=ByteBuffer.allocate(endHeaderSize,)@!(blockSize>0xFFFF) && !(fileName==null) && !(file.exists()) && !(blockSize<1) -> buffer.putInt(blockSize,)@!(blockSize>0xFFFF) && !(fileName==null) && !(file.exists()) && !(blockSize<1) -> buffer.position(endHeaderSize-typeAndVersionDescriptor.length(),)@!(blockSize>0xFFFF) && !(fileName==null) && !(file.exists()) && !(blockSize<1) -> buffer.put(UTF8.encode(typeAndVersionDescriptor,),).flip()@!(blockSize>0xFFFF) && !(fileName==null) && !(file.exists()) && !(blockSize<1) -> channel.write(buffer,)@!(blockSize>0xFFFF) && !(fileName==null) && !(file.exists()) && !(blockSize<1) -> channel.force(false,)@!(blockSize>0xFFFF) && !(fileName==null) && !(file.exists()) && !(blockSize<1) -> channel.close()@!(blockSize>0xFFFF) && !(fileName==null) && !(file.exists()) && !(blockSize<1) } CATCH(IOException) { -> throw new UnderlyingStorageException("Unable to create store "+fileName,e,)@!(blockSize>0xFFFF) && !(fileName==null) && !(file.exists()) && !(blockSize<1) }
results[https://github.com/hugojosefson/neo4j-components-svn/blob/a5b1019cb2d9cc108829b2ac5d635e29483d5b69/neo/branches/neo-tx-fix/src/java/org/neo4j/impl/nioneo/store/AbstractDynamicStore.java][createEmptyStore][2] = -> IF { -> throw new IllegalArgumentException("Null filename",)@fileName==null } -> IF { -> throw new IllegalStateException("Can't create store["+fileName+"], file already exists",)@!(fileName==null) && file.exists() } -> TRY { -> channel=new FileOutputStream(fileName,).getChannel()@!(fileName==null) && !(file.exists()) && !(blockSize<1) -> buffer=ByteBuffer.allocate(endHeaderSize,)@!(fileName==null) && !(file.exists()) && !(blockSize<1) -> buffer.putInt(blockSize,)@!(fileName==null) && !(file.exists()) && !(blockSize<1) -> buffer.position(endHeaderSize-typeAndVersionDescriptor.length(),)@!(fileName==null) && !(file.exists()) && !(blockSize<1) -> buffer.put(typeAndVersionDescriptor.getBytes(),).flip()@!(fileName==null) && !(file.exists()) && !(blockSize<1) -> channel.write(buffer,)@!(fileName==null) && !(file.exists()) && !(blockSize<1) -> channel.force(false,)@!(fileName==null) && !(file.exists()) && !(blockSize<1) -> channel.close()@!(fileName==null) && !(file.exists()) && !(blockSize<1) } CATCH(IOException) { -> throw new StoreFailureException("Unable to create store "+fileName,e,)@!(fileName==null) && !(file.exists()) && !(blockSize<1) }
results[https://github.com/xnio/xnio/blob/ca17c029c6e20130e35325cc69ecf12d3b21f2f2/api/src/test/java/org/xnio/XnioFileChannelTestCase.java][lock][1] = -> TRY {  -> buffer=ByteBuffer.allocate(10,)@ -> buffer.put("1234567890".getBytes(),).flip()@ -> assertEquals(10,fileChannel.write(buffer,),)@ -> lock=fileChannel.lock()@ -> TRY { -> fileChannel.lock(3,5,false,)@ } -> lock=fileChannel.lock(3,5,false,)@ -> TRY { -> fileChannel.tryLock()@ } -> lock=fileChannel.tryLock()@ -> lock=fileChannel.tryLock(1,3,true,)@ -> TRY { -> fileChannel.tryLock(1,3,true,)@ } } CATCH(IOException) {}
results[https://github.com/swmaestro2012/somap312_17_CurFit/blob/29ad9d3096466d8056da7b7c15499d98e575b22e/app/controllers/Looks.java][newLook][1] = -> TRY { -> outChannel=new FileOutputStream(new File(LOCAL_IMAGE_PATH+"/"+look.getImageFileName(),),).getChannel()@ -> buf=ByteBuffer.allocate(1024,)@ -> LOOP { } ELSE { -> buf.flip()@!(inChannel.read(buf,)==-1) -> outChannel.write(buf,)@!(inChannel.read(buf,)==-1) -> buf.clear()@!(inChannel.read(buf,)==-1) } } CATCH(IllegalStateException) { -> e.printStackTrace()@ } CATCH(NoSuchAlgorithmException) { -> e.printStackTrace()@ } CATCH(IOException) { -> e.printStackTrace()@ }
results[https://github.com/quinnjn/CMPT470-A2/blob/4174fe633bf644c772e60eccd96ffe2c2f478fd3/org/gjt/sp/jedit/io/LocalFileSaveTask.java][_run][2] = -> TRY { -> ch=os.getChannel()@ -> src=body.getBytes(charset,)@ -> ch=os.getChannel()@ -> buff=ByteBuffer.allocate(BUFFER_SIZE,)@ -> setMaximum(length,)@ -> setStatus("Saving "+length+" bytes to "+file.getPath(),)@ -> LOOP { -> written+=ch.write((ByteBuffer) buff.put(src,written,Math.min(BUFFER_SIZE,length-written,),).flip(),)@written<length -> buff.rewind()@ -> setValue(written,)@written<length } } CATCH(IOException) { -> Log.log(Log.ERROR,this,e,e,)@ } FINALLY { -> IOUtilities.closeQuietly((Closeable) ch,)@ -> IOUtilities.closeQuietly((Closeable) os,)@ }
results[https://github.com/openstreetmap/mkgmap/blob/68e9a0683116c956cb3d29f9dc7f636c14783d8e/src/uk/me/parabola/imgfmt/sys/DirectoryEntryImpl.java][sync][3] = -> TRY {  -> buf=ByteBuffer.allocate(blockSize,)@ -> buf.order(ByteOrder.LITTLE_ENDIAN,)@ -> buf.put((byte) 1,)@ -> log.debug("nm "+buf.position(),)@ -> buf.put(toBytes(name,MAX_FILE_LEN,(byte) ' ',),)@ -> buf.put(toBytes(ext,MAX_EXT_LEN,(byte) ' ',),)@ -> buf.putInt(size,)@ -> IF { -> buf.putChar((char) 0x03,)@ } ELSE { -> buf.putChar((char) 0,)@ } -> buf.position(0x20,)@ -> LOOP { -> buf.putChar(blockTable[i],)@i<blockSize-BLOCKS_TABLE_START/2 } -> buf.flip()@ -> file.write(buf,)@ } CATCH(IOException) {}
results[https://github.com/neo4j-attic/graphdb/blob/e82cead0f458a42bf4ee38059d51cc16cd8e1ae6/kernel/src/test/java/org/neo4j/kernel/impl/transaction/xaframework/TestBufferedReadableByteChannel.java][createFromData][1] = -> TRY {  -> channel=testRAFile.getChannel()@ -> IF { -> buffer=ByteBuffer.allocate(inFile.length*4,)@ -> LOOP { -> buffer.putInt(datum,)@ } -> buffer.flip()@ -> channel.write(buffer,)@ -> buffer.rewind()@ } -> IF { -> buffer=ByteBuffer.allocate(inBuffer.length*4,)@ -> LOOP { -> buffer.putInt(datum,)@ } } ELSE { -> buffer=ByteBuffer.allocate(0,)@ } -> buffer.rewind()@ -> channel=new BufferedReadableByteChannel(channel,CloseableByteBuffer.wrap(buffer,),)@ } CATCH(IOException) {}
results[https://github.com/AusencoSimulation/JaamSim/blob/7a0a144d5f400bad084454f81624a10cd46d340e/src/main/java/com/jaamsim/video/AviWriter.java][addFrame][1] = -> header=ByteBuffer.allocate(8,)@ -> header.order(ByteOrder.LITTLE_ENDIAN,)@ -> IF { -> extraBytes=4-frameData.limit()&3@frameData.limit()&3!=0 } -> f.size=frameData.limit()+8+extraBytes@ -> writeFourCC(header,"00dc",)@ -> header.putInt(frameData.limit()+extraBytes,)@ -> header.flip()@ -> TRY { -> fc.write(header,)@ -> fc.write(frameData,)@ -> header.clear()@ -> LOOP { -> header.put((byte) 0,)@ } -> header.flip()@ -> IF { -> fc.write(header,)@ } } CATCH(IOException) { -> LogBox.renderLogException(ex,)@ -> throw new RuntimeException(ex,)@ }
results[https://github.com/eclipse/linuxtools/blob/1752105830849bd75480ffce1693fc039f18433b/lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/statesystem/backends/historytree/HistoryTree.java][closeTree][1] = -> TRY { -> buffer=ByteBuffer.allocate(TREE_HEADER_SIZE,)@ -> buffer.order(ByteOrder.LITTLE_ENDIAN,)@ -> buffer.clear()@ -> fc.position(0,)@ -> buffer.putInt(HISTORY_FILE_MAGIC_NUMBER,)@ -> buffer.putInt(FILE_VERSION,)@ -> buffer.putInt(config.getProviderVersion(),)@ -> buffer.putInt(config.getBlockSize(),)@ -> buffer.putInt(config.getMaxChildren(),)@ -> buffer.putInt(nodeCount,)@ -> buffer.putInt(latestBranch.get(0,).getSequenceNumber(),)@ -> buffer.putLong(latestBranch.get(0,).getNodeStart(),)@ -> buffer.flip()@ -> res=fc.write(buffer,)@ } CATCH(IOException) { -> throw new RuntimeException("State system write error",)@ }
results[https://github.com/eclipse/linuxtools/blob/1752105830849bd75480ffce1693fc039f18433b/lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/statesystem/backends/historytree/HTNode.java][writeSelf][1] = -> TRY {  -> buffer=ByteBuffer.allocate(blockSize,)@ -> buffer.order(ByteOrder.LITTLE_ENDIAN,)@ -> buffer.clear()@ -> buffer.put(this.getNodeType(),)@ -> buffer.putLong(nodeStart,)@ -> buffer.putLong(nodeEnd,)@ -> buffer.putInt(sequenceNumber,)@ -> buffer.putInt(parentSequenceNumber,)@ -> buffer.putInt(intervals.size(),)@ -> buffer.putInt(stringSectionOffset,)@ -> buffer.put((byte) 1,)@ -> this.writeSpecificHeader(buffer,)@ -> LOOP { -> size=interval.writeInterval(buffer,curStringsEntryEndPos,)@ } -> LOOP { -> buffer.put((byte) 0,)@buffer.position()<stringSectionOffset } -> buffer.position(blockSize,)@ -> buffer.flip()@ -> res=fc.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/xnio/xnio/blob/ca17c029c6e20130e35325cc69ecf12d3b21f2f2/api/src/test/java/org/xnio/XnioFileChannelTestCase.java][simpleReadAndWrite][1] = -> TRY {  -> assertEquals(0,fileChannel.size(),)@ -> buffer=ByteBuffer.allocate(5,)@ -> buffer.put("abcde".getBytes(),).flip()@ -> assertEquals(5,fileChannel.write(buffer,),)@ -> assertEquals(5,fileChannel.size(),)@ -> assertEquals(5,fileChannel.position(),)@ -> fileChannel.position(0,)@ -> assertEquals(0,fileChannel.position(),)@ -> assertEquals(5,fileChannel.size(),)@ -> assertEquals(5,fileChannel.read(readBuffer,),)@ -> assertEquals(5,fileChannel.position(),)@ -> assertEquals(5,fileChannel.size(),)@ } CATCH(IOException) {}
results[https://github.com/xnio/xnio/blob/45ee7d7d906374c8a2c5ef6a1b4c3096cd210e08/nio-impl/src/test/java/org/xnio/nio/test/AbstractStreamSinkSourceChannelTest.java][transferFrom][1] = -> TRY {  -> buffer=ByteBuffer.allocate(20,)@ -> buffer.put("transferred message".getBytes(),).flip()@ -> fileChannel=randomAccessFile.getChannel()@ -> TRY { -> assertEquals(0,sinkChannel.transferFrom(fileChannel,0,6,),)@ -> fileChannel.write(buffer,)@ -> assertEquals(8,sinkChannel.transferFrom(fileChannel,0,8,),)@ -> assertEquals(11,sinkChannel.transferFrom(fileChannel,8,11,),)@ -> assertEquals(0,sinkChannel.transferFrom(fileChannel,19,6,),)@ -> TRY { -> sinkChannel.transferFrom(fileChannel,0,6,)@ } } FINALLY { -> fileChannel.close()@ -> randomAccessFile.close()@ } } CATCH(IOException) {}
results[https://github.com/swagiaal/linuxtools-systemtap/blob/99cfe57c1eb03e84062b1b15c8606f4425c7f9df/lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/backend/historytree/HTNode.java][writeSelf][4] = -> TRY {  -> buffer=ByteBuffer.allocate(ownerTree.config.blockSize,)@ -> buffer.order(ByteOrder.LITTLE_ENDIAN,)@ -> buffer.clear()@ -> buffer.put(this.getNodeType(),)@ -> buffer.putLong(nodeStart,)@ -> buffer.putLong(nodeEnd,)@ -> buffer.putInt(sequenceNumber,)@ -> buffer.putInt(parentSequenceNumber,)@ -> buffer.putInt(intervals.size(),)@ -> buffer.putInt(stringSectionOffset,)@ -> buffer.put(boolToByte(isDone,),)@ -> this.writeSpecificHeader(buffer,)@ -> LOOP { -> size=interval.writeInterval(buffer,curStringsEntryEndPos,)@ } -> LOOP { -> buffer.put((byte) 0,)@buffer.position()<stringSectionOffset } -> buffer.position(ownerTree.config.blockSize,)@ -> buffer.flip()@ -> res=fc.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/jeromerobert/jCAE/blob/1d508573646d6b192529200ecf27d9f60135ed30/amibe/src/org/jcae/mesh/oemm/RawStorage.java][processIndexExternalVerticesProcedure][1] = -> TRY { -> fct=new FileOutputStream(new File(oemm.getDirectory(),current.file+"t",),).getChannel()@ -> bbt.clear()@ -> bbtI=bbt.asIntBuffer()@ -> LOOP { -> LOOP { -> IF { -> IF { -> bbt.clear()@ -> fct.write(bbt,)@ } } } } -> IF { -> bbt.position(4*bbtI.position(),)@bbtI.position()>0 -> bbt.flip()@ -> fct.write(bbt,)@ } -> fct.close()@ } CATCH(IOException) { -> logger.severe("I/O error when reading intermediate file",)@ -> ex.printStackTrace()@ -> throw new RuntimeException(ex,)@ }
results[https://github.com/hugojosefson/neo4j-components-svn/blob/56ea416b65847a0546af14255913f8f57f4d876e/kernel/branches/ha/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][doInternalRecovery][1] = -> TRY {  -> header=readLogHeader(buffer,fileChannel,false,)@ -> IF { -> fileChannel.close()@!(header==null) -> fileChannel=new RandomAccessFile(logFileName,"rw",).getChannel()@!(header==null) -> return @header==null } -> lastEntryPos=fileChannel.position()@!(header==null) -> LOOP { -> lastEntryPos=fileChannel.position()@!(header==null) } -> fileChannel.position(lastEntryPos,)@!(header==null) -> buffer.clear()@!(header==null) -> LOOP { -> buffer.put((byte) 0,)@!(header==null) && buffer.hasRemaining() } -> buffer.flip()@!(header==null) -> endPosition=fileChannel.size()@!(header==null) -> fileChannel.position()<endPosition@!(header==null) -> LOOP { -> bytesLeft=fileChannel.size()-fileChannel.position()@!(header==null) -> IF { -> buffer.limit((int) bytesLeft,)@!(header==null) && bytesLeft<buffer.capacity() } -> fileChannel.write(buffer,)@!(header==null) -> buffer.flip()@!(header==null) } -> fileChannel.position(lastEntryPos,)@!(header==null) } CATCH(IOException) {}
results[https://github.com/dmontag/graphdb-traversal-context/blob/4e496d1a578fca9606f358b946108a6bd583c7ae/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][doInternalRecovery][5] = -> TRY {  -> header=readLogHeader(buffer,fileChannel,false,)@ -> IF { -> fileChannel.close()@!(header==null) -> fileChannel.close()@!(header==null) -> fileChannel=new RandomAccessFile(logFileName,"rw",).getChannel()@!(header==null) -> return @header==null } -> lastEntryPos=fileChannel.position()@!(header==null) -> LOOP { -> lastEntryPos=fileChannel.position()@!(header==null) } -> fileChannel.position(lastEntryPos,)@!(header==null) -> buffer.clear()@!(header==null) -> LOOP { -> buffer.put((byte) 0,)@!(header==null) && buffer.hasRemaining() } -> buffer.flip()@!(header==null) -> endPosition=fileChannel.size()@!(header==null) -> fileChannel.position()<endPosition@!(header==null) -> LOOP { -> bytesLeft=fileChannel.size()-fileChannel.position()@!(header==null) -> IF { -> buffer.limit((int) bytesLeft,)@!(header==null) && bytesLeft<buffer.capacity() } -> fileChannel.write(buffer,)@!(header==null) -> buffer.flip()@!(header==null) } -> fileChannel.position(lastEntryPos,)@!(header==null) } CATCH(IOException) {}
results[https://github.com/neo4j-attic/graphdb/blob/e82cead0f458a42bf4ee38059d51cc16cd8e1ae6/kernel/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][doInternalRecovery][1] = -> TRY {  -> header=readLogHeader(fileChannel,"Tried to do recovery on log with illegal format version",)@ -> IF { -> fileChannel.close()@!(header==null) -> fileChannel.close()@!(header==null) -> fileChannel=new RandomAccessFile(logFileName,"rw",).getChannel()@!(header==null) -> return @header==null } -> lastEntryPos=fileChannel.position()@!(header==null) -> LOOP { -> lastEntryPos=fileChannel.position()@!(header==null) } -> fileChannel.position(lastEntryPos,)@!(header==null) -> buffer.clear()@!(header==null) -> LOOP { -> buffer.put((byte) 0,)@!(header==null) && buffer.hasRemaining() } -> buffer.flip()@!(header==null) -> endPosition=fileChannel.size()@!(header==null) -> fileChannel.position()<endPosition@!(header==null) -> LOOP { -> bytesLeft=fileChannel.size()-fileChannel.position()@!(header==null) -> IF { -> buffer.limit((int) bytesLeft,)@!(header==null) && bytesLeft<buffer.capacity() } -> fileChannel.write(buffer,)@!(header==null) -> buffer.flip()@!(header==null) } -> fileChannel.position(lastEntryPos,)@!(header==null) } CATCH(IOException) {}
results[https://github.com/eclipse/linuxtools/blob/99cfe57c1eb03e84062b1b15c8606f4425c7f9df/lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/backend/historytree/HistoryTree.java][closeTree][1] = -> fc=treeIO.getFcOut()@ -> buffer=ByteBuffer.allocate(getTreeHeaderSize(),)@ -> buffer.order(ByteOrder.LITTLE_ENDIAN,)@ -> buffer.clear()@ -> TRY { -> fc.position(0,)@ -> buffer.putInt(HISTORY_FILE_MAGIC_NUMBER,)@ -> buffer.putInt(MAJOR_VERSION,)@ -> buffer.putInt(MINOR_VERSION,)@ -> buffer.putInt(config.blockSize,)@ -> buffer.putInt(config.maxChildren,)@ -> buffer.putInt(nodeCount,)@ -> buffer.putInt(latestBranch.firstElement().getSequenceNumber(),)@ -> buffer.putLong(latestBranch.firstElement().getNodeStart(),)@ -> buffer.flip()@ -> res=fc.write(buffer,)@ -> assert res<=getTreeHeaderSize()@ } CATCH(IOException) { -> e.printStackTrace()@ } FINALLY { -> TRY { -> fc.close()@ } FINALLY { -> e.printStackTrace()@ } }
