results[https://github.com/LeeMinWoo/android_dalvik/blob/b99b5cd0be8ab0d9791768c21ffd0d637b564df8/libcore/nio/src/test/java/org/apache/harmony/nio/tests/java/nio/channels/FileChannelTest.java][test_positionJ_WriteOnly][8] = -> TRY {  -> writeBuffer=ByteBuffer.wrap(CONTENT_AS_BYTES,)@ -> writeOnlyFileChannel.position(POSITION,)@ -> writeOnlyFileChannel.write(writeBuffer,)@ -> writeOnlyFileChannel.close()@ } CATCH(Exception) {}
results[https://github.com/maxmind/MaxMind-DB-Reader-java/blob/f65461e84646e51866c2f75326186a485dfdd1c5/src/test/java/com/maxmind/db/DecoderTest.java][getFileChannel][2] = -> TRY {  -> fc=raf.getChannel()@ -> fc.write(ByteBuffer.wrap(data,),)@ -> fc.close()@ } CATCH(IOException) {}
results[https://github.com/apache/directory-server/blob/08b785b726f0111fab897edcaa7bf2a18f361b81/kerberos-codec/src/main/java/org/apache/directory/server/kerberos/shared/keytab/Keytab.java][writeFile][1] = -> TRY {  -> wChannel=new FileOutputStream(file,false,).getChannel()@ -> wChannel.write(buffer,)@ -> wChannel.close()@ } CATCH(IOException) {}
results[https://github.com/zhuowei/MCPELauncher/blob/52b0d745b45573a4050c334f6e51a074cd2fa620/src/net/zhuoweizhang/mcpelauncher/NerdyStuffActivity.java][dumpLib][1] = -> TRY { -> channel=os.getChannel()@ -> channel.write(com.mojang.minecraftpe.MainActivity.minecraftLibBuffer,)@ -> channel.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/shiffman/shiffman.github.io/blob/50593000652328c8df6ffb2406d5fd4ba8d4c7ce/itp/classes/a2z/week04/simple/A2ZFileWriter.java][writeContent][2] = -> TRY {  -> outfc=fos.getChannel()@ -> bb=ByteBuffer.wrap(content.getBytes(),)@ -> outfc.write(bb,)@ -> outfc.close()@ } CATCH(IOException) {}
results[https://github.com/safuus/MobX/blob/dda353da9eeeff8fabbee62fe03b6448cd1b7238/mobxserver/apache-mina-2.0.4/src/mina-core/src/test/java/org/apache/mina/transport/AbstractFileRegionTest.java][createLargeFile][2] = -> TRY {  -> channel=new FileOutputStream(largeFile,).getChannel()@ -> buffer=createBuffer()@ -> channel.write(buffer,)@ -> channel.close()@ } CATCH(IOException) {}
results[https://github.com/davecheney/motown/blob/c66aa8518b024d51a523cb307791e7103c1066d2/motown-dav/src/main/java/net/cheney/motown/dav/resource/file/FileResource.java][put][2] = -> TRY {  -> fc=new FileOutputStream(file(),).getChannel()@ -> fc.write(entity,)@ -> fc.close()@ } CATCH(IOException) {}
results[https://github.com/bcdev/beam-globalbedo/blob/75e85c525bc3d66cb8098cdf5540293496948a03/beam-globalbedo-albedo-inversion/src/test/java/org/esa/beam/globalbedo/inversion/util/IOTest.java][testWriteFloatArray1][1] = -> TRY {  -> bb=ByteBuffer.allocateDirect(dim1*dim2*4,)@ -> floatBuffer=bb.asFloatBuffer()@ -> ch=file_output.getChannel()@ -> ch.write(bb,)@ -> ch.close()@ } CATCH(Exception) {}
results[https://github.com/zhongl/iPage/blob/8dd2b26f9b33feb288938f9052554f70e92517a0/src/main/java/com/github/zhongl/journal/CRC32WritableByteChannel.java][close][1] = -> TRY {  -> crc32Buffer=ByteBuffer.wrap(Longs.toByteArray(crc32.getValue(),),)@ -> channel.write(crc32Buffer,)@ -> channel.close()@ } CATCH(IOException) {}
results[https://github.com/uvalbbu/dalvik_test/blob/e595037cf49109e9e20b47e6e191eda45e414008/luni/src/test/java/org/apache/harmony/nio/tests/java/nio/MappedByteBufferTest.java][fillTempFile][14] = -> TRY {  -> fileChannel=fileOutputStream.getChannel()@ -> byteBuffer=ByteBuffer.allocateDirect(BUFFER_LENGTH,)@ -> loadTestData1(byteBuffer,)@ -> byteBuffer.clear()@ -> fileChannel.write(byteBuffer,)@ -> fileChannel.close()@ } CATCH(IOException) {}
results[https://github.com/OpenEtna/android_dalvik/blob/88f28cad4d6617b4f82f1cd752a7a9b11a555561/libcore/nio/src/test/java/org/apache/harmony/nio/tests/java/nio/channels/FileChannelTest.java][test_writeLByteBuffer][8] = -> TRY {  -> writeBuffer=ByteBuffer.wrap(CONTENT_AS_BYTES,)@ -> result=writeOnlyFileChannel.write(writeBuffer,)@ -> assertEquals(CONTENT_AS_BYTES_LENGTH,result,)@ -> assertEquals(CONTENT_AS_BYTES_LENGTH,writeBuffer.position(),)@ -> writeOnlyFileChannel.close()@ } CATCH(Exception) {}
results[https://github.com/svn2github/H2-Mirror/blob/215771a28861c5e8a85582dd94b1c1b04e1bd83d/h2/src/test/org/h2/test/db/TestOpenClose.java][testErrorMessageWrongSplit][2] = -> TRY {  -> c=FileUtils.open(fn+".1.part","rw",)@ -> c.position(c.size()*2-1,)@ -> c.write(ByteBuffer.wrap( new byte[],),)@ -> c.close()@ } CATCH(Exception) {}
results[https://github.com/ewcmsfree/ewcms/blob/2ef6f402907978c26e6faae6b913a95f99a5c036/src/main/java/com/ewcms/plugin/crawler/generate/util/IO.java][writeBytesToFile][2] = -> TRY { -> fc=new FileOutputStream(destination,).getChannel()@ -> fc.write(ByteBuffer.wrap(bytes,),)@ -> fc.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/Jules-/terraingis/blob/d7e0c36af856d850c63253fdd172423e04862d86/src/TerrainGIS/src/cz/kalcik/vojta/shapefilelib/files/ShapeFileReader.java][writeBytesToFile][1] = -> TRY {  -> output=new FileOutputStream(file.getAbsolutePath(),).getChannel()@ -> buffer.position(0,)@ -> output.write(buffer,)@ -> output.close()@ } CATCH(IOException) {}
results[https://github.com/coderplay/h2-bitmap/blob/a6164db4e1ea39482dc45713e20b9bcf59c8ed42/h2/src/test/org/h2/test/db/TestOpenClose.java][testErrorMessageWrongSplit][5] = -> TRY {  -> c=FileUtils.open(getBaseDir()+"/openClose2.h2.db.1.part","rw",)@ -> c.position(c.size()*2-1,)@ -> c.write(ByteBuffer.wrap( new byte[],),)@ -> c.close()@ } CATCH(Exception) {}
results[https://github.com/bluespark80/example/blob/25b780a08c881e3ebcbacf85a817729741a549e4/nio/src/test/java/org/apache/harmony/nio/tests/java/nio/channels/FileChannelTest.java][test_writeLByteBuffer_NonZeroPosition][8] = -> TRY {  -> writeBuffer=ByteBuffer.wrap(CONTENT_AS_BYTES,)@ -> writeBuffer.position(pos,)@ -> result=writeOnlyFileChannel.write(writeBuffer,)@ -> assertEquals(CONTENT_AS_BYTES_LENGTH-pos,result,)@ -> assertEquals(CONTENT_AS_BYTES_LENGTH,writeBuffer.position(),)@ -> writeOnlyFileChannel.close()@ } CATCH(Exception) {}
results[https://github.com/apache/jackrabbit-oak/blob/76796cc3e097b6cf5214fe0618448a7b672656f3/oak-core/src/test/java/org/apache/jackrabbit/mk/fs/FileSystemTest.java][testSimpleExpandTruncateSize][8] = -> TRY {  -> c=FileUtils.open(f,"rw",)@ -> c.position(4000,)@ -> c.write(ByteBuffer.wrap( new byte[],),)@ -> lock=c.tryLock()@ -> c.truncate(0,)@ -> c.close()@ } CATCH(Exception) {}
results[https://github.com/codefollower/H2-Research/blob/2efda0eb90f9f0163dabacddca5456201e54407f/test/my/test/store/fs/FileUtilsTest.java][main2][4] = -> TRY {  -> fc=FileUtils.open(fileName,mode,)@ -> src=ByteBuffer.allocate(1024,)@ -> src.put("ddddddddd".getBytes(),)@ -> src.flip()@ -> fc.write(src,)@ -> fc.close()@ } CATCH(Exception) {}
results[https://github.com/TihiyTi/HeartLive/blob/0e66147bf9190fb745f206548726b1d6ee1707f7/CommunicationFile/src/test/java/com/tihiy/comm/parse/FreeTest.java][testWrite_3][1] = -> TRY {  -> fco=new FileOutputStream("test_out3.txt",).getChannel()@ -> bb=ByteBuffer.allocate(100,)@ -> bb.put(array,)@ -> bb.rewind()@ -> fco.write(bb,)@ -> fco.close()@ } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/fb4a87a3c5251243c2f45ff181b809e5c77396ab/kernel/branches/new-index-api/src/main/java/org/neo4j/kernel/impl/transaction/TxManager.java][changeActiveLog][15] = -> TRY {  -> fc=new RandomAccessFile(logSwitcherFileName,"rw",).getChannel()@ -> buf=ByteBuffer.wrap(newFileName.getBytes(),)@ -> fc.truncate(0,)@ -> fc.write(buf,)@ -> fc.force(true,)@ -> fc.close()@ } CATCH(IOException) {}
results[https://github.com/saces/jgit/blob/1b4f76d7bc3bf15291391e6aabdca02796232873/org.eclipse.jgit/src/org/eclipse/jgit/lib/GitIndex.java][checkoutEntry][4] = -> TRY {  -> channel=new FileOutputStream(file,).getChannel()@ -> buffer=ByteBuffer.wrap(bytes,)@ -> j=channel.write(buffer,)@ -> IF { -> throw new IOException("Could not write file "+file,)@j!=bytes.length } -> channel.close()@!(j!=bytes.length) } CATCH(IOException) {}
results[https://github.com/bcdev/beam-globalbedo/blob/0c3f737f5561573520e14f07381b4ebe5f87073b/beam-globalbedo-albedo-inversion/src/main/java/org/esa/beam/globalbedo/inversion/util/IOUtils.java][writeFullAccumulatorToFile][2] = -> TRY { -> wChannel=file_output.getChannel()@ -> bb=ByteBuffer.allocateDirect(dim1+1*dim2*dim3*4,)@ -> floatBuffer=bb.asFloatBuffer()@ -> wChannel.write(bb,)@ -> wChannel.close()@ } CATCH(IOException) { -> BeamLogManager.getSystemLogger().log(Level.WARNING,"Could not write full accumulator to file:  "+e+" // "+e.getMessage()+" // buffer index =  "+index,)@ }
results[https://github.com/caosd/AdPlatform/blob/c63439a8b6385392b68473be09f1d82df1b3557c/project/portal/src/com/stomato/utils/FileUtils.java][writeBytes2File][1] = -> TRY {  -> targetChannel=new FileOutputStream(out,).getChannel()@ -> TRY { -> targetChannel.write(bb,)@ } FINALLY { -> targetChannel.close()@ } } CATCH(Exception) {}
results[https://github.com/NCIP/lexevs/blob/9f630d706a6fd62ab01ab2bfdb9f8bbae2a7743a/loader-framework-core/src/main/java/org/lexgrid/loader/writer/NoClosingRootTagStaxEventItemWriter.java][close][1] = -> IF { -> TRY { -> channel=os.getChannel()@!(!(xml.endsWith(rootTag,))) -> byteBuffer=ByteBuffer.wrap(rootTag.getBytes(),)@!(xml.endsWith(rootTag,)) -> channel.write(byteBuffer,)@!(!(xml.endsWith(rootTag,))) -> channel.close()@!(!(xml.endsWith(rootTag,))) } CATCH(IOException) { -> throw new RuntimeException(ioe,)@!(xml.endsWith(rootTag,)) } }
results[https://github.com/RamesesDev/osiris2/blob/ee716ae432471d376fe6a7a2104703a8f0c83fe1/labs/rameses-scheduling/test/test/TestFile.java][testHello][1] = -> TRY {  -> buffer=ByteBuffer.allocate(100,)@ -> buffer.put(data,)@ -> buffer.flip()@ -> writeChannel=fos.getChannel()@ -> writeChannel.write(buffer,)@ -> System.out.println(writeChannel.position(),)@ -> writeChannel.close()@ } CATCH(Exception) {}
results[https://github.com/cardsystem/our-card-system/blob/74c917660b1a47118f5bcdbfc74a64458934094b/CardSystem/src/test/java/com/redcard/card/service/FileExportTest.java][nioWrite][1] = -> TRY {  -> fileChannel=new FileOutputStream(file,).getChannel()@ -> LOOP { -> fileChannel.write(ByteBuffer.wrap(CONTENT.getBytes(),),)@ } -> fileChannel.close()@ } CATCH(IOException) {}
results[https://github.com/zhongl/iPage/blob/0a0c634c5b48191dcc2766b3366aaa556ce888d3/src/test/java/com/github/zhongl/nio/ForceBenchmark.java][forceChannelOnce][1] = -> TRY {  -> channel=new FileOutputStream(file,).getChannel()@ -> LOOP { -> channel.write(ByteBuffer.wrap( new byte[],),)@ } -> channel.force(false,)@ -> channel.close()@ } CATCH(Exception) {}
results[https://github.com/neo4j-attic/graphdb/blob/e82cead0f458a42bf4ee38059d51cc16cd8e1ae6/kernel/src/main/java/org/neo4j/kernel/impl/transaction/TxManager.java][changeActiveLog][1] = -> TRY {  -> fc=new RandomAccessFile(logSwitcherFileName,"rw",).getChannel()@ -> buf=ByteBuffer.wrap(UTF8.encode(newFileName,),)@ -> fc.truncate(0,)@ -> fc.write(buf,)@ -> fc.force(true,)@ -> fc.close()@ } CATCH(IOException) {}
results[https://github.com/apache/jackrabbit-oak/blob/76796cc3e097b6cf5214fe0618448a7b672656f3/oak-core/src/test/java/org/apache/jackrabbit/mk/fs/FileSystemTest.java][testAppend][1] = -> TRY {  -> c=FileUtils.open(fileName,"rw",)@ -> c.position(0,)@ -> buff=ByteBuffer.wrap(array,)@ -> LOOP { -> c.write(buff,)@ -> buff.rewind()@ } -> c.close()@ } CATCH(IOException) {}
results[https://github.com/exoplatform/aio-portal/blob/a01c7972884aa573f857089dd4597800aed7d209/component/xml-parser/src/main/java/org/exoplatform/services/common/DataBuffer.java][save][1] = -> TRY {  -> fchan=output.getChannel()@ -> buff=ByteBuffer.allocateDirect(d.length,)@ -> LOOP { -> buff.put(d[i],)@i<d.length } -> buff.rewind()@ -> fchan.write(buff,)@ -> buff.clear()@ -> fchan.close()@ } CATCH(Exception) {}
results[https://github.com/student2ua/myTaning/blob/9723adf39930f99142fccabc6567be08970746bc/src/tests/com/tor/io/FileCopyTest.java][copy][1] = -> TRY {  -> fout=new FileOutputStream(out,).getChannel()@ -> buff=ByteBuffer.allocate(4096,)@ -> LOOP { -> buff.flip()@fin.read(buff,)!=-1||buff.position()>0 -> fout.write(buff,)@fin.read(buff,)!=-1||buff.position()>0 -> buff.compact()@fin.read(buff,)!=-1||buff.position()>0 } -> fout.close()@ } CATCH(IOException) {}
results[https://github.com/TihiyTi/HeartLive/blob/0e66147bf9190fb745f206548726b1d6ee1707f7/CommunicationFile/src/test/java/com/tihiy/comm/parse/FreeTest.java][testWriteChannel][1] = -> TRY {  -> fco=fos.getChannel()@ -> buffer=ByteBuffer.allocate(512,)@ -> buffer.putInt(1111,)@ -> buffer.putDouble(2.3,)@ -> buffer.limit(buffer.position(),)@ -> buffer.rewind()@ -> fco.write(buffer,)@ -> fco.close()@ } CATCH(IOException) {}
results[https://github.com/thyms/Code-Base/blob/bb57a562bb3ccabc067856c4934db81145e561ae/code.base.main/src/main/java/javam/io/RunnerReadingAFile.java][main][1] = -> TRY {  -> targetChannel=new FileOutputStream("src/main/resources/temp/temp_write.txt",).getChannel()@ -> buffer1=ByteBuffer.allocate(1024,)@ -> LOOP { -> buffer1.flip()@(read1=sourceChannel.read(buffer1,))!=-1 -> targetChannel.write(buffer1,)@(read1=sourceChannel.read(buffer1,))!=-1 -> buffer1.clear()@(read1=sourceChannel.read(buffer1,))!=-1 } -> targetChannel.close()@ } CATCH(Exception) {}
results[https://github.com/italiangrid/voms-api-java/blob/a6347e981ea5f70cabec6e17da48ef57cf39650f/src/main/java/org/italiangrid/voms/util/CredentialsUtils.java][saveProxyCredentials][1] = -> TRY {  -> channel=raf.getChannel()@ -> channel.truncate(0,)@ -> baos=new ByteArrayOutputStream()@ -> saveProxyCredentials(baos,uc,encoding,)@ -> baos.close()@ -> channel.write(ByteBuffer.wrap(baos.toByteArray(),),)@ -> channel.close()@ } CATCH(IOException,UnrecoverableKeyException,KeyStoreException,IllegalArgumentException,NoSuchAlgorithmException,NoSuchProviderException,CertificateException) {}
results[https://github.com/apache/activemq/blob/02185be527e3a28eee8c82031e6d8ad6c6736916/activemq-console/src/main/java/org/apache/activemq/console/command/CreateCommand.java][writeFile][1] = -> TRY {  -> buf=ByteBuffer.allocate(data.length(),)@typeName.equals("winActivemq",) -> buf.put(data.getBytes(),)@typeName.equals("winActivemq",) -> buf.flip()@typeName.equals("winActivemq",) -> destinationChannel=new FileOutputStream(dest,).getChannel()@typeName.equals("winActivemq",) -> destinationChannel.write(buf,)@typeName.equals("winActivemq",) -> destinationChannel.close()@typeName.equals("winActivemq",) } CATCH(IOException) {}
results[https://github.com/bcdev/beam-globalbedo/blob/75e85c525bc3d66cb8098cdf5540293496948a03/beam-globalbedo-albedo-inversion/src/test/java/org/esa/beam/globalbedo/inversion/util/IOTest.java][testWriteFloatArray2][1] = -> TRY {  -> ch=file_output.getChannel()@ -> bb=ByteBuffer.allocate(dim1*dim2*4,)@ -> LOOP { -> LOOP { -> bb.putFloat(index,fArray[i][j],)@i<dim1 && j<dim2 } } -> ch.write(bb,)@ -> ch.close()@ } CATCH(Exception) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/b74938a6b9fc978783ac5eeb1ced8c52e9f8008c/index/tags/1.1/src/test/java/org/neo4j/index/lucene/TestRecovery.java][copyLogicalLog][7] = -> TRY {  -> buffer=ByteBuffer.allocate(1024,)@ -> dest=new RandomAccessFile(copy,"rw",).getChannel()@ -> LOOP { -> read=source.read(buffer,)@ -> buffer.flip()@ -> dest.write(buffer,)@ -> buffer.clear()@ } -> dest.close()@ } CATCH(IOException) {}
results[https://github.com/junit-team/junit/blob/2cd6f108a04f782c3abcf245de85fbe4b7a5316d/src/test/java/org/junit/tests/experimental/rules/TimeoutRuleTest.java][run5][1] = -> TRY {  -> LOOP { -> TRY { -> channel=randomAccessFile.getChannel()@ -> buffer=ByteBuffer.wrap(data,)@ -> channel.write(buffer,)@ } FINALLY { -> randomAccessFile.close()@ } } } CATCH(IOException) {}
results[https://github.com/alevy/comet/blob/2077d66e96bdbf07bfb5a80b3b65f8521bb50667/dht/org/gudy/azureus2/core3/util/test/SHA1Verification.java][createTestFiles][10] = -> TRY { -> LOOP { -> fc=new RandomAccessFile(file,"rw",).getChannel()@ -> LOOP { -> bb=ByteBuffer.wrap(buffer,)@ -> position+=fc.write(bb,)@position<size } -> fc.close()@ } } CATCH(Exception) { -> Debug.printStackTrace(e,)@ }
results[https://github.com/LuckyStars/nbc/blob/68178f825c92a07c932ea6931a15bc2a5d568e4b/function-schoolmaster2/java/function-masterdata/src/main/com/nbcedu/function/schoolmaster2/core/util/FileUtil.java][copyWithNIO][4] = -> TRY {  -> outChannel=outFile.getChannel()@ -> buffer=ByteBuffer.allocate(1024*1024,)@ -> LOOP { -> buffer.flip()@inChannel.read(buffer,)!=-1 -> LOOP { -> outChannel.write(buffer,)@inChannel.read(buffer,)!=-1 && buffer.hasRemaining() } -> buffer.clear()@inChannel.read(buffer,)!=-1 } -> outChannel.close()@ } CATCH(IOException) {}
results[https://github.com/shiffman/shiffman.github.io/blob/50593000652328c8df6ffb2406d5fd4ba8d4c7ce/itp/classes/a2z/week01/ReverseCharacters.java][main][7] = -> TRY {  -> bb=ByteBuffer.allocate((int) fc.size(),)@ -> fc.read(bb,)@ -> content=new String(bb.array(),)@ -> outfc=fos.getChannel()@ -> bb=ByteBuffer.wrap(output.getBytes(),)@ -> outfc.write(bb,)@ -> outfc.close()@ } CATCH(IOException) {}
results[https://github.com/neo4j-attic/graphdb/blob/e82cead0f458a42bf4ee38059d51cc16cd8e1ae6/kernel/src/test/java/org/neo4j/kernel/impl/nioneo/store/TestUpgradeStore.java][setOlderNeoStoreVersion][1] = -> TRY {  -> channel=new RandomAccessFile(new File(path,"neostore",),"rw",).getChannel()@ -> channel.position(channel.size()-UTF8.encode(oldVersion,).length,)@ -> buffer=ByteBuffer.wrap(UTF8.encode(oldVersion,),)@ -> channel.write(buffer,)@ -> channel.close()@ } CATCH(IOException) {}
results[https://github.com/dancres/blitzjavaspaces/blob/6f12762f513b31206fd029f397c06f3436d32cf4/src/main/java/org/dancres/io/FileCopier.java][copy][2] = -> TRY {  -> myOut=myOutFile.getChannel()@ -> LOOP { -> myBytes=myIn.read(theBuffer,)@ -> IF { -> theBuffer.flip()@ -> myOut.write(theBuffer,)@ -> theBuffer.clear()@ } } -> myOut.close()@ } CATCH(IOException) {}
results[https://github.com/thobe/neo4j-advanced/blob/8d98235f3926d4612537c342ec29bc31310fbc6d/src/test/unit/neo/store/TestXa.java][copyLogicalLog][5] = -> TRY {  -> dest=new RandomAccessFile("nioneo_logical.log.bak","rw",).getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> LOOP { -> read=source.read(buffer,)@ -> buffer.flip()@ -> dest.write(buffer,)@ -> buffer.clear()@ } -> dest.close()@ } CATCH(IOException) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/02ec718efbfc4858e8cf673a85431874a6b05c8e/test/java/nio/channels/FileChannel/Transfer.java][xferTest02][2] = -> TRY {  -> LOOP { -> srcData[i]=(byte) generator.nextInt()@i<5000 } -> fc1=raf1.getChannel()@ -> LOOP { -> bytesWritten=fc1.write(ByteBuffer.wrap(srcData,),)@bytesWritten<5000 } -> bytesWritten=fc1.transferTo(startPosition,bytesToWrite,fc2,)@ -> fc1.close()@ } CATCH(Exception) {}
results[https://github.com/twitter/bookkeeper/blob/29eaed884a442a73cd620776085da00395f86b53/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java][writeLedgerDir][2] = -> TRY {  -> LOGFILE_HEADER=ByteBuffer.allocate(1024,)@ -> LOGFILE_HEADER.put("BKLO".getBytes(),)@ -> logfile=new RandomAccessFile(new File(dir,Long.toHexString(logId,)+".log",),"rw",).getChannel()@ -> logfile.write((ByteBuffer) LOGFILE_HEADER.clear(),)@ -> logfile.close()@ } CATCH(Exception) {}
results[https://github.com/dukeboard/kevoree-extra/blob/a9091fa5070b4961a50caf69830bb7d011f46db2/org.kevoree.extra.ha-jdbc/src/main/java/net/sf/hajdbc/sql/FileSupportImpl.java][createFile][1] = -> TRY {  -> TRY { -> fileChannel=new FileOutputStream(file,).getChannel()@ -> buffer=ByteBuffer.allocate(BUFFER_SIZE,)@ -> LOOP { -> buffer.flip()@inputChannel.read(buffer,)>0 -> fileChannel.write(buffer,)@inputChannel.read(buffer,)>0 -> buffer.compact()@inputChannel.read(buffer,)>0 } -> fileChannel.close()@ } CATCH(IOException) { -> throw this.exceptionFactory.createException(e,)@ } } CATCH(E) {}
results[https://github.com/apache/harmony/blob/f551fa157905248d1c1f59f88ce40d311e611611/classlib/modules/nio/src/test/java/common/org/apache/harmony/nio/tests/java/nio/MappedByteBufferTest.java][setUp][4] = -> TRY {  -> fileChannel=fileOutputStream.getChannel()@ -> byteBuffer=ByteBuffer.allocateDirect(26+20,)@ -> LOOP { -> byteBuffer.put((byte) 'A'+i,)@i<26 } -> LOOP { -> byteBuffer.putInt(i+1,)@i<5 } -> byteBuffer.rewind()@ -> fileChannel.write(byteBuffer,)@ -> fileChannel.close()@ } CATCH(IOException) {}
results[https://github.com/ealimonda/eNotes/blob/c1c100cb324919e4341a5db87bf803a701200eff/Project/src/it/unica/enotes/NoteView.java][viewAttachment][1] = -> attachment=this._note.getAttachment()@ -> attachment.getFiletype()@ -> TRY { -> writeChannel=new FileOutputStream(attachmentFile,false,).getChannel()@ -> writeChannel.write(attachment.getRawData(),)@ -> writeChannel.close()@ } CATCH(FileNotFoundException) { -> e.printStackTrace()@ } CATCH(IOException) { -> e.printStackTrace()@ }
results[https://github.com/uditrugman/openjdk8-jdk/blob/02ec718efbfc4858e8cf673a85431874a6b05c8e/test/java/nio/channels/FileChannel/Transfer.java][xferTest03][2] = -> TRY {  -> fc1=raf1.getChannel()@ -> fc1.truncate(0,)@ -> LOOP { -> bytesWritten=fc1.write(ByteBuffer.wrap(srcData,),)@bytesWritten<4 } -> fc1.transferTo(0,srcData.length+1,fc2,)@ -> IF { -> throw new Exception("xferTest03 failed",)@fc2.size()>4 } -> fc1.close()@!(fc2.size()>4) } CATCH(Exception) {}
results[https://github.com/Silveryfu/ProjectsTS/blob/6f928e435c16fee835e453d508c8620b7f0be16d/CMPT371P1/ChordDHT/ChordDHT.java][writeFile][1] = -> TRY {  -> sb.append(id+" ",)@ -> IF { -> sb.append("\n",)@ -> fc=new FileOutputStream("./dht.out",).getChannel()@ -> fc.write(ByteBuffer.wrap(sb.toString().getBytes(),),)@ -> fc.close()@ } } CATCH(IOException) {}
results[https://github.com/lalalic/Personal/blob/c471fddc9a6c0e1c6dc43fb65f98a1a0e0191320/travel/android-1qiyou/src/com/equ/lbs/LocationUpdater.java][flush][1] = -> TRY { -> IF { -> out=new FileOutputStream(f,true,).getChannel()@out==null||!(out.isOpen()) } -> buffer.flip()@ -> out.write(buffer,)@ -> buffer.clear()@ -> out.force(true,)@ -> out.close()@ } CATCH(Exception) { -> service.notify(e.getMessage(),)@ }
results[https://github.com/oyhk/free-main/blob/a3baa44bdbad7143bdab3ea8a41ffcaf54408d87/free-apiservice/src/main/java/com/mkfree/apiservice/service/upload/impl/AppUploadAttrachmentServiceImpl.java][saveFile][1] = -> TRY { -> foChannel=new FileOutputStream(fileName,).getChannel()@ -> foChannel.write(fileByteBuffer,)@ -> foChannel.close()@ } CATCH(FileNotFoundException) { -> e.printStackTrace()@ } CATCH(IOException) { -> e.printStackTrace()@ } FINALLY { -> fileByteBuffer.clear()@ }
results[https://github.com/czarneckid/blojsom-sourceforge/blob/d161d7c443a718e6185036920bc166078a26ecd2/branches/blojsom-2_25-final/blojsom-2.0/src/org/blojsom/util/BlojsomUtils.java][copyDirectory][7] = -> TRY {  -> IF { -> LOOP { -> fcout=fos.getChannel()@ -> buf=ByteBuffer.allocateDirect(8192,)@ -> LOOP { -> buf.clear()@ -> buf.flip()@ -> n+=fcout.write(buf,)@n<size } -> fcout.close()@ } } } CATCH(IOException) {}
results[https://github.com/ikeji/openjdk7-jdk/blob/c445903c23d3316d31b5171130aaf714c23f3446/test/java/io/FileDescriptor/Finalize.java][doFileChannel][3] = -> TRY {  -> fc2=fis2.getChannel()@ -> bb=ByteBuffer.allocateDirect(1,)@ -> ret=fc2.read(bb,)@ -> System.out.println("read "+ret+" bytes from fc2:",)@ -> fc2.close()@ -> fc2=fos2.getChannel()@ -> bb=ByteBuffer.allocateDirect(data.length,)@ -> bb=bb.put(data,)@ -> bb=(ByteBuffer) bb.flip()@ -> ret=fc2.write(bb,)@ -> System.out.println("Wrote:"+ret+" bytes to fc2",)@ -> fc2.close()@ } CATCH(Exception) {}
results[https://github.com/xnio/xnio/blob/0f97eb8647e5dc28a6cd54a03d13b1db667b08e5/api/src/test/java/org/xnio/XnioTestCase.java][checkReadOnlyFileChannel][1] = -> TRY {  -> TRY { -> assertNotNull(fileChannel,)@ -> TRY { -> fileChannel.write(ByteBuffer.allocate(10,),)@ } -> fileChannel.position(0,)@ -> fileChannel.read(buffer,)@ } FINALLY { -> fileChannel.close()@ } } CATCH(IOException) {}
results[https://github.com/DuncanCragg/Cyrus/blob/52d4c5c4aae2949454a429ac6b94cd826e29429d/src/cyrus/platform/Kernel.java][writeFile][1] = -> TRY {  -> channel=os.getChannel()@ -> n=channel.write(bytebuffer,)@ -> fileuser.writable(bytebuffer,n,)@ } CATCH(Exception) {}
results[https://github.com/undera/jmeter-plugins/blob/852448a16b18833321a15d60e640112e6a7f92a6/src/kg/apc/jmeter/reporters/FlexibleFileWriter.java][closeFile][2] = -> IF { -> TRY { -> footer=getFileFooter()@ -> IF { -> fileChannel.write(ByteBuffer.wrap(footer.getBytes(),),)@fileChannel!=null&&fileChannel.isOpen() && !(footer.isEmpty()) } -> fileChannel.force(false,)@fileChannel!=null&&fileChannel.isOpen() -> fileChannel.close()@fileChannel!=null&&fileChannel.isOpen() } CATCH(IOException) { -> log.error("Failed to close file: "+getFilename(),ex,)@ } }
results[https://github.com/undera/jmeter-plugins/blob/41ae50cf90581255d3b965e26a91e9b8531eccd8/standard/src/kg/apc/jmeter/reporters/FlexibleFileWriter.java][closeFile][1] = -> IF { -> TRY { -> footer=JMeterPluginsUtils.replaceRNT(getFileFooter(),)@ -> IF { -> fileChannel.write(ByteBuffer.wrap(footer.getBytes(),),)@fileChannel!=null&&fileChannel.isOpen() && !(footer.isEmpty()) } -> fileChannel.force(false,)@fileChannel!=null&&fileChannel.isOpen() -> fileChannel.close()@fileChannel!=null&&fileChannel.isOpen() } CATCH(IOException) { -> log.error("Failed to close file: "+getFilename(),ex,)@ } }
results[https://github.com/maesse/CubeTech/blob/52215c2b53cb49ef88c62359566c960d627eec66/src/cubetech/client/ClientRender.java][writeScreenshot][1] = -> IF { -> IF { -> return @!(folder.exists())||!(folder.isDirectory()) && !(created) } } -> TRY { -> IF { -> return @!(!(folder.exists())||!(folder.isDirectory())) && !(created)||!(f.canWrite()) } -> fc=new FileOutputStream(f,).getChannel()@!(!(created)||!(f.canWrite())) && !(!(folder.exists())||!(folder.isDirectory())) -> data=ByteBuffer.wrap(filedata,0,filedata.length,)@!(!(created)||!(f.canWrite())) && !(!(folder.exists())||!(folder.isDirectory())) -> fc.write(data,)@!(!(created)||!(f.canWrite())) && !(!(folder.exists())||!(folder.isDirectory())) -> fc.close()@!(!(created)||!(f.canWrite())) && !(!(folder.exists())||!(folder.isDirectory())) } CATCH(IOException) { -> Common.Log(Common.getExceptionString(ex,),)@!(!(folder.exists())||!(folder.isDirectory())) }
results[https://github.com/svn2github/H2-Mirror/blob/6d2693f380b111ad55032d19d869ed3fcad6cc4a/h2/src/test/org/h2/test/unit/TestRecovery.java][testCorrupt][7] = -> TRY {  -> f=FileUtils.open(getBaseDir()+"/recovery.h2.db","rw",)@ -> LOOP { -> FileUtils.readFully(f,ByteBuffer.wrap(buff,),)@f.position()<f.size() -> IF { -> f.position(f.position()-buff.length,)@f.position()<f.size() -> f.write(ByteBuffer.wrap(buff,),)@f.position()<f.size() && new String(buff,).contains("Hello World1",) } } -> f.close()@ } CATCH(Exception) {}
results[https://github.com/ickik/FormulaMath/blob/566bd9b6116e558c21c93803511b2faa730a1891/FormulaMath/src/main/java/fr/ickik/formulamath/model/FormulaMathSaver.java][saveMap][1] = -> TRY {  -> str=new StringBuilder()@ -> str.append(getMapSizeString(manager.getMapSize(),),)@ -> str.append(getMapToStringBuilder(manager,),)@ -> str.append(getIdealWayToString(manager,),)@ -> channel=outputStream.getChannel()@ -> channel.write(encoder.encode(CharBuffer.wrap(str,),),)@ -> channel.close()@ } CATCH(IOException) {}
results[https://github.com/GrizzlyNIO/grizzly-mirror/blob/68ded84febba3e8f652722ffd7383c2a98f79eef/modules/http-server/src/test/java/org/glassfish/grizzly/http/server/AggregatorAddOnTest.java][handleRead][1] = -> TRY {  -> content=ctx.getMessage()@ -> remaining=content.getContent().remaining()@ -> out.write(content.getContent().toByteBuffer(),)@ -> IF { -> TRY { -> out.close()@ -> result.result(content,)@content.isLast() } CATCH(Throwable) { -> result.failure(e,)@ } } } CATCH(IOException) {}
results[https://github.com/flaviovdf/spiderpig/blob/6bd5077658266755fde22098da7cbe198b45f33c/src/br/ufmg/dcc/vod/ncrawler/filesaver/FileSaverImpl.java][save][1] = -> TRY { -> fileChannel=FileChannel.open(fpath.toPath(),StandardOpenOption.WRITE,)@ -> buffer=ByteBuffer.wrap(payload,)@ -> buffer.rewind()@ -> fileChannel.write(buffer,)@ } CATCH(IOException) { -> LOG.error("Unable to save file "+fileID,e,)@ } FINALLY { -> IF { -> TRY { -> fileChannel.close()@fileChannel!=null } } }
results[https://github.com/alibaba/otter/blob/78e112c7a9337f367accbcebebbe7f2d9a529c9c/shared/common/src/test/java/com/alibaba/otter/shared/common/utils/NioUtilsPerformance.java][channelTest][1] = -> TRY {  -> TRY { -> tChannel=fos.getChannel()@ -> buffer=ByteBuffer.allocate(16*1024,)@ -> LOOP { -> buffer.flip()@sChannel.read(buffer,)>0 -> tChannel.write(buffer,)@sChannel.read(buffer,)>0 -> buffer.clear()@sChannel.read(buffer,)>0 } -> tChannel.close()@ } FINALLY { -> IOUtils.closeQuietly(fis,)@ -> IOUtils.closeQuietly(fos,)@ } } CATCH(Exception) {}
results[https://github.com/undera/jmeter-plugins/blob/41ae50cf90581255d3b965e26a91e9b8531eccd8/standard/src/org/loadosophia/jmeter/LoadosophiaAPIClient.java][multipartPost][2] = -> TRY {  -> postRequest=new PostMethod(URL,)@ -> multipartRequest=new MultipartRequestEntity(parts.toArray( new Part[],),postRequest.getParams(),)@ -> postRequest.setRequestEntity(multipartRequest,)@ -> result=httpClient.executeMethod(postRequest,)@ -> IF { -> resultFile=fos.getChannel()@!(result!=expectedSC) -> resultFile.write(ByteBuffer.wrap(postRequest.getResponseBody(),),)@!(result!=expectedSC) -> resultFile.close()@!(result!=expectedSC) } -> bytes=postRequest.getResponseBody()@!(result!=expectedSC) } CATCH(IOException) {}
results[https://github.com/MoSync/MoSync/blob/69cab3aefea6d208159ad411ea8bf770aa644eda/runtimes/java/platforms/androidJNI/AndroidProject/src/com/mosync/internal/android/MoSyncSound.java][storeIfBinaryAudioResource][1] = -> audioData=mMoSyncThread.getBinaryResource(soundHandle,)@ -> IF { -> return @null==audioData } -> IF { -> return @!(null==audioData) && !(checkIfMimeAudioType(audioData,offset,)) } -> mimeType=readMimeString(audioData,offset,)@!(!(checkIfMimeAudioType(audioData,offset,))) && !(null==audioData) -> IF { -> return @mimeType==null && !(!(checkIfMimeAudioType(audioData,offset,))) && !(null==audioData) } -> TRY { -> channel=audioFileOutputStream.getChannel()@!(!(checkIfMimeAudioType(audioData,offset,))) && !(null==audioData) && !(mimeType==null) -> audioData.position(0,)@!(!(checkIfMimeAudioType(audioData,offset,))) && !(null==audioData) && !(mimeType==null) -> channel.write(audioData,)@!(!(checkIfMimeAudioType(audioData,offset,))) && !(null==audioData) && !(mimeType==null) -> channel.close()@!(!(checkIfMimeAudioType(audioData,offset,))) && !(null==audioData) && !(mimeType==null) } CATCH(Exception) { -> Log.e("MoSyncSound.storeIfBinaryAudioResource","Unable to save temporary audio file.",)@!(!(checkIfMimeAudioType(audioData,offset,))) && !(null==audioData) && !(mimeType==null) -> ex.printStackTrace()@!(!(checkIfMimeAudioType(audioData,offset,))) && !(null==audioData) && !(mimeType==null) }
results[https://github.com/hugojosefson/neo4j-components-svn/blob/58c53f67d53062b1f7e2a1b7d0c425812f938d68/kernel/tags/1.0/src/test/java/org/neo4j/kernel/impl/nioneo/store/TestXa.java][truncateLogicalLog][1] = -> TRY {  -> fileChannel=new RandomAccessFile("nioneo_logical.log."+active,"rw",).getChannel()@ -> IF { -> fileChannel.truncate(size,)@fileChannel.size()>size } ELSE { -> fileChannel.position(size,)@!(fileChannel.size()>size) -> buf=ByteBuffer.allocate(1,)@ -> buf.put((byte) 0,).flip()@ -> fileChannel.write(buf,)@!(fileChannel.size()>size) } -> fileChannel.force(false,)@ -> fileChannel.close()@ } CATCH(IOException) {}
results[https://github.com/xnio/xnio/blob/0f97eb8647e5dc28a6cd54a03d13b1db667b08e5/api/src/test/java/org/xnio/XnioTestCase.java][checkReadWriteFileChannel][1] = -> TRY {  -> TRY { -> assertNotNull(fileChannel,)@ -> buffer=ByteBuffer.allocate(10,)@ -> buffer.put("test".getBytes("UTF-8",),).flip()@ -> assertEquals(4,fileChannel.write(buffer,),)@ -> fileChannel.position(0,)@ -> Channels.transferBlocking(channelMock,fileChannel,0,4,)@ } FINALLY { -> fileChannel.close()@ } } CATCH(IOException) {}
results[https://github.com/wox2/migrace_databaze/blob/fe474e18a720b5bf55f88fc2d35345c3ee57b51f/skola/Fel_bc/2.semestr/OMO/Pecinovsky/MOJJ_Projekty_ASCII/07_Rozhrani_A/Elipsa.java][maWriteStore][2] = -> TRY { -> IF { -> bb=mBinaryResources.get(data,)@!(f.isFile()) -> IF { -> fc=fos.getChannel()@!(f.isFile()) && !(null!=bb) -> bb.position(0,)@null!=bb && !(f.isFile()) -> fc.write(bb,)@null!=bb && !(f.isFile()) -> fc.force(false,)@!(f.isFile()) && !(null!=bb) -> fc.close()@!(f.isFile()) && !(null!=bb) -> return 1@null!=bb && f.isFile() } -> IF { -> return 1@f.isFile() && null!=ubd && !(null!=bb) } -> return STERR_GENERIC@f.isFile() && !(null!=ubd) && !(null!=bb) } } CATCH(Exception) { -> logError("write store exception : "+e.toString(),e,)@ }
results[https://github.com/RamesesDev/osiris2/blob/c8c2d2376572d4a3bd23b0ccf6d60d878d3ac47a/common/rameses-common/src/com/rameses/messaging/LogFile.java][write][1] = -> TRY { -> buffer=ByteBuffer.allocate(allocation,)@ -> buffer.put(data,)@ -> buffer.put(delimiter,)@ -> buffer.flip()@ -> writeChannel=new FileOutputStream(file,true,).getChannel()@ -> writeChannel.write(buffer,)@ -> this.writePosition=writeChannel.position()@ } CATCH(Exception) { -> throw new RuntimeException(ex,)@ } FINALLY { -> TRY { -> writeChannel.close()@ } }
results[https://github.com/HiroshiOkada/PwMemo/blob/fb5b53107be9a40083452473e1a8ff62dea89d90/src/com/toycode/idpw/ExportActivity.java][wirteFile][1] = -> IF { -> throw new RuntimeException("db==null",)@db==null } -> IF { -> throw new RuntimeException("mainPasswod==null",)@mainPasswod==null && !(db==null) } -> TRY { -> dataBuf=ByteBuffer.wrap(cryptBytes,)@!(db==null) && !(mainPasswod==null) -> ch=fos.getChannel()@!(db==null) && !(mainPasswod==null) -> ch.write(dataBuf,)@!(db==null) && !(mainPasswod==null) -> ch.close()@!(db==null) && !(mainPasswod==null) } CATCH(IOException) { -> App.debugLog(this,e.toString(),)@!(db==null) && !(mainPasswod==null) -> App.toastMessage(this,R.string.faild_writing_x,file.toString(),)@!(db==null) && !(mainPasswod==null) }
results[https://github.com/hugojosefson/neo4j-components-svn/blob/8832e1da94228bc88dce28f0e72bd66ab1677bd2/neo/branches/xa-log-rotate/src/java/org/neo4j/impl/nioneo/store/CommonAbstractStore.java][close][1] = -> IF { -> return @fileChannel==null } -> LOOP { -> TRY { -> fileChannel.position((long) highId*recordSize,)@!(fileChannel==null) -> buffer=ByteBuffer.wrap(getTypeAndVersionDescriptor().getBytes(),)@!(fileChannel==null) -> fileChannel.write(buffer,)@!(fileChannel==null) -> fileChannel.truncate(fileChannel.position(),)@!(fileChannel==null) -> fileChannel.force(false,)@!(fileChannel==null) -> fileChannel.close()@!(fileChannel==null) } CATCH(IOException) { -> System.gc()@!(fileChannel==null) } }
results[https://github.com/neo4j-attic/graphdb/blob/4e496d1a578fca9606f358b946108a6bd583c7ae/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][setActiveLog][16] = -> TRY {  -> IF { -> throw new IllegalArgumentException("Log must be either clean, "+"1 or 2",)@c!=CLEAN&&c!=LOG1&&c!=LOG2 } -> bb=ByteBuffer.wrap( new byte[],)@!(c==currentLog) && !(c!=CLEAN&&c!=LOG1&&c!=LOG2) -> bb.asCharBuffer().put(c,).flip()@!(c==currentLog) && !(c!=CLEAN&&c!=LOG1&&c!=LOG2) -> fc=new RandomAccessFile(fileName+".active","rw",).getChannel()@!(c==currentLog) && !(c!=CLEAN&&c!=LOG1&&c!=LOG2) -> wrote=fc.write(bb,)@!(c==currentLog) && !(c!=CLEAN&&c!=LOG1&&c!=LOG2) -> IF { -> throw new IllegalStateException("Expected to write 4 -> "+wrote,)@wrote!=4 && !(c==currentLog) && !(c!=CLEAN&&c!=LOG1&&c!=LOG2) } -> fc.force(false,)@!(c==currentLog) && !(wrote!=4) && !(c!=CLEAN&&c!=LOG1&&c!=LOG2) -> fc.close()@!(c==currentLog) && !(wrote!=4) && !(c!=CLEAN&&c!=LOG1&&c!=LOG2) } CATCH(IOException) {}
results[https://github.com/openstreetmap/osmosis/blob/231961afb37cc1114abb66a74fce413bcbc5bec5/osmosis-replication-http/src/main/java/org/openstreetmap/osmosis/replicationhttp/v0_6/impl/ChunkedDataReceiver.java][writeToChunk][2] = -> TRY { -> bytesToWrite=(int) Math.min(writeBuffer.readableBytes(),bytesRemaining,)@ -> tmpDataChannel.write(writeBuffer.toByteBuffer(writeBuffer.readerIndex(),bytesToWrite,),)@ -> writeBuffer.skipBytes(bytesToWrite,)@ } CATCH(IOException) { -> throw new OsmosisRuntimeException("Unable to write chunk data to temp file",e,)@ } -> IF { -> TRY { -> tmpDataChannel.close()@!(bytesRemaining<=0) } CATCH(IOException) { -> throw new OsmosisRuntimeException("Unable to close chunk data temp file",e,)@bytesRemaining<=0 } }
results[https://github.com/elka-projekt/cs-voltdb/blob/8b01731a091d92a069ecc5174a813523d6abdb50/tests/bench/iotest/IOBench.java][runSerialTest][1] = -> TRY {  -> TRY { -> fc=fos.getChannel()@ -> TRY { -> LOOP { -> b=m_buffer.duplicate()@ -> LOOP { -> fc.write(b,)@b.hasRemaining() } } } FINALLY { -> fos.close()@ } -> f.delete()@ } } CATCH(IOException) {}
results[https://github.com/dmontag/graphdb-traversal-context/blob/4e496d1a578fca9606f358b946108a6bd583c7ae/src/test/java/org/neo4j/kernel/impl/nioneo/store/TestXa.java][truncateLogicalLog][15] = -> TRY {  -> fileChannel=new RandomAccessFile(file("nioneo_logical.log."+active,),"rw",).getChannel()@ -> IF { -> fileChannel.truncate(size,)@fileChannel.size()>size } ELSE { -> fileChannel.position(size,)@!(fileChannel.size()>size) -> buf=ByteBuffer.allocate(1,)@ -> buf.put((byte) 0,).flip()@ -> fileChannel.write(buf,)@!(fileChannel.size()>size) } -> fileChannel.force(false,)@ -> fileChannel.close()@ } CATCH(IOException) {}
results[https://github.com/apache/jackrabbit-oak/blob/f3a571c207af51a5891ca9ea813d061ef39caffe/oak-core/src/main/java/org/apache/jackrabbit/mk/fs/FileCache.java][flush][1] = -> TRY {  -> IF { -> return false@appendBuffer==null } -> buff=appendBuffer.getAndSet(newBuff,)@!(appendBuffer==null) -> IF { -> TRY { -> base.position(size-buff.size(),)@!(appendBuffer==null) && buff.size()>0 -> base.write(ByteBuffer.wrap(buff.toByteArray(),),)@!(appendBuffer==null) && buff.size()>0 } CATCH(IOException) { -> close()@!(appendBuffer==null) && !(buff.size()>0) -> throw e@!(appendBuffer==null) && buff.size()>0 } } } CATCH(IOException) {}
results[https://github.com/cdemel/OpenCV/blob/51f6127e0a07cf7a2bda6bb664be89e0f1c5a247/modules/java/android_test/src/org/opencv/test/OpenCVTestCase.java][writeFile][7] = -> TRY { -> fc=stream.getChannel()@ -> fc.write(Charset.defaultCharset().encode(content,),)@ } CATCH(IOException) { -> OpenCVTestRunner.Log("Failed to write file \""+path+"\". Exception is thrown: "+e,)@ } FINALLY { -> IF { -> TRY { -> stream.close()@stream!=null } FINALLY { -> OpenCVTestRunner.Log("Exception is thrown: "+e,)@ } } }
results[https://github.com/asascience/THREDDS/blob/24013a286a38fb3c7bb7d4717350dc736e48e825/cdm/src/timing/java/ucar/nc2/TimeMMap.java][writeChannelDirect][2] = -> TRY {  -> channel=file.getChannel()@ -> IF { -> System.out.println("Opened file to write:'"+rfilename+"', size="+channel.size()+" fileSize = "+fileSize+" Mb; recSize = "+recordSize+" Kb; nrecs = "+n,)@ } -> buff=ByteBuffer.allocate(recordSizeBytes,)@ -> src=buff.asIntBuffer()@ -> LOOP { -> buff.clear()@ -> channel.write(buff,)@ -> showBufferInfo(" end bb ",buff,)@ -> System.out.println(" channel pos= "+channel.position(),)@ } -> channel.close()@ } CATCH(Exception) {}
results[https://github.com/GrizzlyNIO/grizzly-mirror/blob/d2df6e6d04dfc93c27fe3db24ebe0eff37b3fa15/samples/http-samples/src/main/java/org/glassfish/grizzly/samples/http/download/ClientDownloadFilter.java][handleRead][2] = -> TRY {  -> TRY { -> IF { -> output=fos.getChannel()@output==null } -> IF { -> byteBuffer=buffer.toByteBuffer()@buffer.remaining()>0 -> byteBuffer.hasRemaining()@ -> LOOP { -> output.write(byteBuffer,)@ } } } CATCH(IOException) { -> close()@ } } CATCH(IOException) {}
results[https://github.com/elka-projekt/cs-voltdb/blob/8b01731a091d92a069ecc5174a813523d6abdb50/tests/bench/iotest/IOBench.java][call][1] = -> TRY {  -> TRY { -> fc=fos.getChannel()@ -> TRY { -> LOOP { -> b=m_buffer.duplicate()@ -> LOOP { -> fc.write(b,)@b.hasRemaining() } } } FINALLY { -> fos.close()@ } -> f.delete()@ } } CATCH(Exception) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/9e5ddd12e339af833c515755137309e1f990aedd/kernel/branches/new-index-api/src/main/java/org/neo4j/kernel/impl/nioneo/store/AbstractStore.java][createEmptyStore][18] = -> IF { -> throw new IllegalArgumentException("Null filename",)@fileName==null } -> IF { -> throw new IllegalStateException("Can't create store["+fileName+"], file already exists",)@!(fileName==null) && file.exists() } -> TRY { -> channel=new FileOutputStream(fileName,).getChannel()@!(fileName==null) && !(file.exists()) -> buffer=ByteBuffer.allocate(endHeaderSize,)@!(fileName==null) && !(file.exists()) -> buffer.put(typeAndVersionDescriptor.getBytes(),).flip()@!(fileName==null) && !(file.exists()) -> channel.write(buffer,)@!(fileName==null) && !(file.exists()) -> channel.force(false,)@!(fileName==null) && !(file.exists()) -> channel.close()@!(fileName==null) && !(file.exists()) } CATCH(IOException) { -> throw new UnderlyingStorageException("Unable to create store "+fileName,e,)@!(fileName==null) && !(file.exists()) }
results[https://github.com/RamesesDev/osiris2/blob/ee716ae432471d376fe6a7a2104703a8f0c83fe1/labs/rameses-scheduling/test/com/rameses/concurrent/EventQueue.java][sendMessage][1] = -> TRY { -> IF { -> throw new Exception("File does not exist",)@!(f.exists()) } -> buffer=ByteBuffer.allocate(allocation,)@!(!(f.exists())) -> buffer.put(data,)@!(!(f.exists())) -> buffer.put(delimiter,)@!(!(f.exists())) -> buffer.flip()@!(!(f.exists())) -> writeChannel=new FileOutputStream(f,true,).getChannel()@!(!(f.exists())) -> writeChannel.write(buffer,)@!(!(f.exists())) } CATCH(Exception) { -> throw new RuntimeException(ex,)@ } FINALLY { -> TRY { -> writeChannel.close()@ } }
results[https://github.com/hugojosefson/neo4j-components-svn/blob/7571d52cc7b459adf3bf110986562bd2c304cf9c/kernel/trunk/src/main/java/org/neo4j/kernel/impl/nioneo/store/IdGeneratorImpl.java][createGenerator][18] = -> IF { -> throw new IllegalArgumentException("Null filename",)@fileName==null } -> IF { -> throw new IllegalStateException("Can't create IdGeneratorFile["+fileName+"], file already exists",)@!(fileName==null) && file.exists() } -> TRY { -> channel=new FileOutputStream(fileName,).getChannel()@!(fileName==null) && !(file.exists()) -> buffer=ByteBuffer.allocate(HEADER_SIZE,)@!(fileName==null) && !(file.exists()) -> buffer.put(CLEAN_GENERATOR,).putLong(0,).flip()@!(fileName==null) && !(file.exists()) -> channel.write(buffer,)@!(fileName==null) && !(file.exists()) -> channel.force(false,)@!(fileName==null) && !(file.exists()) -> channel.close()@!(fileName==null) && !(file.exists()) } CATCH(IOException) { -> throw new UnderlyingStorageException("Unable to create id generator"+fileName,e,)@!(fileName==null) && !(file.exists()) }
results[https://github.com/hugojosefson/neo4j-components-svn/blob/a5b1019cb2d9cc108829b2ac5d635e29483d5b69/neo/branches/neo-tx-fix/src/java/org/neo4j/impl/nioneo/store/IdGenerator.java][createGenerator][2] = -> IF { -> throw new IllegalArgumentException("Null filename",)@fileName==null } -> IF { -> throw new IllegalStateException("Can't create IdGeneratorFile["+fileName+"], file already exists",)@!(fileName==null) && file.exists() } -> TRY { -> channel=new FileOutputStream(fileName,).getChannel()@!(fileName==null) && !(file.exists()) -> buffer=ByteBuffer.allocate(HEADER_SIZE,)@!(fileName==null) && !(file.exists()) -> buffer.put(CLEAN_GENERATOR,).putInt(0,).flip()@!(fileName==null) && !(file.exists()) -> channel.write(buffer,)@!(fileName==null) && !(file.exists()) -> channel.force(false,)@!(fileName==null) && !(file.exists()) -> channel.close()@!(fileName==null) && !(file.exists()) } CATCH(IOException) { -> throw new StoreFailureException("Unable to create id generator"+fileName,e,)@!(fileName==null) && !(file.exists()) }
results[https://github.com/jeromerobert/jCAE/blob/1d508573646d6b192529200ecf27d9f60135ed30/amibe/src/org/jcae/mesh/oemm/RawStorage.java][action][1] = -> TRY { -> fco=new FileOutputStream(new File(oemm.getDirectory(),current.file+"v",),).getChannel()@ -> bbt.clear()@ -> bbtD=bbt.asDoubleBuffer()@ -> LOOP { -> bbt.position(8*bbtD.position(),)@ -> bbt.flip()@ -> fco.write(bbt,)@ } -> fco.close()@ } CATCH(IOException) { -> logger.severe("I/O error when converting coordinates file",)@ -> ex.printStackTrace()@ -> throw new RuntimeException(ex,)@ }
results[https://github.com/neo4j-attic/graphdb/blob/e82cead0f458a42bf4ee38059d51cc16cd8e1ae6/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/AbstractStore.java][createEmptyStore][1] = -> IF { -> throw new IllegalArgumentException("Null filename",)@fileName==null } -> IF { -> throw new IllegalStateException("Can't create store["+fileName+"], file already exists",)@!(fileName==null) && file.exists() } -> TRY { -> channel=new FileOutputStream(fileName,).getChannel()@!(fileName==null) && !(file.exists()) -> buffer=ByteBuffer.allocate(endHeaderSize,)@!(fileName==null) && !(file.exists()) -> buffer.put(UTF8.encode(typeAndVersionDescriptor,),).flip()@!(fileName==null) && !(file.exists()) -> channel.write(buffer,)@!(fileName==null) && !(file.exists()) -> channel.force(false,)@!(fileName==null) && !(file.exists()) -> channel.close()@!(fileName==null) && !(file.exists()) } CATCH(IOException) { -> throw new UnderlyingStorageException("Unable to create store "+fileName,e,)@!(fileName==null) && !(file.exists()) }
results[https://github.com/flaviovdf/spiderpig/blob/b20da4bbab1b9423e71b3062f982b55253eacad8/src/br/ufmg/dcc/vod/spiderpig/filesaver/FileSaverImpl.java][save][1] = -> TRY { -> fileChannel=FileChannel.open(fpath.toPath(),StandardOpenOption.WRITE,)@ -> buffer=ByteBuffer.wrap(payload,)@ -> buffer.rewind()@ -> fileChannel.write(buffer,)@ } CATCH(IOException) { -> LOG.error("Unable to save file "+fileID,e,)@ } FINALLY { -> IF { -> TRY { -> fileChannel.close()@fileChannel!=null } FINALLY { -> LOG.error("Unable to close channel"+fileID,e,)@ } } }
results[https://github.com/GrizzlyNIO/grizzly-mirror/blob/21909ac7593cf8a6cf8650ce1a715135ad97829c/modules/http-server/src/test/java/org/glassfish/grizzly/http/server/StaticHttpHandlerTest.java][handleRead][2] = -> TRY {  -> content=ctx.getMessage()@ -> remaining=content.getContent().remaining()@ -> out.write(content.getContent().toByteBuffer(),)@ -> IF { -> TRY { -> IF { -> validator.validate((HttpResponsePacket) content.getHttpHeader(),)@content.isLast() } -> out.close()@ } CATCH(Throwable) { -> result.failure(e,)@ } } } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/8832e1da94228bc88dce28f0e72bd66ab1677bd2/neo/branches/xa-log-rotate/src/java/org/neo4j/impl/nioneo/store/AbstractStore.java][createEmptyStore][1] = -> IF { -> throw new IllegalArgumentException("Null filename",)@fileName==null } -> IF { -> throw new IllegalStateException("Can't create store["+fileName+"], file already exists",)@!(fileName==null) && file.exists() } -> TRY { -> channel=new FileOutputStream(fileName,).getChannel()@!(fileName==null) && !(file.exists()) -> buffer=ByteBuffer.allocate(endHeaderSize,)@!(fileName==null) && !(file.exists()) -> buffer.put(typeAndVersionDescriptor.getBytes(),).flip()@!(fileName==null) && !(file.exists()) -> channel.write(buffer,)@!(fileName==null) && !(file.exists()) -> channel.force(false,)@!(fileName==null) && !(file.exists()) -> channel.close()@!(fileName==null) && !(file.exists()) } CATCH(IOException) { -> throw new StoreFailureException("Unable to create store "+fileName,e,)@!(fileName==null) && !(file.exists()) }
results[https://github.com/HiroshiOkada/PwMemo/blob/362317a17c136f1dd1bbb3ca20e5b0bcfe0e4af5/src/com/toycode/pwmemo/ExportActivity.java][wirteFile][1] = -> IF { -> throw new RuntimeException("db==null",)@db==null } -> IF { -> throw new RuntimeException("mainPasswod==null",)@mainPasswod==null && !(db==null) } -> TRY { -> dataBuf=ByteBuffer.wrap(cryptBytes,)@!(db==null) && !(mainPasswod==null) -> ch=fos.getChannel()@!(db==null) && !(mainPasswod==null) -> ch.write(dataBuf,)@!(db==null) && !(mainPasswod==null) -> ch.close()@!(db==null) && !(mainPasswod==null) } CATCH(IOException) { -> App.debugLog(this,e.toString(),)@!(db==null) && !(mainPasswod==null) -> IF { -> mApp.toastMessage(R.string.faild_writing_x,file.toString(),)@!(db==null) && !(mainPasswod==null) } }
results[https://github.com/kiniry-teaching/UCD/blob/160f3f6879b60b6ec505152b6bbe97481065909d/COMP30050-2008/groups/Music Comparison Software/MusicComparison/src/org/jaudiotagger/tag/id3/AbstractID3v2Tag.java][adjustPadding][1] = -> TRY {  -> paddingBuffer=ByteBuffer.wrap( new byte[],)@ -> fcOut=new FileOutputStream(paddedFile,).getChannel()@ -> written=(long) fcOut.write(paddingBuffer,)@ -> IF { -> written2=fcIn.transferTo(audioStart,audiolength,fcOut,)@audiolength<=MAXIMUM_WRITABLE_CHUNK_SIZE -> logger.finer("Written padding:"+written+" Data:"+written2,)@audiolength<=MAXIMUM_WRITABLE_CHUNK_SIZE } ELSE { -> LOOP { -> written2+=fcIn.transferTo(audioStart+i*MAXIMUM_WRITABLE_CHUNK_SIZE,MAXIMUM_WRITABLE_CHUNK_SIZE,fcOut,)@i<noOfChunks && !(audiolength<=MAXIMUM_WRITABLE_CHUNK_SIZE) } -> written2+=fcIn.transferTo(audioStart+noOfChunks*MAXIMUM_WRITABLE_CHUNK_SIZE,lastChunkSize,fcOut,)@!(audiolength<=MAXIMUM_WRITABLE_CHUNK_SIZE) -> logger.finer("Written padding:"+written+" Data:"+written2,)@audiolength<=MAXIMUM_WRITABLE_CHUNK_SIZE } -> fcOut.close()@audiolength<=MAXIMUM_WRITABLE_CHUNK_SIZE } CATCH(FileNotFoundException,IOException) {}
results[https://github.com/GrizzlyNIO/grizzly-mirror/blob/da6e6e445c2be9b6a0e19f0575743d5fb910ebb9/modules/http-server/src/test/java/org/glassfish/grizzly/http/server/SendFileTest.java][handleRead][1] = -> TRY {  -> content=ctx.getMessage()@ -> out.write(content.getContent().toByteBuffer(),)@ -> IF { -> IF { -> validator.validate((HttpResponsePacket) content.getHttpHeader(),)@content.isLast() } -> TRY { -> out.close()@ } CATCH(IOException) { -> ioe.printStackTrace()@ } } } CATCH(IOException) {}
results[https://github.com/ggrandes/kvstore/blob/39f6d379937050eeddcfb40f28f32136079d459d/src/main/java/org/kvstore/structures/bitset/SimpleBitSet.java][serializeToFile][2] = -> TRY {  -> TRY { -> buf=ByteBuffer.allocate(freeSize,)@ -> fileChannel=os.getChannel()@ -> bitset.serialize(buf,)@ -> buf.flip()@ -> fileChannel.write(buf,)@ } FINALLY { -> TRY { -> fileChannel.force(true,)@ } } FINALLY { -> TRY { -> os.close()@ } } } CATCH(IOException) {}
results[https://github.com/apavlo/h-store/blob/800c04c98a9ab597b38ebdeee323cd59445cd198/src/frontend/org/voltdb/utils/VoltFile.java][moveSubRootContents][2] = -> TRY {  -> LOOP { } ELSE { -> IF { -> IF { -> throw new IOException()@!(fInOtherSubroot.exists()) && !(fInOtherSubroot.createNewFile()) } -> buf=ByteBuffer.allocateDirect(8192,)@!(fInOtherSubroot.exists()) && !(!(fInOtherSubroot.createNewFile())) -> outputChannel=fos.getChannel()@!(fInOtherSubroot.exists()) && !(!(fInOtherSubroot.createNewFile())) -> LOOP { -> buf.flip()@!(fInOtherSubroot.exists()) && inputChannel.read(buf,)!=-1 && !(!(fInOtherSubroot.createNewFile())) -> outputChannel.write(buf,)@!(fInOtherSubroot.exists()) && inputChannel.read(buf,)!=-1 && !(!(fInOtherSubroot.createNewFile())) -> buf.clear()@!(fInOtherSubroot.exists()) && inputChannel.read(buf,)!=-1 && !(!(fInOtherSubroot.createNewFile())) } -> outputChannel.close()@!(fInOtherSubroot.exists()) && !(!(fInOtherSubroot.createNewFile())) } } } CATCH(IOException) {}
results[https://github.com/RamesesDev/osiris2/blob/c8c2d2376572d4a3bd23b0ccf6d60d878d3ac47a/common/rameses-common/src/com/rameses/messaging/BasicFileEventQueue.java][send][1] = -> TRY { -> buffer=ByteBuffer.allocate(super.getAllocation(),)@ -> buffer.put(data,)@ -> buffer.put(super.getDelimiter(),)@ -> buffer.flip()@ -> writeChannel=new FileOutputStream(reader.getFile(),true,).getChannel()@ -> writeChannel.write(buffer,)@ -> this.position=writeChannel.position()@ } CATCH(Exception) { -> throw new RuntimeException(ex,)@ } FINALLY { -> TRY { -> writeChannel.close()@ } }
results[https://github.com/jeromerobert/jCAE/blob/1d508573646d6b192529200ecf27d9f60135ed30/amibe/src/org/jcae/mesh/xmldata/MeshToSoupConvert.java][processOneShape][1] = -> TRY { -> fcO=new FileOutputStream(rawFile,true,).getChannel()@ -> bbo=ByteBuffer.allocate(bufferSize*80/12,)@ -> bboD=bbo.asDoubleBuffer()@ -> LOOP { -> bbo.clear()@ -> LOOP { -> bbo.position(8*bboD.position(),)@ -> bbo.putInt(iFace,)@ -> bbo.putInt(0,)@ } -> bbo.flip()@ -> fcO.write(bbo,)@ } -> fcO.close()@ } CATCH(Exception) { -> ex.printStackTrace()@ -> throw new RuntimeException(ex,)@ }
results[https://github.com/niloc132/mauve-gwt/blob/ab97ffbf30dfe377d3046183399f63f44ebf7445/gnu/testlet/java/nio/channels/FileChannel/offsetSingleDirectBuffer.java][test][1] = -> TRY { -> out=ByteBuffer.allocateDirect(50,)@ -> out.put(data,)@ -> out.flip()@ -> out.position(5,)@ -> fc=fOut.getChannel()@ -> numBytes=fc.write(out,)@ -> harness.check(numBytes,data.length-5,"Number of bytes written",)@ -> fc.close()@ } CATCH(UnsupportedEncodingException) { -> harness.fail("Unsupported Encoding",)@ } CATCH(SecurityException) { -> harness.fail("Unexpected exception: "+e,)@ } CATCH(FileNotFoundException) { -> harness.fail("Unexpected exception: "+e,)@ } CATCH(IOException) { -> harness.fail("Unexpected exception: "+e,)@ }
results[https://github.com/ConductAS/openidm/blob/fb724c33dd8f7a94a70d23ffb36f6a07cde4e892/openidm-util/src/main/java/org/forgerock/openidm/script/javascript/JavaScriptFactory.java][initializeScript][1] = -> TRY {  -> IF { -> TRY { -> outChannel=new FileOutputStream(getTargetFile(name,),).getChannel()@ -> outLock=outChannel.lock()@ -> buf=ByteBuffer.allocate(source.length(),)@ -> buf.put(source.getBytes("UTF-8",),)@ -> buf.flip()@ -> outChannel.write(buf,)@ -> outChannel.close()@ } CATCH(IOException) { -> logger.warn("JavaScript source was not updated for {}",name,e,)@ } } } CATCH(ScriptException) {}
