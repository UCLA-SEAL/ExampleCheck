results[https://github.com/coderplay/h2-bitmap/blob/286a8da7334439fb14a8a972f791e152d8dd1148/h2/src/tools/org/h2/dev/store/FilePathCache.java][write][9] = -> TRY {  -> len=base.write(src,)@ } CATCH(IOException) {}
results[https://github.com/jmesnil/hornetq-old/blob/60b8d9bbeea15c813bc75f12a3747a235a603ba6/src/main/org/hornetq/core/journal/impl/NIOSequentialFile.java][doInternalWrite][3] = -> TRY {  -> channel.write(bytes,)@ } CATCH(Exception) {}
results[https://github.com/WhisperSystems/TextSecure/blob/760c96171df094aacf8b3c062ef613ccdb01552c/library/src/org/whispersystems/textsecure/storage/Record.java][writeInteger][4] = -> TRY {  -> buffer=ByteBuffer.wrap(valueBytes,)@ -> out.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/balp/mkgmap/blob/350dc0ef45c6643df82d345030041b45d4e7afee/src/uk/me/parabola/imgfmt/app/FileBackedImgFileWriter.java][put][2] = -> TRY { -> tmpChannel.write(src,)@ } CATCH(IOException) { -> throw new MapFailedException("could not write buffer to mdr tmp file",)@ }
results[https://github.com/hugojosefson/neo4j-components-svn/blob/7571d52cc7b459adf3bf110986562bd2c304cf9c/kernel/trunk/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/DirectLogBuffer.java][flipAndWrite][9] = -> TRY {  -> buffer.flip()@ -> fileChannel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/undera/jmeter-plugins/blob/9f65df5cdbb30a514cc5843ac7f65fbedf2e8e6d/plugins/src/kg/apc/jmeter/reporters/FlexibleFileWriter.java][syncWrite][3] = -> TRY {  -> lock=fileChannel.lock()@ -> fileChannel.write(buf,)@ } CATCH(IOException) {}
results[https://github.com/apache/synapse/blob/6f9d9b3d0fae90f8a9dd6c8c303bfd4c6b3b4f91/java/modules/transports/src/main/java/org/apache/synapse/transport/pipe/PipeEndpointListener.java][stop][3] = -> TRY {  -> writeChannel.write(ByteBuffer.allocate(1,),)@ } CATCH(IOException) {}
results[https://github.com/xerial/larray/blob/e32b6126b9ece0bb9d2435bc0675f7305638bcdf/larray-buffer/src/main/java/xerial/larray/core/LBuffer.java][writeTo][2] = -> TRY {  -> channel.write(toDirectByteBuffers(),)@ } CATCH(IOException) {}
results[https://github.com/f1ori/yacy/blob/5b944986437abbd91c6fb860f6d5e42ddcbf39f7/source/de/anomic/kelondro/kelondroChannelRA.java][write][1] = -> TRY {  -> bb=ByteBuffer.wrap(b,off,len,)@ -> channel.write(bb,)@ } CATCH(IOException) {}
results[https://github.com/rhusar/HornetQ-oldmigration/blob/1594a2892edfd822fd7bc1dd8837289385991bbc/src/main/org/hornetq/core/journal/impl/SyncSpeedTest.java][write][4] = -> TRY {  -> buffer.flip()@ -> channel.write(buffer,)@ } CATCH(Exception) {}
results[https://github.com/xerial/larray/blob/1109da8af2248c2872eea4b38793781cc5818110/larray-java/src/main/java/xerial/larray/core/RawByteArray.java][writeTo][3] = -> TRY {  -> channel.write(toDirectByteBuffer(),)@ } CATCH(IOException) {}
results[https://github.com/madhusudancs/asterixdb/blob/5ee049d45ea3aa9e6317cd59063e2e0b4f2d4d4c/asterix-transactions/src/main/java/edu/uci/ics/asterix/transaction/management/service/logging/FileBasedBuffer.java][flush][1] = -> TRY {  -> fileChannel.write(buffer,)@ -> fileChannel.force(true,)@ } CATCH(IOException) {}
results[https://github.com/asgeirb/clapp/blob/4b08e6fbb18397c18d5a21ba2839b1494335fb94/javacode/src/main/java/no/copyleft/clapp/Indexer.java][writeIndex][1] = -> TRY {  -> b=ByteBuffer.wrap(bytes,)@ -> index.write(ByteBuffer.wrap(bytes,),)@ } CATCH(IOException) {}
results[https://github.com/WhisperSystems/TextSecure/blob/82f8ba35847bf0b85f7bedd4f401614346e3cbd8/src/org/thoughtcrime/securesms/database/Record.java][writeBlob][3] = -> TRY {  -> writeInteger(blobBytes.length,out,)@ -> buffer=ByteBuffer.wrap(blobBytes,)@ -> out.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/dain/leveldb/blob/8b9fadf70dfc7d4f0f8af306d69dbe7473a5c2df/src/main/java/org/iq80/leveldb/table/TableBuilder.java][finish][1] = -> TRY {  -> footerEncoding=Footer.writeFooter(footer,)@ -> position+=fileChannel.write(footerEncoding.toByteBuffers(),)@ } CATCH(IOException) {}
results[https://github.com/dain/leveldb/blob/8b915c57c5ad9cf90cb81a3cfa5e6f7728a3f6f6/leveldb/src/main/java/org/iq80/leveldb/table/TableBuilder.java][finish][1] = -> TRY {  -> footerEncoding=Footer.writeFooter(footer,)@ -> position+=fileChannel.write(footerEncoding.toByteBuffer(),)@ } CATCH(IOException) {}
results[https://github.com/zhongl/iPage/blob/8dd2b26f9b33feb288938f9052554f70e92517a0/src/main/java/com/github/zhongl/journal/CRC32WritableByteChannel.java][write][1] = -> TRY {  -> updateCRC32By(buffer.duplicate(),)@ -> return channel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/codefireXperiment/libcore/blob/e69c2998bebbe2bf8e9f01ca6e644fd41c7914ec/harmony-tests/src/test/java/org/apache/harmony/nio/tests/java/nio/channels/FileChannelTest.java][test_forceJ][3] = -> TRY {  -> writeBuffer=ByteBuffer.wrap(CONTENT_AS_BYTES,)@ -> writeOnlyFileChannel.write(writeBuffer,)@ -> writeOnlyFileChannel.force(true,)@ } CATCH(Exception) {}
results[https://github.com/GrizzlyNIO/grizzly-mirror/blob/c0045d2c2ee75d06864a201f371f262119ac1b24/extras/http-servlet-extras/src/main/java/org/glassfish/grizzly/servlet/MultipartUploadFilter.java][writeBufferToDiskAndUpdateStats][2] = -> TRY {  -> uploadedBytesCounter.addAndGet(b.remaining(),)@ -> fileOutput.write(b,)@ } CATCH(IOException) {}
results[https://github.com/fliuzzi/DataParser/blob/5f8c6dad066685b10acb8688475452c6229e76ae/misc/old_src/data/parsers/yelp/Parser.java][storeListing][2] = -> LOOP { -> TRY { -> outputChannel_.write(ByteBuffer.wrap(ir.userId_+","+placeId+","+ir.rating_+newline.getBytes(),),)@ } }
results[https://github.com/exoplatform/jcr/blob/043a505f7794acc450a96db2da5a6fb15f379fe0/exo.jcr.component.core/src/main/java/org/exoplatform/services/jcr/impl/core/query/ErrorLog.java][append][2] = -> TRY {  -> out.write(ByteBuffer.wrap(action+" "+uuid+"\n".getBytes(),),)@ } CATCH(IOException) {}
results[https://github.com/apache/activemq/blob/b0c2a40fb979829ceca2ca51858ca67269bd5992/activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/NIODataFileAppender.java][transfer][1] = -> TRY {  -> LOOP { -> channel.write(header,)@header.hasRemaining() } } CATCH(IOException) {}
results[https://github.com/jeyboy/MUSIC/blob/7438ca96a703eb3db9ae1cd13ab4d7297a255684/lib/audiotagger/org/jaudiotagger/audio/mp4/Mp4TagWriter.java][writeDataUptoIncludingIlst][6] = -> TRY {  -> fileWriteChannel.transferFrom(fileReadChannel,0,startIlstWithinFile,)@ -> fileWriteChannel.position(startIlstWithinFile,)@ -> fileWriteChannel.write(rawIlstData,)@ } CATCH(IOException) {}
results[https://github.com/asgeirb/clapp/blob/4b08e6fbb18397c18d5a21ba2839b1494335fb94/javacode/src/main/java/no/copyleft/clapp/Indexer.java][indexLogline][1] = -> TRY {  -> len=logfile.write(l.getLogfileBytebuffers(),)@ -> writeIndex(index,l,(int) from,(short) len,)@ } CATCH(IOException) {}
results[https://github.com/gingi/fastbit/blob/00770b6e3f2e3914f2a51a98154e41ca0b3b7107/java/gov/lbl/fastbit/FastBitStringWriter.java][flushBuffer][1] = -> TRY {  -> buf.flip()@ -> channel.write(buf,)@ -> buf.clear()@ } CATCH(IOException) {}
results[https://github.com/dain/leveldb/blob/8b915c57c5ad9cf90cb81a3cfa5e6f7728a3f6f6/leveldb/src/main/java/org/iq80/leveldb/table/TableBuilder.java][writeBlock][1] = -> TRY {  -> blockHandle=new BlockHandle(position,blockContents.length(),)@ -> position+=fileChannel.write( new ByteBuffer[],)@ } CATCH(IOException) {}
results[https://github.com/molgenis/molgenis_apps-legacy/blob/2b396fcba67293e06043f3e8e12474ea11b1e5b1/apps/designgg/org/molgenis/designgg/Utils.java][setFile][1] = -> TRY {  -> fc=fos.getChannel()@ -> bb=ByteBuffer.wrap(fileContent,)@ -> fc.write(bb,)@ } CATCH(Exception) {}
results[https://github.com/philipv/bonfire/blob/00ebac8b7ed1279187bb2a19be7f554d89bee441/default/nio-resources/src/UseCharsets.java][main][1] = -> TRY {  -> outc=outf.getChannel()@ -> outputData=encoder.encode(cb,)@ -> outc.write(outputData,)@ } CATCH(Exception) {}
results[https://github.com/thobe/neo4j-advanced/blob/ab1e0c70e32d8fd4c51d6dc6e41764727f96ac8a/main/java/org/neo4j/index/impl/NioUtils.java][writeInt][24] = -> TRY {  -> buffer.clear()@ -> buffer.putInt(value,)@ -> buffer.flip()@ -> channel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/LeeMinWoo/android_dalvik/blob/b99b5cd0be8ab0d9791768c21ffd0d637b564df8/libcore/nio/src/test/java/org/apache/harmony/nio/tests/java/nio/channels/FileChannelTest.java][test_positionJ_WriteOnly][8] = -> TRY {  -> writeBuffer=ByteBuffer.wrap(CONTENT_AS_BYTES,)@ -> writeOnlyFileChannel.position(POSITION,)@ -> writeOnlyFileChannel.write(writeBuffer,)@ -> writeOnlyFileChannel.close()@ } CATCH(Exception) {}
results[https://github.com/segfault/apache_cassandra/blob/9db8da81b7f269e5a8a7f896b751d482847d7082/src/org/apache/cassandra/io/SequenceFile.java][writeLong][7] = -> TRY {  -> byteBuffer=ByteBuffer.allocateDirect(8,)@ -> byteBuffer.putLong(value,)@ -> byteBuffer.flip()@ -> fc_.write(byteBuffer,)@ } CATCH(IOException) {}
results[https://github.com/codefollower/Lealone/blob/d7dae457353edcd09cc9f283b33f5f0aff3c838b/lealone-client/src/main/java/com/codefollower/lealone/store/fs/FileUtils.java][writeFully][12] = -> TRY {  -> src.remaining()>0@ -> LOOP { -> channel.write(src,)@ } } CATCH(IOException) {}
results[https://github.com/kennycason/euler/blob/c94472f4a39f407cc3512bb4d5c85d10b7120f3c/src/lib/FileWriter.java][write][1] = -> TRY { -> bb=ByteBuffer.wrap(content.getBytes(),)@ -> outfc.write(bb,)@ } CATCH(IOException) { -> System.err.println(e,)@ }
results[https://github.com/maxmind/MaxMind-DB-Reader-java/blob/f65461e84646e51866c2f75326186a485dfdd1c5/src/test/java/com/maxmind/db/DecoderTest.java][getFileChannel][2] = -> TRY {  -> fc=raf.getChannel()@ -> fc.write(ByteBuffer.wrap(data,),)@ -> fc.close()@ } CATCH(IOException) {}
results[https://github.com/SjB/Dart/blob/4fa9df04b72dd0665903be62cf3dafc14afc77d2/editor/tools/plugins/com.google.dart.indexer/src/com/google/dart/indexer/pagedstorage/filesystem/NioFileObject.java][write][4] = -> TRY {  -> buf=ByteBuffer.wrap(b,)@ -> buf.position(off,)@ -> buf.limit(off+len,)@ -> channel.write(buf,)@ } CATCH(IOException) {}
results[https://github.com/jeyboy/MUSIC/blob/7438ca96a703eb3db9ae1cd13ab4d7297a255684/lib/audiotagger/org/jaudiotagger/audio/mp4/Mp4TagWriter.java][writeMetadataSameSize][6] = -> TRY {  -> fileWriteChannel.transferFrom(fileReadChannel,0,startIstWithinFile,)@ -> fileWriteChannel.position(startIstWithinFile,)@ -> fileWriteChannel.write(rawIlstData,)@ -> writeDataAfterIlst(fileReadChannel,fileWriteChannel,tagsHeader,)@ } CATCH(CannotWriteException,IOException) {}
results[https://github.com/jmesnil/hornetq-old/blob/6cb8d63fc222728e4adaf8de50a2c94082501462/src/main/org/hornetq/core/client/impl/LargeMessageControllerImpl.java][cachePackage][5] = -> TRY {  -> cachedChannel.position(cachedChannel.size(),)@ -> cachedChannel.write(ByteBuffer.wrap(body,),)@ } CATCH(Exception) {}
results[https://github.com/LeeMinWoo/android_dalvik/blob/b99b5cd0be8ab0d9791768c21ffd0d637b564df8/libcore/nio/src/test/java/org/apache/harmony/nio/tests/java/nio/channels/FileChannelTest.java][test_position_WriteOnly][8] = -> TRY {  -> writeBuffer=ByteBuffer.wrap(CONTENT_AS_BYTES,)@ -> writeOnlyFileChannel.write(writeBuffer,)@ -> assertEquals(CONTENT_LENGTH,writeOnlyFileChannel.position(),)@ } CATCH(Exception) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/8675be9ba72bddad7f0d433be5d3373cb9e00563/kernel/tags/1.1-rc2/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/DirectLogBuffer.java][putLong][13] = -> TRY {  -> buffer.clear()@ -> buffer.putLong(l,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/kitkatandroid/JLS36G_base/blob/d9793ebbef58d0e842c8222c1067928d778f22f1/core/java/android/speech/tts/FileSynthesisCallback.java][start][2] = -> TRY { -> mFileChannel.write(ByteBuffer.allocate(WAV_HEADER_LENGTH,),)@ } CATCH(IOException) { -> Log.e(TAG,"Failed to write wav header to output file descriptor"+ex,)@ -> cleanUp()@ }
results[https://github.com/zhuowei/MCPELauncher/blob/52b0d745b45573a4050c334f6e51a074cd2fa620/src/net/zhuoweizhang/mcpelauncher/NerdyStuffActivity.java][dumpLib][1] = -> TRY { -> channel=os.getChannel()@ -> channel.write(com.mojang.minecraftpe.MainActivity.minecraftLibBuffer,)@ -> channel.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/apavlo/h-store/blob/04fb7bb96341aebf73a7353520d6fb0ad4a2d25b/src/frontend/edu/brown/hstore/cmdlog/CommandLogWriter.java][writeHeader][2] = -> TRY { -> this.fstream.write(b.b.asReadOnlyBuffer(),)@ -> this.fstream.force(true,)@ } CATCH(Exception) { -> throw new ServerFaultException(message,e,)@ }
results[https://github.com/spring-projects/spring-batch/blob/7e85b506163b2b15429b4a958f926549a8ab5771/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/TransactionAwareBufferedWriterTests.java][run][1] = -> TRY { -> bb=ByteBuffer.wrap("c".getBytes(),)@ -> fileChannel.write(bb,)@ } CATCH(IOException) { -> throw new IllegalStateException(e,)@ }
results[https://github.com/kingargyle/exist-1.4.x/blob/09d678fd8a58728dd51005c63b942f1ab6541ebc/src/org/exist/storage/statistics/DataGuide.java][write][1] = -> TRY {  -> buffer=ByteBuffer.allocate(nodeCount*BYTES_PER_NODE+4,)@ -> root.write(buffer,symbols,)@ -> buffer.flip()@ -> fc.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/ottomata/flume-ng/blob/1a2e0d7a7629eb32821c780d48a2c17f4e76a59e/flume-ng-channels/flume-file-channel/src/main/java/org/apache/flume/channel/file/FlumeEventQueue.java][run][1] = -> TRY { -> fileChannel.write(buffer,)@ -> fileChannel.force(true,)@ } CATCH(IOException) { -> LOG.error("Error while writing inflight events to "+"inflights file: "+inflightEventsFile.getName(),)@ }
results[https://github.com/apache/directory-server/blob/08b785b726f0111fab897edcaa7bf2a18f361b81/kerberos-codec/src/main/java/org/apache/directory/server/kerberos/shared/keytab/Keytab.java][writeFile][1] = -> TRY {  -> wChannel=new FileOutputStream(file,false,).getChannel()@ -> wChannel.write(buffer,)@ -> wChannel.close()@ } CATCH(IOException) {}
results[https://github.com/babble/babble/blob/e0dc556b525d1cc971a96459885742c8c92275d3/src/main/ed/db/ExportBinary.java][export][1] = -> TRY {  -> fc=fout.getChannel()@ -> LOOP { -> fc.write(encoder._buf,)@!(all==null) } } CATCH(IOException) {}
results[https://github.com/spring-projects/spring-batch/blob/7e85b506163b2b15429b4a958f926549a8ab5771/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/TransactionAwareBufferedWriterTests.java][testWriteWithCommit][5] = -> TRY {  -> bb=ArgumentCaptor.forClass(ByteBuffer.class,)@ -> when(fileChannel.write(bb.capture(),),).thenReturn(3,)@ } CATCH(Exception) {}
results[https://github.com/neo4j-attic/graphdb/blob/4e496d1a578fca9606f358b946108a6bd583c7ae/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][doneInternal][6] = -> TRY {  -> buffer.clear()@ -> LogIoUtils.writeDone(buffer,identifier,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@ -> fileChannel.force(false,)@ } CATCH(IOException) {}
results[https://github.com/shiffman/shiffman.github.io/blob/50593000652328c8df6ffb2406d5fd4ba8d4c7ce/itp/classes/a2z/week04/a2z/A2ZFileWriter.java][writeContent][2] = -> TRY {  -> outfc=fos.getChannel()@ -> bb=ByteBuffer.wrap(content.getBytes(),)@ -> outfc.write(bb,)@ -> outfc.close()@ } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/d5e843666905e90aa91e270aeb152b1cfa4cbec9/kernel/branches/new-index-api/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][doneInternal][10] = -> TRY {  -> buffer.clear()@ -> buffer.put(DONE,).putInt(identifier,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/safuus/MobX/blob/dda353da9eeeff8fabbee62fe03b6448cd1b7238/mobxserver/apache-mina-2.0.4/src/mina-core/src/test/java/org/apache/mina/transport/AbstractFileRegionTest.java][createLargeFile][2] = -> TRY {  -> channel=new FileOutputStream(largeFile,).getChannel()@ -> buffer=createBuffer()@ -> channel.write(buffer,)@ -> channel.close()@ } CATCH(IOException) {}
results[https://github.com/bcoverston/apache-hosted-cassandra/blob/9db8da81b7f269e5a8a7f896b751d482847d7082/src/org/apache/cassandra/io/SequenceFile.java][writeDirect][7] = -> TRY {  -> byteBuffer=ByteBuffer.allocateDirect(bytes.length,)@ -> byteBuffer.put(bytes,)@ -> byteBuffer.flip()@ -> fc_.write(byteBuffer,)@ -> return fc_.position()@ } CATCH(IOException) {}
results[https://github.com/killme2008/Metamorphosis/blob/91e022ba65d9ecadb509ac4c7141e5677c52de07/metamorphosis-server/src/main/java/com/taobao/metamorphosis/server/store/FileMessageSet.java][append][1] = -> TRY {  -> offset=this.sizeInBytes.get()@ -> LOOP { -> sizeInBytes+=this.channel.write(buf,)@buf.hasRemaining() } -> this.sizeInBytes.addAndGet(sizeInBytes,)@ } CATCH(IOException) {}
results[https://github.com/jihoonson/tajo/blob/7f3a05cfe9203bc59665f23c7ee6844441fa5e5b/core/src/main/java/tajo/storage/RawFile.java][flushBuffer][4] = -> TRY {  -> buffer.limit(buffer.position(),)@ -> buffer.flip()@ -> channel.write(buffer,)@ -> buffer.clear()@ } CATCH(IOException) {}
results[https://github.com/coderplay/h2-bitmap/blob/29c3bc9b6d69d8a1ddfb540779950132c20390cf/h2/src/test/org/h2/test/utils/FilePathDebug.java][write][7] = -> TRY {  -> debug("write",channel.position(),src.position(),src.remaining(),)@ -> return channel.write(src,)@ } CATCH(IOException) {}
results[https://github.com/jianwang2010/Test/blob/1f4469976e0397122e6ced5fd81f94cfcdf6c1c6/java/src/org/broadinstitute/sting/gatk/datasources/reads/BAMSchedule.java][write][3] = -> TRY { -> scheduleFileChannel.write(buffer,)@ -> IF { -> throw new ReviewedStingException("Unable to write entire buffer to file.",)@buffer.remaining()>0 } } CATCH(IOException) { -> throw new ReviewedStingException("Unable to write data to BAM schedule file.",ex,)@ }
results[https://github.com/davecheney/motown/blob/f06551a4921ff3dd57bfa3fd4b15a903f2d11561/motown-resource/src/main/java/net/cheney/motown/resource/file/FileResource.java][put][2] = -> TRY {  -> fc=new FileOutputStream(file(),).getChannel()@ -> fc.write(entity,)@ -> fc.close()@ } CATCH(IOException) {}
results[https://github.com/jruby/jruby-rack/blob/d8f5c71f413910fc7d97ca02d084beb1b80c5932/src/main/java/org/jruby/rack/RackRewindableInput.java][<init>][2] = -> TRY { -> tempfileChannel=(FileChannel) io.getChannel()@ -> tempfileChannel.write(memoryBuffer,)@ -> tempfileChannel.position(0,)@ } CATCH(IOException) { -> throw getRuntime().newIOErrorFromException(io,)@ }
results[https://github.com/safuus/MobX/blob/dda353da9eeeff8fabbee62fe03b6448cd1b7238/mobxserver/apache-mina-2.0.4/src/mina-core/src/test/java/org/apache/mina/filter/stream/FileRegionWriteFilterTest.java][createMessage][2] = -> TRY {  -> channel=new RandomAccessFile(file,"rw",).getChannel()@ -> buffer=ByteBuffer.wrap(data,)@ -> channel.write(buffer,)@ -> return new DefaultFileRegion(channel,)@ } CATCH(IOException) {}
results[https://github.com/Unidata/sruth/blob/964f6e2c7f7d578ec86220b1df7b9bf7eb633326/src/edu/ucar/unidata/dynaccn/MinHeapFile.java][ensureFileSize][1] = -> TRY {  -> IF { -> channel.position(size-1,)@channel.size()<size -> channel.write(ByteBuffer.wrap( new byte[],),)@channel.size()<size } } CATCH(IOException) {}
results[https://github.com/irstv/orbisgis/blob/ad951f7fbefb9c76dc7147fa9cd9817ca95ca1cb/gdms/src/main/java/org/gdms/driver/ReadWriteBufferManager.java][flush][1] = -> TRY {  -> buffer.position(0,)@ -> buffer.limit(highestModification,)@ -> channel.position(windowStart,)@ -> channel.write(buffer,)@ -> buffer.clear()@ } CATCH(IOException) {}
results[https://github.com/bcdev/beam-globalbedo/blob/75e85c525bc3d66cb8098cdf5540293496948a03/beam-globalbedo-albedo-inversion/src/test/java/org/esa/beam/globalbedo/inversion/util/IOTest.java][testWriteFloatArray1][1] = -> TRY {  -> bb=ByteBuffer.allocateDirect(dim1*dim2*4,)@ -> floatBuffer=bb.asFloatBuffer()@ -> ch=file_output.getChannel()@ -> ch.write(bb,)@ -> ch.close()@ } CATCH(Exception) {}
results[https://github.com/dhale/jtk/blob/8b5a6d1be0a5706cb0c1f7a85588098780e46274/src/edu/mines/jtk/io/DataFile.java][writeLongs][6] = -> TRY {  -> LOOP { -> _bb.position(0,).limit(l*8,)@ -> _fc.write(_bb,)@ } } CATCH(IOException) {}
results[https://github.com/jruby/jruby-cdc/blob/6813a3d165ec525137bf918973f4f22c260b7a75/src/org/jruby/util/IOHandlerSeekable.java][flushWrite][1] = -> TRY {  -> IF { -> return @reading||!(modes.isWritable())||buffer.position()==0 } -> buffer.flip()@!(reading||!(modes.isWritable())||buffer.position()==0) -> channel.write(buffer,)@!(reading||!(modes.isWritable())||buffer.position()==0) -> buffer.clear()@!(reading||!(modes.isWritable())||buffer.position()==0) } CATCH(IOException) {}
results[https://github.com/precog/howl/blob/c4e6dabc487c32e3d76bf1c7c20f5cce18166cb9/howl/logger/src/org/objectweb/howl/log/LogFile.java][write][1] = -> TRY {  -> IF { -> channel.position(0,)@ } -> bytesWritten+=channel.write(lb.buffer,)@ -> position=channel.position()@ } CATCH(IOException) {}
results[https://github.com/ggrandes/kvstore/blob/7ba19b7c23a0ff6db53097f400b61853f951b84c/src/main/java/org/infra/io/FileStreamStore.java][flushBuffer][1] = -> TRY {  -> IF { -> bufOutput.flip()@bufOutput.position()>0 -> fcOutput.write(bufOutput,)@bufOutput.position()>0 -> bufOutput.clear()@bufOutput.position()>0 } } CATCH(IOException) {}
results[https://github.com/jeromerobert/jCAE/blob/a1c79c6ff671358ad82cfc60cd6ceb1363149035/amibe/src/org/jcae/mesh/xmldata/UNV2Amibe.java][add][2] = -> TRY {  -> buffer.rewind()@ -> buffer.putInt(amibeID,)@ -> buffer.putInt(type,)@ -> buffer.rewind()@ -> channel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/iontorrent/Torrent-Variant-Caller-stable/blob/04cafffaa70555038ce207746d83ad8067fb9e43/public/java/src/org/broadinstitute/sting/gatk/datasources/reads/BAMSchedule.java][write][1] = -> TRY { -> scheduleFileChannel.write(buffer,)@ -> IF { -> throw makeIOFailureException(true,"Unable to write entire buffer to file.",null,)@buffer.remaining()>0 } } CATCH(IOException) { -> throw makeIOFailureException(true,"Unable to write data to BAM schedule file.",ex,)@ }
results[https://github.com/CSEMike/OneSwarm/blob/4740f20247f03e587297b4e399a75b81c81d8ebf/oneswarm_gwt_ui/src/edu/washington/cs/oneswarm/ui/gwt/server/ffmpeg/jflv/io/StreamWriter.java][write][1] = -> TRY { -> lenWritten=chan.write(bbuf,)@ } CATCH(IOException) { -> System.out.println("Error - unable to write specified bytes",)@ -> IF { -> ex.printStackTrace()@ } }
results[https://github.com/zhongl/iPage/blob/8dd2b26f9b33feb288938f9052554f70e92517a0/src/main/java/com/github/zhongl/journal/CRC32WritableByteChannel.java][close][1] = -> TRY {  -> crc32Buffer=ByteBuffer.wrap(Longs.toByteArray(crc32.getValue(),),)@ -> channel.write(crc32Buffer,)@ -> channel.close()@ } CATCH(IOException) {}
results[https://github.com/ecologylab/ecologylabFundamental/blob/ae4dd79f8e6624ba5ac8819aad09cadae1f783d7/ecologylab/io/NIOTools.java][writeABuffer][3] = -> TRY {  -> LOOP { -> byteBuffer.put((byte) buffy.charAt(index,),)@ } -> fileChannel.write(byteBuffer,)@ -> byteBuffer.clear()@ } CATCH(IOException) {}
results[https://github.com/cinchapi/concourse/blob/43617ca81f5b515433b11668ecf5089fa6f10265/Concourse/src/java/com/cinchapi/concourse/db/api/Persistable.java][write][7] = -> TRY {  -> channel.lock(channel.position(),obj.size(),false,)@ -> channel.write(ByteBuffer.wrap(obj.getBytes(),),)@ } CATCH(IOException) {}
results[https://github.com/uvalbbu/dalvik_test/blob/e595037cf49109e9e20b47e6e191eda45e414008/luni/src/test/java/org/apache/harmony/nio/tests/java/nio/MappedByteBufferTest.java][fillTempFile][14] = -> TRY {  -> fileChannel=fileOutputStream.getChannel()@ -> byteBuffer=ByteBuffer.allocateDirect(BUFFER_LENGTH,)@ -> loadTestData1(byteBuffer,)@ -> byteBuffer.clear()@ -> fileChannel.write(byteBuffer,)@ -> fileChannel.close()@ } CATCH(IOException) {}
results[https://github.com/svn2github/H2-Mirror/blob/215771a28861c5e8a85582dd94b1c1b04e1bd83d/h2/src/test/org/h2/test/db/TestOpenClose.java][testErrorMessageWrongSplit][2] = -> TRY {  -> c=FileUtils.open(fn+".1.part","rw",)@ -> c.position(c.size()*2-1,)@ -> c.write(ByteBuffer.wrap( new byte[],),)@ -> c.close()@ } CATCH(Exception) {}
results[https://github.com/bigbrother82/android-test/blob/b99b5cd0be8ab0d9791768c21ffd0d637b564df8/libcore/nio/src/test/java/org/apache/harmony/nio/tests/java/nio/channels/FileChannelTest.java][test_writeLByteBuffer][8] = -> TRY {  -> writeBuffer=ByteBuffer.wrap(CONTENT_AS_BYTES,)@ -> result=writeOnlyFileChannel.write(writeBuffer,)@ -> assertEquals(CONTENT_AS_BYTES_LENGTH,result,)@ -> assertEquals(CONTENT_AS_BYTES_LENGTH,writeBuffer.position(),)@ -> writeOnlyFileChannel.close()@ } CATCH(Exception) {}
results[https://github.com/sashakh/waze/blob/34ea3e823616a5ca237ff43ffdf5f7caa29c06ff/src/android/java/src/com/waze/FreeMapCameraPreView.java][SaveToFile][1] = -> TRY { -> fileChannel=fileOS.getChannel()@!(mBufOS.size()<=0) -> fileChannel.write(ByteBuffer.wrap(mBufOS.toByteArray(),),)@!(mBufOS.size()<=0) } CATCH(Exception) { -> WazeLog.e("Error in writing the file to the disk. ",ex,)@!(mBufOS.size()<=0) -> ex.printStackTrace()@!(mBufOS.size()<=0) }
results[https://github.com/aguocool/workspace/blob/a6e10394d7333dab97fa9fc06b4231af6cbe949c/InnerClass/src/io/ChannelCopy.java][main][2] = -> TRY {  -> buffer=ByteBuffer.allocate(BSIZE,)@ -> LOOP { -> buffer.flip()@in.read(buffer,)!=-1 -> out.write(buffer,)@in.read(buffer,)!=-1 -> buffer.clear()@in.read(buffer,)!=-1 } } CATCH(Exception) {}
results[https://github.com/metaborg/mb-exec/blob/29f428f33f2d9540fc283d49d46cb32e3483236d/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFI_write_to_file_channel_0_0.java][call][2] = -> c=JFILibrary.fromTupleWrapped(current,0,FileChannel.class,)@ -> buf=JFILibrary.fromTupleWrapped(current,1,ByteBuffer.class,)@ -> IF { -> return true@c==null||buf==null } -> TRY { -> c.write(buf,)@!(c==null||buf==null) } CATCH(IOException) { -> return JFILibrary.invokeExceptionHandler(context,e,)@!(c==null||buf==null) }
results[https://github.com/thobe/neo4j-advanced/blob/4e496d1a578fca9606f358b946108a6bd583c7ae/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][open][5] = -> TRY {  -> fileChannel=new RandomAccessFile(fileToOpen,"rw",).getChannel()@ } ELSE { -> LogIoUtils.writeLogHeader(buffer,logVersion,lastTxId,)@ -> fileChannel.write(buffer,)@!(fileChannel.size()!=0) } CATCH(IOException) {}
results[https://github.com/uDig/udig-platform/blob/fae0b31d673f218d5474c6cbdbc78749e8703d41/plugins/net.refractions.udig.catalog/src/net/refractions/udig/catalog/CatalogPlugin.java][copy][3] = -> TRY {  -> buffer=ByteBuffer.allocate(BSIZE,)@ -> LOOP { -> buffer.flip()@in.read(buffer,)!=-1 -> out.write(buffer,)@in.read(buffer,)!=-1 -> buffer.clear()@in.read(buffer,)!=-1 } } CATCH(IOException) {}
results[https://github.com/ewcmsfree/ewcms/blob/2ef6f402907978c26e6faae6b913a95f99a5c036/src/main/java/com/ewcms/plugin/crawler/generate/util/IO.java][writeBytesToFile][2] = -> TRY { -> fc=new FileOutputStream(destination,).getChannel()@ -> fc.write(ByteBuffer.wrap(bytes,),)@ -> fc.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/Jules-/terraingis/blob/d7e0c36af856d850c63253fdd172423e04862d86/src/TerrainGIS/src/cz/kalcik/vojta/shapefilelib/files/ShapeFileReader.java][writeBytesToFile][1] = -> TRY {  -> output=new FileOutputStream(file.getAbsolutePath(),).getChannel()@ -> buffer.position(0,)@ -> output.write(buffer,)@ -> output.close()@ } CATCH(IOException) {}
results[https://github.com/buzheng/buzheng-study-java/blob/806c68192742caab7d45b6c523cfbe492b123f63/src/main/java/org/buzheng/study/nio/WriteToFile.java][main][1] = -> TRY {  -> channel=fos.getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> buffer.put(message.getBytes(),)@ -> buffer.flip()@ -> channel.write(buffer,)@ } CATCH(Exception) {}
results[https://github.com/fliuzzi/DataParser/blob/dd44405964ce27cd8a66adbd3f5730f7e26ae90c/src/com/where/atlas/feed/YelpParserUtils.java][storeListing][3] = -> LOOP { -> TRY { -> outputChannel_.write(ByteBuffer.wrap(ir.userId_+","+placeId+","+ir.rating_+newline.getBytes(),),)@ } CATCH(Exception) { -> e.printStackTrace()@ } }
results[https://github.com/nasa/World-Wind-Java/blob/487ae3095cf885c31a1c8b5f5a35b30ce4ff893c/WorldWind/src/gov/nasa/worldwind/formats/tiff/GeotiffWriter.java][writeGeographicImageGeoKeys][2] = -> TRY {  -> offset=this.theChannel.position()@ -> IF { -> bytes=this.getBytes(values,)@ -> this.theChannel.write(ByteBuffer.wrap(bytes,),)@ } } CATCH(IOException) {}
results[https://github.com/l2jserver2/l2jserver2/blob/73f51e53c009789f18a8189b06f443126a70b86d/src/main/java/com/l2jserver/service/game/pathing/MapperPathingService.java][dispatch][3] = -> struct=CoordinateStruct.fromCoordinate(point.getCoordinate(),)@ -> TRY { -> channel.write(struct.getByteBuffer(),)@ -> channel.force(true,)@ } CATCH(IOException) { -> log.warn("Error writing pathing file!",e1,)@ }
results[https://github.com/hxzon/java-lib-hxzon/blob/ba161a9baa38c5e6c049557fb7be97745d192917/code/java/java nio/niosrc/com/ronsoft/books/nio/channels/FileHole.java][putData][2] = -> TRY {  -> buffer.clear()@ -> buffer.put(string.getBytes("US-ASCII",),)@ -> buffer.flip()@ -> channel.position(position,)@ -> channel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/Unidata/sruth/blob/6eea3b767cd3637ecc8adc911db6a76edd16846a/src/main/java/edu/ucar/unidata/sruth/MinHeapFile.java][ensureSize][1] = -> TRY {  -> IF { -> channel.position(size-1,)@!(size<0) && channel.size()<size -> channel.write(ByteBuffer.wrap( new byte[],),)@!(size<0) && channel.size()<size -> channel.force(false,)@!(size<0) && channel.size()<size } } CATCH(IOException) {}
results[https://github.com/apavlo/h-store/blob/32b0e1b5e081bdb8bd71646f470a7ff17c34c055/src/frontend/edu/brown/hstore/wal/WriteAheadLogger.java][write][1] = -> TRY { -> fstream.write(b.b.asReadOnlyBuffer(),)@ -> fstream.force(true,)@ } CATCH(Exception) { -> message="Failed to write log entry for "+ts.toString()@ -> throw new ServerFaultException(message,e,ts.getTransactionId(),)@ }
results[https://github.com/hugojosefson/neo4j-components-svn/blob/7571d52cc7b459adf3bf110986562bd2c304cf9c/kernel/trunk/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][doneInternal][1] = -> TRY {  -> buffer.clear()@ -> buffer.put(DONE,).putInt(identifier,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@ -> fileChannel.force(false,)@ } CATCH(IOException) {}
results[https://github.com/srt/asterisk-java/blob/38898d3a191ebce989c64a57b4fc43171424fa40/src/main/java/org/asteriskjava/util/internal/FileTrace.java][print][1] = -> TRY {  -> LOOP { -> bytesWritten=channel.write(byteBuffer,)@bytesWritten<byteBuffer.remaining() -> IF { -> throw new IOException("Unable to write trace to channel. Media may be full.",)@bytesWritten==0 && bytesWritten<byteBuffer.remaining() } } } CATCH(IOException) {}
results[https://github.com/strobecorp/kirk/blob/47363fb69ba8e3f0d6f8123bcde893d7c4ed784c/src/com/strobecorp/kirk/RewindableInputStream.java][rotateToTmpFile][1] = -> TRY {  -> tmpFile=fileStream.getChannel()@ -> buf.clear().position(0,).limit((int) buffered,)@ -> tmpFile.write(buf,)@ -> buf.clear()@ } CATCH(IOException) {}
results[https://github.com/cloudera/flume-ng/blob/c4403e047c54476c7febd81e3cd0d93ec4f28c30/flume-ng-channels/flume-file-channel/src/main/java/org/apache/flume/channel/file/LogFile.java][write][1] = -> TRY {  -> expectedLength=length+(long) buffer.capacity()@ -> preallocate(1+buffer.capacity(),)@ -> wrote=writeFileChannel.write(buffer,)@ -> Preconditions.checkState(wrote==buffer.limit(),)@ } CATCH(IOException) {}
results[https://github.com/coderplay/h2-bitmap/blob/a6164db4e1ea39482dc45713e20b9bcf59c8ed42/h2/src/test/org/h2/test/db/TestOpenClose.java][testErrorMessageWrongSplit][1] = -> TRY {  -> c=FileUtils.open(getBaseDir()+"/openClose2.h2.db.1.part","rw",)@ -> c.position(c.size()*2-1,)@ -> c.write(ByteBuffer.wrap( new byte[],),)@ -> c.close()@ } CATCH(Exception) {}
results[https://github.com/nroduit/Weasis/blob/189d73780139d9bdbda027a2e096f3655c250c68/weasis-dicom/weasis-dicom-viewer2d/src/main/java/org/weasis/dicom/viewer2d/mpr/SeriesBuilder.java][writToFile][1] = -> TRY { -> byteBuffer.order(ByteOrder.LITTLE_ENDIAN,)@ -> out=os.getChannel()@ -> out.write(byteBuffer,)@ } CATCH(Exception) { -> e.printStackTrace()@ } FINALLY { -> FileUtil.safeClose(os,)@ }
results[https://github.com/feuyeux/quiland/blob/cca933dcdc434ad76f0d55f0d151114cf2d2afe1/java/air-io/src/main/java/feuyeux/io/nio2/TestChannelCopy.java][copy1][1] = -> TRY { -> bytebuffer=ByteBuffer.allocate(bufferSize,)@ -> LOOP { -> bytebuffer.flip()@fileChannel_from.read(bytebuffer,)>0 -> fileChannel_to.write(bytebuffer,)@fileChannel_from.read(bytebuffer,)>0 -> bytebuffer.clear()@fileChannel_from.read(bytebuffer,)>0 } } CATCH(IOException) { -> logger.error(ex,)@ }
results[https://github.com/feuyeux/quiland/blob/cca933dcdc434ad76f0d55f0d151114cf2d2afe1/java/air-io/src/main/java/feuyeux/io/nio2/TestChannelCopy.java][copy2][1] = -> TRY { -> bytebuffer=ByteBuffer.allocateDirect(bufferSize,)@ -> LOOP { -> bytebuffer.flip()@fileChannel_from.read(bytebuffer,)>0 -> fileChannel_to.write(bytebuffer,)@fileChannel_from.read(bytebuffer,)>0 -> bytebuffer.clear()@fileChannel_from.read(bytebuffer,)>0 } } CATCH(IOException) { -> logger.error(ex,)@ }
results[https://github.com/OpenEtna/android_dalvik/blob/88f28cad4d6617b4f82f1cd752a7a9b11a555561/libcore/nio/src/test/java/org/apache/harmony/nio/tests/java/nio/channels/FileChannelTest.java][test_writeLByteBuffer_NonZeroPosition][1] = -> TRY {  -> writeBuffer=ByteBuffer.wrap(CONTENT_AS_BYTES,)@ -> writeBuffer.position(pos,)@ -> result=writeOnlyFileChannel.write(writeBuffer,)@ -> assertEquals(CONTENT_AS_BYTES_LENGTH-pos,result,)@ -> assertEquals(CONTENT_AS_BYTES_LENGTH,writeBuffer.position(),)@ -> writeOnlyFileChannel.close()@ } CATCH(Exception) {}
results[https://github.com/pwendell/mesos/blob/9e4b96d1e52898adc0fcdd3313909b7883d3ab68/src/third_party/zookeeper-3.3.1/contrib/bookkeeper/src/java/org/apache/bookkeeper/bookie/FileInfo.java][<init>][1] = -> TRY {  -> fc=new RandomAccessFile(lf,"rws",).getChannel()@ -> size=fc.size()@ -> IF { -> fc.write(ByteBuffer.wrap(header,),)@ } } CATCH(IOException) {}
