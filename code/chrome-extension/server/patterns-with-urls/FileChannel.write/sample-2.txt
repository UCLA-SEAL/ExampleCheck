results[https://github.com/coderplay/h2-bitmap/blob/286a8da7334439fb14a8a972f791e152d8dd1148/h2/src/tools/org/h2/dev/store/FilePathCache.java][write][9] = -> TRY {  -> len=base.write(src,)@ } CATCH(IOException) {}
results[https://github.com/apache/synapse/blob/cf6e8e504db03b789be4167370f7692a7eaa873f/scratch/synapse-2.1-versioned/java/modules/transports/core/pipe/src/main/java/org/apache/synapse/transport/pipe/PipeEndpointListener.java][stop][3] = -> TRY {  -> writeChannel.write(ByteBuffer.allocate(1,),)@ } CATCH(IOException) {}
results[https://github.com/WhisperSystems/TextSecure/blob/760c96171df094aacf8b3c062ef613ccdb01552c/library/src/org/whispersystems/textsecure/storage/Record.java][writeInteger][4] = -> TRY {  -> buffer=ByteBuffer.wrap(valueBytes,)@ -> out.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/undera/jmeter-plugins/blob/41ae50cf90581255d3b965e26a91e9b8531eccd8/standard/src/kg/apc/jmeter/reporters/FlexibleFileWriter.java][syncWrite][3] = -> TRY {  -> lock=fileChannel.lock()@ -> fileChannel.write(buf,)@ } CATCH(IOException) {}
results[https://github.com/balp/mkgmap/blob/350dc0ef45c6643df82d345030041b45d4e7afee/src/uk/me/parabola/imgfmt/app/FileBackedImgFileWriter.java][put][2] = -> TRY { -> tmpChannel.write(src,)@ } CATCH(IOException) { -> throw new MapFailedException("could not write buffer to mdr tmp file",)@ }
results[https://github.com/xerial/larray/blob/1109da8af2248c2872eea4b38793781cc5818110/larray-java/src/main/java/xerial/larray/core/RawByteArray.java][writeTo][3] = -> TRY {  -> channel.write(toDirectByteBuffer(),)@ } CATCH(IOException) {}
results[https://github.com/neo4j-attic/graphdb/blob/4e496d1a578fca9606f358b946108a6bd583c7ae/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/DirectLogBuffer.java][flipAndWrite][9] = -> TRY {  -> buffer.flip()@ -> fileChannel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/xerial/larray/blob/e32b6126b9ece0bb9d2435bc0675f7305638bcdf/larray-buffer/src/main/java/xerial/larray/core/LBuffer.java][writeTo][2] = -> TRY {  -> channel.write(toDirectByteBuffers(),)@ } CATCH(IOException) {}
results[https://github.com/f1ori/yacy/blob/5b944986437abbd91c6fb860f6d5e42ddcbf39f7/source/de/anomic/kelondro/kelondroChannelRA.java][write][1] = -> TRY {  -> bb=ByteBuffer.wrap(b,off,len,)@ -> channel.write(bb,)@ } CATCH(IOException) {}
results[https://github.com/madhusudancs/asterixdb/blob/5ee049d45ea3aa9e6317cd59063e2e0b4f2d4d4c/asterix-transactions/src/main/java/edu/uci/ics/asterix/transaction/management/service/logging/FileBasedBuffer.java][flush][1] = -> TRY {  -> fileChannel.write(buffer,)@ -> fileChannel.force(true,)@ } CATCH(IOException) {}
results[https://github.com/exoplatform/jcr/blob/fefb33198f7ff3dc380c305a3d32e0c95278e13c/component/core/src/main/java/org/exoplatform/services/jcr/impl/core/query/ErrorLog.java][append][2] = -> TRY {  -> out.write(ByteBuffer.wrap(action+" "+uuid+"\n".getBytes(),),)@ } CATCH(IOException) {}
results[https://github.com/GrizzlyNIO/grizzly-mirror/blob/c6927f8e88bd260d5b44122f287f927eea3a9ca5/extras/http-servlet-extras/src/main/java/org/glassfish/grizzly/servlet/extras/MultipartUploadFilter.java][writeBufferToDiskAndUpdateStats][2] = -> TRY {  -> uploadedBytesCounter.addAndGet(b.remaining(),)@ -> fileOutput.write(b,)@ } CATCH(IOException) {}
results[https://github.com/asgeirb/clapp/blob/4b08e6fbb18397c18d5a21ba2839b1494335fb94/javacode/src/main/java/no/copyleft/clapp/Indexer.java][writeIndex][1] = -> TRY {  -> b=ByteBuffer.wrap(bytes,)@ -> index.write(ByteBuffer.wrap(bytes,),)@ } CATCH(IOException) {}
results[https://github.com/WhisperSystems/TextSecure/blob/82f8ba35847bf0b85f7bedd4f401614346e3cbd8/src/org/thoughtcrime/securesms/database/Record.java][writeBlob][3] = -> TRY {  -> writeInteger(blobBytes.length,out,)@ -> buffer=ByteBuffer.wrap(blobBytes,)@ -> out.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/apache/activemq/blob/b0c2a40fb979829ceca2ca51858ca67269bd5992/activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/NIODataFileAppender.java][transfer][1] = -> TRY {  -> LOOP { -> channel.write(header,)@header.hasRemaining() } } CATCH(IOException) {}
results[https://github.com/dain/leveldb/blob/8b9fadf70dfc7d4f0f8af306d69dbe7473a5c2df/src/main/java/org/iq80/leveldb/table/TableBuilder.java][finish][1] = -> TRY {  -> footerEncoding=Footer.writeFooter(footer,)@ -> position+=fileChannel.write(footerEncoding.toByteBuffers(),)@ } CATCH(IOException) {}
results[https://github.com/dain/leveldb/blob/8b915c57c5ad9cf90cb81a3cfa5e6f7728a3f6f6/leveldb/src/main/java/org/iq80/leveldb/table/TableBuilder.java][finish][1] = -> TRY {  -> footerEncoding=Footer.writeFooter(footer,)@ -> position+=fileChannel.write(footerEncoding.toByteBuffer(),)@ } CATCH(IOException) {}
results[https://github.com/jeyboy/MUSIC/blob/7438ca96a703eb3db9ae1cd13ab4d7297a255684/lib/audiotagger/org/jaudiotagger/audio/mp4/Mp4TagWriter.java][writeDataUptoIncludingIlst][6] = -> TRY {  -> fileWriteChannel.transferFrom(fileReadChannel,0,startIlstWithinFile,)@ -> fileWriteChannel.position(startIlstWithinFile,)@ -> fileWriteChannel.write(rawIlstData,)@ } CATCH(IOException) {}
results[https://github.com/asgeirb/clapp/blob/4b08e6fbb18397c18d5a21ba2839b1494335fb94/javacode/src/main/java/no/copyleft/clapp/Indexer.java][indexLogline][1] = -> TRY {  -> len=logfile.write(l.getLogfileBytebuffers(),)@ -> writeIndex(index,l,(int) from,(short) len,)@ } CATCH(IOException) {}
results[https://github.com/gingi/fastbit/blob/00770b6e3f2e3914f2a51a98154e41ca0b3b7107/java/gov/lbl/fastbit/FastBitStringWriter.java][flushBuffer][1] = -> TRY {  -> buf.flip()@ -> channel.write(buf,)@ -> buf.clear()@ } CATCH(IOException) {}
results[https://github.com/zhongl/iPage/blob/8dd2b26f9b33feb288938f9052554f70e92517a0/src/main/java/com/github/zhongl/journal/CRC32WritableByteChannel.java][write][1] = -> TRY {  -> updateCRC32By(buffer.duplicate(),)@ -> return channel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/dain/leveldb/blob/8b915c57c5ad9cf90cb81a3cfa5e6f7728a3f6f6/leveldb/src/main/java/org/iq80/leveldb/table/TableBuilder.java][writeBlock][1] = -> TRY {  -> blockHandle=new BlockHandle(position,blockContents.length(),)@ -> position+=fileChannel.write( new ByteBuffer[],)@ } CATCH(IOException) {}
results[https://github.com/thobe/neo4j-advanced/blob/ab1e0c70e32d8fd4c51d6dc6e41764727f96ac8a/main/java/org/neo4j/index/impl/NioUtils.java][writeInt][24] = -> TRY {  -> buffer.clear()@ -> buffer.putInt(value,)@ -> buffer.flip()@ -> channel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/mariusaeriksen/cassandra/blob/9db8da81b7f269e5a8a7f896b751d482847d7082/src/org/apache/cassandra/io/SequenceFile.java][writeLong][7] = -> TRY {  -> byteBuffer=ByteBuffer.allocateDirect(8,)@ -> byteBuffer.putLong(value,)@ -> byteBuffer.flip()@ -> fc_.write(byteBuffer,)@ } CATCH(IOException) {}
results[https://github.com/codefollower/Lealone/blob/d7dae457353edcd09cc9f283b33f5f0aff3c838b/lealone-client/src/main/java/com/codefollower/lealone/store/fs/FileUtils.java][writeFully][12] = -> TRY {  -> src.remaining()>0@ -> LOOP { -> channel.write(src,)@ } } CATCH(IOException) {}
results[https://github.com/kennycason/euler/blob/c94472f4a39f407cc3512bb4d5c85d10b7120f3c/src/lib/FileWriter.java][write][1] = -> TRY { -> bb=ByteBuffer.wrap(content.getBytes(),)@ -> outfc.write(bb,)@ } CATCH(IOException) { -> System.err.println(e,)@ }
results[https://github.com/hugojosefson/neo4j-components-svn/blob/5b31daddd2ab557dfe0c0cfd0d0a0357386d3117/kernel/tags/1.1-rc1/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/DirectLogBuffer.java][putLong][13] = -> TRY {  -> buffer.clear()@ -> buffer.putLong(l,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/maxmind/MaxMind-DB-Reader-java/blob/f65461e84646e51866c2f75326186a485dfdd1c5/src/test/java/com/maxmind/db/DecoderTest.java][getFileChannel][2] = -> TRY {  -> fc=raf.getChannel()@ -> fc.write(ByteBuffer.wrap(data,),)@ -> fc.close()@ } CATCH(IOException) {}
results[https://github.com/SjB/Dart/blob/4fa9df04b72dd0665903be62cf3dafc14afc77d2/editor/tools/plugins/com.google.dart.indexer/src/com/google/dart/indexer/pagedstorage/filesystem/NioFileObject.java][write][4] = -> TRY {  -> buf=ByteBuffer.wrap(b,)@ -> buf.position(off,)@ -> buf.limit(off+len,)@ -> channel.write(buf,)@ } CATCH(IOException) {}
results[https://github.com/spring-projects/spring-batch/blob/7e85b506163b2b15429b4a958f926549a8ab5771/spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/TransactionAwareBufferedWriterTests.java][run][1] = -> TRY { -> bb=ByteBuffer.wrap("c".getBytes(),)@ -> fileChannel.write(bb,)@ } CATCH(IOException) { -> throw new IllegalStateException(e,)@ }
results[https://github.com/kingargyle/exist-1.4.x/blob/09d678fd8a58728dd51005c63b942f1ab6541ebc/src/org/exist/storage/statistics/DataGuide.java][write][1] = -> TRY {  -> buffer=ByteBuffer.allocate(nodeCount*BYTES_PER_NODE+4,)@ -> root.write(buffer,symbols,)@ -> buffer.flip()@ -> fc.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/ottomata/flume-ng/blob/1a2e0d7a7629eb32821c780d48a2c17f4e76a59e/flume-ng-channels/flume-file-channel/src/main/java/org/apache/flume/channel/file/FlumeEventQueue.java][run][1] = -> TRY { -> fileChannel.write(buffer,)@ -> fileChannel.force(true,)@ } CATCH(IOException) { -> LOG.error("Error while writing inflight events to "+"inflights file: "+inflightEventsFile.getName(),)@ }
results[https://github.com/apache/directory-server/blob/08b785b726f0111fab897edcaa7bf2a18f361b81/kerberos-codec/src/main/java/org/apache/directory/server/kerberos/shared/keytab/Keytab.java][writeFile][1] = -> TRY {  -> wChannel=new FileOutputStream(file,false,).getChannel()@ -> wChannel.write(buffer,)@ -> wChannel.close()@ } CATCH(IOException) {}
results[https://github.com/babble/babble/blob/e0dc556b525d1cc971a96459885742c8c92275d3/src/main/ed/db/ExportBinary.java][export][1] = -> TRY {  -> fc=fout.getChannel()@ -> LOOP { -> fc.write(encoder._buf,)@!(all==null) } } CATCH(IOException) {}
results[https://github.com/TheCollective/android_frameworks_base/blob/13abfb2a4b9c7823672ed5a2053588c8da6ec3d7/core/java/android/speech/tts/FileSynthesisCallback.java][start][2] = -> TRY { -> mFileChannel.write(ByteBuffer.allocate(WAV_HEADER_LENGTH,),)@ } CATCH(IOException) { -> Log.e(TAG,"Failed to write wav header to output file descriptor"+ex,)@ -> cleanUp()@ }
results[https://github.com/jianwang2010/Test/blob/a6a87006a584460b892ce398e769ce9a997bd4f2/public/java/src/org/broadinstitute/sting/gatk/datasources/reads/BAMSchedule.java][write][3] = -> TRY { -> scheduleFileChannel.write(buffer,)@ -> IF { -> throw new ReviewedStingException("Unable to write entire buffer to file.",)@buffer.remaining()>0 } } CATCH(IOException) { -> throw new ReviewedStingException("Unable to write data to BAM schedule file.",ex,)@ }
results[https://github.com/neo4j-attic/graphdb/blob/e82cead0f458a42bf4ee38059d51cc16cd8e1ae6/kernel/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][doneInternal][6] = -> TRY {  -> buffer.clear()@ -> LogIoUtils.writeDone(buffer,identifier,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@ -> fileChannel.force(false,)@ } CATCH(IOException) {}
results[https://github.com/shiffman/shiffman.github.io/blob/50593000652328c8df6ffb2406d5fd4ba8d4c7ce/itp/classes/a2z/week04/simple/A2ZFileWriter.java][writeContent][2] = -> TRY {  -> outfc=fos.getChannel()@ -> bb=ByteBuffer.wrap(content.getBytes(),)@ -> outfc.write(bb,)@ -> outfc.close()@ } CATCH(IOException) {}
results[https://github.com/jeromerobert/jCAE/blob/a1c79c6ff671358ad82cfc60cd6ceb1363149035/amibe/src/org/jcae/mesh/xmldata/UNV2Amibe.java][add][2] = -> TRY {  -> buffer.rewind()@ -> buffer.putInt(amibeID,)@ -> buffer.putInt(type,)@ -> buffer.rewind()@ -> channel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/d5e843666905e90aa91e270aeb152b1cfa4cbec9/kernel/branches/new-index-api/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][doneInternal][10] = -> TRY {  -> buffer.clear()@ -> buffer.put(DONE,).putInt(identifier,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/dhale/jtk/blob/8b5a6d1be0a5706cb0c1f7a85588098780e46274/src/edu/mines/jtk/io/DataFile.java][writeInts][6] = -> TRY {  -> LOOP { -> _bb.position(0,).limit(l*4,)@ -> _fc.write(_bb,)@ } } CATCH(IOException) {}
results[https://github.com/safuus/MobX/blob/dda353da9eeeff8fabbee62fe03b6448cd1b7238/mobxserver/apache-mina-2.0.4/src/mina-core/src/test/java/org/apache/mina/transport/AbstractFileRegionTest.java][createLargeFile][2] = -> TRY {  -> channel=new FileOutputStream(largeFile,).getChannel()@ -> buffer=createBuffer()@ -> channel.write(buffer,)@ -> channel.close()@ } CATCH(IOException) {}
results[https://github.com/bcoverston/apache-hosted-cassandra/blob/9db8da81b7f269e5a8a7f896b751d482847d7082/src/org/apache/cassandra/io/SequenceFile.java][writeDirect][7] = -> TRY {  -> byteBuffer=ByteBuffer.allocateDirect(bytes.length,)@ -> byteBuffer.put(bytes,)@ -> byteBuffer.flip()@ -> fc_.write(byteBuffer,)@ -> return fc_.position()@ } CATCH(IOException) {}
results[https://github.com/killme2008/Metamorphosis/blob/91e022ba65d9ecadb509ac4c7141e5677c52de07/metamorphosis-server/src/main/java/com/taobao/metamorphosis/server/store/FileMessageSet.java][append][1] = -> TRY {  -> offset=this.sizeInBytes.get()@ -> LOOP { -> sizeInBytes+=this.channel.write(buf,)@buf.hasRemaining() } -> this.sizeInBytes.addAndGet(sizeInBytes,)@ } CATCH(IOException) {}
results[https://github.com/davecheney/motown/blob/c66aa8518b024d51a523cb307791e7103c1066d2/motown-dav/src/main/java/net/cheney/motown/dav/resource/file/FileResource.java][put][2] = -> TRY {  -> fc=new FileOutputStream(file(),).getChannel()@ -> fc.write(entity,)@ -> fc.close()@ } CATCH(IOException) {}
results[https://github.com/jihoonson/tajo/blob/7f3a05cfe9203bc59665f23c7ee6844441fa5e5b/core/src/main/java/tajo/storage/RawFile.java][flushBuffer][4] = -> TRY {  -> buffer.limit(buffer.position(),)@ -> buffer.flip()@ -> channel.write(buffer,)@ -> buffer.clear()@ } CATCH(IOException) {}
results[https://github.com/coderplay/h2-bitmap/blob/29c3bc9b6d69d8a1ddfb540779950132c20390cf/h2/src/test/org/h2/test/utils/FilePathDebug.java][write][7] = -> TRY {  -> debug("write",channel.position(),src.position(),src.remaining(),)@ -> return channel.write(src,)@ } CATCH(IOException) {}
results[https://github.com/ttron/lab/blob/8e5b87a6d50b46fe212da99a143fd44cdf38e528/MINA-2/test/org/apache/mina/filter/stream/FileRegionWriteFilterTest.java][createMessage][2] = -> TRY {  -> channel=new RandomAccessFile(file,"rw",).getChannel()@ -> buffer=ByteBuffer.wrap(data,)@ -> channel.write(buffer,)@ -> return new DefaultFileRegion(channel,)@ } CATCH(IOException) {}
results[https://github.com/iontorrent/Torrent-Variant-Caller-stable/blob/04cafffaa70555038ce207746d83ad8067fb9e43/public/java/src/org/broadinstitute/sting/gatk/datasources/reads/BAMSchedule.java][write][1] = -> TRY { -> scheduleFileChannel.write(buffer,)@ -> IF { -> throw makeIOFailureException(true,"Unable to write entire buffer to file.",null,)@buffer.remaining()>0 } } CATCH(IOException) { -> throw makeIOFailureException(true,"Unable to write data to BAM schedule file.",ex,)@ }
results[https://github.com/jruby/jruby-rack/blob/d8f5c71f413910fc7d97ca02d084beb1b80c5932/src/main/java/org/jruby/rack/RackRewindableInput.java][<init>][2] = -> TRY { -> tempfileChannel=(FileChannel) io.getChannel()@ -> tempfileChannel.write(memoryBuffer,)@ -> tempfileChannel.position(0,)@ } CATCH(IOException) { -> throw getRuntime().newIOErrorFromException(io,)@ }
results[https://github.com/Unidata/sruth/blob/964f6e2c7f7d578ec86220b1df7b9bf7eb633326/src/edu/ucar/unidata/dynaccn/MinHeapFile.java][ensureFileSize][1] = -> TRY {  -> IF { -> channel.position(size-1,)@channel.size()<size -> channel.write(ByteBuffer.wrap( new byte[],),)@channel.size()<size } } CATCH(IOException) {}
results[https://github.com/irstv/orbisgis/blob/ad951f7fbefb9c76dc7147fa9cd9817ca95ca1cb/gdms/src/main/java/org/gdms/driver/ReadWriteBufferManager.java][flush][1] = -> TRY {  -> buffer.position(0,)@ -> buffer.limit(highestModification,)@ -> channel.position(windowStart,)@ -> channel.write(buffer,)@ -> buffer.clear()@ } CATCH(IOException) {}
results[https://github.com/CSEMike/OneSwarm/blob/4740f20247f03e587297b4e399a75b81c81d8ebf/oneswarm_gwt_ui/src/edu/washington/cs/oneswarm/ui/gwt/server/ffmpeg/jflv/io/StreamWriter.java][write][1] = -> TRY { -> lenWritten=chan.write(bbuf,)@ } CATCH(IOException) { -> System.out.println("Error - unable to write specified bytes",)@ -> IF { -> ex.printStackTrace()@ } }
results[https://github.com/jruby/jruby-cdc/blob/6813a3d165ec525137bf918973f4f22c260b7a75/src/org/jruby/util/IOHandlerSeekable.java][flushWrite][1] = -> TRY {  -> IF { -> return @reading||!(modes.isWritable())||buffer.position()==0 } -> buffer.flip()@!(reading||!(modes.isWritable())||buffer.position()==0) -> channel.write(buffer,)@!(reading||!(modes.isWritable())||buffer.position()==0) -> buffer.clear()@!(reading||!(modes.isWritable())||buffer.position()==0) } CATCH(IOException) {}
results[https://github.com/precog/howl/blob/c4e6dabc487c32e3d76bf1c7c20f5cce18166cb9/howl/logger/src/org/objectweb/howl/log/LogFile.java][write][1] = -> TRY {  -> IF { -> channel.position(0,)@ } -> bytesWritten+=channel.write(lb.buffer,)@ -> position=channel.position()@ } CATCH(IOException) {}
results[https://github.com/ggrandes/kvstore/blob/7ba19b7c23a0ff6db53097f400b61853f951b84c/src/main/java/org/infra/io/FileStreamStore.java][flushBuffer][1] = -> TRY {  -> IF { -> bufOutput.flip()@bufOutput.position()>0 -> fcOutput.write(bufOutput,)@bufOutput.position()>0 -> bufOutput.clear()@bufOutput.position()>0 } } CATCH(IOException) {}
results[https://github.com/zhongl/iPage/blob/8dd2b26f9b33feb288938f9052554f70e92517a0/src/main/java/com/github/zhongl/journal/CRC32WritableByteChannel.java][close][1] = -> TRY {  -> crc32Buffer=ByteBuffer.wrap(Longs.toByteArray(crc32.getValue(),),)@ -> channel.write(crc32Buffer,)@ -> channel.close()@ } CATCH(IOException) {}
results[https://github.com/ecologylab/ecologylabFundamental/blob/ae4dd79f8e6624ba5ac8819aad09cadae1f783d7/ecologylab/io/NIOTools.java][writeABuffer][3] = -> TRY {  -> LOOP { -> byteBuffer.put((byte) buffy.charAt(index,),)@ } -> fileChannel.write(byteBuffer,)@ -> byteBuffer.clear()@ } CATCH(IOException) {}
results[https://github.com/Unidata/sruth/blob/6eea3b767cd3637ecc8adc911db6a76edd16846a/src/main/java/edu/ucar/unidata/sruth/MinHeapFile.java][ensureSize][1] = -> TRY {  -> IF { -> channel.position(size-1,)@!(size<0) && channel.size()<size -> channel.write(ByteBuffer.wrap( new byte[],),)@!(size<0) && channel.size()<size -> channel.force(false,)@!(size<0) && channel.size()<size } } CATCH(IOException) {}
results[https://github.com/cinchapi/concourse/blob/43617ca81f5b515433b11668ecf5089fa6f10265/Concourse/src/java/com/cinchapi/concourse/db/api/Persistable.java][write][7] = -> TRY {  -> channel.lock(channel.position(),obj.size(),false,)@ -> channel.write(ByteBuffer.wrap(obj.getBytes(),),)@ } CATCH(IOException) {}
results[https://github.com/uvalbbu/dalvik_test/blob/e595037cf49109e9e20b47e6e191eda45e414008/luni/src/test/java/org/apache/harmony/nio/tests/java/nio/MappedByteBufferTest.java][fillTempFile][14] = -> TRY {  -> fileChannel=fileOutputStream.getChannel()@ -> byteBuffer=ByteBuffer.allocateDirect(BUFFER_LENGTH,)@ -> loadTestData1(byteBuffer,)@ -> byteBuffer.clear()@ -> fileChannel.write(byteBuffer,)@ -> fileChannel.close()@ } CATCH(IOException) {}
results[https://github.com/uDig/udig-platform/blob/34a354b156e9afa4edbadb35216b7df0b34442c0/plugins/org.locationtech.udig.catalog/src/net/refractions/udig/catalog/CatalogPlugin.java][copy][3] = -> TRY {  -> buffer=ByteBuffer.allocate(BSIZE,)@ -> LOOP { -> buffer.flip()@in.read(buffer,)!=-1 -> out.write(buffer,)@in.read(buffer,)!=-1 -> buffer.clear()@in.read(buffer,)!=-1 } } CATCH(IOException) {}
results[https://github.com/l2jserver2/l2jserver2/blob/665e82c97af54f6d42c673bb746abfa4dff4dcf7/src/main/java/com/l2jserver/service/game/map/pathing/MapperPathingService.java][dispatch][3] = -> struct=CoordinateStruct.fromCoordinate(point.getCoordinate(),)@ -> TRY { -> channel.write(struct.getByteBuffer(),)@ -> channel.force(true,)@ } CATCH(IOException) { -> log.warn("Error writing pathing file!",e1,)@ }
results[https://github.com/dmontag/neo4j-enterprise/blob/4e496d1a578fca9606f358b946108a6bd583c7ae/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][open][5] = -> TRY {  -> fileChannel=new RandomAccessFile(fileToOpen,"rw",).getChannel()@ } ELSE { -> LogIoUtils.writeLogHeader(buffer,logVersion,lastTxId,)@ -> fileChannel.write(buffer,)@!(fileChannel.size()!=0) } CATCH(IOException) {}
results[https://github.com/metaborg/mb-exec/blob/1fe683367128c730f3a88f7bccd71ad8d5f1117e/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_write_to_file_channel_0_0.java][call][2] = -> c=JFFLibrary.fromTupleWrapped(current,0,FileChannel.class,)@ -> buf=JFFLibrary.fromTupleWrapped(current,1,ByteBuffer.class,)@ -> IF { -> return true@c==null||buf==null } -> TRY { -> c.write(buf,)@!(c==null||buf==null) } CATCH(IOException) { -> return JFFLibrary.invokeExceptionHandler(context,e,)@!(c==null||buf==null) }
results[https://github.com/hugojosefson/neo4j-components-svn/blob/7571d52cc7b459adf3bf110986562bd2c304cf9c/kernel/trunk/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][doneInternal][1] = -> TRY {  -> buffer.clear()@ -> buffer.put(DONE,).putInt(identifier,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@ -> fileChannel.force(false,)@ } CATCH(IOException) {}
results[https://github.com/srt/asterisk-java/blob/38898d3a191ebce989c64a57b4fc43171424fa40/src/main/java/org/asteriskjava/util/internal/FileTrace.java][print][1] = -> TRY {  -> LOOP { -> bytesWritten=channel.write(byteBuffer,)@bytesWritten<byteBuffer.remaining() -> IF { -> throw new IOException("Unable to write trace to channel. Media may be full.",)@bytesWritten==0 && bytesWritten<byteBuffer.remaining() } } } CATCH(IOException) {}
results[https://github.com/Jules-/terraingis/blob/d7e0c36af856d850c63253fdd172423e04862d86/src/TerrainGIS/src/cz/kalcik/vojta/shapefilelib/files/ShapeFileReader.java][writeBytesToFile][1] = -> TRY {  -> output=new FileOutputStream(file.getAbsolutePath(),).getChannel()@ -> buffer.position(0,)@ -> output.write(buffer,)@ -> output.close()@ } CATCH(IOException) {}
results[https://github.com/strobecorp/kirk/blob/47363fb69ba8e3f0d6f8123bcde893d7c4ed784c/src/com/strobecorp/kirk/RewindableInputStream.java][rotateToTmpFile][1] = -> TRY {  -> tmpFile=fileStream.getChannel()@ -> buf.clear().position(0,).limit((int) buffered,)@ -> tmpFile.write(buf,)@ -> buf.clear()@ } CATCH(IOException) {}
results[https://github.com/cloudera/flume-ng/blob/c4403e047c54476c7febd81e3cd0d93ec4f28c30/flume-ng-channels/flume-file-channel/src/main/java/org/apache/flume/channel/file/LogFile.java][write][1] = -> TRY {  -> expectedLength=length+(long) buffer.capacity()@ -> preallocate(1+buffer.capacity(),)@ -> wrote=writeFileChannel.write(buffer,)@ -> Preconditions.checkState(wrote==buffer.limit(),)@ } CATCH(IOException) {}
results[https://github.com/zhwbqd/Java/blob/e05f6e0e4d023d9ddf4b75a1b69b874c52301ef6/java_conclusion/src/main/java/zhwb/study/javabase/nio/channel/FileHole.java][putData][2] = -> TRY {  -> buffer.clear()@ -> buffer.put(string.getBytes("US-ASCII",),)@ -> buffer.flip()@ -> channel.position(position,)@ -> channel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/nasa/World-Wind-Java/blob/487ae3095cf885c31a1c8b5f5a35b30ce4ff893c/WorldWind/src/gov/nasa/worldwind/formats/tiff/GeotiffWriter.java][writeGeographicImageGeoKeys][2] = -> TRY {  -> offset=this.theChannel.position()@ -> IF { -> bytes=this.getBytes(values,)@ -> this.theChannel.write(ByteBuffer.wrap(bytes,),)@ } } CATCH(IOException) {}
results[https://github.com/pwendell/mesos/blob/9e4b96d1e52898adc0fcdd3313909b7883d3ab68/src/third_party/zookeeper-3.3.1/src/contrib/bookkeeper/src/java/org/apache/bookkeeper/bookie/FileInfo.java][<init>][40] = -> TRY {  -> fc=new RandomAccessFile(lf,"rws",).getChannel()@ -> size=fc.size()@ -> IF { -> fc.write(ByteBuffer.wrap(header,),)@ } } CATCH(IOException) {}
results[https://github.com/feuyeux/quiland/blob/aa5679fbd3607fdda82c6c64b2a8f75ab6383ff2/java/air-io-network/src/main/java/creative/air/nio2/TestChannelCopy.java][copy2][2] = -> TRY { -> bytebuffer=ByteBuffer.allocateDirect(bufferSize,)@ -> LOOP { -> bytebuffer.flip()@fileChannel_from.read(bytebuffer,)>0 -> fileChannel_to.write(bytebuffer,)@fileChannel_from.read(bytebuffer,)>0 -> bytebuffer.clear()@fileChannel_from.read(bytebuffer,)>0 } } CATCH(IOException) { -> logger.error(ex,)@ }
results[https://github.com/feuyeux/quiland/blob/aa5679fbd3607fdda82c6c64b2a8f75ab6383ff2/java/air-io-network/src/main/java/creative/air/nio2/TestChannelCopy.java][copy1][2] = -> TRY { -> bytebuffer=ByteBuffer.allocate(bufferSize,)@ -> LOOP { -> bytebuffer.flip()@fileChannel_from.read(bytebuffer,)>0 -> fileChannel_to.write(bytebuffer,)@fileChannel_from.read(bytebuffer,)>0 -> bytebuffer.clear()@fileChannel_from.read(bytebuffer,)>0 } } CATCH(IOException) { -> logger.error(ex,)@ }
results[https://github.com/proofpoint/kairosdb/blob/6cf82bb8249d3695cd0cf64793590c837b1eceb5/src/main/java/net/opentsdb/core/datastore/CachedSearchResult.java][flushWriteBuffer][3] = -> TRY {  -> IF { -> m_writeBuffer.flip()@m_writeBuffer.position()!=0 -> LOOP { -> m_dataFileChannel.write(m_writeBuffer,)@m_writeBuffer.hasRemaining() && m_writeBuffer.position()!=0 } -> m_writeBuffer.clear()@m_writeBuffer.position()!=0 } } CATCH(IOException) {}
results[https://github.com/pquerna/cassandra/blob/9db8da81b7f269e5a8a7f896b751d482847d7082/src/org/apache/cassandra/io/SequenceFile.java][close][7] = -> TRY {  -> byteBuffer=ByteBuffer.allocateDirect(utfPrefix_+SequenceFile.marker_.length()+4+footer.length,)@ -> SequenceFile.writeUTF(byteBuffer,SequenceFile.marker_,)@ -> byteBuffer.putInt(size,)@ -> byteBuffer.put(footer,)@ -> byteBuffer.flip()@ -> fc_.write(byteBuffer,)@ } CATCH(IOException) {}
results[https://github.com/linkedin/databus/blob/dd39e049bb83bbacfea80ed5547270a812151211/databus-client/databus-client-common/src/main/java/com/linkedin/databus/client/DbusEventAvroDecoder.java][dumpMetadata][1] = -> TRY { -> writeBuffer=ByteBuffer.wrap(baos.toByteArray(),)@!(genericRecord==null) -> writeChannel.write(writeBuffer,)@!(genericRecord==null) } CATCH(UnsupportedEncodingException) { -> LOG.error("event metadata serialization error; event = "+e+"; metadata = "+genericRecord,e1,)@!(genericRecord==null) } CATCH(IOException) { -> LOG.error("event metadata serialization error; event = "+e+"; metadata = "+genericRecord,e1,)@!(genericRecord==null) }
results[https://github.com/iansealy/picard-detct/blob/2c562e9a50f778ed8a81bb70f7068f4efda3fcc2/src/java/net/sf/picard/illumina/parser/fakers/FileFaker.java][fakeFile][1] = -> TRY {  -> channel=fileOutputStream.getChannel()@ -> buffer=ByteBuffer.allocate(size,)@ -> buffer.order(ByteOrder.LITTLE_ENDIAN,)@ -> fakeFile(buffer,)@ -> buffer.flip()@ -> channel.write(buffer,)@ -> CloserUtil.close(channel,)@ } CATCH(IOException) {}
results[https://github.com/desruisseaux/geotoolkit-pending/blob/030babc1514511df05a7dfec3bd182c19df8bd15/modules/datastore/geotk-shapefile/src/main/java/org/geotoolkit/data/shapefile/shp/ShapefileWriter.java][drain][2] = -> TRY {  -> shapeBuffer.flip()@ -> LOOP { -> shpChannel.write(shapeBuffer,)@shapeBuffer.remaining()>0 } -> shapeBuffer.flip().limit(shapeBuffer.capacity(),)@ } CATCH(IOException) {}
results[https://github.com/mauricio/jai-imageio/blob/d56a6c4742961f9cbd1dada2ac02ec4289b81e17/src/share/classes/com/sun/media/imageio/stream/FileChannelImageOutputStream.java][flushBuffer][3] = -> TRY {  -> IF { -> byteBuffer.limit(byteBuffer.position(),)@byteBuffer.position()!=0 -> byteBuffer.position(0,)@byteBuffer.position()!=0 -> channel.write(byteBuffer,)@byteBuffer.position()!=0 -> byteBuffer.clear()@byteBuffer.position()!=0 } } CATCH(IOException) {}
results[https://github.com/dCache/dcache/blob/4cee5460cbe8f6be179de2a2d51a8ce7302ac3d5/modules/srm/src/main/java/org/dcache/srm/util/GridftpClient.java][write][3] = -> TRY {  -> IF { -> _fileChannel.position(offset,)@offset>=0 } -> bb=ByteBuffer.wrap(buffer.getBuffer(),0,buffer.getLength(),)@ -> _fileChannel.write(bb,)@ } CATCH(IOException) {}
results[https://github.com/spring-projects/spring-batch/blob/7e85b506163b2b15429b4a958f926549a8ab5771/spring-batch-infrastructure/src/main/java/org/springframework/batch/support/transaction/TransactionAwareBufferedWriter.java][write][1] = -> TRY {  -> IF { -> bb=ByteBuffer.wrap(bytes,)@ -> bytesWritten=channel.write(bb,)@ -> IF { -> throw new IOException("Unable to write all data.  Bytes to write: "+len+".  Bytes written: "+bytesWritten,)@bytesWritten!=length } } } CATCH(IOException) {}
results[https://github.com/xnio/xnio/blob/ca17c029c6e20130e35325cc69ecf12d3b21f2f2/api/src/test/java/org/xnio/XnioFileChannelTestCase.java][map][1] = -> TRY {  -> buffer=ByteBuffer.allocate(10,)@ -> buffer.put("1234567890".getBytes(),).flip()@ -> assertEquals(10,fileChannel.write(buffer,),)@ -> mappedBuffer=fileChannel.map(MapMode.READ_WRITE,5,2,)@ } CATCH(IOException) {}
results[https://github.com/undera/jmeter-plugins/blob/852448a16b18833321a15d60e640112e6a7f92a6/src/kg/apc/jmeter/reporters/FlexibleFileWriter.java][openFile][2] = -> TRY {  -> fileChannel=fos.getChannel()@ -> header=getFileHeader()@ -> IF { -> fileChannel.write(ByteBuffer.wrap(header.getBytes(),),)@!(header.isEmpty()) } } CATCH(IOException) {}
results[https://github.com/deegree/deegree3/blob/69c2f4b31d3796f352f72920575bae3e75666634/deegree-tools/deegree-tools-base/src/main/java/org/deegree/tools/coverage/gridifier/RasterTreeGridifier.java][storeCell][3] = -> TRY {  -> IF { -> currentBlobChannel.close()@ -> currentBlobChannel=new FileOutputStream(blob,).getChannel()@ } -> buffer.rewind()@ -> currentBlobChannel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/cinchapi/concourse/blob/3024569ddd59f587178f20a5dde3ae22615224d9/concourse-server/src/main/java/org/cinchapi/concourse/server/io/Byteables.java][write][1] = -> TRY { -> lock=channel.lock(channel.position(),object.size(),false,)@ -> channel.write(object.getBytes(),)@ -> channel.force(true,)@ } CATCH(IOException) { -> throw Throwables.propagate(e,)@ }
results[https://github.com/stefanvstein/monitor/blob/87a62fd8a698586a3402e42e3b327abf76d2d453/src/jdbm/recman/RecordFile.java][synch][1] = -> TRY {  -> data=node.getData()@ -> IF { -> file=getChannel(offset,)@ -> file.position(offset%MAX_FILE_SIZE,)@ -> file.write(ByteBuffer.wrap(data,),)@data!=null } } CATCH(IOException) {}
results[https://github.com/trombonehero/Footlights/blob/9031fe46fa167d738802d7f696a14c058bc2eac9/Client/Core/src/main/java/me/footlights/core/data/store/DiskStore.java][put][1] = -> TRY {  -> channel=new FileOutputStream(new File(dir,name.encode(),),).getChannel()@ -> channel.write(buffer.duplicate(),)@ -> channel.force(true,)@ } CATCH(IOException) {}
results[https://github.com/kevwil/aspen/blob/414ab9553cc873963373470bd12614500d9d41d8/javalib/src/main/java/com/github/kevwil/aspen/input/RackRewindableInput.java][createTempfile][1] = -> TRY { -> tempfileChannel=(FileChannel) tempfile.getChannel()@ -> IF { -> transferPosition=tempfileChannel.write(memoryBuffer,)@memoryBuffer!=null } -> tempfileChannel.position(0,)@ } CATCH(IOException) { -> throw getRuntime().newIOErrorFromException(io,)@ }
results[https://github.com/jpercent/catena/blob/633c986bcadc4ca7ab924afd0483d991308ed082/src/main/java/syndeticlogic/catena/text/io/BlockWriter.java][write][1] = -> TRY {  -> direct.put(jvmBuffer,0,length,)@ -> direct.rewind()@ -> direct.limit(length,)@ -> channel.write(direct,)@ -> direct.rewind()@ -> direct.limit(direct.capacity(),)@ } CATCH(IOException) {}
results[https://github.com/jeromerobert/jCAE/blob/f2bbf2912a8ad0dd06bb185eaa90d3dfe3c23959/amibe/src/org/jcae/mesh/amibe/algos3d/RandomizeGroups.java][flushChannel][1] = -> TRY {  -> IF { -> bb.limit(bb.position(),)@force||bb.position()==bb.limit() -> bb.rewind()@force||bb.position()==bb.limit() -> fc.write(bb,)@force||bb.position()==bb.limit() -> bb.clear()@force||bb.position()==bb.limit() } } CATCH(IOException) {}
results[https://github.com/TihiyTi/HeartLive/blob/0e66147bf9190fb745f206548726b1d6ee1707f7/CommunicationFile/src/test/java/com/tihiy/comm/parse/FreeTest.java][testWrite_3][1] = -> TRY {  -> fco=new FileOutputStream("test_out3.txt",).getChannel()@ -> bb=ByteBuffer.allocate(100,)@ -> bb.put(array,)@ -> bb.rewind()@ -> fco.write(bb,)@ -> fco.close()@ } CATCH(IOException) {}
results[https://github.com/RoCoVoMo/kinect/blob/efe9300c7c8964b391421ecf64af7eaf705eb224/de.rocovomo.e4.rcp.hmmrecorder/src/test/hmmview/view/SaveButton.java][save][1] = -> TRY {  -> channel=fileOutputStream.getChannel()@ -> channel.force(true,)@ -> buffer=ByteBuffer.allocate(bytes.length,)@ -> buffer.put(bytes,)@ -> buffer.flip()@ -> LOOP { -> channel.write(buffer,)@buffer.hasRemaining() } } CATCH(IOException) {}
results[https://github.com/dekellum/iudex/blob/39d3d959bf0f508543fd7194ac11bf707a697918/da/src/main/java/iudex/barc/BARCFile.java][closeOutput][1] = -> TRY {  -> IF { -> end=_channel.position()@ -> IF { -> _channel.write(CRLF_BYTES.duplicate(),)@ } -> _channel.force(false,)@ } } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/fb4a87a3c5251243c2f45ff181b809e5c77396ab/kernel/branches/new-index-api/src/main/java/org/neo4j/kernel/impl/transaction/TxManager.java][changeActiveLog][2] = -> TRY {  -> fc=new RandomAccessFile(logSwitcherFileName,"rw",).getChannel()@ -> buf=ByteBuffer.wrap(newFileName.getBytes(),)@ -> fc.truncate(0,)@ -> fc.write(buf,)@ -> fc.force(true,)@ -> fc.close()@ } CATCH(IOException) {}
results[https://github.com/saces/jgit/blob/1b4f76d7bc3bf15291391e6aabdca02796232873/org.eclipse.jgit/src/org/eclipse/jgit/lib/GitIndex.java][checkoutEntry][1] = -> TRY {  -> channel=new FileOutputStream(file,).getChannel()@ -> buffer=ByteBuffer.wrap(bytes,)@ -> j=channel.write(buffer,)@ -> IF { -> throw new IOException("Could not write file "+file,)@j!=bytes.length } -> channel.close()@!(j!=bytes.length) } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/7571d52cc7b459adf3bf110986562bd2c304cf9c/kernel/trunk/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][open][1] = -> TRY {  -> fileChannel=new RandomAccessFile(fileToOpen,"rw",).getChannel()@ } ELSE { -> buffer.clear()@ -> buffer.putLong(logVersion,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@!(fileChannel.size()!=0) } CATCH(IOException) {}
results[https://github.com/dain/leveldb/blob/8b9fadf70dfc7d4f0f8af306d69dbe7473a5c2df/src/main/java/org/iq80/leveldb/table/TableBuilder.java][writeBlock][1] = -> TRY {  -> blockTrailer=new BlockTrailer(blockCompressionType,crc32c(blockContents,blockCompressionType,),)@ -> trailer=BlockTrailer.writeBlockTrailer(blockTrailer,)@ -> blockHandle=new BlockHandle(position,blockContents.readableBytes(),)@ -> position+=fileChannel.write(Buffers.wrappedBuffer(blockContents,trailer,).toByteBuffers(),)@ } CATCH(IOException) {}
results[https://github.com/gitools/gitools/blob/f73b889e3c7fd358c5db262d42a5e3c5360ca2dd/ztools-core/src/main/java/org/gitools/exporter/AbstractHtmlExporter.java][copyFile][1] = -> TRY {  -> out=new FileOutputStream(dst,).getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> LOOP { -> buffer.flip()@in.read(buffer,)!=-1 -> out.write(buffer,)@in.read(buffer,)!=-1 -> buffer.clear()@in.read(buffer,)!=-1 } } CATCH(IOException) {}
