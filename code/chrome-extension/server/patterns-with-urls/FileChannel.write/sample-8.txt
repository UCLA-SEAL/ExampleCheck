results[https://github.com/rhusar/HornetQ-oldmigration/blob/f88499bf9b0fefcf3bbb61a48c1e11d4d8650c34/hornetq-journal/src/main/java/org/hornetq/core/journal/impl/SyncSpeedTest.java][write][4] = -> TRY {  -> buffer.flip()@ -> channel.write(buffer,)@ } CATCH(Exception) {}
results[https://github.com/neo4j-attic/graphdb/blob/4e496d1a578fca9606f358b946108a6bd583c7ae/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/DirectLogBuffer.java][flipAndWrite][9] = -> TRY {  -> buffer.flip()@ -> fileChannel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/gingi/fastbit/blob/00770b6e3f2e3914f2a51a98154e41ca0b3b7107/java/gov/lbl/fastbit/FastBitStringWriter.java][flushBuffer][1] = -> TRY {  -> buf.flip()@ -> channel.write(buf,)@ -> buf.clear()@ } CATCH(IOException) {}
results[https://github.com/thobe/neo4j-advanced/blob/ab1e0c70e32d8fd4c51d6dc6e41764727f96ac8a/main/java/org/neo4j/index/impl/NioUtils.java][writeInt][24] = -> TRY {  -> buffer.clear()@ -> buffer.putInt(value,)@ -> buffer.flip()@ -> channel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/mariusaeriksen/cassandra/blob/9db8da81b7f269e5a8a7f896b751d482847d7082/src/org/apache/cassandra/io/SequenceFile.java][writeLong][7] = -> TRY {  -> byteBuffer=ByteBuffer.allocateDirect(8,)@ -> byteBuffer.putLong(value,)@ -> byteBuffer.flip()@ -> fc_.write(byteBuffer,)@ } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/5b31daddd2ab557dfe0c0cfd0d0a0357386d3117/kernel/tags/1.1-rc1/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/DirectLogBuffer.java][putLong][13] = -> TRY {  -> buffer.clear()@ -> buffer.putLong(l,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/kingargyle/exist-1.4.x/blob/09d678fd8a58728dd51005c63b942f1ab6541ebc/src/org/exist/storage/statistics/DataGuide.java][write][1] = -> TRY {  -> buffer=ByteBuffer.allocate(nodeCount*BYTES_PER_NODE+4,)@ -> root.write(buffer,symbols,)@ -> buffer.flip()@ -> fc.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/neo4j-attic/graphdb/blob/e82cead0f458a42bf4ee38059d51cc16cd8e1ae6/kernel/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][doneInternal][6] = -> TRY {  -> buffer.clear()@ -> LogIoUtils.writeDone(buffer,identifier,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@ -> fileChannel.force(false,)@ } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/d5e843666905e90aa91e270aeb152b1cfa4cbec9/kernel/branches/new-index-api/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][doneInternal][10] = -> TRY {  -> buffer.clear()@ -> buffer.put(DONE,).putInt(identifier,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/bcoverston/apache-hosted-cassandra/blob/9db8da81b7f269e5a8a7f896b751d482847d7082/src/org/apache/cassandra/io/SequenceFile.java][writeDirect][7] = -> TRY {  -> byteBuffer=ByteBuffer.allocateDirect(bytes.length,)@ -> byteBuffer.put(bytes,)@ -> byteBuffer.flip()@ -> fc_.write(byteBuffer,)@ -> return fc_.position()@ } CATCH(IOException) {}
results[https://github.com/jihoonson/tajo/blob/7f3a05cfe9203bc59665f23c7ee6844441fa5e5b/core/src/main/java/tajo/storage/RawFile.java][flushBuffer][4] = -> TRY {  -> buffer.limit(buffer.position(),)@ -> buffer.flip()@ -> channel.write(buffer,)@ -> buffer.clear()@ } CATCH(IOException) {}
results[https://github.com/jruby/jruby-cdc/blob/6813a3d165ec525137bf918973f4f22c260b7a75/src/org/jruby/util/IOHandlerSeekable.java][flushWrite][1] = -> TRY {  -> IF { -> return @reading||!(modes.isWritable())||buffer.position()==0 } -> buffer.flip()@!(reading||!(modes.isWritable())||buffer.position()==0) -> channel.write(buffer,)@!(reading||!(modes.isWritable())||buffer.position()==0) -> buffer.clear()@!(reading||!(modes.isWritable())||buffer.position()==0) } CATCH(IOException) {}
results[https://github.com/ggrandes/kvstore/blob/7ba19b7c23a0ff6db53097f400b61853f951b84c/src/main/java/org/infra/io/FileStreamStore.java][flushBuffer][1] = -> TRY {  -> IF { -> bufOutput.flip()@bufOutput.position()>0 -> fcOutput.write(bufOutput,)@bufOutput.position()>0 -> bufOutput.clear()@bufOutput.position()>0 } } CATCH(IOException) {}
results[https://github.com/axDev-JDK/jdk/blob/d056abfe4943e70ad6eca1b61808089cb92cbe2a/test/sun/misc/IoTrace/IoTraceFileChannelReadWrite.java][testWrite][1] = -> TRY {  -> TRY { -> bb=ByteBuffer.allocate(1,)@ -> bb.put((byte) 11,)@ -> bb.flip()@ -> fc.write(bb,)@ } } CATCH(IOException,FileNotFoundException,Exception) {}
results[https://github.com/uDig/udig-platform/blob/34a354b156e9afa4edbadb35216b7df0b34442c0/plugins/org.locationtech.udig.catalog/src/net/refractions/udig/catalog/CatalogPlugin.java][copy][3] = -> TRY {  -> buffer=ByteBuffer.allocate(BSIZE,)@ -> LOOP { -> buffer.flip()@in.read(buffer,)!=-1 -> out.write(buffer,)@in.read(buffer,)!=-1 -> buffer.clear()@in.read(buffer,)!=-1 } } CATCH(IOException) {}
results[https://github.com/aguocool/workspace/blob/a6e10394d7333dab97fa9fc06b4231af6cbe949c/InnerClass/src/io/ChannelCopy.java][main][2] = -> TRY {  -> buffer=ByteBuffer.allocate(BSIZE,)@ -> LOOP { -> buffer.flip()@in.read(buffer,)!=-1 -> out.write(buffer,)@in.read(buffer,)!=-1 -> buffer.clear()@in.read(buffer,)!=-1 } } CATCH(Exception) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/7571d52cc7b459adf3bf110986562bd2c304cf9c/kernel/trunk/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][doneInternal][1] = -> TRY {  -> buffer.clear()@ -> buffer.put(DONE,).putInt(identifier,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@ -> fileChannel.force(false,)@ } CATCH(IOException) {}
results[https://github.com/buzheng/buzheng-study-java/blob/806c68192742caab7d45b6c523cfbe492b123f63/src/main/java/org/buzheng/study/nio/WriteToFile.java][main][1] = -> TRY {  -> channel=fos.getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> buffer.put(message.getBytes(),)@ -> buffer.flip()@ -> channel.write(buffer,)@ } CATCH(Exception) {}
results[https://github.com/zhwbqd/Java/blob/e05f6e0e4d023d9ddf4b75a1b69b874c52301ef6/java_conclusion/src/main/java/zhwb/study/javabase/nio/channel/FileHole.java][putData][2] = -> TRY {  -> buffer.clear()@ -> buffer.put(string.getBytes("US-ASCII",),)@ -> buffer.flip()@ -> channel.position(position,)@ -> channel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/feuyeux/quiland/blob/aa5679fbd3607fdda82c6c64b2a8f75ab6383ff2/java/air-io-network/src/main/java/creative/air/nio2/TestChannelCopy.java][copy2][2] = -> TRY { -> bytebuffer=ByteBuffer.allocateDirect(bufferSize,)@ -> LOOP { -> bytebuffer.flip()@fileChannel_from.read(bytebuffer,)>0 -> fileChannel_to.write(bytebuffer,)@fileChannel_from.read(bytebuffer,)>0 -> bytebuffer.clear()@fileChannel_from.read(bytebuffer,)>0 } } CATCH(IOException) { -> logger.error(ex,)@ }
results[https://github.com/feuyeux/quiland/blob/aa5679fbd3607fdda82c6c64b2a8f75ab6383ff2/java/air-io-network/src/main/java/creative/air/nio2/TestChannelCopy.java][copy1][2] = -> TRY { -> bytebuffer=ByteBuffer.allocate(bufferSize,)@ -> LOOP { -> bytebuffer.flip()@fileChannel_from.read(bytebuffer,)>0 -> fileChannel_to.write(bytebuffer,)@fileChannel_from.read(bytebuffer,)>0 -> bytebuffer.clear()@fileChannel_from.read(bytebuffer,)>0 } } CATCH(IOException) { -> logger.error(ex,)@ }
results[https://github.com/proofpoint/kairosdb/blob/6cf82bb8249d3695cd0cf64793590c837b1eceb5/src/main/java/net/opentsdb/core/datastore/CachedSearchResult.java][flushWriteBuffer][3] = -> TRY {  -> IF { -> m_writeBuffer.flip()@m_writeBuffer.position()!=0 -> LOOP { -> m_dataFileChannel.write(m_writeBuffer,)@m_writeBuffer.hasRemaining() && m_writeBuffer.position()!=0 } -> m_writeBuffer.clear()@m_writeBuffer.position()!=0 } } CATCH(IOException) {}
results[https://github.com/pquerna/cassandra/blob/9db8da81b7f269e5a8a7f896b751d482847d7082/src/org/apache/cassandra/io/SequenceFile.java][close][7] = -> TRY {  -> byteBuffer=ByteBuffer.allocateDirect(utfPrefix_+SequenceFile.marker_.length()+4+footer.length,)@ -> SequenceFile.writeUTF(byteBuffer,SequenceFile.marker_,)@ -> byteBuffer.putInt(size,)@ -> byteBuffer.put(footer,)@ -> byteBuffer.flip()@ -> fc_.write(byteBuffer,)@ } CATCH(IOException) {}
results[https://github.com/philipv/bonfire/blob/00ebac8b7ed1279187bb2a19be7f554d89bee441/default/nio-resources/src/WriteSomeBytes.java][main][1] = -> TRY {  -> fc=fout.getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> LOOP { -> buffer.put(message[i],)@i<message.length } -> buffer.flip()@ -> fc.write(buffer,)@ } CATCH(Exception) {}
results[https://github.com/iansealy/picard-detct/blob/2c562e9a50f778ed8a81bb70f7068f4efda3fcc2/src/java/net/sf/picard/illumina/parser/fakers/FileFaker.java][fakeFile][1] = -> TRY {  -> channel=fileOutputStream.getChannel()@ -> buffer=ByteBuffer.allocate(size,)@ -> buffer.order(ByteOrder.LITTLE_ENDIAN,)@ -> fakeFile(buffer,)@ -> buffer.flip()@ -> channel.write(buffer,)@ -> CloserUtil.close(channel,)@ } CATCH(IOException) {}
results[https://github.com/desruisseaux/geotoolkit-pending/blob/030babc1514511df05a7dfec3bd182c19df8bd15/modules/datastore/geotk-shapefile/src/main/java/org/geotoolkit/data/shapefile/shp/ShapefileWriter.java][drain][2] = -> TRY {  -> shapeBuffer.flip()@ -> LOOP { -> shpChannel.write(shapeBuffer,)@shapeBuffer.remaining()>0 } -> shapeBuffer.flip().limit(shapeBuffer.capacity(),)@ } CATCH(IOException) {}
results[https://github.com/codefollower/H2-Research/blob/2efda0eb90f9f0163dabacddca5456201e54407f/test/my/test/store/fs/FileUtilsTest.java][main2][4] = -> TRY {  -> fc=FileUtils.open(fileName,mode,)@ -> src=ByteBuffer.allocate(1024,)@ -> src.put("ddddddddd".getBytes(),)@ -> src.flip()@ -> fc.write(src,)@ -> fc.close()@ } CATCH(Exception) {}
results[https://github.com/xnio/xnio/blob/ca17c029c6e20130e35325cc69ecf12d3b21f2f2/api/src/test/java/org/xnio/XnioFileChannelTestCase.java][map][1] = -> TRY {  -> buffer=ByteBuffer.allocate(10,)@ -> buffer.put("1234567890".getBytes(),).flip()@ -> assertEquals(10,fileChannel.write(buffer,),)@ -> mappedBuffer=fileChannel.map(MapMode.READ_WRITE,5,2,)@ } CATCH(IOException) {}
results[https://github.com/RoCoVoMo/kinect/blob/efe9300c7c8964b391421ecf64af7eaf705eb224/de.rocovomo.e4.rcp.hmmrecorder/src/test/hmmview/view/SaveButton.java][save][6] = -> TRY {  -> channel=fileOutputStream.getChannel()@ -> channel.force(true,)@ -> buffer=ByteBuffer.allocate(bytes.length,)@ -> buffer.put(bytes,)@ -> buffer.flip()@ -> LOOP { -> channel.write(buffer,)@buffer.hasRemaining() } } CATCH(IOException) {}
results[https://github.com/axDev-JDK/jdk/blob/60851dd38de109b1eaf23fff4620a9ac629168bf/src/share/demo/nio/zipfs/Demo.java][fchCopy][6] = -> TRY {  -> TRY { -> bb=ByteBuffer.allocate(8192,)@ -> LOOP { -> bb.flip()@srcFc.read(bb,)>=0 -> dstFc.write(bb,)@srcFc.read(bb,)>=0 -> bb.clear()@srcFc.read(bb,)>=0 } } } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/7571d52cc7b459adf3bf110986562bd2c304cf9c/kernel/trunk/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][open][9] = -> TRY {  -> fileChannel=new RandomAccessFile(fileToOpen,"rw",).getChannel()@ } ELSE { -> buffer.clear()@ -> buffer.putLong(logVersion,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@!(fileChannel.size()!=0) } CATCH(IOException) {}
results[https://github.com/gitools/gitools/blob/f73b889e3c7fd358c5db262d42a5e3c5360ca2dd/ztools-core/src/main/java/org/gitools/exporter/AbstractHtmlExporter.java][copyFile][2] = -> TRY {  -> out=new FileOutputStream(dst,).getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> LOOP { -> buffer.flip()@in.read(buffer,)!=-1 -> out.write(buffer,)@in.read(buffer,)!=-1 -> buffer.clear()@in.read(buffer,)!=-1 } } CATCH(IOException) {}
results[https://github.com/burto/mkgmap/blob/97e66c15ce764589c69b4b36e777b449142f146a/src/uk/me/parabola/imgfmt/sys/FileNode.java][sync][3] = -> TRY {  -> rem=bs-file.position()%bs@ -> buf=ByteBuffer.allocate(blockManager.getBlockSize(),)@ -> LOOP { -> buf.put((byte) 0,)@ } -> buf.flip()@ -> file.write(buf,)@ } CATCH(IOException) {}
results[https://github.com/encog/encog-java-core/blob/c22c483c1e8a95caddceddf9cc169c10948fd4ae/src/main/java/org/encog/ml/data/buffer/EncogEGBFile.java][checkWrite][2] = -> TRY {  -> IF { -> this.fc.position(writeLocation,)@ -> writeBuffer.flip()@!(writeBuffer.hasRemaining()) -> this.fc.write(writeBuffer,)@!(writeBuffer.hasRemaining()) -> writeLocation=this.fc.position()@ -> writeBuffer.clear()@!(writeBuffer.hasRemaining()) -> writeBuffer.order(ByteOrder.LITTLE_ENDIAN,)@!(writeBuffer.hasRemaining()) } } CATCH(IOException) {}
results[https://github.com/RamesesDev/osiris2/blob/ee716ae432471d376fe6a7a2104703a8f0c83fe1/labs/rameses-scheduling/test/test/TestFile.java][testHello][1] = -> TRY {  -> buffer=ByteBuffer.allocate(100,)@ -> buffer.put(data,)@ -> buffer.flip()@ -> writeChannel=fos.getChannel()@ -> writeChannel.write(buffer,)@ -> System.out.println(writeChannel.position(),)@ -> writeChannel.close()@ } CATCH(Exception) {}
results[https://github.com/xnio/xnio/blob/ca17c029c6e20130e35325cc69ecf12d3b21f2f2/api/src/test/java/org/xnio/XnioFileChannelTestCase.java][transferBlockingFromFile1][1] = -> TRY {  -> buffer=ByteBuffer.allocate(10,)@ -> buffer.put("test".getBytes("UTF-8",),).flip()@ -> assertEquals(4,fileChannel.write(buffer,),)@ -> fileChannel.position(0,)@ -> fileChannel.transferTo(0,4,channelMock,)@ } CATCH(IOException) {}
results[https://github.com/xnio/xnio/blob/ca17c029c6e20130e35325cc69ecf12d3b21f2f2/api/src/test/java/org/xnio/XnioFileChannelTestCase.java][transferBlockingFromFile2][1] = -> TRY {  -> buffer=ByteBuffer.allocate(10,)@ -> buffer.put("test12345".getBytes("UTF-8",),).flip()@ -> assertEquals(9,fileChannel.write(buffer,),)@ -> fileChannel.position(0,)@ -> fileChannel.transferTo(0,8,channelMock,)@ } CATCH(IOException,InterruptedException) {}
results[https://github.com/philipv/bonfire/blob/00ebac8b7ed1279187bb2a19be7f554d89bee441/default/nio-resources/src/FastCopyFile.java][main][1] = -> TRY {  -> fcout=fout.getChannel()@ -> buffer=ByteBuffer.allocateDirect(1024,)@ -> LOOP { -> buffer.clear()@ -> r=fcin.read(buffer,)@ -> buffer.flip()@ -> fcout.write(buffer,)@ } } CATCH(Exception) {}
results[https://github.com/asascience/THREDDS/blob/24013a286a38fb3c7bb7d4717350dc736e48e825/cdm/src/main/java/ucar/nc2/geotiff/GeoTiff.java][writeHeader][2] = -> TRY {  -> channel.position(0,)@ -> buffer=ByteBuffer.allocate(8,)@ -> buffer.put((byte) 'M',)@ -> buffer.put((byte) 'M',)@ -> buffer.putShort((short) 42,)@ -> buffer.putInt(firstIFD,)@ -> buffer.flip()@ -> channel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/philipv/bonfire/blob/00ebac8b7ed1279187bb2a19be7f554d89bee441/default/nio-resources/src/CopyFile.java][main][1] = -> TRY {  -> fcout=fout.getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> LOOP { -> buffer.clear()@ -> r=fcin.read(buffer,)@ -> buffer.flip()@ -> fcout.write(buffer,)@ } } CATCH(Exception) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/145fc1e0b3ea604e0b37684b18a0c6932ed51f5a/kernel/tags/1.1/src/main/java/org/neo4j/kernel/impl/transaction/TxLog.java][txDone][40] = -> TRY {  -> IF { -> throw new IllegalArgumentException("Null parameter",)@globalId==null } -> buffer.clear()@!(globalId==null) -> buffer.put(TX_DONE,).put((byte) globalId.length,).put(globalId,)@!(globalId==null) -> buffer.flip()@!(globalId==null) -> fileChannel.write(buffer,)@!(globalId==null) } CATCH(IOException) {}
results[https://github.com/twitter/bookkeeper/blob/c1c8bef6125cb70ed2da68e92bb49e45f4ea64a9/bookkeeper/src/main/java/org/apache/bookkeeper/bookie/BufferedChannel.java][flush][38] = -> TRY {  -> IF { -> return @writeBuffer==null } -> writeBuffer.flip()@!(writeBuffer==null) -> bc.write(writeBuffer,)@!(writeBuffer==null) -> writeBuffer.clear()@!(writeBuffer==null) -> writeBufferStartPosition=bc.position()@!(writeBuffer==null) -> IF { -> bc.force(false,)@!(writeBuffer==null) } } CATCH(IOException) {}
results[https://github.com/student2ua/myTaning/blob/9723adf39930f99142fccabc6567be08970746bc/src/tests/com/tor/io/FileCopyTest.java][copy][1] = -> TRY {  -> fout=new FileOutputStream(out,).getChannel()@ -> buff=ByteBuffer.allocate(4096,)@ -> LOOP { -> buff.flip()@fin.read(buff,)!=-1||buff.position()>0 -> fout.write(buff,)@fin.read(buff,)!=-1||buff.position()>0 -> buff.compact()@fin.read(buff,)!=-1||buff.position()>0 } -> fout.close()@ } CATCH(IOException) {}
results[https://github.com/dmontag/graphdb-traversal-context/blob/4e496d1a578fca9606f358b946108a6bd583c7ae/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][open][2] = -> TRY {  -> fileChannel=new RandomAccessFile(fileToOpen,"rw",).getChannel()@ } ELSE { -> buffer.clear()@ -> buffer.putLong(logVersion,)@ -> buffer.putLong(lastTxId,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@!(fileChannel.size()!=0) } CATCH(IOException) {}
results[https://github.com/axDev-JDK/jdk/blob/09c99a676d4e74af47b1d520efdbdd16b7ee5337/test/java/nio/channels/FileChannel/AtomicAppend.java][write][3] = -> TRY {  -> buf=ByteBuffer.allocate(1,)@ -> buf.put((byte) b,)@ -> buf.flip()@ -> IF { -> fc.write(bufs,)@ } ELSE { -> fc.write(buf,)@ } } CATCH(IOException) {}
results[https://github.com/Sciss/Eisenkraut/blob/ed3848a2a00aa8149af672a9b8de845c4ad660ab/trunk/src/de/sciss/eisenkraut/net/NRTFile.java][flush][2] = -> TRY {  -> b.clear()@ -> b.putInt(0,)@ -> bndl.encode(b,)@ -> pos2=b.position()@ -> b.position(0,)@ -> b.putInt(pos2-4,).position(pos2,)@ -> b.flip()@ -> fch.write(b,)@ } CATCH(IOException) {}
results[https://github.com/bobmcwhirter/jboss-messaging/blob/1a7527d4d3b297d4cdc3fb5ff1cfcdb2af2e2ee1/src/main/org/jboss/messaging/core/journal/impl/NIOSequentialFile.java][fill][1] = -> TRY {  -> bb=ByteBuffer.allocateDirect(size,)@ -> LOOP { -> bb.put(fillCharacter,)@ } -> bb.flip()@ -> channel.position(position,)@ -> channel.write(bb,)@ -> channel.force(false,)@ -> channel.position(0,)@ } CATCH(Exception) {}
results[https://github.com/cm4j/cm4j-all/blob/2543e6c70a6fb559e74e28000c0261d71e61bae3/cm4j-test/src/main/java/com/cm4j/test/syntax/nio/simple/Two_ChannelCopy.java][main][1] = -> TRY {  -> outch=new FileOutputStream(new File(args[1],),).getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> LOOP { -> buffer.flip()@inch.read(buffer,)!=-1 -> outch.write(buffer,)@inch.read(buffer,)!=-1 -> buffer.clear()@inch.read(buffer,)!=-1 } } CATCH(IOException) {}
results[https://github.com/jeromerobert/jCAE/blob/6ce5284de4bcc110daf2c8c3f6fd4a0b13e5b281/amibe/src/org/jcae/mesh/xmldata/UNVGenericWriter.java][appendFile][1] = -> TRY {  -> bb.clear()@ -> LOOP { -> bb.rewind()@ -> nr=fci.read(bb,)@ -> bb.flip()@ -> IF { -> fc.write(bb,)@ } } } CATCH(IOException) {}
results[https://github.com/sayornis/USGS-VHP/blob/057838817ad52b988a9abaea23f9affbea0b47a3/Util/src/gov/usgs/util/DriveSwamp.java][run][1] = -> bb=ByteBuffer.allocateDirect(writeSize,)@ -> LOOP { -> bb.put((byte) i,)@i<writeSize } -> LOOP { -> TRY { -> bb.flip()@ -> out.write(bb,)@ } CATCH(Exception) { -> e.printStackTrace()@ } }
results[https://github.com/iansealy/picard-detct/blob/f6a63aea966c0638bbcdc239422846c8380a77aa/src/java/net/sf/picard/illumina/parser/fakers/BciFileFaker.java][fakeBciFile][1] = -> TRY {  -> channel=fileOutputStream.getChannel()@ -> buffer=ByteBuffer.allocate(8*expectedTiles.size(),)@ -> buffer.order(ByteOrder.LITTLE_ENDIAN,)@ -> fakeFile(buffer,)@ -> buffer.flip()@ -> channel.write(buffer,)@ -> channel.force(true,)@ -> CloserUtil.close(channel,)@ } CATCH(IOException) {}
results[https://github.com/thyms/Code-Base/blob/bb57a562bb3ccabc067856c4934db81145e561ae/code.base.main/src/main/java/javam/io/RunnerReadingAFile.java][main][1] = -> TRY {  -> targetChannel=new FileOutputStream("src/main/resources/temp/temp_write.txt",).getChannel()@ -> buffer1=ByteBuffer.allocate(1024,)@ -> LOOP { -> buffer1.flip()@(read1=sourceChannel.read(buffer1,))!=-1 -> targetChannel.write(buffer1,)@(read1=sourceChannel.read(buffer1,))!=-1 -> buffer1.clear()@(read1=sourceChannel.read(buffer1,))!=-1 } -> targetChannel.close()@ } CATCH(Exception) {}
results[https://github.com/ggrandes/kvstore/blob/07a183ff9010ca688ea2e7cf40bbd2a07a34d1c3/src/main/java/org/kvstore/io/FileStreamStore.java][flushBuffer][1] = -> TRY {  -> IF { -> bufOutput.flip()@bufOutput.position()>0 -> fcOutput.write(bufOutput,)@bufOutput.position()>0 -> bufOutput.clear()@bufOutput.position()>0 -> offsetOutputUncommited=offsetOutputCommited=fcOutput.position()@ -> IF { -> fcOutput.force(false,)@ } } } CATCH(IOException) {}
results[https://github.com/jeromerobert/jCAE/blob/8b139129582058864c5f0892c8eba45370777add/amibe/src/org/jcae/mesh/xmldata/MeshToUNVConvert.java][appendFile][1] = -> TRY {  -> bb.clear()@ -> LOOP { -> bb.rewind()@ -> nr=fci.read(bb,)@ -> bb.flip()@ -> IF { -> fc.write(bb,)@ } } } CATCH(IOException,FileNotFoundException) {}
results[https://github.com/apache/activemq/blob/02185be527e3a28eee8c82031e6d8ad6c6736916/activemq-console/src/main/java/org/apache/activemq/console/command/CreateCommand.java][writeFile][1] = -> TRY {  -> buf=ByteBuffer.allocate(data.length(),)@typeName.equals("winActivemq",) -> buf.put(data.getBytes(),)@typeName.equals("winActivemq",) -> buf.flip()@typeName.equals("winActivemq",) -> destinationChannel=new FileOutputStream(dest,).getChannel()@typeName.equals("winActivemq",) -> destinationChannel.write(buf,)@typeName.equals("winActivemq",) -> destinationChannel.close()@typeName.equals("winActivemq",) } CATCH(IOException) {}
results[https://github.com/pgnunes/Meerkat-Monitor/blob/881b7f3a14b7af76534446fba877ebaac1ee29b1/src/org/meerkat/util/FileUtil.java][writeToFile][1] = -> buf=ByteBuffer.allocate(contents.length(),)@ -> outChannel=destFile.getChannel()@ -> buf.put(contents.getBytes(),)@ -> buf.flip()@ -> TRY { -> outChannel.write(buf,)@ } CATCH(IOException) { -> log.error("Error writing to file "+filename+" ("+e.getMessage()+")",)@ }
results[https://github.com/xnio/xnio/blob/ca17c029c6e20130e35325cc69ecf12d3b21f2f2/api/src/test/java/org/xnio/XnioFileChannelTestCase.java][transferBlockingFromFile3][1] = -> TRY {  -> buffer=ByteBuffer.allocate(10,)@ -> buffer.put("test".getBytes("UTF-8",),).flip()@ -> assertEquals(4,fileChannel.write(buffer,),)@ -> fileChannel.position(0,)@ -> fileChannel.transferTo(0,4,new BlockingByteChannel(channelMock,),)@ } CATCH(IOException) {}
results[https://github.com/ha-jdbc/ha-jdbc/blob/63b5efc784f6de5cfe9e352bb003e914fcfb27da/src/main/java/net/sf/hajdbc/io/file/FileInputStreamSinkChannel.java][write][1] = -> TRY {  -> TRY { -> fileChannel=output.getChannel()@ -> buffer=ByteBuffer.allocate(BUFFER_SIZE,)@ -> LOOP { -> buffer.flip()@inputChannel.read(buffer,)>0 -> fileChannel.write(buffer,)@inputChannel.read(buffer,)>0 -> buffer.compact()@inputChannel.read(buffer,)>0 } } } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/b74938a6b9fc978783ac5eeb1ced8c52e9f8008c/index/tags/1.1/src/test/java/org/neo4j/index/lucene/TestRecovery.java][copyLogicalLog][7] = -> TRY {  -> buffer=ByteBuffer.allocate(1024,)@ -> dest=new RandomAccessFile(copy,"rw",).getChannel()@ -> LOOP { -> read=source.read(buffer,)@ -> buffer.flip()@ -> dest.write(buffer,)@ -> buffer.clear()@ } -> dest.close()@ } CATCH(IOException) {}
results[https://github.com/LuckyStars/nbc/blob/68178f825c92a07c932ea6931a15bc2a5d568e4b/function-schoolmaster2/java/function-masterdata/src/main/com/nbcedu/function/schoolmaster2/core/util/FileUtil.java][copyWithNIO][4] = -> TRY {  -> outChannel=outFile.getChannel()@ -> buffer=ByteBuffer.allocate(1024*1024,)@ -> LOOP { -> buffer.flip()@inChannel.read(buffer,)!=-1 -> LOOP { -> outChannel.write(buffer,)@inChannel.read(buffer,)!=-1 && buffer.hasRemaining() } -> buffer.clear()@inChannel.read(buffer,)!=-1 } -> outChannel.close()@ } CATCH(IOException) {}
results[https://github.com/neo4j-attic/graphdb/blob/e82cead0f458a42bf4ee38059d51cc16cd8e1ae6/kernel/src/main/java/org/neo4j/kernel/impl/transaction/TxLog.java][markAsCommitting][20] = -> TRY {  -> IF { -> throw new IllegalArgumentException("Null parameter",)@globalId==null } -> buffer.clear()@!(globalId==null) -> buffer.put(MARK_COMMIT,).put((byte) globalId.length,).put(globalId,)@!(globalId==null) -> buffer.flip()@!(globalId==null) -> fileChannel.write(buffer,)@!(globalId==null) -> fileChannel.force(false,)@!(globalId==null) } CATCH(IOException) {}
results[https://github.com/xiaomo/rvm/blob/325039bbbcf0e46dfce9e0ef800a1c962971e981/code/red5Server/0_8_0/src/org/red5/io/flv/impl/FLVWriter.java][writeHeader][1] = -> TRY {  -> out.put((byte) 0x46,)@ -> out.put((byte) 0x4C,)@ -> out.put((byte) 0x56,)@ -> out.put((byte) 0x01,)@ -> out.put((byte) 0x05,)@ -> out.putInt(0x09,)@ -> out.putInt(0,)@ -> out.flip()@ -> channel.write(out.buf(),)@ } CATCH(IOException) {}
results[https://github.com/rhusar/HornetQ-oldmigration/blob/80b04256325bf8007a554655323a3175e4765511/src/main/org/hornetq/core/journal/impl/NIOSequentialFile.java][fill][4] = -> TRY {  -> bb=ByteBuffer.allocate(size,)@ -> LOOP { -> bb.put(fillCharacter,)@ } -> bb.flip()@ -> channel.position(position,)@ -> channel.write(bb,)@ -> channel.force(false,)@ -> channel.position(0,)@ -> fileSize=channel.size()@ } CATCH(Exception) {}
results[https://github.com/dancres/blitzjavaspaces/blob/6f12762f513b31206fd029f397c06f3436d32cf4/src/main/java/org/dancres/io/FileCopier.java][copy][2] = -> TRY {  -> myOut=myOutFile.getChannel()@ -> LOOP { -> myBytes=myIn.read(theBuffer,)@ -> IF { -> theBuffer.flip()@ -> myOut.write(theBuffer,)@ -> theBuffer.clear()@ } } -> myOut.close()@ } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/a5b1019cb2d9cc108829b2ac5d635e29483d5b69/neo/branches/neo-tx-fix/src/java/org/neo4j/impl/transaction/xaframework/XaLogicalLog.java][open][1] = -> TRY {  -> fileChannel=new RandomAccessFile(fileName,"rw",).getChannel()@ -> buffer=ByteBuffer.allocateDirect(9+Xid.MAXGTRIDSIZE+Xid.MAXBQUALSIZE*10,)@ } ELSE { -> buffer.clear()@ -> buffer.putLong(logCreated,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@!(fileChannel.size()!=0) -> writeBuffer=new LogBuffer(fileChannel,)@ } CATCH(IOException) {}
results[https://github.com/thobe/neo4j-advanced/blob/8d98235f3926d4612537c342ec29bc31310fbc6d/src/test/unit/neo/store/TestXa.java][copyLogicalLog][5] = -> TRY {  -> dest=new RandomAccessFile("nioneo_logical.log.bak","rw",).getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> LOOP { -> read=source.read(buffer,)@ -> buffer.flip()@ -> dest.write(buffer,)@ -> buffer.clear()@ } -> dest.close()@ } CATCH(IOException) {}
results[https://github.com/dvn/dvn-svn-import-test4/blob/38c19d0d1391b0c87496f81843eaef20703d38bc/dvn-app/trunk/src/DVN-web/src/edu/harvard/iq/dvn/core/web/ExploreDataPage.java][writeFile][9] = -> TRY { -> outChannel=outputFile.getChannel()@ -> buf=ByteBuffer.allocate(bufSize*2+1000,)@ -> LOOP { -> buf.putChar(ch,)@ } -> buf.flip()@ -> TRY { -> outChannel.write(buf,)@ } CATCH(IOException) { -> e.printStackTrace(System.err,)@ } -> throw new EJBException(e,)@ }
results[https://github.com/dukeboard/kevoree-extra/blob/a9091fa5070b4961a50caf69830bb7d011f46db2/org.kevoree.extra.ha-jdbc/src/main/java/net/sf/hajdbc/sql/FileSupportImpl.java][createFile][1] = -> TRY {  -> TRY { -> fileChannel=new FileOutputStream(file,).getChannel()@ -> buffer=ByteBuffer.allocate(BUFFER_SIZE,)@ -> LOOP { -> buffer.flip()@inputChannel.read(buffer,)>0 -> fileChannel.write(buffer,)@inputChannel.read(buffer,)>0 -> buffer.compact()@inputChannel.read(buffer,)>0 } -> fileChannel.close()@ } CATCH(IOException) { -> throw this.exceptionFactory.createException(e,)@ } } CATCH(E) {}
results[https://github.com/jihoonson/tajo/blob/7f3a05cfe9203bc59665f23c7ee6844441fa5e5b/core/src/main/java/tajo/storage/RawFile.java][flushBufferAndReplace][4] = -> TRY {  -> IF { -> limit=buffer.position()@buffer.remaining()<sizeToBeWritten -> buffer.limit(recordOffset,)@buffer.remaining()<sizeToBeWritten -> buffer.flip()@buffer.remaining()<sizeToBeWritten -> channel.write(buffer,)@buffer.remaining()<sizeToBeWritten -> buffer.position(recordOffset,)@buffer.remaining()<sizeToBeWritten -> buffer.limit(limit,)@buffer.remaining()<sizeToBeWritten -> buffer.compact()@buffer.remaining()<sizeToBeWritten -> return true@buffer.remaining()<sizeToBeWritten } ELSE { -> return false@!(buffer.remaining()<sizeToBeWritten) } } CATCH(IOException) {}
results[https://github.com/statsbiblioteket/sbutil/blob/2fbcc90095ff654ba5f4af01499df2dceb355ea2/sbutil-common/src/main/java/dk/statsbiblioteket/util/LineReader.java][flush][3] = -> TRY {  -> IF { -> IF { -> log.trace("flush: bufferStart="+bufferStart+", maxBufferPos="+maxBufferPos+", buffer.limit="+buffer.limit()+", position="+position,)@log.isTraceEnabled() } -> buffer.position(maxBufferPos,)@ -> buffer.flip()@ -> channelOut.position(bufferStart,)@ -> channelOut.write(buffer,)@ -> buffer.clear()@ } } CATCH(IOException) {}
results[https://github.com/FreakyPenguin/elexis-hilotec-base/blob/8f74705708c487add6d820f2d0c04680f0ffe73c/ch.elexis.importer.div/src/com/healthmarketscience/jackcess/Database.java][transferFrom][1] = -> TRY {  -> IF { -> channel.transferFrom(readChannel,0,MAX_EMPTYDB_SIZE,)@ } ELSE { -> bb=ByteBuffer.allocate(8096,)@ -> LOOP { -> bb.flip()@readChannel.read(bb,)>=0 -> channel.write(bb,)@readChannel.read(bb,)>=0 -> bb.clear()@readChannel.read(bb,)>=0 } } } CATCH(IOException) {}
results[https://github.com/lalalic/Personal/blob/c471fddc9a6c0e1c6dc43fb65f98a1a0e0191320/travel/android-1qiyou/src/com/equ/lbs/LocationUpdater.java][flush][1] = -> TRY { -> IF { -> out=new FileOutputStream(f,true,).getChannel()@out==null||!(out.isOpen()) } -> buffer.flip()@ -> out.write(buffer,)@ -> buffer.clear()@ -> out.force(true,)@ -> out.close()@ } CATCH(Exception) { -> service.notify(e.getMessage(),)@ }
results[https://github.com/brettwooldridge/bitronix-hp/blob/2569783820523e213ce808e92eb673459624a9da/btm-nio-journal/src/main/java/bitronix/tm/journal/nio/NioJournalFile.java][writeJournalHeader][2] = -> TRY {  -> IF { -> throw new IllegalStateException("File channel is not positioned at the header location.",)@fileChannel.position()!=0 } -> buffer=getWriteBuffer(FIXED_HEADER_SIZE,)@!(fileChannel.position()!=0) -> buffer.put(JOURNAL_HEADER_PREFIX,)@!(fileChannel.position()!=0) -> NioJournalFileRecord.writeUUID(previousDelimiter,buffer,)@!(fileChannel.position()!=0) -> NioJournalFileRecord.writeUUID(delimiter,buffer,)@!(fileChannel.position()!=0) -> buffer.put(JOURNAL_HEADER_SUFFIX,)@!(fileChannel.position()!=0) -> fileChannel.write((ByteBuffer) buffer.flip(),)@!(fileChannel.position()!=0) -> fileChannel.position(FIXED_HEADER_SIZE,)@!(fileChannel.position()!=0) } CATCH(IOException) {}
results[https://github.com/NCIP/cadsr-cgmdr/blob/2d7c7a614a2a2589b64061f0cea812a14f40c1ac/src/org/exist/storage/journal/Journal.java][flushBuffer][1] = -> IF { -> return @currentBuffer==null } -> TRY { -> IF { -> currentBuffer.flip()@currentBuffer.position()>0 && !(currentBuffer==null) -> size=currentBuffer.remaining()@currentBuffer.position()>0 && !(currentBuffer==null) -> LOOP { -> channel.write(currentBuffer,)@currentBuffer.position()>0 && currentBuffer.hasRemaining() && !(currentBuffer==null) } -> currentBuffer.clear()@currentBuffer.position()>0 && !(currentBuffer==null) } } CATCH(IOException) { -> LOG.warn("Flushing log file failed!",e,)@!(currentBuffer==null) }
results[https://github.com/ha-jdbc/ha-jdbc/blob/63b5efc784f6de5cfe9e352bb003e914fcfb27da/src/main/java/net/sf/hajdbc/sql/FileSupportImpl.java][createFile][1] = -> TRY {  -> TRY { -> TRY { -> fileChannel=output.getChannel()@ -> buffer=ByteBuffer.allocate(BUFFER_SIZE,)@ -> LOOP { -> buffer.flip()@inputChannel.read(buffer,)>0 -> fileChannel.write(buffer,)@inputChannel.read(buffer,)>0 -> buffer.compact()@inputChannel.read(buffer,)>0 } } } CATCH(IOException) { -> throw this.exceptionFactory.createException(e,)@ } } CATCH(E) {}
results[https://github.com/swmaestro2012/somap312_17_CurFit/blob/1782c022cc5b9e96d1d92046758985962e59f69b/app/controllers/RestApp.java][fileOut][1] = -> TRY {  -> outChannel=new FileOutputStream(new File(LOCAL_IMAGE_PATH+"/"+fileName,),).getChannel()@ -> buf=ByteBuffer.allocate(1024,)@ -> LOOP { } ELSE { -> buf.flip()@!(inChannel.read(buf,)==-1) -> outChannel.write(buf,)@!(inChannel.read(buf,)==-1) -> buf.clear()@!(inChannel.read(buf,)==-1) } } CATCH(IOException) {}
results[https://github.com/jmesnil/hornetq-old/blob/4ba2bb971295391b28786aec5ffa06c412a6a183/src/main/org/hornetq/core/journal/impl/SyncSpeedTest.java][run][4] = -> TRY {  -> LOOP { -> channel=rfile.getChannel()@ -> write(bb,channel,fileSize,)@ -> channel.force(true,)@ -> channel.position(0,)@ -> bb1=generateBuffer(recordSize,(byte) 'h',)@ -> LOOP { -> bb1.flip()@ -> channel.write(bb1,)@ -> channel.force(false,)@ } } } CATCH(Exception) {}
results[https://github.com/czarneckid/blojsom-sourceforge/blob/d161d7c443a718e6185036920bc166078a26ecd2/branches/blojsom-2_25-final/blojsom-2.0/src/org/blojsom/util/BlojsomUtils.java][copyDirectory][7] = -> TRY {  -> IF { -> LOOP { -> fcout=fos.getChannel()@ -> buf=ByteBuffer.allocateDirect(8192,)@ -> LOOP { -> buf.clear()@ -> buf.flip()@ -> n+=fcout.write(buf,)@n<size } -> fcout.close()@ } } } CATCH(IOException) {}
results[https://github.com/sayornis/USGS-VHP/blob/057838817ad52b988a9abaea23f9affbea0b47a3/Util/src/gov/usgs/util/DriveSwamp.java][<init>][1] = -> TRY {  -> bb=ByteBuffer.allocateDirect(size,)@ -> LOOP { -> bb.put((byte) i,)@i<size } -> LOOP { -> bb.flip()@ -> out=new FileOutputStream("swamp_"+i+".tmp",).getChannel()@i<numFiles -> LOOP { -> out.write(bb,)@bb.hasRemaining() } } } CATCH(Exception) {}
results[https://github.com/irstv/H2GIS/blob/3a2fb2e34bcb06728c4d9921bf83d2e3bb2fd845/h2drivers/src/main/java/org/h2gis/drivers/utility/WriteBufferManager.java][prepareToAddBytes][2] = -> TRY {  -> IF { -> buffer.flip()@buffer.remaining()<numBytes -> channel.write(buffer,)@buffer.remaining()<numBytes -> IF { -> order=buffer.order()@bufferCapacity!=buffer.capacity() && buffer.remaining()<numBytes -> buffer=ByteBuffer.allocate(bufferCapacity,)@bufferCapacity!=buffer.capacity() && buffer.remaining()<numBytes -> buffer.order(order,)@bufferCapacity!=buffer.capacity() && buffer.remaining()<numBytes } ELSE { -> buffer.clear()@!(bufferCapacity!=buffer.capacity()) && buffer.remaining()<numBytes } } } CATCH(IOException) {}
results[https://github.com/ikeji/openjdk7-jdk/blob/c445903c23d3316d31b5171130aaf714c23f3446/test/java/io/FileDescriptor/Finalize.java][doFileChannel][3] = -> TRY {  -> fc2=fis2.getChannel()@ -> bb=ByteBuffer.allocateDirect(1,)@ -> ret=fc2.read(bb,)@ -> System.out.println("read "+ret+" bytes from fc2:",)@ -> fc2.close()@ -> fc2=fos2.getChannel()@ -> bb=ByteBuffer.allocateDirect(data.length,)@ -> bb=bb.put(data,)@ -> bb=(ByteBuffer) bb.flip()@ -> ret=fc2.write(bb,)@ -> System.out.println("Wrote:"+ret+" bytes to fc2",)@ -> fc2.close()@ } CATCH(Exception) {}
results[https://github.com/jkellerer/btm-fork/blob/5feffcbc0916ba7c8aee9c73184233fc86ae5035/btm-nio-journal/src/main/java/bitronix/tm/journal/nio/NioJournalFile.java][write][2] = -> TRY {  -> TRY { -> writeBuffer=getWriteBuffer(requiredBytes,)@!(requiredBytes>remainingBytes) -> LOOP { -> record.writeRecord(targetDelimiter,writeBuffer,)@!(requiredBytes>remainingBytes) } -> writeBuffer.flip()@!(requiredBytes>remainingBytes) -> return fileChannel.write(writeBuffer,)@!(requiredBytes>remainingBytes) } FINALLY { -> lastModified.set(System.currentTimeMillis(),)@!(requiredBytes>remainingBytes) } } CATCH(IOException) {}
results[https://github.com/CSCSI/Triana/blob/8cb9a119686ad57d5e84ea74e33c7914dc017205/triana-core/src/main/java/org/trianacode/enactment/Exec.java][writeFile][1] = -> TRY {  -> f=file.getChannel()@ -> fl=f.lock()@ -> IF { -> f.read(bb,)@!(lockfile.length()==4) -> IF { -> return @curr==ExecutionState.COMPLETE.ordinal() && lockfile.length()==4 } } -> bytes=ByteBuffer.allocate(4,)@!(lockfile.length()==4) -> bytes.putInt(command,).flip()@!(lockfile.length()==4) -> f.write(bytes,)@!(lockfile.length()==4) -> f.force(false,)@!(lockfile.length()==4) } CATCH(IOException) {}
results[https://github.com/cuckoo03/repository/blob/6697b49e8b3c1ddf5e6c964757eb65789a3e8a8f/java_networking/src/com/Exam14_12CopyDirectByteBufferTest.java][copyByteBuffer][1] = -> TRY {  -> TRY { -> out=fos.getChannel()@ -> buf=ByteBuffer.allocateDirect((int) in.size(),)@ -> in.read(buf,)@ -> buf.flip()@ -> out.write(buf,)@ } FINALLY { -> in.close()@ -> out.close()@ } } CATCH(IOException) {}
results[https://github.com/strobecorp/kirk/blob/47363fb69ba8e3f0d6f8123bcde893d7c4ed784c/src/com/strobecorp/kirk/RewindableInputStream.java][bufferTo][1] = -> TRY {  -> LOOP { -> limit=Math.min(pos-buffered,buf.capacity(),)@buffered<pos -> buf.clear().limit((int) limit,)@!(buffered<pos) -> len=io.read(buf,)@!(buffered<pos) -> IF { -> return false@buffered<pos && len==-1 } -> buf.flip()@!(len==-1) && !(buffered<pos) -> tmpFile.position(buffered,)@buffered<pos && !(len==-1) -> tmpFile.write(buf,)@!(len==-1) && !(buffered<pos) } } CATCH(IOException) {}
results[https://github.com/kingargyle/exist-1.4.x/blob/09d678fd8a58728dd51005c63b942f1ab6541ebc/src/org/exist/storage/journal/Journal.java][flushBuffer][1] = -> IF { -> return @currentBuffer==null } -> TRY { -> IF { -> currentBuffer.flip()@currentBuffer.position()>0 && !(currentBuffer==null) -> size=currentBuffer.remaining()@currentBuffer.position()>0 && !(currentBuffer==null) -> LOOP { -> channel.write(currentBuffer,)@currentBuffer.position()>0 && currentBuffer.hasRemaining() && !(currentBuffer==null) } } } CATCH(IOException) { -> LOG.warn("Flushing log file failed!",e,)@!(currentBuffer==null) } FINALLY { -> currentBuffer.clear()@!(currentBuffer==null) }
results[https://github.com/zycgit/hasor/blob/9a38c82fd9a63532d297aa763685f66fb4030226/Trunk/src/src/org/more/util/FileCopy.java][forChannel][5] = -> TRY {  -> outC=out.getChannel()@ -> LOOP { -> IF { -> outC.close()@!(inC.position()==inC.size()) -> return new Date().getTime()-time@inC.position()==inC.size() } -> b=ByteBuffer.allocateDirect(length,)@!(inC.position()==inC.size()) -> inC.read(b,)@!(inC.position()==inC.size()) -> b.flip()@!(inC.position()==inC.size()) -> outC.write(b,)@!(inC.position()==inC.size()) -> outC.force(false,)@!(inC.position()==inC.size()) } } CATCH(IOException) {}
results[https://github.com/eclipse/linuxtools/blob/a2a6af6b7a198e3725481bbbb9955ff113dea1eb/lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/synchronization/SynchronizationBackend.java][saveSync][1] = -> TRY {  -> TRY { -> buffer=ByteBuffer.allocate(HEADER_SIZE,)@ -> buffer.clear()@ -> fc.position(0,)@ -> buffer.putInt(SYNC_FILE_MAGIC_NUMBER,)@ -> buffer.putInt(FILE_VERSION,)@ -> buffer.flip()@ -> res=fc.write(buffer,)@ -> fc.position(HEADER_SIZE,)@ } CATCH(IOException) { -> Activator.logError("Error saving trace synchronization data",e,)@ } } CATCH(FileNotFoundException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/a269fe0b056ac7583ff0ddebb133b30870bc2750/kernel/branches/1.1-opti/src/main/java/org/neo4j/kernel/impl/transaction/TxLog.java][addBranch][20] = -> TRY {  -> IF { -> throw new IllegalArgumentException("Null global id",)@globalId==null } -> IF { -> throw new IllegalArgumentException("Null branch id",)@!(globalId==null) && branchId==null } -> buffer.clear()@!(globalId==null) && !(branchId==null) -> buffer.put(BRANCH_ADD,).put((byte) globalId.length,).put((byte) branchId.length,).put(globalId,).put(branchId,)@!(globalId==null) && !(branchId==null) -> buffer.flip()@!(globalId==null) && !(branchId==null) -> fileChannel.write(buffer,)@!(globalId==null) && !(branchId==null) } CATCH(IOException) {}
results[https://github.com/kivCommander/kc-main/blob/e13c9aca30182b8ff0e023f776c75c961ebcc44d/components/Plugins/src/cz/zcu/kiv/kc/plugin/copy/CopyFilePlugin.java][copy][2] = -> TRY {  -> TRY { -> buff=ByteBuffer.allocate(1048576,)@ -> LOOP { -> buff.flip()@finCh.read(buff,)!=-1||buff.position()>0 -> progress+=foutCh.write(buff,)@finCh.read(buff,)!=-1||buff.position()>0 -> IF { -> descreteProgress=progress-(int) progress%chunk@progress-descreteProgress>chunk } -> buff.compact()@finCh.read(buff,)!=-1||buff.position()>0 -> foutCh.force(true,)@ } } CATCH(FileNotFoundException) { -> ex.printStackTrace()@ } } CATCH(IOException) {}
results[https://github.com/alibaba/otter/blob/78e112c7a9337f367accbcebebbe7f2d9a529c9c/shared/common/src/test/java/com/alibaba/otter/shared/common/utils/NioUtilsPerformance.java][channelTest][1] = -> TRY {  -> TRY { -> tChannel=fos.getChannel()@ -> buffer=ByteBuffer.allocate(16*1024,)@ -> LOOP { -> buffer.flip()@sChannel.read(buffer,)>0 -> tChannel.write(buffer,)@sChannel.read(buffer,)>0 -> buffer.clear()@sChannel.read(buffer,)>0 } -> tChannel.close()@ } FINALLY { -> IOUtils.closeQuietly(fis,)@ -> IOUtils.closeQuietly(fos,)@ } } CATCH(Exception) {}
results[https://github.com/NCIP/cadsr-cgmdr/blob/2d7c7a614a2a2589b64061f0cea812a14f40c1ac/src/org/exist/storage/lock/FileLock.java][save][2] = -> TRY {  -> TRY { -> buf.clear()@ -> buf.put(MAGIC,)@ -> buf.putLong(now,)@ -> buf.flip()@ -> channel.position(0,)@ -> channel.write(buf,)@ -> channel.force(true,)@ } CATCH(NullPointerException) { -> IF { -> LOG.info("No need to save FileLock, database is shutting down",)@ } } } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/58c53f67d53062b1f7e2a1b7d0c425812f938d68/kernel/tags/1.0/src/test/java/org/neo4j/kernel/impl/nioneo/store/TestXa.java][truncateLogicalLog][1] = -> TRY {  -> fileChannel=new RandomAccessFile("nioneo_logical.log."+active,"rw",).getChannel()@ -> IF { -> fileChannel.truncate(size,)@fileChannel.size()>size } ELSE { -> fileChannel.position(size,)@!(fileChannel.size()>size) -> buf=ByteBuffer.allocate(1,)@ -> buf.put((byte) 0,).flip()@ -> fileChannel.write(buf,)@!(fileChannel.size()>size) } -> fileChannel.force(false,)@ -> fileChannel.close()@ } CATCH(IOException) {}
results[https://github.com/xnio/xnio/blob/0f97eb8647e5dc28a6cd54a03d13b1db667b08e5/api/src/test/java/org/xnio/XnioTestCase.java][checkReadWriteFileChannel][1] = -> TRY {  -> TRY { -> assertNotNull(fileChannel,)@ -> buffer=ByteBuffer.allocate(10,)@ -> buffer.put("test".getBytes("UTF-8",),).flip()@ -> assertEquals(4,fileChannel.write(buffer,),)@ -> fileChannel.position(0,)@ -> Channels.transferBlocking(channelMock,fileChannel,0,4,)@ } FINALLY { -> fileChannel.close()@ } } CATCH(IOException) {}
results[https://github.com/RamesesDev/osiris2/blob/c8c2d2376572d4a3bd23b0ccf6d60d878d3ac47a/common/rameses-common/src/com/rameses/messaging/LogFile.java][write][1] = -> TRY { -> buffer=ByteBuffer.allocate(allocation,)@ -> buffer.put(data,)@ -> buffer.put(delimiter,)@ -> buffer.flip()@ -> writeChannel=new FileOutputStream(file,true,).getChannel()@ -> writeChannel.write(buffer,)@ -> this.writePosition=writeChannel.position()@ } CATCH(Exception) { -> throw new RuntimeException(ex,)@ } FINALLY { -> TRY { -> writeChannel.close()@ } }
results[https://github.com/neo4j-attic/graphdb/blob/4e496d1a578fca9606f358b946108a6bd583c7ae/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][setActiveLog][5] = -> TRY {  -> IF { -> throw new IllegalArgumentException("Log must be either clean, "+"1 or 2",)@c!=CLEAN&&c!=LOG1&&c!=LOG2 } -> bb=ByteBuffer.wrap( new byte[],)@!(c==currentLog) && !(c!=CLEAN&&c!=LOG1&&c!=LOG2) -> bb.asCharBuffer().put(c,).flip()@!(c==currentLog) && !(c!=CLEAN&&c!=LOG1&&c!=LOG2) -> fc=new RandomAccessFile(fileName+".active","rw",).getChannel()@!(c==currentLog) && !(c!=CLEAN&&c!=LOG1&&c!=LOG2) -> wrote=fc.write(bb,)@!(c==currentLog) && !(c!=CLEAN&&c!=LOG1&&c!=LOG2) -> IF { -> throw new IllegalStateException("Expected to write 4 -> "+wrote,)@wrote!=4 && !(c==currentLog) && !(c!=CLEAN&&c!=LOG1&&c!=LOG2) } -> fc.force(false,)@!(c==currentLog) && !(wrote!=4) && !(c!=CLEAN&&c!=LOG1&&c!=LOG2) -> fc.close()@!(c==currentLog) && !(wrote!=4) && !(c!=CLEAN&&c!=LOG1&&c!=LOG2) } CATCH(IOException) {}
results[https://github.com/dmontag/graphdb-traversal-context/blob/4e496d1a578fca9606f358b946108a6bd583c7ae/src/test/java/org/neo4j/kernel/impl/nioneo/store/TestXa.java][truncateLogicalLog][3] = -> TRY {  -> fileChannel=new RandomAccessFile(file("nioneo_logical.log."+active,),"rw",).getChannel()@ -> IF { -> fileChannel.truncate(size,)@fileChannel.size()>size } ELSE { -> fileChannel.position(size,)@!(fileChannel.size()>size) -> buf=ByteBuffer.allocate(1,)@ -> buf.put((byte) 0,).flip()@ -> fileChannel.write(buf,)@!(fileChannel.size()>size) } -> fileChannel.force(false,)@ -> fileChannel.close()@ } CATCH(IOException) {}
results[https://github.com/neo4j-contrib/neo4j-rdf/blob/d78e6f4d9fa0aac3fab553d1a7638c0d29d9215d/src/main/java/org/neo4j/rdf/fulltext/PersistentQueue.java][markAsCompleted][3] = -> TRY { -> position=channel.position()@ -> TRY { -> LOOP { -> channel.position(entry.position(),)@ -> buffer=getBuffer(HEADER_SIZE,)@ -> buffer.clear()@ -> buffer.limit(1,)@ -> buffer.put(COMPLETED,)@ -> buffer.flip()@ -> channel.write(buffer,)@ } } FINALLY { -> channel.position(position,)@ } -> throw new RuntimeException(e,)@ }
results[https://github.com/axDev-JDK/jdk/blob/a54669868351f3b0565d71604990403d2f8cf884/test/java/nio/channels/FileChannel/Truncate.java][appendTest][1] = -> TRY {  -> LOOP { -> TRY { -> fc.truncate(newSize,)@ -> IF { -> throw new RuntimeException("Truncate failed",)@fc.size()!=newSize } -> buf=ByteBuffer.allocate(1,)@!(fc.size()!=newSize) -> buf.put((byte) 'x',)@!(fc.size()!=newSize) -> buf.flip()@!(fc.size()!=newSize) -> fc.write(buf,)@!(fc.size()!=newSize) -> IF { -> throw new RuntimeException("Unexpected size",)@!(fc.size()!=newSize) && fc.size()!=newSize+1 } } } } CATCH(Exception) {}
results[https://github.com/veltzer/demos/blob/5e8fd91dcac8226c5603017b502856ac23643cc9/java/standard/src/core/nio/CopyFile.java][main][1] = -> TRY {  -> fcout=fout.getChannel()@ -> IF { -> buffer=ByteBuffer.allocateDirect(size,)@ } ELSE { -> buffer=ByteBuffer.allocate(size,)@ } -> LOOP { -> readCount=fcin.read(buffer,)@ -> IF { -> buffer.flip()@ -> fcout.write(buffer,)@ -> buffer.clear()@ } } } CATCH(Exception) {}
