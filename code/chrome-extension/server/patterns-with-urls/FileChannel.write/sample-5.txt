results[https://github.com/molgenis/molgenis_apps-legacy/blob/2b396fcba67293e06043f3e8e12474ea11b1e5b1/apps/designgg/org/molgenis/designgg/Utils.java][setFile][1] = -> TRY {  -> fc=fos.getChannel()@ -> bb=ByteBuffer.wrap(fileContent,)@ -> fc.write(bb,)@ } CATCH(Exception) {}
results[https://github.com/philipv/bonfire/blob/00ebac8b7ed1279187bb2a19be7f554d89bee441/default/nio-resources/src/UseCharsets.java][main][1] = -> TRY {  -> outc=outf.getChannel()@ -> outputData=encoder.encode(cb,)@ -> outc.write(outputData,)@ } CATCH(Exception) {}
results[https://github.com/maxmind/MaxMind-DB-Reader-java/blob/f65461e84646e51866c2f75326186a485dfdd1c5/src/test/java/com/maxmind/db/DecoderTest.java][getFileChannel][2] = -> TRY {  -> fc=raf.getChannel()@ -> fc.write(ByteBuffer.wrap(data,),)@ -> fc.close()@ } CATCH(IOException) {}
results[https://github.com/apache/directory-server/blob/08b785b726f0111fab897edcaa7bf2a18f361b81/kerberos-codec/src/main/java/org/apache/directory/server/kerberos/shared/keytab/Keytab.java][writeFile][1] = -> TRY {  -> wChannel=new FileOutputStream(file,false,).getChannel()@ -> wChannel.write(buffer,)@ -> wChannel.close()@ } CATCH(IOException) {}
results[https://github.com/babble/babble/blob/e0dc556b525d1cc971a96459885742c8c92275d3/src/main/ed/db/ExportBinary.java][export][1] = -> TRY {  -> fc=fout.getChannel()@ -> LOOP { -> fc.write(encoder._buf,)@!(all==null) } } CATCH(IOException) {}
results[https://github.com/ttron/lab/blob/8e5b87a6d50b46fe212da99a143fd44cdf38e528/MINA-2/test/org/apache/mina/example/proxy/ClientSessionHandler.java][messageReceived][2] = -> buf=(IoBuffer) message@ -> TRY { -> IF { -> wChannel=new FileOutputStream(file,false,).getChannel()@file==null } -> wChannel.write(buf.buf(),)@ }
results[https://github.com/zhuowei/MCPELauncher/blob/52b0d745b45573a4050c334f6e51a074cd2fa620/src/net/zhuoweizhang/mcpelauncher/NerdyStuffActivity.java][dumpLib][1] = -> TRY { -> channel=os.getChannel()@ -> channel.write(com.mojang.minecraftpe.MainActivity.minecraftLibBuffer,)@ -> channel.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/shiffman/shiffman.github.io/blob/50593000652328c8df6ffb2406d5fd4ba8d4c7ce/itp/classes/a2z/week04/simple/A2ZFileWriter.java][writeContent][2] = -> TRY {  -> outfc=fos.getChannel()@ -> bb=ByteBuffer.wrap(content.getBytes(),)@ -> outfc.write(bb,)@ -> outfc.close()@ } CATCH(IOException) {}
results[https://github.com/safuus/MobX/blob/dda353da9eeeff8fabbee62fe03b6448cd1b7238/mobxserver/apache-mina-2.0.4/src/mina-core/src/test/java/org/apache/mina/transport/AbstractFileRegionTest.java][createLargeFile][2] = -> TRY {  -> channel=new FileOutputStream(largeFile,).getChannel()@ -> buffer=createBuffer()@ -> channel.write(buffer,)@ -> channel.close()@ } CATCH(IOException) {}
results[https://github.com/davecheney/motown/blob/c66aa8518b024d51a523cb307791e7103c1066d2/motown-dav/src/main/java/net/cheney/motown/dav/resource/file/FileResource.java][put][2] = -> TRY {  -> fc=new FileOutputStream(file(),).getChannel()@ -> fc.write(entity,)@ -> fc.close()@ } CATCH(IOException) {}
results[https://github.com/ttron/lab/blob/8e5b87a6d50b46fe212da99a143fd44cdf38e528/MINA-2/test/org/apache/mina/filter/stream/FileRegionWriteFilterTest.java][createMessage][2] = -> TRY {  -> channel=new RandomAccessFile(file,"rw",).getChannel()@ -> buffer=ByteBuffer.wrap(data,)@ -> channel.write(buffer,)@ -> return new DefaultFileRegion(channel,)@ } CATCH(IOException) {}
results[https://github.com/jruby/jruby-rack/blob/d8f5c71f413910fc7d97ca02d084beb1b80c5932/src/main/java/org/jruby/rack/RackRewindableInput.java][<init>][2] = -> TRY { -> tempfileChannel=(FileChannel) io.getChannel()@ -> tempfileChannel.write(memoryBuffer,)@ -> tempfileChannel.position(0,)@ } CATCH(IOException) { -> throw getRuntime().newIOErrorFromException(io,)@ }
results[https://github.com/bcdev/beam-globalbedo/blob/75e85c525bc3d66cb8098cdf5540293496948a03/beam-globalbedo-albedo-inversion/src/test/java/org/esa/beam/globalbedo/inversion/util/IOTest.java][testWriteFloatArray1][1] = -> TRY {  -> bb=ByteBuffer.allocateDirect(dim1*dim2*4,)@ -> floatBuffer=bb.asFloatBuffer()@ -> ch=file_output.getChannel()@ -> ch.write(bb,)@ -> ch.close()@ } CATCH(Exception) {}
results[https://github.com/uvalbbu/dalvik_test/blob/e595037cf49109e9e20b47e6e191eda45e414008/luni/src/test/java/org/apache/harmony/nio/tests/java/nio/MappedByteBufferTest.java][fillTempFile][14] = -> TRY {  -> fileChannel=fileOutputStream.getChannel()@ -> byteBuffer=ByteBuffer.allocateDirect(BUFFER_LENGTH,)@ -> loadTestData1(byteBuffer,)@ -> byteBuffer.clear()@ -> fileChannel.write(byteBuffer,)@ -> fileChannel.close()@ } CATCH(IOException) {}
results[https://github.com/sashakh/waze/blob/34ea3e823616a5ca237ff43ffdf5f7caa29c06ff/src/android/java/src/com/waze/FreeMapCameraPreView.java][SaveToFile][1] = -> TRY { -> fileChannel=fileOS.getChannel()@!(mBufOS.size()<=0) -> fileChannel.write(ByteBuffer.wrap(mBufOS.toByteArray(),),)@!(mBufOS.size()<=0) } CATCH(Exception) { -> WazeLog.e("Error in writing the file to the disk. ",ex,)@!(mBufOS.size()<=0) -> ex.printStackTrace()@!(mBufOS.size()<=0) }
results[https://github.com/dmontag/neo4j-enterprise/blob/4e496d1a578fca9606f358b946108a6bd583c7ae/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][open][5] = -> TRY {  -> fileChannel=new RandomAccessFile(fileToOpen,"rw",).getChannel()@ } ELSE { -> LogIoUtils.writeLogHeader(buffer,logVersion,lastTxId,)@ -> fileChannel.write(buffer,)@!(fileChannel.size()!=0) } CATCH(IOException) {}
results[https://github.com/ewcmsfree/ewcms/blob/2ef6f402907978c26e6faae6b913a95f99a5c036/src/main/java/com/ewcms/plugin/crawler/generate/util/IO.java][writeBytesToFile][2] = -> TRY { -> fc=new FileOutputStream(destination,).getChannel()@ -> fc.write(ByteBuffer.wrap(bytes,),)@ -> fc.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/Jules-/terraingis/blob/d7e0c36af856d850c63253fdd172423e04862d86/src/TerrainGIS/src/cz/kalcik/vojta/shapefilelib/files/ShapeFileReader.java][writeBytesToFile][1] = -> TRY {  -> output=new FileOutputStream(file.getAbsolutePath(),).getChannel()@ -> buffer.position(0,)@ -> output.write(buffer,)@ -> output.close()@ } CATCH(IOException) {}
results[https://github.com/strobecorp/kirk/blob/47363fb69ba8e3f0d6f8123bcde893d7c4ed784c/src/com/strobecorp/kirk/RewindableInputStream.java][rotateToTmpFile][1] = -> TRY {  -> tmpFile=fileStream.getChannel()@ -> buf.clear().position(0,).limit((int) buffered,)@ -> tmpFile.write(buf,)@ -> buf.clear()@ } CATCH(IOException) {}
results[https://github.com/buzheng/buzheng-study-java/blob/806c68192742caab7d45b6c523cfbe492b123f63/src/main/java/org/buzheng/study/nio/WriteToFile.java][main][1] = -> TRY {  -> channel=fos.getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> buffer.put(message.getBytes(),)@ -> buffer.flip()@ -> channel.write(buffer,)@ } CATCH(Exception) {}
results[https://github.com/pwendell/mesos/blob/9e4b96d1e52898adc0fcdd3313909b7883d3ab68/src/third_party/zookeeper-3.3.1/src/contrib/bookkeeper/src/java/org/apache/bookkeeper/bookie/FileInfo.java][<init>][40] = -> TRY {  -> fc=new RandomAccessFile(lf,"rws",).getChannel()@ -> size=fc.size()@ -> IF { -> fc.write(ByteBuffer.wrap(header,),)@ } } CATCH(IOException) {}
results[https://github.com/nroduit/Weasis/blob/189d73780139d9bdbda027a2e096f3655c250c68/weasis-dicom/weasis-dicom-viewer2d/src/main/java/org/weasis/dicom/viewer2d/mpr/SeriesBuilder.java][writToFile][1] = -> TRY { -> byteBuffer.order(ByteOrder.LITTLE_ENDIAN,)@ -> out=os.getChannel()@ -> out.write(byteBuffer,)@ } CATCH(Exception) { -> e.printStackTrace()@ } FINALLY { -> FileUtil.safeClose(os,)@ }
results[https://github.com/philipv/bonfire/blob/00ebac8b7ed1279187bb2a19be7f554d89bee441/default/nio-resources/src/WriteSomeBytes.java][main][1] = -> TRY {  -> fc=fout.getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> LOOP { -> buffer.put(message[i],)@i<message.length } -> buffer.flip()@ -> fc.write(buffer,)@ } CATCH(Exception) {}
results[https://github.com/iansealy/picard-detct/blob/2c562e9a50f778ed8a81bb70f7068f4efda3fcc2/src/java/net/sf/picard/illumina/parser/fakers/FileFaker.java][fakeFile][1] = -> TRY {  -> channel=fileOutputStream.getChannel()@ -> buffer=ByteBuffer.allocate(size,)@ -> buffer.order(ByteOrder.LITTLE_ENDIAN,)@ -> fakeFile(buffer,)@ -> buffer.flip()@ -> channel.write(buffer,)@ -> CloserUtil.close(channel,)@ } CATCH(IOException) {}
results[https://github.com/taktod/JCaster/blob/80e1b292bcfe7fd113bddf232a8f7bc955b2a5cf/FlvSavePlugin/src/main/java/com/ttProject/jcaster/flvsave/core/FlvSaver.java][<init>][1] = -> TRY {  -> channel=new FileOutputStream(target,).getChannel()@ -> header=new FlvHeader()@ -> header.setAudioFlg(true,)@ -> header.setVideoFlg(true,)@ -> channel.write(header.getBuffer(),)@ } CATCH(Exception) {}
results[https://github.com/undera/jmeter-plugins/blob/852448a16b18833321a15d60e640112e6a7f92a6/src/kg/apc/jmeter/reporters/FlexibleFileWriter.java][openFile][2] = -> TRY {  -> fileChannel=fos.getChannel()@ -> header=getFileHeader()@ -> IF { -> fileChannel.write(ByteBuffer.wrap(header.getBytes(),),)@!(header.isEmpty()) } } CATCH(IOException) {}
results[https://github.com/deegree/deegree3/blob/69c2f4b31d3796f352f72920575bae3e75666634/deegree-tools/deegree-tools-base/src/main/java/org/deegree/tools/coverage/gridifier/RasterTreeGridifier.java][storeCell][3] = -> TRY {  -> IF { -> currentBlobChannel.close()@ -> currentBlobChannel=new FileOutputStream(blob,).getChannel()@ } -> buffer.rewind()@ -> currentBlobChannel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/trombonehero/Footlights/blob/9031fe46fa167d738802d7f696a14c058bc2eac9/Client/Core/src/main/java/me/footlights/core/data/store/DiskStore.java][put][1] = -> TRY {  -> channel=new FileOutputStream(new File(dir,name.encode(),),).getChannel()@ -> channel.write(buffer.duplicate(),)@ -> channel.force(true,)@ } CATCH(IOException) {}
results[https://github.com/kevwil/aspen/blob/414ab9553cc873963373470bd12614500d9d41d8/javalib/src/main/java/com/github/kevwil/aspen/input/RackRewindableInput.java][createTempfile][1] = -> TRY { -> tempfileChannel=(FileChannel) tempfile.getChannel()@ -> IF { -> transferPosition=tempfileChannel.write(memoryBuffer,)@memoryBuffer!=null } -> tempfileChannel.position(0,)@ } CATCH(IOException) { -> throw getRuntime().newIOErrorFromException(io,)@ }
results[https://github.com/TihiyTi/HeartLive/blob/0e66147bf9190fb745f206548726b1d6ee1707f7/CommunicationFile/src/test/java/com/tihiy/comm/parse/FreeTest.java][testWrite_3][1] = -> TRY {  -> fco=new FileOutputStream("test_out3.txt",).getChannel()@ -> bb=ByteBuffer.allocate(100,)@ -> bb.put(array,)@ -> bb.rewind()@ -> fco.write(bb,)@ -> fco.close()@ } CATCH(IOException) {}
results[https://github.com/RoCoVoMo/kinect/blob/efe9300c7c8964b391421ecf64af7eaf705eb224/de.rocovomo.e4.rcp.hmmrecorder/src/test/hmmview/view/SaveButton.java][save][6] = -> TRY {  -> channel=fileOutputStream.getChannel()@ -> channel.force(true,)@ -> buffer=ByteBuffer.allocate(bytes.length,)@ -> buffer.put(bytes,)@ -> buffer.flip()@ -> LOOP { -> channel.write(buffer,)@buffer.hasRemaining() } } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/fb4a87a3c5251243c2f45ff181b809e5c77396ab/kernel/branches/new-index-api/src/main/java/org/neo4j/kernel/impl/transaction/TxManager.java][changeActiveLog][15] = -> TRY {  -> fc=new RandomAccessFile(logSwitcherFileName,"rw",).getChannel()@ -> buf=ByteBuffer.wrap(newFileName.getBytes(),)@ -> fc.truncate(0,)@ -> fc.write(buf,)@ -> fc.force(true,)@ -> fc.close()@ } CATCH(IOException) {}
results[https://github.com/saces/jgit/blob/1b4f76d7bc3bf15291391e6aabdca02796232873/org.eclipse.jgit/src/org/eclipse/jgit/lib/GitIndex.java][checkoutEntry][4] = -> TRY {  -> channel=new FileOutputStream(file,).getChannel()@ -> buffer=ByteBuffer.wrap(bytes,)@ -> j=channel.write(buffer,)@ -> IF { -> throw new IOException("Could not write file "+file,)@j!=bytes.length } -> channel.close()@!(j!=bytes.length) } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/7571d52cc7b459adf3bf110986562bd2c304cf9c/kernel/trunk/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][open][9] = -> TRY {  -> fileChannel=new RandomAccessFile(fileToOpen,"rw",).getChannel()@ } ELSE { -> buffer.clear()@ -> buffer.putLong(logVersion,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@!(fileChannel.size()!=0) } CATCH(IOException) {}
results[https://github.com/gitools/gitools/blob/f73b889e3c7fd358c5db262d42a5e3c5360ca2dd/ztools-core/src/main/java/org/gitools/exporter/AbstractHtmlExporter.java][copyFile][2] = -> TRY {  -> out=new FileOutputStream(dst,).getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> LOOP { -> buffer.flip()@in.read(buffer,)!=-1 -> out.write(buffer,)@in.read(buffer,)!=-1 -> buffer.clear()@in.read(buffer,)!=-1 } } CATCH(IOException) {}
results[https://github.com/bcdev/beam-globalbedo/blob/0c3f737f5561573520e14f07381b4ebe5f87073b/beam-globalbedo-albedo-inversion/src/main/java/org/esa/beam/globalbedo/inversion/util/IOUtils.java][writeFullAccumulatorToFile][2] = -> TRY { -> wChannel=file_output.getChannel()@ -> bb=ByteBuffer.allocateDirect(dim1+1*dim2*dim3*4,)@ -> floatBuffer=bb.asFloatBuffer()@ -> wChannel.write(bb,)@ -> wChannel.close()@ } CATCH(IOException) { -> BeamLogManager.getSystemLogger().log(Level.WARNING,"Could not write full accumulator to file:  "+e+" // "+e.getMessage()+" // buffer index =  "+index,)@ }
results[https://github.com/caosd/AdPlatform/blob/c63439a8b6385392b68473be09f1d82df1b3557c/project/portal/src/com/stomato/utils/FileUtils.java][writeBytes2File][1] = -> TRY {  -> targetChannel=new FileOutputStream(out,).getChannel()@ -> TRY { -> targetChannel.write(bb,)@ } FINALLY { -> targetChannel.close()@ } } CATCH(Exception) {}
results[https://github.com/undera/jmeter-plugins/blob/41ae50cf90581255d3b965e26a91e9b8531eccd8/standard/src/kg/apc/jmeter/reporters/FlexibleFileWriter.java][openFile][1] = -> TRY {  -> fileChannel=fos.getChannel()@ -> header=JMeterPluginsUtils.replaceRNT(getFileHeader(),)@ -> IF { -> fileChannel.write(ByteBuffer.wrap(header.getBytes(),),)@!(header.isEmpty()) } } CATCH(IOException) {}
results[https://github.com/NCIP/lexevs/blob/9f630d706a6fd62ab01ab2bfdb9f8bbae2a7743a/loader-framework-core/src/main/java/org/lexgrid/loader/writer/NoClosingRootTagStaxEventItemWriter.java][close][1] = -> IF { -> TRY { -> channel=os.getChannel()@!(!(xml.endsWith(rootTag,))) -> byteBuffer=ByteBuffer.wrap(rootTag.getBytes(),)@!(xml.endsWith(rootTag,)) -> channel.write(byteBuffer,)@!(!(xml.endsWith(rootTag,))) -> channel.close()@!(!(xml.endsWith(rootTag,))) } CATCH(IOException) { -> throw new RuntimeException(ioe,)@!(xml.endsWith(rootTag,)) } }
results[https://github.com/RamesesDev/osiris2/blob/ee716ae432471d376fe6a7a2104703a8f0c83fe1/labs/rameses-scheduling/test/test/TestFile.java][testHello][1] = -> TRY {  -> buffer=ByteBuffer.allocate(100,)@ -> buffer.put(data,)@ -> buffer.flip()@ -> writeChannel=fos.getChannel()@ -> writeChannel.write(buffer,)@ -> System.out.println(writeChannel.position(),)@ -> writeChannel.close()@ } CATCH(Exception) {}
results[https://github.com/cardsystem/our-card-system/blob/74c917660b1a47118f5bcdbfc74a64458934094b/CardSystem/src/test/java/com/redcard/card/service/FileExportTest.java][nioWrite][1] = -> TRY {  -> fileChannel=new FileOutputStream(file,).getChannel()@ -> LOOP { -> fileChannel.write(ByteBuffer.wrap(CONTENT.getBytes(),),)@ } -> fileChannel.close()@ } CATCH(IOException) {}
results[https://github.com/zhongl/iPage/blob/0a0c634c5b48191dcc2766b3366aaa556ce888d3/src/test/java/com/github/zhongl/nio/ForceBenchmark.java][forceChannelOnce][1] = -> TRY {  -> channel=new FileOutputStream(file,).getChannel()@ -> LOOP { -> channel.write(ByteBuffer.wrap( new byte[],),)@ } -> channel.force(false,)@ -> channel.close()@ } CATCH(Exception) {}
results[https://github.com/philipv/bonfire/blob/00ebac8b7ed1279187bb2a19be7f554d89bee441/default/nio-resources/src/FastCopyFile.java][main][1] = -> TRY {  -> fcout=fout.getChannel()@ -> buffer=ByteBuffer.allocateDirect(1024,)@ -> LOOP { -> buffer.clear()@ -> r=fcin.read(buffer,)@ -> buffer.flip()@ -> fcout.write(buffer,)@ } } CATCH(Exception) {}
results[https://github.com/philipv/bonfire/blob/00ebac8b7ed1279187bb2a19be7f554d89bee441/default/nio-resources/src/CopyFile.java][main][1] = -> TRY {  -> fcout=fout.getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> LOOP { -> buffer.clear()@ -> r=fcin.read(buffer,)@ -> buffer.flip()@ -> fcout.write(buffer,)@ } } CATCH(Exception) {}
results[https://github.com/neo4j-attic/graphdb/blob/e82cead0f458a42bf4ee38059d51cc16cd8e1ae6/kernel/src/main/java/org/neo4j/kernel/impl/transaction/TxManager.java][changeActiveLog][1] = -> TRY {  -> fc=new RandomAccessFile(logSwitcherFileName,"rw",).getChannel()@ -> buf=ByteBuffer.wrap(UTF8.encode(newFileName,),)@ -> fc.truncate(0,)@ -> fc.write(buf,)@ -> fc.force(true,)@ -> fc.close()@ } CATCH(IOException) {}
results[https://github.com/exoplatform/aio-portal/blob/a01c7972884aa573f857089dd4597800aed7d209/component/xml-parser/src/main/java/org/exoplatform/services/common/DataBuffer.java][save][1] = -> TRY {  -> fchan=output.getChannel()@ -> buff=ByteBuffer.allocateDirect(d.length,)@ -> LOOP { -> buff.put(d[i],)@i<d.length } -> buff.rewind()@ -> fchan.write(buff,)@ -> buff.clear()@ -> fchan.close()@ } CATCH(Exception) {}
results[https://github.com/student2ua/myTaning/blob/9723adf39930f99142fccabc6567be08970746bc/src/tests/com/tor/io/FileCopyTest.java][copy][1] = -> TRY {  -> fout=new FileOutputStream(out,).getChannel()@ -> buff=ByteBuffer.allocate(4096,)@ -> LOOP { -> buff.flip()@fin.read(buff,)!=-1||buff.position()>0 -> fout.write(buff,)@fin.read(buff,)!=-1||buff.position()>0 -> buff.compact()@fin.read(buff,)!=-1||buff.position()>0 } -> fout.close()@ } CATCH(IOException) {}
results[https://github.com/dmontag/graphdb-traversal-context/blob/4e496d1a578fca9606f358b946108a6bd583c7ae/src/main/java/org/neo4j/kernel/impl/transaction/xaframework/XaLogicalLog.java][open][2] = -> TRY {  -> fileChannel=new RandomAccessFile(fileToOpen,"rw",).getChannel()@ } ELSE { -> buffer.clear()@ -> buffer.putLong(logVersion,)@ -> buffer.putLong(lastTxId,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@!(fileChannel.size()!=0) } CATCH(IOException) {}
results[https://github.com/TihiyTi/HeartLive/blob/0e66147bf9190fb745f206548726b1d6ee1707f7/CommunicationFile/src/test/java/com/tihiy/comm/parse/FreeTest.java][testWriteChannel][1] = -> TRY {  -> fco=fos.getChannel()@ -> buffer=ByteBuffer.allocate(512,)@ -> buffer.putInt(1111,)@ -> buffer.putDouble(2.3,)@ -> buffer.limit(buffer.position(),)@ -> buffer.rewind()@ -> fco.write(buffer,)@ -> fco.close()@ } CATCH(IOException) {}
results[https://github.com/cm4j/cm4j-all/blob/2543e6c70a6fb559e74e28000c0261d71e61bae3/cm4j-test/src/main/java/com/cm4j/test/syntax/nio/simple/Two_ChannelCopy.java][main][1] = -> TRY {  -> outch=new FileOutputStream(new File(args[1],),).getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> LOOP { -> buffer.flip()@inch.read(buffer,)!=-1 -> outch.write(buffer,)@inch.read(buffer,)!=-1 -> buffer.clear()@inch.read(buffer,)!=-1 } } CATCH(IOException) {}
results[https://github.com/iansealy/picard-detct/blob/f6a63aea966c0638bbcdc239422846c8380a77aa/src/java/net/sf/picard/illumina/parser/fakers/BciFileFaker.java][fakeBciFile][1] = -> TRY {  -> channel=fileOutputStream.getChannel()@ -> buffer=ByteBuffer.allocate(8*expectedTiles.size(),)@ -> buffer.order(ByteOrder.LITTLE_ENDIAN,)@ -> fakeFile(buffer,)@ -> buffer.flip()@ -> channel.write(buffer,)@ -> channel.force(true,)@ -> CloserUtil.close(channel,)@ } CATCH(IOException) {}
results[https://github.com/molgenis/molgenis_apps-legacy/blob/f5e6de5157008d31f4806c56f157367a9bac1ba6/apps/designgg/org/molgenis/designgg/CalculateDesignScreen.java][executeR][1] = -> TRY { -> LOOP { -> fc=fos.getChannel()@!(!(this.workingDir.mkdir())) -> bb=ByteBuffer.wrap(inputAttachements.get(fileName,),)@inputAttachements.keySet() && !(!(this.workingDir.mkdir())) -> fc.write(bb,)@!(!(this.workingDir.mkdir())) } } CATCH(Exception) { -> logger.error(e.getMessage(),)@ -> e.printStackTrace()@ }
results[https://github.com/thyms/Code-Base/blob/bb57a562bb3ccabc067856c4934db81145e561ae/code.base.main/src/main/java/javam/io/RunnerReadingAFile.java][main][1] = -> TRY {  -> targetChannel=new FileOutputStream("src/main/resources/temp/temp_write.txt",).getChannel()@ -> buffer1=ByteBuffer.allocate(1024,)@ -> LOOP { -> buffer1.flip()@(read1=sourceChannel.read(buffer1,))!=-1 -> targetChannel.write(buffer1,)@(read1=sourceChannel.read(buffer1,))!=-1 -> buffer1.clear()@(read1=sourceChannel.read(buffer1,))!=-1 } -> targetChannel.close()@ } CATCH(Exception) {}
results[https://github.com/italiangrid/voms-api-java/blob/a6347e981ea5f70cabec6e17da48ef57cf39650f/src/main/java/org/italiangrid/voms/util/CredentialsUtils.java][saveProxyCredentials][1] = -> TRY {  -> channel=raf.getChannel()@ -> channel.truncate(0,)@ -> baos=new ByteArrayOutputStream()@ -> saveProxyCredentials(baos,uc,encoding,)@ -> baos.close()@ -> channel.write(ByteBuffer.wrap(baos.toByteArray(),),)@ -> channel.close()@ } CATCH(IOException,UnrecoverableKeyException,KeyStoreException,IllegalArgumentException,NoSuchAlgorithmException,NoSuchProviderException,CertificateException) {}
results[https://github.com/apache/activemq/blob/02185be527e3a28eee8c82031e6d8ad6c6736916/activemq-console/src/main/java/org/apache/activemq/console/command/CreateCommand.java][writeFile][1] = -> TRY {  -> buf=ByteBuffer.allocate(data.length(),)@typeName.equals("winActivemq",) -> buf.put(data.getBytes(),)@typeName.equals("winActivemq",) -> buf.flip()@typeName.equals("winActivemq",) -> destinationChannel=new FileOutputStream(dest,).getChannel()@typeName.equals("winActivemq",) -> destinationChannel.write(buf,)@typeName.equals("winActivemq",) -> destinationChannel.close()@typeName.equals("winActivemq",) } CATCH(IOException) {}
results[https://github.com/bcdev/beam-globalbedo/blob/75e85c525bc3d66cb8098cdf5540293496948a03/beam-globalbedo-albedo-inversion/src/test/java/org/esa/beam/globalbedo/inversion/util/IOTest.java][testWriteFloatArray2][1] = -> TRY {  -> ch=file_output.getChannel()@ -> bb=ByteBuffer.allocate(dim1*dim2*4,)@ -> LOOP { -> LOOP { -> bb.putFloat(index,fArray[i][j],)@i<dim1 && j<dim2 } } -> ch.write(bb,)@ -> ch.close()@ } CATCH(Exception) {}
results[https://github.com/pgnunes/Meerkat-Monitor/blob/881b7f3a14b7af76534446fba877ebaac1ee29b1/src/org/meerkat/util/FileUtil.java][writeToFile][1] = -> buf=ByteBuffer.allocate(contents.length(),)@ -> outChannel=destFile.getChannel()@ -> buf.put(contents.getBytes(),)@ -> buf.flip()@ -> TRY { -> outChannel.write(buf,)@ } CATCH(IOException) { -> log.error("Error writing to file "+filename+" ("+e.getMessage()+")",)@ }
results[https://github.com/ha-jdbc/ha-jdbc/blob/63b5efc784f6de5cfe9e352bb003e914fcfb27da/src/main/java/net/sf/hajdbc/io/file/FileInputStreamSinkChannel.java][write][1] = -> TRY {  -> TRY { -> fileChannel=output.getChannel()@ -> buffer=ByteBuffer.allocate(BUFFER_SIZE,)@ -> LOOP { -> buffer.flip()@inputChannel.read(buffer,)>0 -> fileChannel.write(buffer,)@inputChannel.read(buffer,)>0 -> buffer.compact()@inputChannel.read(buffer,)>0 } } } CATCH(IOException) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/b74938a6b9fc978783ac5eeb1ced8c52e9f8008c/index/tags/1.1/src/test/java/org/neo4j/index/lucene/TestRecovery.java][copyLogicalLog][7] = -> TRY {  -> buffer=ByteBuffer.allocate(1024,)@ -> dest=new RandomAccessFile(copy,"rw",).getChannel()@ -> LOOP { -> read=source.read(buffer,)@ -> buffer.flip()@ -> dest.write(buffer,)@ -> buffer.clear()@ } -> dest.close()@ } CATCH(IOException) {}
results[https://github.com/junit-team/junit/blob/2cd6f108a04f782c3abcf245de85fbe4b7a5316d/src/test/java/org/junit/tests/experimental/rules/TimeoutRuleTest.java][run5][1] = -> TRY {  -> LOOP { -> TRY { -> channel=randomAccessFile.getChannel()@ -> buffer=ByteBuffer.wrap(data,)@ -> channel.write(buffer,)@ } FINALLY { -> randomAccessFile.close()@ } } } CATCH(IOException) {}
results[https://github.com/alevy/comet/blob/2077d66e96bdbf07bfb5a80b3b65f8521bb50667/dht/org/gudy/azureus2/core3/util/test/SHA1Verification.java][createTestFiles][10] = -> TRY { -> LOOP { -> fc=new RandomAccessFile(file,"rw",).getChannel()@ -> LOOP { -> bb=ByteBuffer.wrap(buffer,)@ -> position+=fc.write(bb,)@position<size } -> fc.close()@ } } CATCH(Exception) { -> Debug.printStackTrace(e,)@ }
results[https://github.com/LuckyStars/nbc/blob/68178f825c92a07c932ea6931a15bc2a5d568e4b/function-schoolmaster2/java/function-masterdata/src/main/com/nbcedu/function/schoolmaster2/core/util/FileUtil.java][copyWithNIO][4] = -> TRY {  -> outChannel=outFile.getChannel()@ -> buffer=ByteBuffer.allocate(1024*1024,)@ -> LOOP { -> buffer.flip()@inChannel.read(buffer,)!=-1 -> LOOP { -> outChannel.write(buffer,)@inChannel.read(buffer,)!=-1 && buffer.hasRemaining() } -> buffer.clear()@inChannel.read(buffer,)!=-1 } -> outChannel.close()@ } CATCH(IOException) {}
results[https://github.com/shiffman/shiffman.github.io/blob/50593000652328c8df6ffb2406d5fd4ba8d4c7ce/itp/classes/a2z/week01/ReverseCharacters.java][main][7] = -> TRY {  -> bb=ByteBuffer.allocate((int) fc.size(),)@ -> fc.read(bb,)@ -> content=new String(bb.array(),)@ -> outfc=fos.getChannel()@ -> bb=ByteBuffer.wrap(output.getBytes(),)@ -> outfc.write(bb,)@ -> outfc.close()@ } CATCH(IOException) {}
results[https://github.com/joeledwards/asl-java-tools/blob/6c724af7ec8aa0cec433c36f1bde08f112a07ca0/src/LockFile.java][acquire][4] = -> TRY { -> channel=new RandomAccessFile(file,"rw",).getChannel()@ -> lock=channel.tryLock(0,Long.MAX_VALUE,false,)@ -> IF { -> channel.truncate(0,)@ -> pid=ManagementFactory.getRuntimeMXBean().getName().split("@",)[0]@ -> newLine=System.getProperty("line.seperator",)@ -> channel.write(ByteBuffer.wrap(pid+newLine.getBytes(),),)@ } }
results[https://github.com/neo4j-attic/graphdb/blob/e82cead0f458a42bf4ee38059d51cc16cd8e1ae6/kernel/src/test/java/org/neo4j/kernel/impl/nioneo/store/TestUpgradeStore.java][setOlderNeoStoreVersion][1] = -> TRY {  -> channel=new RandomAccessFile(new File(path,"neostore",),"rw",).getChannel()@ -> channel.position(channel.size()-UTF8.encode(oldVersion,).length,)@ -> buffer=ByteBuffer.wrap(UTF8.encode(oldVersion,),)@ -> channel.write(buffer,)@ -> channel.close()@ } CATCH(IOException) {}
results[https://github.com/dancres/blitzjavaspaces/blob/6f12762f513b31206fd029f397c06f3436d32cf4/src/main/java/org/dancres/io/FileCopier.java][copy][2] = -> TRY {  -> myOut=myOutFile.getChannel()@ -> LOOP { -> myBytes=myIn.read(theBuffer,)@ -> IF { -> theBuffer.flip()@ -> myOut.write(theBuffer,)@ -> theBuffer.clear()@ } } -> myOut.close()@ } CATCH(IOException) {}
results[https://github.com/twitter/bookkeeper/blob/29eaed884a442a73cd620776085da00395f86b53/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java][writeJunkJournal][2] = -> TRY {  -> fc=new RandomAccessFile(fn,"rw",).getChannel()@ -> zeros=ByteBuffer.allocate(512,)@ -> fc.write(zeros,4*1024*1024,)@ -> fc.position(0,)@ -> LOOP { -> fc.write(ByteBuffer.wrap("JunkJunkJunk".getBytes(),),)@ } } CATCH(Exception) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/a5b1019cb2d9cc108829b2ac5d635e29483d5b69/neo/branches/neo-tx-fix/src/java/org/neo4j/impl/transaction/xaframework/XaLogicalLog.java][open][1] = -> TRY {  -> fileChannel=new RandomAccessFile(fileName,"rw",).getChannel()@ -> buffer=ByteBuffer.allocateDirect(9+Xid.MAXGTRIDSIZE+Xid.MAXBQUALSIZE*10,)@ } ELSE { -> buffer.clear()@ -> buffer.putLong(logCreated,)@ -> buffer.flip()@ -> fileChannel.write(buffer,)@!(fileChannel.size()!=0) -> writeBuffer=new LogBuffer(fileChannel,)@ } CATCH(IOException) {}
results[https://github.com/thobe/neo4j-advanced/blob/8d98235f3926d4612537c342ec29bc31310fbc6d/src/test/unit/neo/store/TestXa.java][copyLogicalLog][5] = -> TRY {  -> dest=new RandomAccessFile("nioneo_logical.log.bak","rw",).getChannel()@ -> buffer=ByteBuffer.allocate(1024,)@ -> LOOP { -> read=source.read(buffer,)@ -> buffer.flip()@ -> dest.write(buffer,)@ -> buffer.clear()@ } -> dest.close()@ } CATCH(IOException) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/02ec718efbfc4858e8cf673a85431874a6b05c8e/test/java/nio/channels/FileChannel/Transfer.java][xferTest02][2] = -> TRY {  -> LOOP { -> srcData[i]=(byte) generator.nextInt()@i<5000 } -> fc1=raf1.getChannel()@ -> LOOP { -> bytesWritten=fc1.write(ByteBuffer.wrap(srcData,),)@bytesWritten<5000 } -> bytesWritten=fc1.transferTo(startPosition,bytesToWrite,fc2,)@ -> fc1.close()@ } CATCH(Exception) {}
results[https://github.com/felipelalli/micaroni/blob/4402e86bc9c4b569d18ee10ef66f9e3296510180/lab/sandbox/moto-db/src/br/eti/fml/motodb/util/DiskUtil.java][main][1] = -> TRY {  -> LOOP { -> bytes=ByteBuffer.allocateDirect(mega.length,)@ -> bytes.put(mega,)@ -> channel=raf.getChannel()@ -> LOOP { -> bytes.position(0,)@ -> channel.write(bytes,)@ } -> channel.force(true,)@ } } CATCH(IOException) {}
results[https://github.com/twitter/bookkeeper/blob/29eaed884a442a73cd620776085da00395f86b53/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java][writeLedgerDir][2] = -> TRY {  -> LOGFILE_HEADER=ByteBuffer.allocate(1024,)@ -> LOGFILE_HEADER.put("BKLO".getBytes(),)@ -> logfile=new RandomAccessFile(new File(dir,Long.toHexString(logId,)+".log",),"rw",).getChannel()@ -> logfile.write((ByteBuffer) LOGFILE_HEADER.clear(),)@ -> logfile.close()@ } CATCH(Exception) {}
results[https://github.com/neo4j-attic/graphdb/blob/e82cead0f458a42bf4ee38059d51cc16cd8e1ae6/kernel/src/test/java/org/neo4j/kernel/impl/core/TestChangingOfLogFormat.java][decrementLogFormat][1] = -> TRY {  -> channel=raFile.getChannel()@ -> buffer=ByteBuffer.wrap( new byte[],)@ -> channel.read(buffer,)@ -> buffer.flip()@ -> version=buffer.getLong()@ -> channel.position(0,)@ -> buffer.clear()@ -> buffer.putLong(oldVersion,)@ -> buffer.flip()@ -> channel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/laarid/platform_libcore/blob/21643b11ea824e0e4e65a5437a57abed2052ff7a/luni/src/test/java/libcore/java/nio/channels/FileChannelTest.java][test_readv][38] = -> TRY {  -> fc=new FileOutputStream(tmp,).getChannel()@ -> fc.write(ByteBuffer.wrap("abcdABCD".getBytes("US-ASCII",),),)@ -> fc.close()@ -> fc=new FileInputStream(tmp,).getChannel()@ -> assertEquals(8,fc.read(buffers,),)@ -> fc.close()@ } CATCH(Exception) {}
results[https://github.com/dvn/dvn-svn-import-test4/blob/38c19d0d1391b0c87496f81843eaef20703d38bc/dvn-app/trunk/src/DVN-web/src/edu/harvard/iq/dvn/core/web/ExploreDataPage.java][writeFile][9] = -> TRY { -> outChannel=outputFile.getChannel()@ -> buf=ByteBuffer.allocate(bufSize*2+1000,)@ -> LOOP { -> buf.putChar(ch,)@ } -> buf.flip()@ -> TRY { -> outChannel.write(buf,)@ } CATCH(IOException) { -> e.printStackTrace(System.err,)@ } -> throw new EJBException(e,)@ }
results[https://github.com/dukeboard/kevoree-extra/blob/a9091fa5070b4961a50caf69830bb7d011f46db2/org.kevoree.extra.ha-jdbc/src/main/java/net/sf/hajdbc/sql/FileSupportImpl.java][createFile][1] = -> TRY {  -> TRY { -> fileChannel=new FileOutputStream(file,).getChannel()@ -> buffer=ByteBuffer.allocate(BUFFER_SIZE,)@ -> LOOP { -> buffer.flip()@inputChannel.read(buffer,)>0 -> fileChannel.write(buffer,)@inputChannel.read(buffer,)>0 -> buffer.compact()@inputChannel.read(buffer,)>0 } -> fileChannel.close()@ } CATCH(IOException) { -> throw this.exceptionFactory.createException(e,)@ } } CATCH(E) {}
results[https://github.com/exoplatform/jcr/blob/fefb33198f7ff3dc380c305a3d32e0c95278e13c/component/core/src/main/java/org/exoplatform/services/jcr/impl/core/query/ErrorLog.java][clear][1] = -> TRY {  -> IF { -> out.truncate(0,)@out!=null -> out.close()@out!=null -> out=new FileOutputStream(logFile,).getChannel()@out!=null -> out.position(1024*fileSize-1,)@out!=null -> out.write(ByteBuffer.wrap( new byte[],),)@out!=null -> out.position(0,)@out!=null -> out.force(false,)@out!=null } } CATCH(IOException) {}
results[https://github.com/exoplatform/jcr/blob/8cb5f954d2d92c4de7fc072f824a5f9b5d668233/component/core/src/test/java/org/exoplatform/services/jcr/lab/java/TestFileLock.java][_testDifferentJVMReadLock][2] = -> TRY {  -> fc=fout.getChannel()@ -> lock=fc.lock()@ -> buff=ByteBuffer.wrap("test-file3".getBytes(),)@ -> fc.write(buff,)@ -> fc.close()@ -> fc=fin.getChannel()@ -> shlock=fc.lock(0,fc.size(),true,)@ -> res=fc.read(dst,)@ -> fc.close()@ } CATCH(IOException,InterruptedException) {}
results[https://github.com/apache/harmony/blob/f551fa157905248d1c1f59f88ce40d311e611611/classlib/modules/nio/src/test/java/common/org/apache/harmony/nio/tests/java/nio/MappedByteBufferTest.java][setUp][4] = -> TRY {  -> fileChannel=fileOutputStream.getChannel()@ -> byteBuffer=ByteBuffer.allocateDirect(26+20,)@ -> LOOP { -> byteBuffer.put((byte) 'A'+i,)@i<26 } -> LOOP { -> byteBuffer.putInt(i+1,)@i<5 } -> byteBuffer.rewind()@ -> fileChannel.write(byteBuffer,)@ -> fileChannel.close()@ } CATCH(IOException) {}
results[https://github.com/ealimonda/eNotes/blob/c1c100cb324919e4341a5db87bf803a701200eff/Project/src/it/unica/enotes/NoteView.java][viewAttachment][1] = -> attachment=this._note.getAttachment()@ -> attachment.getFiletype()@ -> TRY { -> writeChannel=new FileOutputStream(attachmentFile,false,).getChannel()@ -> writeChannel.write(attachment.getRawData(),)@ -> writeChannel.close()@ } CATCH(FileNotFoundException) { -> e.printStackTrace()@ } CATCH(IOException) { -> e.printStackTrace()@ }
results[https://github.com/uditrugman/openjdk8-jdk/blob/02ec718efbfc4858e8cf673a85431874a6b05c8e/test/java/nio/channels/FileChannel/Transfer.java][xferTest03][2] = -> TRY {  -> fc1=raf1.getChannel()@ -> fc1.truncate(0,)@ -> LOOP { -> bytesWritten=fc1.write(ByteBuffer.wrap(srcData,),)@bytesWritten<4 } -> fc1.transferTo(0,srcData.length+1,fc2,)@ -> IF { -> throw new Exception("xferTest03 failed",)@fc2.size()>4 } -> fc1.close()@!(fc2.size()>4) } CATCH(Exception) {}
results[https://github.com/rhusar/HornetQ-oldmigration/blob/550e85b44084c26a5dbe40f816b45dae26e1616d/hornetq-core/src/main/java/org/hornetq/core/replication/impl/ReplicationEndpoint.java][handleReplicationSynchronization][2] = -> TRY {  -> data=msg.getData()@ -> channel2=journalSyncFile.getChannel()@ -> IF { -> channel2.close()@!(data==null) -> return @data==null } -> channel2.write(ByteBuffer.wrap(data,),)@!(data==null) -> IF { -> return @data==null } -> channel.writeDirect(ByteBuffer.wrap(data,),true,)@!(data==null) } CATCH(Exception) {}
results[https://github.com/Silveryfu/ProjectsTS/blob/6f928e435c16fee835e453d508c8620b7f0be16d/CMPT371P1/ChordDHT/ChordDHT.java][writeFile][1] = -> TRY {  -> sb.append(id+" ",)@ -> IF { -> sb.append("\n",)@ -> fc=new FileOutputStream("./dht.out",).getChannel()@ -> fc.write(ByteBuffer.wrap(sb.toString().getBytes(),),)@ -> fc.close()@ } } CATCH(IOException) {}
results[https://github.com/lalalic/Personal/blob/c471fddc9a6c0e1c6dc43fb65f98a1a0e0191320/travel/android-1qiyou/src/com/equ/lbs/LocationUpdater.java][flush][1] = -> TRY { -> IF { -> out=new FileOutputStream(f,true,).getChannel()@out==null||!(out.isOpen()) } -> buffer.flip()@ -> out.write(buffer,)@ -> buffer.clear()@ -> out.force(true,)@ -> out.close()@ } CATCH(Exception) { -> service.notify(e.getMessage(),)@ }
results[https://github.com/ha-jdbc/ha-jdbc/blob/63b5efc784f6de5cfe9e352bb003e914fcfb27da/src/main/java/net/sf/hajdbc/sql/FileSupportImpl.java][createFile][1] = -> TRY {  -> TRY { -> TRY { -> fileChannel=output.getChannel()@ -> buffer=ByteBuffer.allocate(BUFFER_SIZE,)@ -> LOOP { -> buffer.flip()@inputChannel.read(buffer,)>0 -> fileChannel.write(buffer,)@inputChannel.read(buffer,)>0 -> buffer.compact()@inputChannel.read(buffer,)>0 } } } CATCH(IOException) { -> throw this.exceptionFactory.createException(e,)@ } } CATCH(E) {}
results[https://github.com/oyhk/free-main/blob/a3baa44bdbad7143bdab3ea8a41ffcaf54408d87/free-apiservice/src/main/java/com/mkfree/apiservice/service/upload/impl/AppUploadAttrachmentServiceImpl.java][saveFile][1] = -> TRY { -> foChannel=new FileOutputStream(fileName,).getChannel()@ -> foChannel.write(fileByteBuffer,)@ -> foChannel.close()@ } CATCH(FileNotFoundException) { -> e.printStackTrace()@ } CATCH(IOException) { -> e.printStackTrace()@ } FINALLY { -> fileByteBuffer.clear()@ }
results[https://github.com/swmaestro2012/somap312_17_CurFit/blob/1782c022cc5b9e96d1d92046758985962e59f69b/app/controllers/RestApp.java][fileOut][1] = -> TRY {  -> outChannel=new FileOutputStream(new File(LOCAL_IMAGE_PATH+"/"+fileName,),).getChannel()@ -> buf=ByteBuffer.allocate(1024,)@ -> LOOP { } ELSE { -> buf.flip()@!(inChannel.read(buf,)==-1) -> outChannel.write(buf,)@!(inChannel.read(buf,)==-1) -> buf.clear()@!(inChannel.read(buf,)==-1) } } CATCH(IOException) {}
results[https://github.com/exoplatform/jcr/blob/043a505f7794acc450a96db2da5a6fb15f379fe0/exo.jcr.component.core/src/main/java/org/exoplatform/services/jcr/impl/core/query/ErrorLog.java][clear][1] = -> TRY {  -> IF { -> out.truncate(0,)@out!=null -> out.close()@out!=null -> out=PrivilegedFileHelper.fileOutputStream(logFile,).getChannel()@out!=null -> out.position(1024*fileSize-1,)@out!=null -> out.write(ByteBuffer.wrap( new byte[],),)@out!=null -> out.position(0,)@out!=null -> out.force(false,)@out!=null } } CATCH(IOException) {}
results[https://github.com/monaca/monaca-framework-android/blob/4096a575bd6984bde66e1a81247f3dd00f479884/MonacaFramework/src/fi/iki/elonen/NanoHTTPD.java][saveTmpFile][4] = -> IF { -> TRY { -> src=b.duplicate()@ -> dest=new FileOutputStream(tempFile.getName(),).getChannel()@ -> src.position(offset,).limit(offset+len,)@len>0 -> dest.write(src.slice(),)@ } CATCH(Exception) { -> System.err.println("Error: "+e.getMessage(),)@ } }
results[https://github.com/jmesnil/hornetq-old/blob/4ba2bb971295391b28786aec5ffa06c412a6a183/src/main/org/hornetq/core/journal/impl/SyncSpeedTest.java][run][4] = -> TRY {  -> LOOP { -> channel=rfile.getChannel()@ -> write(bb,channel,fileSize,)@ -> channel.force(true,)@ -> channel.position(0,)@ -> bb1=generateBuffer(recordSize,(byte) 'h',)@ -> LOOP { -> bb1.flip()@ -> channel.write(bb1,)@ -> channel.force(false,)@ } } } CATCH(Exception) {}
results[https://github.com/czarneckid/blojsom-sourceforge/blob/d161d7c443a718e6185036920bc166078a26ecd2/branches/blojsom-2_25-final/blojsom-2.0/src/org/blojsom/util/BlojsomUtils.java][copyDirectory][7] = -> TRY {  -> IF { -> LOOP { -> fcout=fos.getChannel()@ -> buf=ByteBuffer.allocateDirect(8192,)@ -> LOOP { -> buf.clear()@ -> buf.flip()@ -> n+=fcout.write(buf,)@n<size } -> fcout.close()@ } } } CATCH(IOException) {}
results[https://github.com/sayornis/USGS-VHP/blob/057838817ad52b988a9abaea23f9affbea0b47a3/Util/src/gov/usgs/util/DriveSwamp.java][<init>][1] = -> TRY {  -> bb=ByteBuffer.allocateDirect(size,)@ -> LOOP { -> bb.put((byte) i,)@i<size } -> LOOP { -> bb.flip()@ -> out=new FileOutputStream("swamp_"+i+".tmp",).getChannel()@i<numFiles -> LOOP { -> out.write(bb,)@bb.hasRemaining() } } } CATCH(Exception) {}
results[https://github.com/kartoFlane/Superluminal/blob/1cc7b9dbbf07e036617f9f35cda47d2f7425d720/src/com/kurosaru/ftl/archive/datLib.java][Write][1] = -> TRY { -> TRY { -> ch=out.getChannel()@ -> Data.position(0,)@ -> IF { -> ch.write(Data,Offset,)@Offset>-1 } ELSE { -> ch.write(Data,)@ } -> ch.close()@ } FINALLY { -> out.close()@ } }
results[https://github.com/CSCSI/Triana/blob/8cb9a119686ad57d5e84ea74e33c7914dc017205/triana-core/src/main/java/org/trianacode/enactment/Exec.java][writeFile][1] = -> TRY {  -> f=file.getChannel()@ -> fl=f.lock()@ -> IF { -> f.read(bb,)@!(lockfile.length()==4) -> IF { -> return @curr==ExecutionState.COMPLETE.ordinal() && lockfile.length()==4 } } -> bytes=ByteBuffer.allocate(4,)@!(lockfile.length()==4) -> bytes.putInt(command,).flip()@!(lockfile.length()==4) -> f.write(bytes,)@!(lockfile.length()==4) -> f.force(false,)@!(lockfile.length()==4) } CATCH(IOException) {}
results[https://github.com/cuckoo03/repository/blob/6697b49e8b3c1ddf5e6c964757eb65789a3e8a8f/java_networking/src/com/Exam14_12CopyDirectByteBufferTest.java][copyByteBuffer][1] = -> TRY {  -> TRY { -> out=fos.getChannel()@ -> buf=ByteBuffer.allocateDirect((int) in.size(),)@ -> in.read(buf,)@ -> buf.flip()@ -> out.write(buf,)@ } FINALLY { -> in.close()@ -> out.close()@ } } CATCH(IOException) {}
results[https://github.com/readium/SDKLauncher-Android/blob/abb09fb67a304bdb92c0ed08c48e37b0fcdf16f9/SDKLauncher-Android/src/fi/iki/elonen/NanoHTTPD.java][saveTmpFile][1] = -> IF { -> TRY { -> src=b.duplicate()@ -> dest=fileOutputStream.getChannel()@ -> src.position(offset,).limit(offset+len,)@len>0 -> dest.write(src.slice(),)@ } CATCH(Exception) { -> Log.e(TAG,""+e.getMessage(),e,)@ } FINALLY { -> safeClose(fileOutputStream,)@ } }
results[https://github.com/maesse/CubeTech/blob/52215c2b53cb49ef88c62359566c960d627eec66/src/cubetech/client/ClientRender.java][writeScreenshot][1] = -> IF { -> IF { -> return @!(folder.exists())||!(folder.isDirectory()) && !(created) } } -> TRY { -> IF { -> return @!(!(folder.exists())||!(folder.isDirectory())) && !(created)||!(f.canWrite()) } -> fc=new FileOutputStream(f,).getChannel()@!(!(created)||!(f.canWrite())) && !(!(folder.exists())||!(folder.isDirectory())) -> data=ByteBuffer.wrap(filedata,0,filedata.length,)@!(!(created)||!(f.canWrite())) && !(!(folder.exists())||!(folder.isDirectory())) -> fc.write(data,)@!(!(created)||!(f.canWrite())) && !(!(folder.exists())||!(folder.isDirectory())) -> fc.close()@!(!(created)||!(f.canWrite())) && !(!(folder.exists())||!(folder.isDirectory())) } CATCH(IOException) { -> Common.Log(Common.getExceptionString(ex,),)@!(!(folder.exists())||!(folder.isDirectory())) }
results[https://github.com/zycgit/hasor/blob/9a38c82fd9a63532d297aa763685f66fb4030226/Trunk/src/src/org/more/util/FileCopy.java][forChannel][1] = -> TRY {  -> outC=out.getChannel()@ -> LOOP { -> IF { -> outC.close()@!(inC.position()==inC.size()) -> return new Date().getTime()-time@inC.position()==inC.size() } -> b=ByteBuffer.allocateDirect(length,)@!(inC.position()==inC.size()) -> inC.read(b,)@!(inC.position()==inC.size()) -> b.flip()@!(inC.position()==inC.size()) -> outC.write(b,)@!(inC.position()==inC.size()) -> outC.force(false,)@!(inC.position()==inC.size()) } } CATCH(IOException) {}
results[https://github.com/VirginiaFIRST/frc2013score/blob/31734c7a5c6cb8a0104dde9a29483a0d544c63c5/src/main/java/FRC_Score_Sys/WebServer/NanoHTTPD.java][saveTmpFile][1] = -> IF { -> TRY { -> src=b.duplicate()@ -> dest=fileOutputStream.getChannel()@ -> src.position(offset,).limit(offset+len,)@len>0 -> dest.write(src.slice(),)@ } CATCH(Exception) { -> logger.error(e.getLocalizedMessage(),)@ } FINALLY { -> safeClose(fileOutputStream,)@ } }
results[https://github.com/trishika/DroidUPnP/blob/1f69aff379cb5414de30f2f6ccfc318ac29843fc/src/main/java/fi/iki/elonen/NanoHTTPD.java][saveTmpFile][1] = -> IF { -> TRY { -> src=b.duplicate()@ -> dest=fileOutputStream.getChannel()@ -> src.position(offset,).limit(offset+len,)@len>0 -> dest.write(src.slice(),)@ } CATCH(Exception) { -> System.err.println("Error: "+e.getMessage(),)@ } FINALLY { -> safeClose(fileOutputStream,)@ } }
