results[https://github.com/IAAS/oryx-editor/blob/5a57931a8ed03e38ef8ef10ffb279592ac2abe07/server/src/de/hpi/bpel4chor/transformation/factories/TopologyFactory.java][getAssociatedParticipantSet][21] = -> associations=this.diagram.getAssociationsWithSource(activity.getId(),direction,ParticipantSetDataObject.class,)@ -> IF { -> return (ParticipantSetDataObject) associations.get(0,).getTarget()@!(associations.isEmpty()) }
results[https://github.com/chrismarx/cmestemp22/blob/6c51b71b731bad7f067c1a58e90e21ff66329889/server/src/main/java/org/eurekastreams/server/search/bridge/ActivityLastCommentIdClassBridge.java][objectToString][2] = -> activity=(Activity) msgObject@ -> commentList=commentIdsByActivityIdDAO.execute(activity.getId(),)@ -> IF { -> lastCommentTime=commentList.get(commentList.size()-1,)@commentList!=null&&commentList.size()>0 }
results[https://github.com/IAAS/oryx-editor/blob/5a57931a8ed03e38ef8ef10ffb279592ac2abe07/server/src/de/hpi/bpel4chor/transformation/factories/ParticipantsFactory.java][getReferenceToBind][50] = -> associations=this.diagram.getAssociationsWithSource(receivingActivity.getId(),Association.DIRECTION_FROM,ParticipantReferenceDataObject.class,)@ -> IF { -> return (ParticipantReferenceDataObject) associations.get(0,).getTarget()@!(associations.isEmpty()) }
results[https://github.com/NUBIC/psc-mirror/blob/f2e02b0cd423f68a8c2d203ac4ef54a28f5b3a3a/core/src/main/java/edu/northwestern/bioinformatics/studycalendar/service/ActivityService.java][deleteActivity][4] = -> id=activity.getId()@ -> plannedActivities=plannedActivityDao.getPlannedActivitiesForActivity(id,)@ -> IF { -> activityDao.delete(activity,)@plannedActivities==null||plannedActivities.size()==0 -> return true@plannedActivities==null||plannedActivities.size()==0 } ELSE { -> return false@!(plannedActivities==null||plannedActivities.size()==0) }
results[https://github.com/mduduzik/flowframe/blob/162284e69f8cfdc7dfa5566ca6da8769a3f7c4e4/editors/oryx/frontend/src/main/java/de/hpi/bpel4chor/transformation/factories/TopologyFactory.java][getBindSenderTo][21] = -> associations=this.diagram.getAssociationsWithSource(receivingActivity.getId(),Association.DIRECTION_FROM,ParticipantReferenceDataObject.class,)@ -> IF { -> return (ParticipantReferenceDataObject) associations.get(0,).getTarget().getName()@!(associations.isEmpty()) }
results[https://github.com/droolsjbpm/jbpm-designer/blob/75f88f30d2733a144f5c8d4c3ef8aa27e6140526/editor/server/src/de/hpi/bpmn2bpel/factories/ParticipantsFactory.java][isBPEL4ChorForEach][22] = -> IF { -> associations=this.diagram.getAssociationsWithSource(activity.getId(),Association.DIRECTION_TO,VariableDataObject.class,)@activity.getLoop()!=null&&activity.getLoop().getLoopType().equals(Loop.TYPE_MULITPLE,) -> it=associations.iterator()@!(activity.getLoop()!=null&&activity.getLoop().getLoopType().equals(Loop.TYPE_MULITPLE,)) -> LOOP { -> IF { -> return false@it.hasNext() && object.getType().equals(VariableDataObject.TYPE_COUNTER,) && activity.getLoop()!=null&&activity.getLoop().getLoopType().equals(Loop.TYPE_MULITPLE,) } } }
results[https://github.com/wso2/enterprise-store/blob/f558d58b79d4d4fc62dcefb227d75e06bc57e5dd/modules/components/social/src/main/java/org/wso2/carbon/social/summarizer/DefaultSummarizer.java][add][1] = -> activities.put(activity.getId(),activity,)@ -> targetId=activity.getTargetId()@ -> IF { -> activityList.add(activity,)@ } ELSE { -> activityList.add(activity,)@ }
results[https://github.com/smartly23/CaloryCounter/blob/7dab7cba1e324cc7ab3ad01fbdbbb43c47f2705e/CaloryCounter-Backend/src/main/java/cz/fi/muni/pa165/calorycounter/backend/dao/impl/ActivityDaoImplJPA.java][remove][1] = -> IF { -> throw new IllegalArgumentException("Invalid entity (Activity): null or with no id.",)@entity==null||entity.getId()==null } -> activity=em.find(Activity.class,entity.getId(),)@!(entity==null||entity.getId()==null) -> IF { -> LOG.error("Given activity"+entity+"is not in DB.",)@!(entity==null||entity.getId()==null) } -> em.remove(entity,)@!(entity==null||entity.getId()==null)
results[https://github.com/ib84/HypergraphDB-Mirror/blob/c76c819b6594c90dae6660de997d96740cce4ba0/p2p/src/java/org/hypergraphdb/peer/Messages.java][makeReply][1] = -> s=object(ACTIVITY_TYPE,activity.getType(),CONVERSATION_ID,activity.getId(),PERFORMATIVE,performative.toString(),)@ -> IF { -> return s.set(IN_REPLY_TO,replyWith,)@replyWith!=null } ELSE { -> return s@!(replyWith!=null) }
results[https://github.com/bingluo/nauty/blob/192a64b29d887d72bfb16324b066c6509f0920db/src/cn/seu/cose/controller/ActivityController.java][activityBasicIssue][1] = -> recentActivityNews=activityService.getActivityLatestNewsByActivityId(activity.getId(),)@ -> designer=designerService.getCurrentUser()@ -> IF { -> activityApplication=activityService.getActivityApplicationsByUserIdAndActivityId(designer.getId(),activity.getId(),)@designer!=null } -> model.addAttribute("activity",activity,)@ -> model.addAttribute("recentNews",recentActivityNews,)@
results[https://github.com/ciudadanointeligente/accesointeligente/blob/f418f124dd9539004d0bd54da7732c2419c01dce/src/org/accesointeligente/client/views/UserProfileEditView.java][addInstitutionActivity][1] = -> cb=new CheckBox()@ -> cb.setFormValue(activity.getId().toString(),)@ -> cb.setText(activity.getName(),)@ -> IF { -> cb.setValue(true,)@ } -> institutionActivities.add(cb,)@
results[https://github.com/gpuenteallott/kaerus-core/blob/9f2f588d063ae41e513bbaa3b095ad4bc6f4497f/src/com/kaerusproject/functions/KaerusServer.java][linkActivities][1] = -> activity1=adao.selectByName(activityName1,)@ -> IF { -> return false@activity1==null } -> activity2=adao.selectByName(activityName2,)@!(activity1==null) -> IF { -> return false@activity2==null && !(activity1==null) } -> activity1.setNextActivityId(activity2.getId(),)@!(activity2==null) && !(activity1==null) -> updated=adao.update(activity1,)@!(activity2==null) && !(activity1==null) -> IF { -> KaerusQueue.push(activity1,)@!(activity2==null) && !(activity1==null) }
results[https://github.com/NUBIC/psc-mirror/blob/1e75ad29699ae264ca5f185bb2cedda4c5946054/web/src/main/java/edu/northwestern/bioinformatics/studycalendar/restlets/ActivityResource.java][verifyRemovable][4] = -> TRY {  -> plannedActivities=plannedActivityDao.getPlannedActivitiesForActivity(activity.getId(),)@ -> IF { -> message="Can not delete the activity"+UriTemplateParameters.ACTIVITY_CODE.extractFrom(getRequest(),)+" because activity is used by other planned activity "+plannedActivities.get(0,).getDetails()@plannedActivities!=null&&plannedActivities.size()>0 -> throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,message,)@plannedActivities!=null&&plannedActivities.size()>0 } } CATCH(ResourceException) {}
results[https://github.com/tellary/timetracker/blob/3e44e557ce76a7df7954a224a48e1d4c2e5a2942/src/main/java/ru/silvestrov/timetracker/model/ActivityList.java][doInTransaction][1] = -> activity=activities.get(i,)@ -> time=timeEntryDao.getTotalTime(activity.getId(),)@ -> timeEntry=activity.getCurrentTimeEntry()@ -> IF { -> return new ActivityInfo(activity.getName(),time+System.currentTimeMillis()-timeEntry.getTimeStart(),)@timeEntry!=null } ELSE { -> return new ActivityInfo(activity.getName(),time,)@!(timeEntry!=null) }
results[https://github.com/tellary/timetracker/blob/6b32638f8b48d3d611499b9cd0e04d45686c635c/src/main/java/ru/silvestrov/timetracker/model/activitycontrollist/ActivityControlList.java][doInTransaction][1] = -> activity=activityDao.getActivityById(activityId,)@ -> time=timeEntryDao.getTotalTime(activity.getId(),)@ -> timeEntry=activity.getCurrentTimeEntry()@ -> IF { -> return new ActivityInfo(activity.getId(),activity.getName(),time+System.currentTimeMillis()-timeEntry.getTimeStart(),)@timeEntry!=null } ELSE { -> return new ActivityInfo(activity.getId(),activity.getName(),time,)@!(timeEntry!=null) }
results[https://github.com/tellary/timetracker/blob/2ecf44176ad028c068797ec4c61cedcfd80676a0/src/main/java/ru/silvestrov/timetracker/model/ActivityControlList.java][doInTransaction][1] = -> activity=activities.get(i,)@ -> time=timeEntryDao.getTotalTime(activity.getId(),)@ -> timeEntry=activity.getCurrentTimeEntry()@ -> IF { -> return new ActivityInfo(activity.getId(),activity.getName(),time+System.currentTimeMillis()-timeEntry.getTimeStart(),)@timeEntry!=null } ELSE { -> return new ActivityInfo(activity.getId(),activity.getName(),time,)@!(timeEntry!=null) }
results[https://github.com/jogetworkflow/jw-community/blob/923da3e1ff39b667529130c75f65e5ca122775c1/wflow-designer/src/main/java/org/enhydra/jawe/base/panel/StandardPanelGenerator.java][getPanelForFROMAttribute][1] = -> choices=JaWEManager.getInstance().getTransitionHandler().getPossibleSourceActivities(transition,)@ -> current=(Activities) (XMLCollectionElement) transition.getParent().getParent().get("Activities",).getActivity(tFrom,)@ -> IF { -> choices.put(current.getId(),current,)@current!=null } -> IF { -> choosen=(Activity) choices.get(tFrom,)@!(tFrom.equals("",)) } -> cc=new SpecialChoiceElement(from,"",new ArrayList(choices.values(),),choosen,true,"Id","From",from.isRequired(),)@
results[https://github.com/jogetworkflow/jw-community/blob/923da3e1ff39b667529130c75f65e5ca122775c1/wflow-designer/src/main/java/org/enhydra/jawe/base/panel/StandardPanelGenerator.java][getPanelForTOAttribute][1] = -> choices=JaWEManager.getInstance().getTransitionHandler().getPossibleTargetActivities(transition,)@ -> current=(Activities) (XMLCollectionElement) transition.getParent().getParent().get("Activities",).getActivity(tTo,)@ -> IF { -> choices.put(current.getId(),current,)@current!=null } -> IF { -> choosen=(Activity) choices.get(tTo,)@!(tTo.equals("",)) } -> cc=new SpecialChoiceElement(to,"",new ArrayList(choices.values(),),choosen,true,"Id","To",to.isRequired(),)@
results[https://github.com/SINTEF-9012/oryx-neffics/blob/b6b3c37112be18dbabaf810fc0212eb6f345086d/server/src/de/hpi/bpel4chor/transformation/factories/SequenceFlowFactory.java][mapActivity][3] = -> IF { -> element=mapBlockActivity((BlockActivity) act,)@act instanceof BlockActivity } ELSE { -> IF { -> element=mapTask((Task) act,)@act instanceof Task && !(act instanceof BlockActivity) } ELSE { -> IF { -> element=mapIntermediateEvent((IntermediateEvent) act,)@act instanceof IntermediateEvent && !(act instanceof Task) && !(act instanceof BlockActivity) } ELSE { -> this.output.addError("Activity "+act.getId()+" could not be transformed to BPEL4Chor.",)@!(act instanceof IntermediateEvent) && !(act instanceof Task) && !(act instanceof BlockActivity) -> return null@!(act instanceof IntermediateEvent) && !(act instanceof Task) && !(act instanceof BlockActivity) } } } -> IF { -> createSourcesAndTargets(act,element,links,joinCond,)@act instanceof BlockActivity && element!=null }
results[https://github.com/bcdata/bouncingdata/blob/ed85eefd987d8e683ef32dc4796bc9f2df042d4c/src/main/java/com/bouncingdata/plfdemo/datastore/JdoDataStorage.java][updateActivity][1] = -> pm=getPersistenceManager()@ -> pstObj=pm.getObjectById(Activity.class,activity.getId(),)@ -> tx=pm.currentTransaction()@!(pstObj==null) -> TRY { -> pstObj.setObjectId(activity.getObjectId(),)@!(pstObj==null) -> pstObj.setAction(activity.getAction(),)@!(pstObj==null) -> pstObj.setTime(activity.getTime(),)@!(pstObj==null) -> pstObj.setPublic(activity.isPublic(),)@!(pstObj==null) } FINALLY { -> IF { -> tx.rollback()@tx.isActive() && !(pstObj==null) } -> pm.close()@!(pstObj==null) }
results[https://github.com/droolsjbpm/jbpm-designer/blob/c0b0bd3733657e8dcf2246d833d6361d2747b7d5/server/src/de/hpi/bpel4chor/transformation/factories/SequenceFlowFactory.java][mapActivity][8] = -> IF { -> element=mapBlockActivity((BlockActivity) act,)@act instanceof BlockActivity } ELSE { -> IF { -> element=mapTask((Task) act,)@act instanceof Task && !(act instanceof BlockActivity) } ELSE { -> IF { -> element=mapIntermediateEvent((IntermediateEvent) act,)@act instanceof IntermediateEvent && !(act instanceof Task) && !(act instanceof BlockActivity) } ELSE { -> this.output.addError("Activity "+"could not be transformed to BPEL4Chor.",act.getId(),)@!(act instanceof IntermediateEvent) && !(act instanceof Task) && !(act instanceof BlockActivity) -> return null@!(act instanceof IntermediateEvent) && !(act instanceof Task) && !(act instanceof BlockActivity) } } } -> IF { -> createSourcesAndTargets(act,element,links,joinCond,)@act instanceof BlockActivity && element!=null }
results[https://github.com/muleforge/Galaxy/blob/2f0ce119f25b5edd093997293029d1052061358b/repository/server/src/main/java/org/mule/galaxy/repository/RegistryServiceImpl.java][createWActivity][2] = -> wa=new WActivity()@ -> wa.setId(a.getId(),)@ -> wa.setEventType(a.getEventType().getText(),)@ -> IF { -> wa.setUsername(a.getUser().getUsername(),)@a.getUser()!=null -> wa.setName(a.getUser().getName(),)@a.getUser()!=null } -> wa.setMessage(a.getMessage(),)@ -> wa.setDate(dateFormat.format(a.getDate().getTime(),),)@
results[https://github.com/keen80/BirrettaService/blob/a46be7a24152428c79fae2192b93b2751ac46cdf/src/main/java/it/antreem/birretta/service/dao/impl/ActivityDaoImpl.java][updateActivity][1] = -> TRY { -> activities=db.getCollection(ACTIVITY_COLLNAME,)@ -> a=createDBObjectFromActivity(activity,)@ -> return activities.update(new BasicDBObject().append("_id",activity.getId(),),a,).getN()@ } CATCH(MongoException) { -> log.error(ex.getLocalizedMessage(),ex,)@ -> throw new DaoException(ex.getLocalizedMessage(),ex,)@ } FINALLY { -> IF { -> db.requestDone()@db!=null } }
results[https://github.com/eclipse/stardust.ui.web/blob/c7911ee9d65dfbc799a7e4d3dcc87b573be250a4/business-control-center/src/main/java/org/eclipse/stardust/ui/web/bcc/views/TrafficLightViewManagerBean.java][getAllColumnActivities][1] = -> IF { -> return activities@StringUtils.isEmpty(this.processId,) } -> verifiedActivities=new HashMap<String, Activity>()@!(StringUtils.isEmpty(this.processId,)) } ELSE { -> LOOP { -> IF { -> LOOP { -> IF { -> verifiedActivities.put(activityType.getId(),activityType,)@!(StringUtils.isEmpty(this.processId,)) && validActivities.contains(activityType.getId(),) } } } } -> LOOP { -> activityType=(Activity) verifiedActivities.get(activityId,)@!(StringUtils.isEmpty(this.processId,)) -> IF { -> activities.add(activityType,)@!(StringUtils.isEmpty(this.processId,)) && activityType!=null } }
results[https://github.com/Collabinate/Collabinate/blob/677e577b6942686e0f2c542886e2a1221e955796/collabinate-server/src/main/java/com/collabinate/server/resources/StreamResource.java][addActivity][1] = -> IF { -> throw new IllegalStateException("Context does not contain a CollabinateWriter",)@null==writer } -> activity=new Activity(content,)@!(null==writer) -> originalId=activity.getId()@!(null==writer) -> activity.setId(activityId,)@!(null==writer) -> IF { -> activity.setCollabinateValue(ORIGINAL_ID,originalId,)@!(null==writer) && null!=originalId&&!(originalId.equals("",)) } -> activity.setCollabinateValue("entityId",entityId,)@!(null==writer) -> writer.addActivity(tenantId,entityId,activity,)@!(null==writer) -> replies=activity.getReplies()@!(null==writer) -> likes=activity.getLikes()@!(null==writer) -> getResponse().setEntity(activity.toString(),MediaType.APPLICATION_JSON,)@!(null==writer) -> setLocationRef(new Reference(getReference(),).addSegment(activity.getId(),),)@!(null==writer)
results[https://github.com/jak786/VASE/blob/8dfeea569d3e40cd73c9dbb1f2f9e29fa89eaaaf/editor/server/src/de/hpi/bpel4chor/transformation/factories/StructuredElementsFactory.java][createWhileLoop][11] = -> IF { -> result.appendChild(this.supportingFactory.createExpressionElement("condition",loopingActivity.getLoop().getLoopCondition(),),)@loopingActivity.getLoop().getLoopCondition()!=null } ELSE { -> this.output.addError("The loop "+"must define a loop condition.",loopingActivity.getId(),)@!(loopingActivity.getLoop().getLoopCondition()!=null) } -> BPELUtil.setStandardAttributes(result,loopingActivity,)@ } ELSE { -> IF { -> activity=(BlockActivity) loopingActivity@loopingActivity instanceof BlockActivity -> sequenceFlow=new SequenceFlowFactory(this.diagram,this.document,activity.getSubProcess(),this.output,).transformSequenceFlow()@ } ELSE { -> this.output.addError("Content of looping activity "+"could not be generated.",loopingActivity.getId(),)@!(loopingActivity instanceof BlockActivity) }
results[https://github.com/SINTEF-9012/oryx-neffics/blob/b6b3c37112be18dbabaf810fc0212eb6f345086d/server/src/de/hpi/bpel4chor/transformation/factories/StructuredElementsFactory.java][createWhileLoop][3] = -> IF { -> result.appendChild(this.supportingFactory.createExpressionElement("condition",loopingActivity.getLoop().getLoopCondition(),),)@loopingActivity.getLoop().getLoopCondition()!=null } ELSE { -> this.output.addError("The loop "+loopingActivity.getId()+" must define a loop condition.",)@!(loopingActivity.getLoop().getLoopCondition()!=null) } -> BPELUtil.setStandardAttributes(result,loopingActivity,)@ } ELSE { -> IF { -> activity=(BlockActivity) loopingActivity@loopingActivity instanceof BlockActivity -> sequenceFlow=new SequenceFlowFactory(this.diagram,this.document,activity.getSubProcess(),this.output,).transformSequenceFlow()@ } ELSE { -> this.output.addError("Content of looping activity "+loopingActivity.getId()+" could not be generated.",)@!(loopingActivity instanceof BlockActivity) }
results[https://github.com/samarjit/mywapama/blob/c0b0bd3733657e8dcf2246d833d6361d2747b7d5/server/src/de/hpi/bpel4chor/transformation/factories/StructuredElementsFactory.java][createRepeatUntilLoop][11] = -> BPELUtil.setStandardAttributes(result,loopingActivity,)@ } ELSE { -> IF { -> activity=(BlockActivity) loopingActivity@loopingActivity instanceof BlockActivity -> sequenceFlow=new SequenceFlowFactory(this.diagram,this.document,activity.getSubProcess(),this.output,).transformSequenceFlow()@ } ELSE { -> this.output.addError("Content of looping activity "+"could not be generated.",loopingActivity.getId(),)@!(loopingActivity instanceof BlockActivity) } -> IF { -> result.appendChild(this.supportingFactory.createExpressionElement("condition",loopingActivity.getLoop().getLoopCondition(),),)@loopingActivity.getLoop().getLoopCondition()!=null } ELSE { -> this.output.addError("The loop "+"must define a loop condition.",loopingActivity.getId(),)@!(loopingActivity.getLoop().getLoopCondition()!=null) }
results[https://github.com/tsurdilo/elissa/blob/c0b0bd3733657e8dcf2246d833d6361d2747b7d5/server/src/de/hpi/bpel4chor/transformation/factories/StructuredElementsFactory.java][createRepeatUntilLoop][3] = -> BPELUtil.setStandardAttributes(result,loopingActivity,)@ } ELSE { -> IF { -> activity=(BlockActivity) loopingActivity@loopingActivity instanceof BlockActivity -> sequenceFlow=new SequenceFlowFactory(this.diagram,this.document,activity.getSubProcess(),this.output,).transformSequenceFlow()@ } ELSE { -> this.output.addError("Content of looping activity "+loopingActivity.getId()+" could not be generated.",)@!(loopingActivity instanceof BlockActivity) } -> IF { -> result.appendChild(this.supportingFactory.createExpressionElement("condition",loopingActivity.getLoop().getLoopCondition(),),)@loopingActivity.getLoop().getLoopCondition()!=null } ELSE { -> this.output.addError("The loop "+loopingActivity.getId()+" must define a loop condition.",)@!(loopingActivity.getLoop().getLoopCondition()!=null) }
results[https://github.com/smartly23/CaloryCounter/blob/d4ed3d70c93f303bee376c815f37c6e7a281d66b/CaloryCounter-BusinessLogic/src/main/java/cz/fi/muni/pa165/calorycounter/backend/dto/convert/ActivityConvert.java][fromEntitiesListToDto][1] = -> dto=new ActivityDto()@ -> IF { -> return dto@entities.isEmpty() } -> activity=entities.iterator().next().getActivity()@!(entities.isEmpty()) -> dto.setActivityName(activity.getName(),)@!(entities.isEmpty()) -> dto.setDeleted(activity.isDeleted(),)@!(entities.isEmpty()) -> dto.setActivityId(activity.getId(),)@!(entities.isEmpty()) -> LOOP { -> IF { -> throw new IllegalArgumentException("Calories given are not of the same Activity. Expected "+dto.getActivityName()+"; Current "+cal.getActivity().getName(),)@!(entities.isEmpty()) && !(cal.getActivity().getName().equals(dto.getActivityName(),)) && entities.size() > 0 } -> dto.setCaloriesAmount(cal.getWeightCat(),cal.getAmount(),)@!(entities.isEmpty()) && !(entities.size() > 0) && !(!(cal.getActivity().getName().equals(dto.getActivityName(),))) }
results[https://github.com/MichaelSieger/Hrm/blob/f26e8665e0e04e0ccdfd0b79e5965819b207244e/de.hswt.hrm.catalog.dao.jdbc/src/de/hswt/hrm/catalog/dao/jdbc/ActivityDao.java][update][1] = -> TRY {  -> checkNotNull(activity,"Activity must not be null.",)@ -> IF { -> throw new ElementNotFoundException("Element has no valid ID.",)@activity.getId()<0 } -> TRY { -> TRY { -> stmt.setParameter(Fields.ID,activity.getId(),)@!(activity.getId()<0) -> stmt.setParameter(Fields.NAME,activity.getName(),)@!(activity.getId()<0) -> stmt.setParameter(Fields.TEXT,activity.getText(),)@!(activity.getId()<0) -> affectedRows=stmt.executeUpdate()@!(activity.getId()<0) -> IF { -> throw new SaveException()@!(activity.getId()<0) && affectedRows!=1 } } } CATCH(SQLException | DatabaseException) { -> throw new SaveException(e,)@!(activity.getId()<0) } } CATCH(ElementNotFoundException,SaveException) {}
results[https://github.com/m0ep/master-thesis/blob/41fb22419e5844d01d85a91297e6f716b2d5e93c/source/socc/src/main/java/de/m0ep/socc/connectors/google/plus/GooglePlusConnector.java][pollNewReplies][2] = -> TRY {  -> LOOP { -> TRY { -> IF { -> commentListRequest=plus.comments().list(activity.getId(),)@null==commentListRequest -> commentListRequest.setFields("id,items(actor/id,id,"+"object/content,published,updated),"+"nextPageToken",)@null==commentListRequest -> commentListRequest.setSortOrder("descending",)@null==commentListRequest } -> IF { -> commentListRequest.setPageToken(pageToken,)@null!=pageToken } -> feed=commentListRequest.execute()@ } CATCH(GoogleJsonResponseException) { -> LOG.error(e.getLocalizedMessage(),e,)@ -> throw mapToConnectorException(e,)@ } CATCH(Throwable) { -> LOG.error(t.getLocalizedMessage(),t,)@ -> throw new ConnectorException("Unknown error",t,)@ } } } CATCH(ConnectorException) {}
results[https://github.com/OT-SIMS-2013/android/blob/4c7b52aaf49efc05f5f84350bc01ddff2692ef66/disponif/src/com/sims2013/disponif/fragments/ActivityFragment.java][onActivityReceived][1] = -> super.onActivityReceived(result,)@ -> IF { -> mActivityId=result.getId()@result!=null -> mAdapter=new CommentAdapter(getActivity(),R.layout.item_comment,R.id.comment_text,result.getComments(),)@result!=null } -> IF { -> mCategoryTypeTv.setText(result.getAvailability().getCategoryName()+" - "+result.getAvailability().getTypeName(),)@result.getAvailability().getTypeId()!=-1 } ELSE { -> mCategoryTypeTv.setText(result.getAvailability().getCategoryName(),)@!(result.getAvailability().getTypeId()!=-1) } -> startDate=DisponIFUtils.stringToDate(result.getAvailability().getStartTime(),)@ -> mDateTv.setText("Du "+DisponIFUtils.datetimeToFrDate(getActivity(),result.getAvailability().getStartTime(),)+" à "+DisponIFUtils.datetimeToFrTime(getActivity(),result.getAvailability().getStartTime(),)+" au "+DisponIFUtils.datetimeToFrDate(getActivity(),result.getAvailability().getEndTime(),)+" à "+DisponIFUtils.datetimeToFrTime(getActivity(),result.getAvailability().getEndTime(),),)@ -> mDescriptionTv.setText(result.getAvailability().getDescription(),)@ -> BitmapManager.setBitmap(mCategoryIcon,"http://disponif.darkserver.fr/server/res/category/"+result.getAvailability().getCategoryId()+".png",)@
results[https://github.com/lmco/eurekastreams/blob/be29cdb5e43278ca7a97952bf220f9713ecf3fcc/server/src/main/java/org/eurekastreams/server/action/execution/feed/RefreshFeedExecution.java][execute][2] = -> TRY {  -> TRY { -> LOOP { -> IF { -> LOOP { -> TRY { -> activity=getActivityFromATOMEntry(feed,entry,selectedObjectMapper,)@ -> LOOP { -> activityForIndividual=(Activity) activity.clone()@ } } CATCH(Exception) { -> log.warn("ATOM/RSS entry is not to spec. "+"Skipping entry and moving to the next one. Feed url: "+feed.getUrl(),ex,)@ } } } } -> IF { -> insertedActivityIds=new ArrayList<Long>()@ -> LOOP { -> activityDBInserter.execute(new PersistenceRequest<Activity>(activity,),)@ -> insertedActivityIds.add(activity.getId(),)@ } -> Collections.reverse(insertedActivityIds,)@ -> IF { -> cache.setList(CacheKeys.BUFFERED_ACTIVITIES,insertedActivityIds,)@cache.get(CacheKeys.BUFFERED_ACTIVITIES,)==null } ELSE { -> cache.addToTopOfList(CacheKeys.BUFFERED_ACTIVITIES,insertedActivityIds,)@!(cache.get(CacheKeys.BUFFERED_ACTIVITIES,)==null) } } -> log.error("Error retrieving feed: "+feed.getUrl(),ex,)@ } FINALLY { -> feed.setLastSeenGUID(lastSeenGUID,)@ -> feed.setIsFeedBroken(brokenFeed,)@ -> feed.setLastPostDate(lastPostDate,)@ -> feed.setLastUpdated(new Date().getTime()/MS_IN_MIN,)@ -> feed.setUpdateFrequency(updateFrequency,)@ -> feed.setPending(false,)@ } } CATCH(ExecutionException) {}
results[https://github.com/eclipse/stardust.engine/blob/574dbcedcd605020a00463e9bc785b2582e2c73e/stardust-engine-core/src/main/java/org/eclipse/stardust/engine/api/runtime/QualityAssuranceUtils.java][getParticipantProbabiltyKey][1] = -> probabilityKey+=a.getProcessDefinitionId()+"::"@ -> probabilityKey+=a.getId()+"::"@ -> probabilityKey+=a.getDefaultPerformer().getId()@ -> IF { -> probabilityKey+="{"+department.getId()+"}"@department!=null }
results[https://github.com/lucmoreau/ProvToolbox/blob/8593f7676793e0faa088681232fa923651b955de/prov-model/src/main/java/org/openprovenance/prov/model/ProvFactory.java][newWasGeneratedBy][1] = -> res=newWasGeneratedBy(id,a.getId(),p.getId(),)@ -> IF { -> addRole(res,newRole(role,getName().XSD_STRING,),)@role!=null }
results[https://github.com/NUBIC/psc-mirror/blob/dbe84c2afe3a983137ab2a2fa0422f9d77259f17/src/main/java/edu/northwestern/bioinformatics/studycalendar/web/activity/AdvancedEditActivityCommand.java][createExistingUri][2] = -> IF { -> activityProperties=activityPropertyDao.getByActivityId(activity.getId(),)@activity.getId()!=null -> IF { -> iterator=activityProperties.iterator()@activityProperties!=null -> LOOP { -> IF { -> iteratorAll=activityProperties.iterator()@activityProperties!=null } } } }
results[https://github.com/SINTEF-9012/oryx-neffics/blob/b6b3c37112be18dbabaf810fc0212eb6f345086d/server/src/de/hpi/bpel4chor/transformation/factories/StructuredElementsFactory.java][createTerminationHandlerElement][6] = -> attachedTermEvents=activity.getAttachedEvents(IntermediateEvent.TRIGGER_TERMINATION,)@ -> IF { -> this.output.addError("The activity "+activity.getId()+" is not allowed to have more than one termination event attached. ",)@!(attachedTermEvents.size()>1) -> return null@attachedTermEvents.size()>1 } -> IF { -> IF { -> this.output.addError("A termination handler attached the event "+event.getId()+" could not be found.",)@!(attachedTermEvents.size()>1) && !(termHandler==null) && !(!(attachedTermEvents.isEmpty())) -> return null@!(attachedTermEvents.isEmpty()) && !(attachedTermEvents.size()>1) && termHandler==null } -> sequenceFlow=new SequenceFlowFactory(this.diagram,this.document,termHandler.getSubProcess(),this.output,).transformSequenceFlow()@!(attachedTermEvents.size()>1) && !(termHandler==null) && !(!(attachedTermEvents.isEmpty())) -> return result@!(attachedTermEvents.isEmpty()) && !(attachedTermEvents.size()>1) && !(termHandler==null) }
results[https://github.com/samarjit/mywapama/blob/5dd2a9e6693880535572d5a0e36bd1d93203cd23/editor/server/src/de/hpi/bpel4chor/transformation/factories/StructuredElementsFactory.java][createCompensationHandlerElement][22] = -> attachedCompEvents=activity.getAttachedEvents(IntermediateEvent.TRIGGER_COMPENSATION,)@ -> IF { -> this.output.addError("The activity is not allowed to "+"have more than one compensation event attached.",activity.getId(),)@ } -> IF { -> IF { -> this.output.addError("A compensation handler attached to this event "+"could not be found.",event.getId(),)@!(!(attachedCompEvents.isEmpty())) && !(compHandler==null) -> return null@compHandler==null && !(attachedCompEvents.isEmpty()) } -> sequenceFlow=new SequenceFlowFactory(this.diagram,this.document,compHandler.getSubProcess(),this.output,).transformSequenceFlow()@!(!(attachedCompEvents.isEmpty())) && !(compHandler==null) -> return result@!(compHandler==null) && !(attachedCompEvents.isEmpty()) }
results[https://github.com/Collabinate/Collabinate/blob/677e577b6942686e0f2c542886e2a1221e955796/collabinate-server/src/main/java/com/collabinate/server/resources/ActivityResource.java][putActivity][1] = -> activity=new Activity(activityContent,)@ -> id=activity.getId()@ -> IF { -> activity.setId(id,)@null==id||id.equals("",) } -> IF { -> return @!(activityId.equals(id,)) } -> activity.setCollabinateValue("entityId",entityId,)@!(!(activityId.equals(id,))) -> writer.addActivity(tenantId,entityId,activity,)@!(!(activityId.equals(id,))) -> replies=activity.getReplies()@!(!(activityId.equals(id,))) -> likes=activity.getLikes()@!(!(activityId.equals(id,))) -> getResponse().setEntity(activity.toString(),MediaType.APPLICATION_JSON,)@!(!(activityId.equals(id,)))
results[https://github.com/tassiovirginio/firststepinagile/blob/7d4a32b2cb7a9a62bd6a30aba8dfbb4200b6fc04/src/main/java/br/com/fa7/firststepinagile/business/ActivityBusiness.java][upActivityPriority][2] = -> activity=activityDAO.findById(activity.getId(),)@ -> index=list.indexOf(activity,)@ -> IF { -> index2=activity.getPriority()@ -> activity.setPriority(index1,)@ -> save(activity,)@ }
results[https://github.com/wayne0332/xiaojh/blob/8551c44d382368bf9b6a216c781c9805911aca4d/src/com/tjxjh/service/ActivityService.java][findByHql][1] = -> activity=findById(activity.getId(),)@ -> IF { -> return activity@user.getStatus()==UserStatus.ADMIN } -> club=activity.getClub()@!(user.getStatus()==UserStatus.ADMIN) -> oldmerchant=activity.getMerchant()@!(user.getStatus()==UserStatus.ADMIN) -> IF { -> IF { -> return activity@list.size()==1 && !(user.getStatus()==UserStatus.ADMIN) && club!=null } } ELSE { -> IF { -> IF { -> return activity@merchantid==merchant.getId() && !(user.getStatus()==UserStatus.ADMIN) && oldmerchant!=null && !(club!=null) } } }
results[https://github.com/mduduzik/flowframe/blob/162284e69f8cfdc7dfa5566ca6da8769a3f7c4e4/editors/oryx/frontend/src/main/java/de/hpi/bpel4chor/transformation/factories/GeneralizedFlowMapper.java][finishFlow][12] = -> IF { -> this.output.addError("A generalized flow pattern could not be mapped correctly.",this.component.getId(),)@this.component.getActivities().size()!=1 -> return null@this.component.getActivities().size()!=1 } -> act=this.component.getActivities().get(0,)@!(this.component.getActivities().size()!=1) -> IF { -> this.output.addError("A generalized flow pattern could not be mapped correctly.",this.component.getId(),)@!(this.component.getActivities().size()!=1) && !(!(act instanceof FoldedTask)) -> return null@!(this.component.getActivities().size()!=1) && !(act instanceof FoldedTask) } -> element=(FoldedTask) act.getBPELElement()@!(this.component.getActivities().size()!=1) && !(!(act instanceof FoldedTask)) -> IF { -> this.output.addError("An Activity could not be mapped correctly, since the BPELElement is null",act.getId(),)@!(this.component.getActivities().size()!=1) && !(element==null) && !(!(act instanceof FoldedTask)) -> return null@!(this.component.getActivities().size()!=1) && element==null && !(!(act instanceof FoldedTask)) } -> linksElement=new SupportingFactory(this.diagram,this.document,this.output,).createLinks(links,)@!(this.component.getActivities().size()!=1) && !(element==null) && !(!(act instanceof FoldedTask)) -> return (FoldedTask) act@!(this.component.getActivities().size()!=1) && !(element==null) && !(!(act instanceof FoldedTask))
results[https://github.com/IAAS/oryx-editor/blob/5a57931a8ed03e38ef8ef10ffb279592ac2abe07/server/src/de/hpi/bpel4chor/parser/ProcessParser.java][buildGraphStructure][14] = -> LOOP { -> sourceAct=transition.getSource()@ -> IF { -> source=this.diagram.getObject(sourceAct.getId(),)@sourceAct!=null -> IF { -> (Activity) source.addSourceFor(transition,this.output,)@source!=null&&source instanceof Activity } } -> targetAct=transition.getTarget()@ -> IF { -> target=this.diagram.getObject(targetAct.getId(),)@targetAct!=null -> IF { -> (Activity) target.addTargetFor(transition,this.output,)@target!=null&&target instanceof Activity } } }
results[https://github.com/NUBIC/psc-mirror/blob/dbe84c2afe3a983137ab2a2fa0422f9d77259f17/src/main/java/edu/northwestern/bioinformatics/studycalendar/web/activity/AdvancedEditActivityCommand.java][saveNewUri][4] = -> LOOP { -> activityProperties=activityPropertyDao.getByActivityId(activity.getId(),)@ -> IF { -> k=activityProperties.size()@activityProperties!=null -> LOOP { -> property=activityProperties.get(k-1,)@activityProperties!=null && k>0 } } -> IF { -> activityProperty1.setActivity(activity,)@ -> activityPropertyDao.save(activityProperty1,)@ } -> IF { -> activityProperty2.setActivity(activity,)@ -> activityPropertyDao.save(activityProperty2,)@ } }
results[https://github.com/lmco/eurekastreams/blob/726a3e93735b5ed84385eae2db65ba64ca3d00c7/server/src/main/java/org/eurekastreams/server/action/execution/stream/StoreStreamHashTagsForActivityStrategyImpl.java][execute][1] = -> log.info("Finding hashtags for activity #"+inActivity.getId(),)@ -> scopeType=inActivity.getRecipientStreamScope().getScopeType()@ -> IF { -> log.info("This activity isn't a group or person stream - not handled.",)@!(scopeType!=ScopeType.GROUP&&scopeType!=ScopeType.PERSON) -> return @scopeType!=ScopeType.GROUP&&scopeType!=ScopeType.PERSON } -> recipientStreamKey=inActivity.getRecipientStreamScope().getUniqueKey()@!(scopeType!=ScopeType.GROUP&&scopeType!=ScopeType.PERSON) -> hashTagStrings=getHashTags(inActivity,)@!(scopeType!=ScopeType.GROUP&&scopeType!=ScopeType.PERSON) -> LOOP { -> IF { -> log.debug("Adding StreamHashTag "+hashTag.getContent()+" for direct recipient stream of type "+scopeType+", key: "+recipientStreamKey+", activity id: #"+inActivity.getId(),)@log.isDebugEnabled() && !(hashTagStrings.size()==0) && !(scopeType!=ScopeType.GROUP&&scopeType!=ScopeType.PERSON) } -> streamHashTag=new StreamHashTag(hashTag,inActivity,recipientStreamKey,scopeType,)@!(hashTagStrings.size()==0) && !(scopeType!=ScopeType.GROUP&&scopeType!=ScopeType.PERSON) }
results[https://github.com/gpuenteallott/kaerus-core/blob/9f2f588d063ae41e513bbaa3b095ad4bc6f4497f/src/com/kaerusproject/supervisor/KaerusCloud.java][readObject][1] = -> IF { -> activities.remove(activity.getId(),)@ -> activitiesLastUpdate.remove(activity.getId(),)@ } -> IF { -> activities.put(activity.getId(),activity,)@activities.get(activity.getId(),)==null -> activitiesLastUpdate.put(activity.getId(),date,)@activities.get(activity.getId(),)==null } ELSE { -> IF { -> activities.put(activity.getId(),activity,)@!(activities.get(activity.getId(),)==null) && activitiesLastUpdate.get(activity.getId(),).getTime()<date.getTime() -> activitiesLastUpdate.put(activity.getId(),date,)@!(activities.get(activity.getId(),)==null) && activitiesLastUpdate.get(activity.getId(),).getTime()<date.getTime() } }
results[https://github.com/maninsoft/smartworksV3/blob/4f82122352ad743b889740e4a6509c32b28af5d8/src/net/smartworks/server/engine/process/xpdl/util/ProcessModelHelper.java][createProcessTemplate][1] = -> TRY {  -> IF { -> LOOP { -> actModel=(Activity) actItr.next()@actItr.hasNext() -> actId=actModel.getId()@ -> workStep=(String[]) workStepInfo.get(actId,)@ -> actModel.setName(workStep[1],)@ -> IF { -> performer=(Performer) actModel.getPerformers().getPerformer().get(0,)@!(actModel.getPerformers().getPerformer().isEmpty()) } -> createActivityDataFields(actModel,dataInfo,)@ -> IF { -> createActivityAssignment(actModel,dataInfo,)@ } } } } CATCH(Exception) {}
results[https://github.com/MichaelSieger/Hrm/blob/f26e8665e0e04e0ccdfd0b79e5965819b207244e/de.hswt.hrm.catalog.dao.jdbc/src/de/hswt/hrm/catalog/dao/jdbc/ActivityDao.java][addToCurrent][1] = -> TRY {  -> IF { -> activity=insert(activity,)@activity.getId()<0 } -> TRY { -> TRY { -> stmt.setParameter(Fields.CROSS_CURRENT_FK,current.getId(),)@ -> stmt.setParameter(Fields.CROSS_ACTIVITY_FK,activity.getId(),)@ -> affectedRows=stmt.executeUpdate()@ -> IF { -> throw new SaveException()@affectedRows!=1 } } } CATCH(SQLException | DatabaseException) { -> throw new SaveException(e,)@ } } CATCH(SaveException) {}
results[https://github.com/jogetworkflow/jw-community/blob/923da3e1ff39b667529130c75f65e5ca122775c1/wflow-designer/src/main/java/org/enhydra/jawe/base/xpdlobjectfactory/XPDLObjectFactory.java][createXPDLActivity][1] = -> act=(Activity) acts.generateNewElement()@ -> IF { -> jts.fillFromTemplate(act,type,)@ } -> id=act.getId()@ -> IF { -> IF { -> id=JaWEManager.getInstance().getIdFactory().generateUniqueId(acts,)@id.equals("",) && !(hasTemplate)||id.equals("",)||acts.getActivity(id,)!=null } ELSE { -> id=JaWEManager.getInstance().getIdFactory().generateSimilarOrIdenticalUniqueId(acts,new HashSet(),id,)@!(hasTemplate)||id.equals("",)||acts.getActivity(id,)!=null && !(id.equals("",)) } -> LOOP { -> id=id+String.valueOf(++i,)@!(hasTemplate)||id.equals("",)||acts.getActivity(id,)!=null && acts.getActivity(id,)!=null } -> act.setId(id,)@!(hasTemplate)||id.equals("",)||acts.getActivity(id,)!=null }
results[https://github.com/tellary/timetracker/blob/011ceceb419fa9430c5243821b31ee532337ed83/src/main/java/ru/silvestrov/timetracker/view/AdjustTimeController.java][doInTransactionWithoutResult][1] = -> activity=activityControlList.getActivity(activityIdx,)@ -> lastTimeEntry=timeEntryDao.getLastTimeEntry(activity.getId(),)@ -> IF { -> System.out.println(String.format("Null time entry found for activity with id=%s, name='%s'",activity.getId(),activity.getName(),),)@!(lastTimeEntry==null) -> return @lastTimeEntry==null } -> IF { -> throw new RuntimeException("Active activity is prohibit to be decreased",)@lastTimeEntry.isActive() && !(lastTimeEntry==null) } -> size=lastTimeEntry.getTimeEnd()-lastTimeEntry.getTimeStart()@!(lastTimeEntry.isActive()) && !(lastTimeEntry==null) -> IF { -> timeEntryDao.delete(lastTimeEntry,)@!(lastTimeEntry.isActive()) && !(lastTimeEntry==null) } ELSE { -> timeEnd=lastTimeEntry.getTimeEnd()-adjustmentMillis@!(lastTimeEntry.isActive()) && !(adjustmentMillis>=size) && !(lastTimeEntry==null) -> lastTimeEntry.setTimeEnd(timeEnd,)@!(lastTimeEntry.isActive()) && !(lastTimeEntry==null) -> timeEntryDao.save(lastTimeEntry,)@!(lastTimeEntry.isActive()) && !(lastTimeEntry==null) }
results[https://github.com/chrismarx/cmestemp22/blob/6c51b71b731bad7f067c1a58e90e21ff66329889/server/src/main/java/org/eurekastreams/server/search/bridge/strategies/WeightedInterestingnessStrategy.java][computeInterestingness][2] = -> commentList=commentIdsByActivityIdDAO.execute(activity.getId(),)@ -> IF { -> interestingNess+=commentList.size()*commentWeight@commentList!=null } -> commentorList=commentorIdsByActivityIdDao.execute(activity.getId(),)@ -> IF { -> interestingNess+=commentorList.size()*uniqueUserCommentWeight@commentorList!=null } -> peopleWhoLikedActivity=getPeopleWhoLikedMapper.execute(Arrays.asList(activity.getId(),),)@ -> IF { -> interestingNess+=peopleWhoLikedActivity.iterator().next().size()*likeWeight@peopleWhoLikedActivity!=null&&peopleWhoLikedActivity.size()>0 } -> IF { -> interestingNess+=activity.getPostedTime().getTime()/MILLISECONDS_IN_DAY*timeWeight@interestingNess>0L }
results[https://github.com/eclipse/stardust.ide/blob/0a4c1491fd7ed820ce74bbf68d72aa03b3d0cc49/model/org.eclipse.stardust.model.bpmn2.transform/src/main/java/org/eclipse/stardust/model/bpmn2/transform/xpdl/elements/TaskDataFlow2Stardust.java][hasValidSourceAndTarget][1] = -> associationTarget=assoc.getTargetRef()@ -> associationSource=getFirstAssociationSource(assoc,)@ -> IF { -> failures.add("DATA ASSOCIATION TARGET NOT SET "+assoc.getId()+" Activity "+assoc.getId()+" "+activity.getName()+" in "+container.getId(),)@ } -> IF { -> failures.add("DATA ASSOCIATION SOURCE NOT SET "+assoc.getId()+" Activity "+assoc.getId()+" "+activity.getName()+" in "+container.getId(),)@ } -> IF { -> failures.add("DATA ASSOCIATION SOURCE NOT VALID "+assoc.getId()+" Activity "+activity.getId()+" "+activity.getName()+" in "+container.getId(),)@ }
results[https://github.com/jak786/VASE/blob/6e1167bd64af6bf60fbf56a8cbe702c76e804e90/server/src/de/hpi/bpel4chor/transformation/factories/Componentizer.java][getAttachedErrorEventSinkObject][3] = -> errorHandlers=getErrorHandlers(activity,)@ -> IF { -> return null@errorHandlers==null||errorHandlers.isEmpty() } -> LOOP { -> IF { -> IF { } ELSE { -> IF { -> this.output.addError("Each error handler "+"of activity "+activity.getId()+" must lead to the same gateway.",)@!(target instanceof Gateway) && !(!(gateway.equals(targetGateway,))) && !(errorHandlers==null||errorHandlers.isEmpty()) && !(targetGateway.getGatewayType().equals(Gateway.TYPE_OR,)||targetGateway.getGatewayType().equals(Gateway.TYPE_XOR,)) && gateway==null && !(itHandler.hasNext()) -> return null@!(gateway==null) && targetGateway.getGatewayType().equals(Gateway.TYPE_OR,)||targetGateway.getGatewayType().equals(Gateway.TYPE_XOR,) && !(gateway.equals(targetGateway,)) && !(errorHandlers==null||errorHandlers.isEmpty()) && target instanceof Gateway && itHandler.hasNext() } } } } -> IF { -> this.output.addError("The outgoing transition of error handler "+missing.getId()+" must lead to an inclusive or"+" exclusive merge gateway.",)@missing!=null && !(errorHandlers==null||errorHandlers.isEmpty()) && !(itHandler.hasNext()) -> return null@missing!=null && !(errorHandlers==null||errorHandlers.isEmpty()) && !(itHandler.hasNext()) } -> IF { -> return null@!(missing!=null) && !(errorHandlers==null||errorHandlers.isEmpty()) && gateway==null && !(itHandler.hasNext()) } -> this.output.addError("The successor of activity "+activity.getId()+" must be the gateway with id "+gateway.getId(),)@!(gateway==null) && !(activity.getSuccessor()!=null&&activity.getSuccessor().equals(gateway,)) && !(missing!=null) && !(errorHandlers==null||errorHandlers.isEmpty()) && !(itHandler.hasNext())
results[https://github.com/ib84/HypergraphDB-Mirror/blob/1f155963ddad1d4c4133d219ce9fd428e95219d1/p2p/src/java/org/hypergraphdb/peer/workflow/ActivityManager.java][insertNewActivity][1] = -> IF { -> throw new RuntimeException("Activity "+activity+" with ID "+activity.getId()+" has already been initiated.",)@activities.containsKey(activity.getId(),) } -> activities.put(activity.getId(),activity,)@!(activities.containsKey(activity.getId(),)) -> future=new ActivityFuture(activity,completionLatch,)@!(activities.containsKey(activity.getId(),)) -> activity.getState().addListener(new StateListener(),)@!(activities.containsKey(activity.getId(),)) -> IF { -> parents.put(activity,parentActivity,)@!(activities.containsKey(activity.getId(),)) && parentActivity!=null -> activity.getState().addListener(new StateListener(),)@!(activities.containsKey(activity.getId(),)) } ELSE { -> TRY { -> globalQueue.put(activity,)@!(activities.containsKey(activity.getId(),)) } CATCH(InterruptedException) { -> handleActivityException(activity,ex,null,)@!(activities.containsKey(activity.getId(),)) } }
results[https://github.com/wayne0332/xiaojh/blob/f9ad3e0340a299371a285883c6dd1c04ce431fb1/src/com/tjxjh/action/ActivityAction.java][modifyActivity][1] = -> oldactivity=new Activity()@ -> oldactivity.setId(activity.getId(),)@ -> oldactivity=activityService.findByHql(user,merchant,oldactivity,)@ -> IF { -> return ERROR@oldactivity==null||!(oldactivity.getStatus().equals(ActivityStatus.APPLY,)) } -> upimg=activityService.uploadImage(activity,uploadImage,uploadImageFileName,UPLOAD_IMAGE_PATH+uploadImageFileName,)@!(oldactivity==null||!(oldactivity.getStatus().equals(ActivityStatus.APPLY,))) -> activityService.uploadVideo(activity,uploadVideo,uploadVideoFileName,UPLOAD_IMAGE_PATH+uploadVideoFileName,)@!(oldactivity==null||!(oldactivity.getStatus().equals(ActivityStatus.APPLY,))) -> IF { -> return ERROR@!(oldactivity==null||!(oldactivity.getStatus().equals(ActivityStatus.APPLY,))) && !(upimg) } -> activity.setTalking(oldactivity.getTalking(),)@!(oldactivity==null||!(oldactivity.getStatus().equals(ActivityStatus.APPLY,))) && !(!(upimg)) -> activity.setClub(oldactivity.getClub(),)@!(oldactivity==null||!(oldactivity.getStatus().equals(ActivityStatus.APPLY,))) && !(!(upimg)) -> activity.setStatus(oldactivity.getStatus(),)@!(oldactivity==null||!(oldactivity.getStatus().equals(ActivityStatus.APPLY,))) && !(!(upimg)) -> activity.setMerchant(oldactivity.getMerchant(),)@!(oldactivity==null||!(oldactivity.getStatus().equals(ActivityStatus.APPLY,))) && !(!(upimg)) -> activity.setDatetime(oldactivity.getDatetime(),)@!(oldactivity==null||!(oldactivity.getStatus().equals(ActivityStatus.APPLY,))) && !(!(upimg)) -> activity.setHeat(oldactivity.getHeat(),)@!(oldactivity==null||!(oldactivity.getStatus().equals(ActivityStatus.APPLY,))) && !(!(upimg)) -> activity.setParticipantCount(oldactivity.getParticipantCount(),)@!(oldactivity==null||!(oldactivity.getStatus().equals(ActivityStatus.APPLY,))) && !(!(upimg)) -> activityService.update(activity,)@!(oldactivity==null||!(oldactivity.getStatus().equals(ActivityStatus.APPLY,))) && !(!(upimg))
results[https://github.com/SINTEF-9012/oryx-neffics/blob/feeb8330934a0dfec5d76186cd9f14ba08587e3c/editor/server/src/de/hpi/bpel4chor/transformation/factories/SequenceFlowFactory.java][mapTrivial][8] = } ELSE { -> IF { -> successor=start.getSuccessor()@start.getSuccessor().equals(end.getPredecessor(),) && !(start.getSuccessor().equals(end,)) -> IF { -> result=mapTask((Task) successor,)@start.getSuccessor().equals(end,) && successor instanceof Task && !(start.getSuccessor().equals(end.getPredecessor(),)) } ELSE { -> IF { -> return mapBlockActivity((BlockActivity) successor,)@start.getSuccessor().equals(end.getPredecessor(),) && !(start.getSuccessor().equals(end,)) && successor instanceof BlockActivity && !(successor instanceof Task) } ELSE { -> IF { -> return mapIntermediateEvent((IntermediateEvent) successor,)@start.getSuccessor().equals(end.getPredecessor(),) && !(successor instanceof BlockActivity) && successor instanceof IntermediateEvent && !(start.getSuccessor().equals(end,)) && !(successor instanceof Task) } ELSE { -> this.output.addError("A trivial component was not generated correctly",successor.getId(),)@!(successor instanceof BlockActivity) && start.getSuccessor().equals(end,) && !(successor instanceof IntermediateEvent) && !(start.getSuccessor().equals(end.getPredecessor(),)) && !(successor instanceof Task) -> return null@start.getSuccessor().equals(end.getPredecessor(),) && !(successor instanceof BlockActivity) && !(start.getSuccessor().equals(end,)) && !(successor instanceof IntermediateEvent) && !(successor instanceof Task) } } } -> IF { -> IF { -> return result@start.getSuccessor().equals(end.getPredecessor(),) && start.getTriggerType().equals(StartEvent.TRIGGER_MESSAGE,)&&!(this.messageHandler) && !(start.getSuccessor().equals(end,)) && successor instanceof Task && result.getNodeName().equals("sequence",) } -> return resultSequence@start.getSuccessor().equals(end.getPredecessor(),) && start.getTriggerType().equals(StartEvent.TRIGGER_MESSAGE,)&&!(this.messageHandler) && !(result.getNodeName().equals("sequence",)) && !(start.getSuccessor().equals(end,)) && successor instanceof Task } -> return result@!(start.getTriggerType().equals(StartEvent.TRIGGER_MESSAGE,)&&!(this.messageHandler)) && start.getSuccessor().equals(end.getPredecessor(),) && !(start.getSuccessor().equals(end,)) && successor instanceof Task }
results[https://github.com/mduduzik/flowframe/blob/162284e69f8cfdc7dfa5566ca6da8769a3f7c4e4/editors/oryx/frontend/src/main/java/de/hpi/bpel4chor/transformation/factories/Componentizer.java][getAttachedErrorEventSinkObject][10] = -> errorHandlers=getErrorHandlers(activity,)@ -> IF { -> return null@errorHandlers==null||errorHandlers.isEmpty() } -> LOOP { -> IF { -> IF { } ELSE { -> IF { -> this.output.addError("Each error handler must lead to the same gateway.",activity.getId(),)@!(target instanceof Gateway) && !(!(gateway.equals(targetGateway,))) && !(errorHandlers==null||errorHandlers.isEmpty()) && !(targetGateway.getGatewayType().equals(Gateway.TYPE_OR,)||targetGateway.getGatewayType().equals(Gateway.TYPE_XOR,)) && gateway==null && !(itHandler.hasNext()) -> return null@!(gateway==null) && targetGateway.getGatewayType().equals(Gateway.TYPE_OR,)||targetGateway.getGatewayType().equals(Gateway.TYPE_XOR,) && !(gateway.equals(targetGateway,)) && !(errorHandlers==null||errorHandlers.isEmpty()) && target instanceof Gateway && itHandler.hasNext() } } } } -> IF { -> this.output.addError("The outgoing transition of this error handler "+" must lead to an inclusive or"+" exclusive merge gateway.",missing.getId(),)@missing!=null && !(errorHandlers==null||errorHandlers.isEmpty()) && !(itHandler.hasNext()) -> return null@missing!=null && !(errorHandlers==null||errorHandlers.isEmpty()) && !(itHandler.hasNext()) } -> IF { -> return null@!(missing!=null) && !(errorHandlers==null||errorHandlers.isEmpty()) && gateway==null && !(itHandler.hasNext()) } -> this.output.addError("The successor of this activity "+" must be the gateway with id "+gateway.getId(),activity.getId(),)@!(gateway==null) && !(activity.getSuccessor()!=null&&activity.getSuccessor().equals(gateway,)) && !(missing!=null) && !(errorHandlers==null||errorHandlers.isEmpty()) && !(itHandler.hasNext()) -> this.output.addError("This gateway has to be the successor of the acitivity with id "+activity.getId(),gateway.getId(),)@!(gateway==null) && !(activity.getSuccessor()!=null&&activity.getSuccessor().equals(gateway,)) && !(missing!=null) && !(errorHandlers==null||errorHandlers.isEmpty()) && !(itHandler.hasNext())
results[https://github.com/MichaelSieger/Hrm/blob/f26e8665e0e04e0ccdfd0b79e5965819b207244e/de.hswt.hrm.catalog.dao.jdbc/src/de/hswt/hrm/catalog/dao/jdbc/ActivityDao.java][removeFromCurrent][1] = -> TRY {  -> checkNotNull(activity,"Activity is mandatory.",)@ -> checkArgument(activity.getId()>=0,"Activity must have a valid ID.",)@ -> TRY { -> TRY { -> stmt.setInt(1,current.getId(),)@ -> stmt.setInt(2,activity.getId(),)@ -> affected=stmt.executeUpdate()@ -> IF { -> throw new ElementNotFoundException()@affected<0 } ELSE { -> IF { -> throw new DatabaseException("Delete would accidently affect multiple rows.",)@!(affected<0) && affected>1 } } } } CATCH(SQLException) { -> throw new DatabaseException("Unkown error.",e,)@ } } CATCH(DatabaseException) {}
results[https://github.com/eclipse/stardust.ui.web/blob/b04014956ea123d48bfb21e8f0ead85a000d44ce/business-control-center/src/main/java/org/eclipse/stardust/ui/web/bcc/WorkflowFacade.java][getAllActivities][1] = -> receivedActivities=new HashSet<String>()@ -> LOOP { -> IF { -> IF { -> LOOP { -> activity=aIter.next()@aIter.hasNext() -> IF { -> receivedActivities.add(activity.getId(),)@!(receivedActivities.contains(activity.getId(),)) -> activities.add(activity,)@!(receivedActivities.contains(activity.getId(),)) } } } } }
results[https://github.com/eclipse/stardust.ide/blob/6e2bd051f3ec0356acea71abcb234f3fb62ec4ee/modeling/org.eclipse.stardust.modeling.debug/src/org/eclipse/stardust/modeling/debug/debugger/types/ActivityInstanceDigest.java][<init>][1] = -> model=(IModel) activityInstance.getActivity().getModel()@ -> activity=new ActivityDetails(activityInstance.getActivity(),)@ -> activityId='{'+model.getId()+'}'+activity.getId()@ -> activityName=activity.getName()@ -> isInteractive=activity.isInteractive()@ -> implType=activity.getImplementationType()@ -> IF { -> context=activity.getApplicationContext(PredefinedConstants.DEFAULT_CONTEXT,)@ } ELSE { -> IF { -> IF { -> context=activity.getApplicationContext(PredefinedConstants.JFC_CONTEXT,)@ } ELSE { -> context=activity.getApplicationContext(PredefinedConstants.ENGINE_CONTEXT,)@ -> application=new ApplicationDigest(activity.getApplication(),)@ } } } -> procDefId='{'+model.getId()+'}'+activityInstance.getProcessInstance().getProcessDefinition().getId()@
results[https://github.com/wayne0332/xiaojh/blob/f9ad3e0340a299371a285883c6dd1c04ce431fb1/src/com/tjxjh/action/ActivityAction.java][adminModifyActivity][1] = -> oldactivity=new Activity()@ -> oldactivity.setId(activity.getId(),)@ -> oldactivity=activityService.findByHql(user,merchant,oldactivity,)@ -> IF { -> activity.setTalking(oldactivity.getTalking(),)@oldactivity!=null -> activity.setClub(oldactivity.getClub(),)@oldactivity!=null -> activity.setMerchant(oldactivity.getMerchant(),)@oldactivity!=null -> activity.setDatetime(oldactivity.getDatetime(),)@oldactivity!=null -> activity.setHeat(oldactivity.getHeat(),)@oldactivity!=null -> activity.setParticipantCount(oldactivity.getParticipantCount(),)@oldactivity!=null } ELSE { -> return ERROR@!(oldactivity!=null) } -> upimg=activityService.uploadImage(activity,uploadImage,uploadImageFileName,UPLOAD_IMAGE_PATH+uploadImageFileName,)@oldactivity!=null -> activityService.uploadVideo(activity,uploadVideo,uploadVideoFileName,UPLOAD_IMAGE_PATH+uploadVideoFileName,)@oldactivity!=null -> IF { -> return ERROR@oldactivity!=null && !(upimg) } -> IF { -> talking=activityService.initTalking(activity,oldactivity,)@oldactivity!=null && !(activity.getStatus().equals("REFUSE",))&&!(activity.getStatus().equals("APPLY",)) && !(!(upimg)) -> activityService.addOrUpdate(talking,activity,)@oldactivity!=null && !(activity.getStatus().equals("REFUSE",))&&!(activity.getStatus().equals("APPLY",)) && !(!(upimg)) } -> activityService.update(activity,)@oldactivity!=null && !(!(upimg))
results[https://github.com/eclipse/stardust.ide/blob/62651c73a53c41a94bd00fd78462539ee067cef0/model/org.eclipse.stardust.model.bpmn2.transform/src/main/java/org/eclipse/stardust/model/bpmn2/transform/xpdl/elements/data/TaskDataFlow2Stardust.java][hasValidSourceAndTarget][1] = -> associationTarget=assoc.getTargetRef()@ -> associationSource=getFirstAssociationSource(assoc,)@ -> IF { -> failures.add("DATA ASSOCIATION TARGET NOT SET "+assoc.getId()+" Activity "+assoc.getId()+" "+activity.getName()+" in "+container.getId(),)@ } -> IF { -> failures.add("DATA ASSOCIATION SOURCE NOT SET "+assoc.getId()+" Activity "+assoc.getId()+" "+activity.getName()+" in "+container.getId(),)@ } -> IF { -> IF { -> associationTarget=Bpmn2ProxyResolver.resolveDataStoreProxy((DataStore) associationSource,BpmnModelQuery.getModelDefinitions(container,),)@associationSource instanceof DataStoreReference && associationTarget.eIsProxy() } } -> IF { -> failures.add("DATA ASSOCIATION SOURCE NOT VALID "+assoc.getId()+" Activity "+activity.getId()+" "+activity.getName()+" in "+container.getId(),)@ }
results[https://github.com/eclipse/stardust.ui.web/blob/33bf8a2f0b8dbb54042334e0f79ce3a12a217363/views-common/src/main/java/org/eclipse/stardust/ui/web/viewscommon/utils/ResubmissionUtils.java][fillListWithResubmissionActivities][1] = -> IF { -> throw new IllegalArgumentException("List for resubmission activities is null",)@resubAIs==null } -> LOOP { -> LOOP { -> pd=(ProcessDefinition) pds.next()@pds.hasNext() && !(resubAIs==null) -> ais=pd.getAllActivities().iterator()@!(resubAIs==null) -> LOOP { -> activity=(Activity) ais.next()@ais.hasNext() && !(resubAIs==null) -> handler=ActivityUtils.getEventHandler(activity,TimeStampCondition.class.getName(),"Resubmission",)@!(resubAIs==null) -> IF { -> modelActivity=new ModelResubmissionActivity(activity.getId(),pd.getId(),)@handler!=null&&activity.isInteractive() && !(resubAIs==null) -> index=resubmissionActivities.indexOf(modelActivity,)@!(resubAIs==null) -> IF { -> modelActivity=resubmissionActivities.get(index,)@index>-1 && !(resubAIs==null) } ELSE { -> resubmissionActivities.add(modelActivity,)@!(resubAIs==null) } -> modelActivity.addModelOid(model.getModelOID(),)@!(resubAIs==null) } } } }
results[https://github.com/eclipse/stardust.ide/blob/0a4c1491fd7ed820ce74bbf68d72aa03b3d0cc49/model/org.eclipse.stardust.model.bpmn2.transform/src/main/java/org/eclipse/stardust/model/bpmn2/transform/xpdl/elements/TaskDataFlow2Stardust.java][addDataFlows][2] = -> sdActivity=query.findActivity(activity,container,)@ -> IF { -> failures.add("STARDUST-ACTIVITY NOT FOUND "+activity.getId()+" "+activity.getName()+" in "+container.getId(),)@!(sdActivity==null) -> return @sdActivity==null } -> ioSpec=activity.getIoSpecification()@!(sdActivity==null) -> inputAssociations=activity.getDataInputAssociations()@!(sdActivity==null) -> outputAssociations=activity.getDataOutputAssociations()@!(sdActivity==null) -> IF { -> LOOP { -> input=addInDataMapping(assocIn,sdActivity,container,)@!(sdActivity==null) } } -> IF { -> LOOP { -> output=addOutDataMapping(assocOut,sdActivity,container,)@!(sdActivity==null) } } -> LOOP { -> IF { -> addInDataMappingWithoutAssociation(input,sdActivity,container,)@!(sdActivity==null) && !(associatedDataInputs.contains(input,)) } } -> LOOP { -> IF { -> addOutDataMappingWithoutAssociation(output,sdActivity,container,)@!(sdActivity==null) && !(associatedDataOutputs.contains(output,)) } }
results[https://github.com/jak786/VASE/blob/694506af8be165407375c494a306a31bb945aa73/editor/server/src/de/hpi/bpmn2bpel/factories/ParticipantsFactory.java][getTypeFromAssociations][22] = -> LOOP { } ELSE { -> IF { -> source=association.getSource()@!(association.getDirection().equals(Association.DIRECTION_NONE,)) && association.getDirection().equals(Association.DIRECTION_TO,) -> IF { -> sourceId=(Task) source.getId()@source instanceof ServiceTask||source instanceof SendTask && targetId==null&&sourceId==null&&it.hasNext() } } -> source=(Activity) association.getSource()@ -> IF { -> targetId=source.getId()@source.isReceiving() && targetId==null&&sourceId==null&&it.hasNext() } } -> IF { -> IF { -> return messageFlow.getTarget().getParentSwimlane().getName()@messageFlow!=null&&messageFlow.getTarget()!=null && sourceId!=null } } -> IF { -> messageFlows=this.diagram.getMessageFlowsWithTarget(targetId,)@targetId!=null && !(sourceId!=null) -> IF { -> return messageFlows.get(0,).getSource().getParentSwimlane().getName()@targetId!=null && !(sourceId!=null) && !(messageFlows.isEmpty()) } }
results[https://github.com/moy/JFlex/blob/602e504375e589b232665595aa544ad7b4843740/examples/interpreter/Tident.java][getSmartTaskInfosByPkgId][1] = -> TRY {  -> IF { -> return null@swPrcs==null } -> LOOP { -> IF { -> LOOP { -> act=(Activity) actIter.next()@actIter.hasNext() && !(swPrcs==null) -> actId=act.getId()@!(swPrcs==null) -> attrs=act.getAnyAttribute()@!(swPrcs==null) -> IF { -> LOOP { -> IF { -> activityPerformerMap.put(actId,attrValue,)@!(swPrcs==null) } } } } } } -> IF { -> LOOP { -> actId=taskDef.getExtendedPropertyValue("activityId",)@!(swPrcs==null) } ELSE { -> smartTaskInfo.setAssigningName((String) activityPerformerMap.get(actId,),)@!(swPrcs==null) -> smartTaskInfo.setId(actId,)@!(swPrcs==null) } } } CATCH(Exception) {}
results[https://github.com/chrismarx/cmestemp22/blob/87a2a22c06db2438a193236c1f3391d4fe1db06a/server/src/main/java/org/eurekastreams/server/action/execution/stream/StoreStreamHashTagsForActivityStrategyImpl.java][execute][1] = -> log.info("Finding hashtags for activity #"+inActivity.getId(),)@ -> scopeType=inActivity.getRecipientStreamScope().getScopeType()@ -> IF { -> log.info("This activity isn't a group or person stream - not handled.",)@!(scopeType!=ScopeType.GROUP&&scopeType!=ScopeType.PERSON) -> return @scopeType!=ScopeType.GROUP&&scopeType!=ScopeType.PERSON } -> recipientStreamKey=inActivity.getRecipientStreamScope().getUniqueKey()@!(scopeType!=ScopeType.GROUP&&scopeType!=ScopeType.PERSON) -> hashTagStrings=getHashTags(inActivity,)@!(scopeType!=ScopeType.GROUP&&scopeType!=ScopeType.PERSON) -> LOOP { -> IF { -> log.debug("Adding StreamHashTag "+hashTag.getContent()+" for direct recipient stream of type "+scopeType+", key: "+recipientStreamKey+", activity id: #"+inActivity.getId(),)@log.isDebugEnabled() && !(hashTagStrings.size()==0) && !(scopeType!=ScopeType.GROUP&&scopeType!=ScopeType.PERSON) } -> streamHashTag=new StreamHashTag(hashTag,inActivity,recipientStreamKey,scopeType,)@!(hashTagStrings.size()==0) && !(scopeType!=ScopeType.GROUP&&scopeType!=ScopeType.PERSON) -> IF { -> IF { -> orgHierarchyShortNames=getAllOrgShortNamesInHierarchy(inActivity.getRecipientParentOrg().getId(),)@inActivity.getIsDestinationStreamPublic() && orgHierarchyShortNames==null && !(hashTagStrings.size()==0) && !(scopeType!=ScopeType.GROUP&&scopeType!=ScopeType.PERSON) } -> LOOP { -> IF { -> log.debug("Adding StreamHashTag "+hashTag.getContent()+" for public "+scopeType+" stream's parent org tree, organization "+orgShortName+", activity id: #"+inActivity.getId(),)@log.isDebugEnabled() && inActivity.getIsDestinationStreamPublic() && !(hashTagStrings.size()==0) && !(scopeType!=ScopeType.GROUP&&scopeType!=ScopeType.PERSON) } -> streamHashTag=new StreamHashTag(hashTag,inActivity,orgShortName,ScopeType.ORGANIZATION,)@inActivity.getIsDestinationStreamPublic() && !(hashTagStrings.size()==0) && !(scopeType!=ScopeType.GROUP&&scopeType!=ScopeType.PERSON) } } }
results[https://github.com/mortenk/fll/blob/65e1a886ef80c611de2573763f90f5927c22f124/src/main/java/no/fll/plan/bruteforce/BruteForcePlanFactory.java][set_activity][1] = -> activity=activitySchedule.getActivity()@ -> IF { -> throw new RuntimeException("Impossible mission, change parameters and try again",)@minute>=TOTAL_MINUTES } -> LOOP { -> IF { -> team.set(minute,activity.getDuration(),activity.getId(),)@!(team.hasDone(activity.getId(),))&&team.hasTime(minute,activity.getDuration(),slack,)&&activitySchedule.isFree(minute,) && !(minute>=TOTAL_MINUTES) && !(teams.size() > 0) -> activitySchedule.set(minute,team.getTeam(),)@!(team.hasDone(activity.getId(),))&&team.hasTime(minute,activity.getDuration(),slack,)&&activitySchedule.isFree(minute,) && !(minute>=TOTAL_MINUTES) && !(teams.size() > 0) -> IF { -> return true@teams.size() > 0 && !(team.hasDone(activity.getId(),))&&team.hasTime(minute,activity.getDuration(),slack,)&&activitySchedule.isFree(minute,) && !(minute>=TOTAL_MINUTES) && finished(teams,activity,) } ELSE { -> IF { -> rc=set_activity(minute+activity.getDuration(),TOTAL_MINUTES,teams,activitySchedule,slack,)@teams.size() > 0 && !(team.hasDone(activity.getId(),))&&team.hasTime(minute,activity.getDuration(),slack,)&&activitySchedule.isFree(minute,) && minute<TOTAL_MINUTES-1 && !(minute>=TOTAL_MINUTES) && !(finished(teams,activity,)) -> IF { -> team.clear(minute,activity.getDuration(),)@!(team.hasDone(activity.getId(),))&&team.hasTime(minute,activity.getDuration(),slack,)&&activitySchedule.isFree(minute,) && minute<TOTAL_MINUTES-1 && !(minute>=TOTAL_MINUTES) && !(teams.size() > 0) && !(finished(teams,activity,)) -> activitySchedule.clear(minute,team.getTeam(),)@!(team.hasDone(activity.getId(),))&&team.hasTime(minute,activity.getDuration(),slack,)&&activitySchedule.isFree(minute,) && minute<TOTAL_MINUTES-1 && !(minute>=TOTAL_MINUTES) && !(teams.size() > 0) && finished(teams,activity,) } } ELSE { -> return finished(teams,activity,)@teams.size() > 0 && !(team.hasDone(activity.getId(),))&&team.hasTime(minute,activity.getDuration(),slack,)&&activitySchedule.isFree(minute,) && !(minute>=TOTAL_MINUTES) && !(minute<TOTAL_MINUTES-1) && !(finished(teams,activity,)) } } } } -> IF { -> return true@!(minute>=TOTAL_MINUTES) && !(teams.size() > 0) && finished(teams,activity,) } -> return set_activity(minute+activity.getDuration(),TOTAL_MINUTES,teams,activitySchedule,slack,)@!(minute>=TOTAL_MINUTES) && !(teams.size() > 0) && !(finished(teams,activity,))
results[https://github.com/aidGer/aidGer/blob/a3c366399df7d96d4c2e3a153aa55ab63976c919/src/de/aidger/view/models/ActivityTableModel.java][getRowValue][1] = -> TRY { -> activity=(Activity) model@ -> return activity.getId()@ -> IF { -> return assistantCache.get(activity.getAssistantId(),)@assistantCache.containsKey(activity.getAssistantId(),) } ELSE { -> assistant=(activity.getAssistantId()==null)?new UIAssistant():new UIAssistant(new Assistant().getById(activity.getAssistantId(),),)@!(assistantCache.containsKey(activity.getAssistantId(),)) -> return assistant@!(assistantCache.containsKey(activity.getAssistantId(),)) } -> IF { -> return courseCache.get(activity.getCourseId(),)@courseCache.containsKey(activity.getCourseId(),) } ELSE { -> course=(activity.getCourseId()==null)?new UICourse():new UICourse(new Course().getById(activity.getCourseId(),),)@!(courseCache.containsKey(activity.getCourseId(),)) -> return course@!(courseCache.containsKey(activity.getCourseId(),)) } -> return activity.getDate()@ -> return activity.getSender()@ -> return activity.getProcessor()@ -> return activity.getType()@ -> return activity.getDocumentType()@ -> return activity.getContent()@ -> return activity.getRemark()@ }
results[https://github.com/lmco/eurekastreams/blob/726a3e93735b5ed84385eae2db65ba64ca3d00c7/server/src/main/java/org/eurekastreams/server/persistence/mappers/stream/PostCachedActivity.java][execute][1] = -> type=activity.getRecipientStreamScope().getScopeType()@ -> recipientUniqueKey=activity.getRecipientStreamScope().getUniqueKey()@ -> activityId=activity.getId()@ -> IF { -> updateActivitiesByFollowingCacheLists(person.getEntityId(),activityId,)@type==ScopeType.PERSON } ELSE { -> IF { -> IF { -> person=getPersonModelViewByAccountIdMapper.execute(activity.getActorId(),)@type==ScopeType.RESOURCE&&activity.getActorType()==EntityType.PERSON && activity.getShowInStream() && type==ScopeType.PERSON -> updateActivitiesByFollowingCacheLists(person.getEntityId(),activityId,)@type==ScopeType.RESOURCE&&activity.getActorType()==EntityType.PERSON && type==ScopeType.PERSON } } } -> IF { -> log.info("Adding activity with a shared resource (id:"+activity.getSharedLink().getStreamScope().getId()+") to the top of the shared resource's cached activity stream.",)@activity.getSharedLink()!=null && type==ScopeType.PERSON -> getCache().addToTopOfList(CacheKeys.ENTITY_STREAM_BY_SCOPE_ID+activity.getSharedLink().getStreamScope().getId(),activityId,)@activity.getSharedLink()!=null && type==ScopeType.PERSON } -> IF { -> log.trace("Adding activity id "+activityId+" into everyone activity list.",)@type==ScopeType.PERSON -> getCache().addToTopOfList(CacheKeys.EVERYONE_ACTIVITY_IDS,activityId,)@type==ScopeType.PERSON }
results[https://github.com/maninsoft/smartworksV3/blob/efab25b31722ead6a41ae113a48587f1d61034b8/src/net/smartworks/server/service/util/ModelConverter.java][getSmartTaskInfosByPkgId][1] = -> TRY {  -> IF { -> return null@swPrcs==null } -> LOOP { -> IF { -> LOOP { -> act=(Activity) actIter.next()@actIter.hasNext() && !(swPrcs==null) -> actId=act.getId()@!(swPrcs==null) -> attrs=act.getAnyAttribute()@!(swPrcs==null) -> IF { -> LOOP { -> IF { -> activityPerformerMap.put(actId,attrValue,)@!(swPrcs==null) } } } -> impl=act.getImplementation()@!(swPrcs==null) } } } -> IF { -> LOOP { -> actId=taskDef.getExtendedPropertyValue("activityId",)@!(swPrcs==null) } ELSE { -> smartTaskInfo.setAssigningName((String) activityPerformerMap.get(actId,),)@!(swPrcs==null) -> smartTaskInfo.setId(actId,)@!(swPrcs==null) -> sortingTaskMap.put(Integer.parseInt(actId,),smartTaskInfo,)@!(swPrcs==null) } } -> IF { -> return null@sortingTaskMap==null||sortingTaskMap.size()==0 && !(swPrcs==null) } } CATCH(Exception) {}
results[https://github.com/gpuenteallott/kaerus-core/blob/9f2f588d063ae41e513bbaa3b095ad4bc6f4497f/src/com/kaerusproject/db/ActivityDAO.java][update][1] = -> TRY { -> statement=con.prepareStatement(searchQuery,)@ -> statement.setString(1,activity.getName(),)@ -> statement.setInt(2,activity.getWorkGroupId(),)@ -> statement.setString(3,activity.getRepoURL(),)@ -> statement.setInt(4,activity.getNextActivityId(),)@ -> statement.setInt(5,activity.getPolicyId(),)@ -> statement.setInt(6,activity.getId(),)@ -> rows=statement.executeUpdate()@ } CATCH(SQLException) { -> e.printStackTrace()@ } FINALLY { -> IF { -> TRY { -> statement.close()@statement!=null } FINALLY { -> System.err.println(e,)@ } } -> IF { -> TRY { -> con.close()@con!=null } FINALLY { -> System.err.println(e,)@ } } }
results[https://github.com/Sage-Bionetworks/SynapseWebClient/blob/35a5a21bb9125e69a288e7151e0be697ed2b028b/src/main/java/org/sagebionetworks/web/client/widget/provenance/ProvUtils.java][buildProvGraph][1] = -> LOOP { -> type=ActivityTypeUtil.get(act,)@ -> activityNode=new ActivityGraphNode(createUniqueNodeId(),act.getId(),act.getName(),type,act.getModifiedBy(),act.getModifiedOn(),false,)@ -> idToNode.put(activityNode.getId(),activityNode,)@ -> graph.addNode(activityNode,)@ -> activityNodes.put(act,activityNode,)@ -> IF { -> itr=act.getUsed().iterator()@act.getUsed()!=null -> LOOP { -> IF { -> graph.addEdge(new ProvGraphEdge(activityNode,entityNode,),)@ } ELSE { -> IF { -> graph.addEdge(new ProvGraphEdge(activityNode,externalGraphNode,),)@ } } } } } -> LOOP { -> act=processedActivities.get(activityId,)@ -> IF { -> graph.addEdge(new ProvGraphEdge(entityNodes.get(ref,),activityNodes.get(act,),),)@act!=null } }
results[https://github.com/dpalmisano/NoTube-Beancounter-2.0/blob/accf4159e3a55674e83dc9cc557f9e34e78eabea/commons/alog/core/src/main/java/tv/notube/commons/alog/mybatis/ActivityLogDao.java][insertActivity][1] = -> mapper=session.getMapper(ActivityLogMapper.class,)@ -> TRY { -> mapper.insertActivity(activity,)@ -> LOOP { -> IF { -> mapper.insertStringField(activity.getId(),field,)@ } ELSE { -> IF { -> mapper.insertIntegerField(activity.getId(),field,)@ } ELSE { -> IF { -> mapper.insertDatetimeField(activity.getId(),field,)@ } ELSE { -> IF { -> mapper.insertURLField(activity.getId(),field,)@ } ELSE { -> IF { -> bytesField=(BytesField) field@ -> bytes=bytesField.getValue().getBytes()@ -> mapper.insertBytesField(activity.getId(),bytesField.getName(),bytes,)@ } } } } } } } FINALLY { -> session.close()@ }
results[https://github.com/chrismarx/cmestemp22/blob/36078fd7d7c622c2ca3203f503a550a931d47084/server/src/main/java/org/eurekastreams/server/persistence/mappers/stream/PostCachedActivity.java][execute][1] = -> type=activity.getRecipientStreamScope().getScopeType()@ -> recipientUniqueKey=activity.getRecipientStreamScope().getUniqueKey()@ -> activityId=activity.getId()@ -> IF { -> updateActivitiesByFollowingCacheLists(person.getEntityId(),activityId,)@type==ScopeType.PERSON } ELSE { } ELSE { -> IF { -> IF { -> person=getPersonModelViewByAccountIdMapper.execute(activity.getActorId(),)@type==ScopeType.RESOURCE&&activity.getActorType()==EntityType.PERSON && activity.getShowInStream() && type==ScopeType.PERSON && type==ScopeType.GROUP -> updateActivitiesByFollowingCacheLists(person.getEntityId(),activityId,)@type==ScopeType.RESOURCE&&activity.getActorType()==EntityType.PERSON && type==ScopeType.PERSON && type==ScopeType.GROUP } } } -> IF { -> log.info("Adding activity with a shared resource (id:"+activity.getSharedLink().getStreamScope().getId()+") to the top of the shared resource's cached activity stream.",)@activity.getSharedLink()!=null && type==ScopeType.PERSON -> getCache().addToTopOfList(CacheKeys.ENTITY_STREAM_BY_SCOPE_ID+activity.getSharedLink().getStreamScope().getId(),activityId,)@activity.getSharedLink()!=null && type==ScopeType.PERSON } -> IF { -> log.trace("Adding activity id "+activityId+" into everyone activity list.",)@type==ScopeType.PERSON -> getCache().addToTopOfList(CacheKeys.EVERYONE_ACTIVITY_IDS,activityId,)@type==ScopeType.PERSON -> LOOP { -> log.trace("Adding activity id "+activityId+" to organization cache list "+orgShortName,)@type==ScopeType.PERSON -> getCache().addToTopOfList(CacheKeys.ACTIVITY_IDS_FOR_ORG_BY_SHORTNAME_RECURSIVE+orgShortName,activityId,)@type==ScopeType.PERSON } }
results[https://github.com/NCIP/labviewer/blob/32f90d996aae32f04c6438357a8a75d61df4a9e7/CTOMDataPersistence-PG/src/gov/nih/nci/ctom/ctlab/handler/ActivityHandler.java][persist][2] = -> TRY {  -> act=protocol.getHealthCareSite().getStudyParticipantAssignment().getActivity()@ -> TRY { -> act.setId(actId,)@ -> ps.setString(3,String.valueOf(act.getStartDateOrig(),),)@ -> ps.setString(4,String.valueOf(act.getStartDateOrig(),),)@ -> TRY { -> startTmp=new SimpleDateFormat("yyyyMMddHHmmss",).parse(act.getStartDateOrig(),)@ -> stopTmp=new SimpleDateFormat("yyyyMMddHHmmss",).parse(act.getStartDateOrig(),)@ } CATCH(ParseException) { -> logger.error("error creating activity",e,)@ } -> IF { -> act.getObservation().setActivityId(act.getId(),)@act.getObservation()!=null } -> IF { -> act.getProcedure().setId(act.getId(),)@act.getProcedure()!=null } -> IF { -> act.getStudyTimePoint().setActivityId(act.getId(),)@act.getStudyTimePoint()!=null } -> logger.error("Error creating activity",se,)@ -> throw new Exception(se.getMessage(),)@ } FINALLY { -> rs=SQLHelper.closeResultSet(rs,)@ -> ps=SQLHelper.closePreparedStatement(ps,)@ } } CATCH(Exception) {}
results[https://github.com/maihde/org.eclipse.rap/blob/adabffc3369e5ed8b02bb3eace6bb2251c6869eb/bundles/org.eclipse.rap.ui.workbench/Eclipse UI/org/eclipse/ui/internal/activities/MutableActivityManager.java][updateActivity][2] = -> activityRequirementBindings=(Set) activityRequirementBindingsByActivityId.get(activity.getId(),)@ -> activityRequirementBindingsChanged=activity.setActivityRequirementBindings((activityRequirementBindings!=null)?activityRequirementBindings:Collections.EMPTY_SET,)@ -> activityPatternBindings=(Set) activityPatternBindingsByActivityId.get(activity.getId(),)@ -> activityPatternBindingsChanged=activity.setActivityPatternBindings((activityPatternBindings!=null)?activityPatternBindings:Collections.EMPTY_SET,)@ -> activityDefinition=(ActivityDefinition) activityDefinitionsById.get(activity.getId(),)@ -> definedChanged=activity.setDefined(activityDefinition!=null,)@ -> ref=(IEvaluationReference) refsByActivityDefinition.get(activityDefinition,)@ -> IF { -> activity.setExpression(activityDefinition.getEnabledWhen(),)@activityDefinition!=null&&evaluationService!=null -> IF { -> TRY { -> ref=evaluationService.addEvaluationListener(activityDefinition.getEnabledWhen(),enabledWhenListener,activityDefinition.getId(),)@ref==null&&activityDefinition.getEnabledWhen()!=null && activityDefinition!=null&&evaluationService!=null } -> IF { -> refsByActivityDefinition.put(activityDefinition,ref,)@ref!=null && ref==null&&activityDefinition.getEnabledWhen()!=null && activityDefinition!=null&&evaluationService!=null } } } -> IF { -> enabledChanged=activity.setEnabled(ref.evaluate(evaluationService.getCurrentState(),),)@ref!=null&&evaluationService!=null -> IF { -> this.enabledActivityIds.add(activity.getId(),)@newRef&&activity.isEnabled() } } ELSE { -> enabledChanged=activity.setEnabled(enabledActivityIds.contains(activity.getId(),),)@ } -> nameChanged=activity.setName((activityDefinition!=null)?activityDefinition.getName():null,)@ -> descriptionChanged=activity.setDescription((activityDefinition!=null)?activityDefinition.getDescription():null,)@ -> defaultEnabledChanged=activity.setDefaultEnabled(activityRegistry.getDefaultEnabledActivities().contains(activity.getId(),),)@ -> IF { -> return new ActivityEvent(activity,activityRequirementBindingsChanged,activityPatternBindingsChanged,definedChanged,descriptionChanged,enabledChanged,nameChanged,defaultEnabledChanged,)@activityRequirementBindingsChanged||activityPatternBindingsChanged||definedChanged||enabledChanged||nameChanged||descriptionChanged||defaultEnabledChanged }
results[https://github.com/unpush/apache-incubator-shindig/blob/811615c6b837aee97310e655a6e60883d8a09b98/java/samples/src/main/java/org/apache/shindig/social/opensocial/jpa/spi/ActivityServiceDb.java][createActivity][2] = -> TRY {  -> TRY { -> activityDb=new ActivityDb()@ -> activityDb.setPostedTime(new Date().getTime(),)@ -> activityDb.setAppId(appId,)@ -> activityDb.setUserId(uid,)@ -> activityDb.setId(activity.getId(),)@ -> activityDb.setBodyId(activity.getBodyId(),)@ -> activityDb.setBody(activity.getBody(),)@ -> activityDb.setExternalId(activity.getExternalId(),)@ -> activityDb.setTitleId(activity.getTitleId(),)@ -> activityDb.setTitle(activity.getTitle(),)@ -> activityDb.setUpdated(new Date(),)@ -> activityDb.setPriority(activity.getPriority(),)@ -> activityDb.setStreamFaviconUrl(activity.getStreamFaviconUrl(),)@ -> activityDb.setStreamSourceUrl(activity.getStreamSourceUrl(),)@ -> activityDb.setStreamTitle(activity.getStreamTitle(),)@ -> activityDb.setStreamUrl(activity.getStreamUrl(),)@ -> activityDb.setUrl(activity.getUrl(),)@ -> IF { -> activityDb.setMediaItems(mediaItems,)@ } -> IF { -> activityDb.setTemplateParams(activity.getTemplateParams(),)@activity.getTemplateParams()!=null } -> entityManager.persist(activityDb,)@ } CATCH(Exception) { -> throw new ProtocolException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"Failed to create activity",e,)@ } } CATCH(ProtocolException) {}
results[https://github.com/socialsensor/socialmedia-abstractions/blob/30cbd24a163dce628e5fbe22fd1db82da72a964d/src/main/java/eu/socialsensor/framework/abstractions/gplus/GooglePlusItem.java][<init>][2] = -> reference=SocialNetworkSource.GooglePlus+"#"+activity.getId()@
results[https://github.com/NUBIC/psc-mirror/blob/dbe84c2afe3a983137ab2a2fa0422f9d77259f17/src/main/java/edu/northwestern/bioinformatics/studycalendar/web/activity/AdvancedEditActivityCommand.java][updateExistingUri][4] = -> LOOP { -> IF { -> templateName=indexValue.concat(".",).concat("template",)@ -> activityProperty1=activityPropertyDao.getByNamespaceAndName(activity.getId(),"uri",templateName,)@ -> IF { -> activityProperty1=new ActivityProperty()@activityProperty1==null -> activityProperty1.setActivity(activity,)@activityProperty1==null -> activityProperty1.setNamespace(namespace,)@activityProperty1==null -> activityProperty1.setName(templateName,)@activityProperty1==null -> activityProperty1.setValue(getExistingUri().get(entry.getKey(),).getTemplateValue(),)@getExistingUri().get(entry.getKey(),).getTemplateValue()!=null && activityProperty1==null } ELSE { -> activityProperty1.setValue(getExistingUri().get(entry.getKey(),).getTemplateValue(),)@getExistingUri().get(entry.getKey(),).getTemplateValue()!=null && !(activityProperty1==null) } -> activityPropertyDao.save(activityProperty1,)@ } -> IF { -> textName=indexValue.concat(".",).concat("text",)@ -> activityProperty2=activityPropertyDao.getByNamespaceAndName(activity.getId(),"uri",textName,)@ -> IF { -> activityProperty2=new ActivityProperty()@activityProperty2==null -> activityProperty2.setActivity(activity,)@activityProperty2==null -> activityProperty2.setNamespace(namespace,)@activityProperty2==null -> activityProperty2.setName(textName,)@activityProperty2==null -> activityProperty2.setValue(getExistingUri().get(entry.getKey(),).getTemplateValue(),)@activityProperty2==null && getExistingUri().get(entry.getKey(),).getTextValue()!=null } ELSE { -> activityProperty2.setValue(getExistingUri().get(entry.getKey(),).getTextValue(),)@getExistingUri().get(entry.getKey(),).getTextValue()!=null && !(activityProperty2==null) } -> activityPropertyDao.save(activityProperty2,)@ } }
results[https://github.com/julianchurchill/Topical/blob/0207603710f3e026c3336fda4fc7fa1da268aed1/src/com/ChewieLouie/Topical/GooglePlus.java][extractDataFromActivity][1] = -> IF { -> values=new HashMap<DataType, String>()@ -> putString(values,DataType.AUTHOR_ID,activity.getActor().getId(),)@activity!=null -> putString(values,DataType.AUTHOR_IMAGE,activity.getActor().getImage().getUrl(),)@activity!=null -> authorName=activity.getActor().getDisplayName()@activity!=null -> putString(values,DataType.AUTHOR_NAME,authorName,)@ -> putString(values,DataType.COMMENTS,activity.getPlusObject().getReplies().toString(),)@activity!=null -> IF { -> putString(values,DataType.MODIFICATION_TIME,activity.getUpdated().toStringRfc3339(),)@activity!=null && activity.getUpdated()!=null } ELSE { -> putString(values,DataType.MODIFICATION_TIME,activity.getPublished().toStringRfc3339(),)@activity!=null && !(activity.getUpdated()!=null) } -> putString(values,DataType.POST_CONTENT,activity.getPlusObject().getContent(),)@activity!=null -> putString(values,DataType.POST_ID,activity.getId(),)@activity!=null -> putString(values,DataType.SUMMARY,activity.getTitle(),)@activity!=null -> putString(values,DataType.TITLE,authorName,)@ -> putString(values,DataType.URL,activity.getUrl(),)@activity!=null -> IF { -> reshareAuthorName=activity.getPlusObject().getActor().getDisplayName()@activity!=null && activity.getPlusObject().getActor()!=null } -> putString(values,DataType.RESHARE_AUTHOR_NAME,reshareAuthorName,)@ }
results[https://github.com/maninsoft/smartworksV3/blob/9f44e899456163adcf3e8a1fa47fcfb263177b58/src/net/smartworks/server/engine/process/monitoring/manager/impl/MonXpdlManagerImpl.java][setActivitiesStatus][1] = -> TRY {  -> IF { -> return @acts==null||taskMap==null||taskMap.isEmpty() } -> LOOP { -> act=(Activity) actIter.next()@!(acts==null||taskMap==null||taskMap.isEmpty()) && actIter.hasNext() && !(actList==null||actList.isEmpty()) -> actId=act.getId()@!(acts==null||taskMap==null||taskMap.isEmpty()) && !(actList==null||actList.isEmpty()) -> task=(TskTask) taskMap.get(actId,)@!(acts==null||taskMap==null||taskMap.isEmpty()) && !(actList==null||actList.isEmpty()) -> IF { -> act.setStatus("READY",)@!(acts==null||taskMap==null||taskMap.isEmpty()) && !(actList==null||actList.isEmpty()) } ELSE { -> IF { -> xpdlTask=act.getImplementation().getTask()@!(acts==null||taskMap==null||taskMap.isEmpty()) && !(actList==null||actList.isEmpty()) -> IF { -> IF { -> act.setStatus("DELAYED",)@!(acts==null||taskMap==null||taskMap.isEmpty()) && !(actList==null||actList.isEmpty()) } ELSE { -> act.setStatus("PROCESSING",)@!(acts==null||taskMap==null||taskMap.isEmpty()) && !(actList==null||actList.isEmpty()) } } ELSE { -> act.setStatus("PROCESSING",)@!(acts==null||taskMap==null||taskMap.isEmpty()) && !(actList==null||actList.isEmpty()) } } ELSE { -> IF { -> act.setStatus("ACTIVE",)@!(acts==null||taskMap==null||taskMap.isEmpty()) && !(actList==null||actList.isEmpty()) } ELSE { -> IF { -> act.setStatus("RETURNED",)@!(acts==null||taskMap==null||taskMap.isEmpty()) && !(actList==null||actList.isEmpty()) } ELSE { -> IF { -> act.setStatus("SUSPENDED",)@!(acts==null||taskMap==null||taskMap.isEmpty()) && !(actList==null||actList.isEmpty()) } ELSE { -> IF { -> act.setStatus("TERMINATED",)@!(acts==null||taskMap==null||taskMap.isEmpty()) && !(actList==null||actList.isEmpty()) } ELSE { -> IF { -> act.setStatus("SUSPENDED",)@!(acts==null||taskMap==null||taskMap.isEmpty()) && !(actList==null||actList.isEmpty()) } ELSE { -> act.setStatus("COMPLETED",)@!(acts==null||taskMap==null||taskMap.isEmpty()) && !(actList==null||actList.isEmpty()) } } } } } } } } } CATCH(Exception) {}
results[https://github.com/lmco/eurekastreams/blob/fbf5852768b50308685fc12583d92818406d9623/server/src/main/java/org/eurekastreams/server/service/opensocial/spi/ActivityServiceImpl.java][convertActivityFromOSToEureka][2] = -> outMap=new HashMap<String, String>()@ -> outMap.put("appId",inOSActivity.getAppId(),)@ -> IF { -> outMap.put("body","body",)@ } ELSE { -> outMap.put("body",inOSActivity.getBody(),)@!(inOSActivity.getBody()==null) } -> outMap.put("bodyId",inOSActivity.getBodyId(),)@ -> outMap.put("id",inOSActivity.getExternalId(),)@ -> outMap.put("openSocialId",inOSActivity.getId(),)@ -> IF { -> outMap.put("updated",inOSActivity.getUpdated().toString(),)@inOSActivity.getUpdated()!=null } -> IF { -> outMap.put("postedTime",inOSActivity.getPostedTime().toString(),)@inOSActivity.getPostedTime()!=null } -> IF { -> outMap.put("priority",Float.valueOf(0,).toString(),)@ } ELSE { -> outMap.put("priority",inOSActivity.getPriority().toString(),)@!(inOSActivity.getPriority()==null) } -> outMap.put("streamFaviconUrl",inOSActivity.getStreamFaviconUrl(),)@ -> outMap.put("streamSourceUrl",inOSActivity.getStreamSourceUrl(),)@ -> outMap.put("streamTitle",inOSActivity.getStreamTitle(),)@ -> outMap.put("streamUrl",inOSActivity.getStreamUrl(),)@ -> IF { -> LOOP { -> outMap.put(currentEntry.getKey(),currentEntry.getValue(),)@ } } -> IF { -> outMap.put("content",inOSActivity.getTitle(),)@inOSActivity.getTitle()!=null&&inOSActivity.getTitle().length()>0 } ELSE { -> outMap.put("content",inOSActivity.getTitleId(),)@!(inOSActivity.getTitle()!=null&&inOSActivity.getTitle().length()>0) } -> outMap.put("url",inOSActivity.getUrl(),)@ -> outMap.put("userId",inOSActivity.getUserId(),)@
results[https://github.com/Cybion-Italy/elderspaces/blob/24e926a2c39ac4dd31490fe4a537d7da028b474d/trunk/activity-manager/src/main/java/eu/elderspaces/activities/core/SimpleActivityManager.java][handlePostObject][1] = -> TRY {  -> IF { -> IF { -> entitiesRepository.postActivity(postObject,eventTime,)@target==null -> socialNetworkRepository.postActivity(user.getId(),postObject.getId(),eventTime,)@target==null } ELSE { -> IF { -> entitiesRepository.postActivity(postObject,eventTime,)@target.getClass()==Event.class && target==null -> socialNetworkRepository.postEventActivity(user.getId(),postObject.getId(),target.getId(),eventTime,)@target.getClass()==Event.class && !(target==null) } ELSE { -> IF { -> entitiesRepository.postActivity(postObject,eventTime,)@target.getClass()==Club.class && target.getClass()==Event.class && target==null -> socialNetworkRepository.postClubActivity(user.getId(),postObject.getId(),target.getId(),eventTime,)@target.getClass()==Club.class && !(target.getClass()==Event.class) && !(target==null) } ELSE { -> throw new InvalidActivityStreamException("Invalid Target type",)@!(target.getClass()==Club.class) && !(target.getClass()==Event.class) && !(target==null) } } } } ELSE { -> IF { -> IF { -> entitiesRepository.deleteActivity(postObject,eventTime,)@target==null -> socialNetworkRepository.deleteActivity(user.getId(),postObject.getId(),eventTime,)@target==null } ELSE { -> IF { -> entitiesRepository.deleteActivity(postObject,eventTime,)@target.getClass()==Event.class && target==null -> socialNetworkRepository.deleteEventActivity(user.getId(),postObject.getId(),target.getId(),eventTime,)@target.getClass()==Event.class && !(target==null) } ELSE { -> IF { -> entitiesRepository.deleteActivity(postObject,eventTime,)@target.getClass()==Club.class && target.getClass()==Event.class && target==null -> socialNetworkRepository.deleteClubActivity(user.getId(),postObject.getId(),target.getId(),eventTime,)@target.getClass()==Club.class && !(target.getClass()==Event.class) && !(target==null) } ELSE { -> throw new InvalidActivityStreamException("Invalid Target type",)@!(target.getClass()==Club.class) && !(target.getClass()==Event.class) && !(target==null) } } } } } } CATCH(InvalidActivityStreamException) {}
results[https://github.com/maninsoft/smartworksV3/blob/11a7838a0d8343a0df8ca4505282ea0e3748d1a0/src/net/smartworks/server/engine/process/deploy/manager/impl/DepXpdlManagerImpl.java][deployActivities][1] = -> TRY {  -> IF { -> return null@acts==null } -> IF { -> return null@actList==null||actList.isEmpty() && !(acts==null) } -> LOOP { -> act=(Activity) actIter.next()@actIter.hasNext() && !(actList==null||actList.isEmpty()) && !(acts==null) -> actId=act.getId()@!(actList==null||actList.isEmpty()) && !(acts==null) -> actMap.put(actId,act,)@!(actList==null||actList.isEmpty()) && !(acts==null) -> taskDef.setObjId(new StringBuffer(objIdPrefix,).append(CommonUtil.BAR,).append(actId,).toString(),)@!(actList==null||actList.isEmpty()) && !(acts==null) -> taskDef.setName(act.getName(),)@!(actList==null||actList.isEmpty()) && !(acts==null) -> performers=act.getPerformers()@!(actList==null||actList.isEmpty()) && !(acts==null) -> IF { -> attrs=act.getImplementation().getTask().getTaskApplication().getAnyAttribute()@!(actList==null||actList.isEmpty()) && act.getImplementation()!=null&&act.getImplementation().getTask()!=null&&act.getImplementation().getTask().getTaskApplication()!=null && !(acts==null) -> IF { -> externalFormId=act.getImplementation().getTask().getTaskApplication().getId()@!(actList==null||actList.isEmpty()) && act.getImplementation()!=null&&act.getImplementation().getTask()!=null&&act.getImplementation().getTask().getTaskApplication()!=null && !(acts==null) -> actualParameters=act.getImplementation().getTask().getTaskApplication().getActualParameters()@!(actList==null||actList.isEmpty()) && act.getImplementation()!=null&&act.getImplementation().getTask()!=null&&act.getImplementation().getTask().getTaskApplication()!=null && !(acts==null) } ELSE { -> taskDef.setForm(CommonUtil.toDefault(act.getImplementation().getTask().getTaskApplication().getName(),MisUtil.defaultForm(),),)@!(actList==null||actList.isEmpty()) && act.getImplementation()!=null&&act.getImplementation().getTask()!=null&&act.getImplementation().getTask().getTaskApplication()!=null && !(acts==null) } } -> IF { -> subFlow=act.getImplementation().getSubFlow()@act.getImplementation()!=null&&act.getImplementation().getSubFlow()!=null && !(actList==null||actList.isEmpty()) && !(acts==null) } -> IF { -> taskService=act.getImplementation().getTask().getTaskService()@!(actList==null||actList.isEmpty()) && !(acts==null) && act.getImplementation()!=null&&act.getImplementation().getTask()!=null&&act.getImplementation().getTask().getTaskService()!=null } -> taskDefExtProps[++extPropI]=new Property("activityId",actId,)@!(actList==null||actList.isEmpty()) && !(acts==null) -> event=act.getEvent()@!(actList==null||actList.isEmpty()) && !(acts==null) -> route=act.getRoute()@!(actList==null||actList.isEmpty()) && !(acts==null) -> IF { -> IF { -> attrs=act.getImplementation().getTask().getTaskApplication().getAnyAttribute()@!(actList==null||actList.isEmpty()) && act.getImplementation()!=null&&act.getImplementation().getTask()!=null&&act.getImplementation().getTask().getTaskApplication()!=null && !(acts==null) } } } } CATCH(Exception) {}
results[https://github.com/Cybion-Italy/elderspaces/blob/5692b2d577280d68311c647e9efd6790733da022/trunk/activity-manager/src/main/java/eu/elderspaces/activities/core/MultiLayerActivityStreamManager.java][handlePostObject][1] = -> TRY {  -> IF { -> IF { -> entitiesRepository.postActivity(postObject,eventTime,)@target==null -> socialNetworkRepository.postActivity(user.getId(),postObject.getId(),eventTime,)@target==null -> entitiesRepository.storeIfNewEntity(user,eventTime,)@target==null } ELSE { -> IF { -> entitiesRepository.postActivity(postObject,eventTime,)@target.getClass()==Event.class && target==null -> socialNetworkRepository.postEventActivity(user.getId(),postObject.getId(),target.getId(),eventTime,)@target.getClass()==Event.class && !(target==null) -> entitiesRepository.storeIfNewEntity(user,eventTime,)@target.getClass()==Event.class && target==null -> entitiesRepository.storeIfNewEntity(target,eventTime,)@target.getClass()==Event.class && !(target==null) } ELSE { -> IF { -> entitiesRepository.postActivity(postObject,eventTime,)@target.getClass()==Club.class && target.getClass()==Event.class && target==null -> socialNetworkRepository.postClubActivity(user.getId(),postObject.getId(),target.getId(),eventTime,)@target.getClass()==Club.class && !(target.getClass()==Event.class) && !(target==null) -> entitiesRepository.storeIfNewEntity(user,eventTime,)@target.getClass()==Club.class && target.getClass()==Event.class && target==null -> entitiesRepository.storeIfNewEntity(target,eventTime,)@target.getClass()==Club.class && !(target.getClass()==Event.class) && !(target==null) } ELSE { -> throw new InvalidActivityStreamException("Invalid Target type",)@!(target.getClass()==Club.class) && !(target.getClass()==Event.class) && !(target==null) } } } } ELSE { -> IF { -> IF { -> entitiesRepository.deleteActivity(postObject,eventTime,)@target==null -> socialNetworkRepository.deleteActivity(user.getId(),postObject.getId(),eventTime,)@target==null -> entitiesRepository.storeIfNewEntity(user,eventTime,)@target==null } ELSE { -> IF { -> entitiesRepository.deleteActivity(postObject,eventTime,)@target.getClass()==Event.class && target==null -> socialNetworkRepository.deleteEventActivity(user.getId(),postObject.getId(),target.getId(),eventTime,)@target.getClass()==Event.class && !(target==null) -> entitiesRepository.storeIfNewEntity(user,eventTime,)@target.getClass()==Event.class && target==null -> entitiesRepository.storeIfNewEntity(target,eventTime,)@target.getClass()==Event.class && !(target==null) } ELSE { -> IF { -> entitiesRepository.deleteActivity(postObject,eventTime,)@target.getClass()==Club.class && target.getClass()==Event.class && target==null -> socialNetworkRepository.deleteClubActivity(user.getId(),postObject.getId(),target.getId(),eventTime,)@target.getClass()==Club.class && !(target.getClass()==Event.class) && !(target==null) -> entitiesRepository.storeIfNewEntity(user,eventTime,)@target.getClass()==Club.class && target.getClass()==Event.class && target==null -> entitiesRepository.storeIfNewEntity(target,eventTime,)@target.getClass()==Club.class && !(target.getClass()==Event.class) && !(target==null) } ELSE { -> throw new InvalidActivityStreamException("Invalid Target type",)@!(target.getClass()==Club.class) && !(target.getClass()==Event.class) && !(target==null) } } } } } } CATCH(InvalidActivityStreamException) {}
results[https://github.com/m0ep/master-thesis/blob/b772db4fd59ebed5c7d34340b9cdcae560a1a82a/source/socc-core/src/main/java/de/m0ep/socc/core/connector/google/plus/GooglePlusSiocUtils.java][createSiocPost][2] = -> uri=createActivityUri(activity.getId(),)@ -> IF { -> result=Post.getInstance(model,uri,)@Post.hasInstance(model,uri,) -> IF { -> modifiedNode=Builder.createPlainliteral(DateUtils.formatISO8601(activity.getUpdated().getValue(),),)@null!=activity.getUpdated() -> IF { -> result.setModified(modifiedNode,)@!(result.hasModified(modifiedNode,)) -> IF { -> result.setTitle(activity.getTitle(),)@null!=activity.getTitle() && !(result.hasModified(modifiedNode,)) && null!=activity.getUpdated() } -> content=activity.getObject().getContent()@null!=activity.getUpdated() -> result.setContent(StringUtils.stripHTML(content,),)@!(result.hasModified(modifiedNode,)) -> result.removeAllAttachments()@!(result.hasModified(modifiedNode,)) -> IF { -> LOOP { -> result.addAttachment(Builder.createURI(attachments.getUrl(),),)@!(result.hasModified(modifiedNode,)) } } } } } ELSE { -> result=new Post(model,uri,true,)@!(Post.hasInstance(model,uri,)) -> result.setId(activity.getId(),)@ -> result.setIsPartOf(connector.getStructureReader().getSite(),)@ -> IF { -> result.setTitle(activity.getTitle(),)@null!=activity.getTitle() } -> IF { -> TRY { -> creator=UserAccountUtils.findUserAccount(model,activity.getActor().getId(),serviceEndpoint.asURI(),)@null!=activity.getActor() && !(Post.hasInstance(model,uri,)) } CATCH(NotFoundException) { -> creator=createSiocUserAccount(connector,activity.getActor(),)@null!=activity.getActor() } -> result.setCreator(creator,)@ } -> IF { -> result.addSeeAlso(Builder.createURI(activity.getUrl(),),)@null!=activity.getUrl() } -> createdDate=new Date(activity.getPublished().getValue(),)@ -> result.setCreated(DateUtils.formatISO8601(createdDate,),)@ -> IF { -> result.setModified(DateUtils.formatISO8601(activity.getUpdated().getValue(),),)@null!=activity.getUpdated() } -> content=activity.getObject().getContent()@ -> result.setContent(StringUtils.stripHTML(content,),)@ -> IF { -> LOOP { -> result.addAttachment(Builder.createURI(attachments.getUrl(),),)@ } } -> IF { -> result.setContainer(container,)@null!=container -> container.addContainerOf(result,)@null!=container } }
results[https://github.com/jenkinsci/jenkow-plugin/blob/c70ad25a76d569bcf765dc89d96fe4808f22f02a/eclipse/org.activiti.designer.gui/src/main/java/org/activiti/designer/features/MoveActivityFeature.java][postMoveShape][1] = -> activity=(Activity) getBusinessObjectForPictogramElement(shape,)@ -> moveActivityChilds(activity,shapeLocationAfterMove,)@ -> model=ModelHandler.getModel(EcoreUtil.getURI(getDiagram(),),)@ -> IF { -> IF { -> IF { -> subProcess=(SubProcess) containerBo@containerBo instanceof SubProcess -> subProcess.removeFlowElement(activity.getId(),)@ -> LOOP { -> subProcess.removeFlowElement(flow.getId(),)@ } -> LOOP { -> subProcess.removeFlowElement(event.getId(),)@ } } ELSE { -> IF { -> lane=(Lane) containerBo@!(containerBo instanceof SubProcess) && containerBo instanceof Lane -> lane.getFlowReferences().remove(activity.getId(),)@ -> lane.getParentProcess().removeFlowElement(activity.getId(),)@ -> LOOP { -> lane.getParentProcess().removeFlowElement(flow.getId(),)@ } -> LOOP { -> lane.getParentProcess().removeFlowElement(event.getId(),)@ } } } } ELSE { -> IF { -> model.getBpmnModel().getMainProcess().removeFlowElement(activity.getId(),)@model.getBpmnModel().getMainProcess()!=null -> LOOP { -> model.getBpmnModel().getMainProcess().removeFlowElement(flow.getId(),)@model.getBpmnModel().getMainProcess()!=null } -> LOOP { -> model.getBpmnModel().getMainProcess().removeFlowElement(event.getId(),)@model.getBpmnModel().getMainProcess()!=null } } } -> IF { -> IF { -> subProcess=(SubProcess) containerBo@containerBo instanceof SubProcess -> subProcess.addFlowElement(activity,)@ -> LOOP { -> subProcess.addFlowElement(flow,)@ } -> LOOP { -> subProcess.addFlowElement(event,)@ } } ELSE { -> IF { -> lane=(Lane) containerBo@!(containerBo instanceof SubProcess) && containerBo instanceof Lane -> lane.getFlowReferences().add(activity.getId(),)@ -> lane.getParentProcess().addFlowElement(activity,)@ -> LOOP { -> lane.getParentProcess().addFlowElement(flow,)@ } -> LOOP { -> lane.getParentProcess().addFlowElement(event,)@ } } } } ELSE { -> IF { -> model.addMainProcess()@model.getBpmnModel().getMainProcess()==null } -> model.getBpmnModel().getMainProcess().addFlowElement(activity,)@ -> LOOP { -> model.getBpmnModel().getMainProcess().addFlowElement(flow,)@ } -> LOOP { -> model.getBpmnModel().getMainProcess().addFlowElement(event,)@ } } }
results[https://github.com/droolsjbpm/jbpm-designer/blob/afd2111d9fb05ecb205b15109f494d2d187cbdbe/jbpm-designer-backend/src/main/java/org/jbpm/designer/bpmn2/impl/Bpmn2JsonUnmarshaller.java][revisitDataObjects][1] = -> LOOP { -> IF { -> LOOP { -> IF { -> da=(DataObject) fe@ -> itemdef.setId("_"+da.getId()+"Item",)@ -> iter=da.getAnyAttribute().iterator()@ -> da.setItemSubjectRef(itemdef,)@ } } } } -> LOOP { -> IF { -> LOOP { -> IF { -> IF { -> da=(DataObject) as.getSourceRef()@as.getSourceRef()!=null&&as.getSourceRef() instanceof DataObject&&as.getTargetRef()!=null&&as.getTargetRef() instanceof Task||as.getTargetRef() instanceof ThrowEvent -> IF { -> IF { -> d=Bpmn2Factory.eINSTANCE.createDataInput()@ -> d.setId(task.getId()+"_"+da.getId()+"InputX",)@ -> d.setName(da.getId()+"InputX",)@ -> task.getIoSpecification().getDataInputs().add(d,)@ -> task.getIoSpecification().getInputSets().get(0,).getDataInputRefs().add(d,)@ -> dia.setTargetRef(d,)@ -> dia.getSourceRef().add(da,)@ } } ELSE { -> IF { -> IF { -> datain.setId(te.getId()+"_"+da.getId()+"InputX",)@ -> datain.setName(da.getId()+"InputX",)@ -> dia.getSourceRef().add(da,)@ } } } } -> IF { -> da=(DataObject) as.getTargetRef()@as.getTargetRef()!=null&&as.getTargetRef() instanceof DataObject&&as.getSourceRef()!=null&&as.getSourceRef() instanceof Task||as.getSourceRef() instanceof CatchEvent -> IF { -> IF { -> d=Bpmn2Factory.eINSTANCE.createDataOutput()@ -> d.setId(task.getId()+"_"+da.getId()+"OutputX",)@ -> d.setName(da.getId()+"OutputX",)@ -> task.getIoSpecification().getDataOutputs().add(d,)@ -> task.getIoSpecification().getOutputSets().get(0,).getDataOutputRefs().add(d,)@ -> doa.getSourceRef().add(d,)@ -> doa.setTargetRef(da,)@ } } ELSE { -> IF { -> IF { -> dataout.setId(ce.getId()+"_"+da.getId()+"OutputX",)@ -> dataout.setName(da.getId()+"OutputX",)@ -> dia.setTargetRef(da,)@ } } } } -> IF { -> IF { -> sourceElement=(Activity) sf.getSourceRef()@sf.getSourceRef()!=null&&sf.getSourceRef() instanceof Activity&&sf.getTargetRef()!=null&&sf.getTargetRef() instanceof Activity -> targetElement=(Activity) sf.getTargetRef()@sf.getSourceRef()!=null&&sf.getSourceRef() instanceof Activity&&sf.getTargetRef()!=null&&sf.getTargetRef() instanceof Activity -> da=(DataObject) as.getSourceRef()@as.getSourceRef()!=null&&as.getSourceRef() instanceof DataObject&&as.getTargetRef()!=null&&as.getTargetRef() instanceof SequenceFlow -> IF { -> targetElement.setIoSpecification(iospec,)@targetElement.getIoSpecification()==null } -> IF { -> targetElement.getIoSpecification().getInputSets().add(inset,)@targetElement.getIoSpecification().getInputSets()==null||targetElement.getIoSpecification().getInputSets().size()<1 } -> inSet=targetElement.getIoSpecification().getInputSets().get(0,)@ -> IF { -> d=Bpmn2Factory.eINSTANCE.createDataInput()@ -> d.setId(targetElement.getId()+"_"+da.getId()+"InputX",)@ -> d.setName(da.getId()+"InputX",)@ -> targetElement.getIoSpecification().getDataInputs().add(d,)@ -> targetElement.getIoSpecification().getInputSets().get(0,).getDataInputRefs().add(d,)@ -> dia.setTargetRef(d,)@ -> dia.getSourceRef().add(da,)@ -> targetElement.getDataInputAssociations().add(dia,)@ } -> IF { -> sourceElement.setIoSpecification(iospec,)@sourceElement.getIoSpecification()==null } -> IF { -> sourceElement.getIoSpecification().getOutputSets().add(outSet,)@sourceElement.getIoSpecification().getOutputSets()==null||sourceElement.getIoSpecification().getOutputSets().size()<1 } -> outSet=sourceElement.getIoSpecification().getOutputSets().get(0,)@ -> IF { -> d=Bpmn2Factory.eINSTANCE.createDataOutput()@ -> d.setId(sourceElement.getId()+"_"+da.getId()+"OutputX",)@ -> d.setName(da.getId()+"OutputX",)@ -> sourceElement.getIoSpecification().getDataOutputs().add(d,)@ -> sourceElement.getIoSpecification().getOutputSets().get(0,).getDataOutputRefs().add(d,)@ -> doa.getSourceRef().add(d,)@ -> doa.setTargetRef(da,)@ -> sourceElement.getDataOutputAssociations().add(doa,)@ } } } } } } }
