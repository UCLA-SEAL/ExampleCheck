results[https://github.com/KyLinOS/android_packages_apps_PackageInstaller/blob/286806986aabecb3579cc592489fcf6611f15e1a/src/com/android/packageinstaller/PackageUtil.java][initSnippetForInstalledApp][12] = -> pm=pContext.getPackageManager()@ -> return initSnippet(snippetView,appInfo.loadLabel(pm,),appInfo.loadIcon(pm,),)@
results[https://github.com/ursatong/GuardroidROM/blob/01a1c6fbcaf758ea6d9cf6296618bc6092733b36/packages/apps/PackageInstaller/src/com/android/packageinstaller/PackageUtil.java][initSnippetForInstalledApp][6] = -> pm=pContext.getPackageManager()@ -> label=appInfo.loadLabel(pm,)@ -> icon=appInfo.loadIcon(pm,)@ -> (ImageView) appSnippet.findViewById(R.id.app_icon,).setImageDrawable(icon,)@
results[https://github.com/victoryckl/android-demos/blob/eac8ef5d2b7220b201f7e016153b2d6138dee58c/MIUI-FileExplorer/HDExplorer/src/com/hd/explorer/HDBaseAdapter.java][getApkIcon][1] = -> pm=mcontext.getPackageManager()@ -> info=pm.getPackageArchiveInfo(path,PackageManager.GET_ACTIVITIES,)@ -> IF { -> return appInfo.loadIcon(pm,)@info!=null }
results[https://github.com/nebogeo/littlej/blob/0b53f24c54ec1e7405176313faa55035931c976f/android/Libraries/abs/src/com/actionbarsherlock/internal/widget/ActionBarView.java][<init>][4] = -> appInfo=context.getApplicationInfo()@ -> pm=context.getPackageManager()@ -> mIcon=a.getDrawable(R.styleable.SherlockTheme_abIcon,)@ -> IF { -> mIcon=appInfo.loadIcon(pm,)@mIcon==null&&context instanceof Activity }
results[https://github.com/unidevel/android/blob/fc58eb7f8d7a4a1207f0ee34c458c0aafe6d2505/ALocker/src/com/unidevel/tools/locker/AppListActivity.java][doInBackground][1] = -> pm=me.getPackageManager()@ -> appinfos=pm.getInstalledApplications(0,)@ -> LOOP { -> appInfo=appinfos.get(x,)@x<appinfos.size() -> item.icon=appInfo.loadIcon(pm,)@ -> item.name=appInfo.loadLabel(pm,).toString()@ }
results[https://github.com/M66B/XPrivacy/blob/003388dc113f89d4a7d039fbf7f01001112cbfd8/src/biz/bokhorst/xprivacy/XApplicationInfo.java][Initialize][1] = -> pm=context.getPackageManager()@ -> mDrawable=appInfo.loadIcon(pm,)@ -> mListApplicationName.add(getApplicationName(appInfo,pm,),)@ -> TRY { -> mVersion=pm.getPackageInfo(appInfo.packageName,0,).versionName@ } CATCH(Throwable) { -> XUtil.bug(null,ex,)@ }
results[https://github.com/unidevel/android/blob/693e9489b21f5ffb21bb9a80f02eb8937b88ebfd/alib/src/com/unidevel/AppListActivity.java][doInBackground][1] = -> pm=me.getPackageManager()@ -> appinfos=pm.getInstalledApplications(0,)@ -> LOOP { -> appInfo=appinfos.get(x,)@x<appinfos.size() -> intent=pm.getLaunchIntentForPackage(appInfo.packageName,)@ -> item.icon=appInfo.loadIcon(pm,)@ -> item.name=appInfo.loadLabel(pm,).toString()@ }
results[https://github.com/xunroudabing/DaBing/blob/086a703cc1432f9f5ce95d881ae9017f9bdcaab2/WeiXinEmoj/src/com/dabing/emoj/utils/Util.java][getApkIcon][2] = -> pm=context.getPackageManager()@ -> info=pm.getPackageArchiveInfo(apkPath,PackageManager.GET_ACTIVITIES,)@ -> IF { -> TRY { -> return appInfo.loadIcon(pm,)@info!=null } CATCH(OutOfMemoryError) { -> Log.e(LOG_TAG,e.toString(),)@!(info!=null) } }
results[https://github.com/faux123/android_frameworks_base/blob/2f5966eee0107041ef7984d93ca43b2f0aaa7057/packages/SystemUI/src/com/android/systemui/usb/UsbPermissionActivity.java][onCreate][12] = -> packageManager=getPackageManager()@ -> TRY { -> aInfo=packageManager.getApplicationInfo(mPackageName,0,)@ } CATCH(PackageManager.NameNotFoundException) { -> Log.e(TAG,"unable to look up package name",e,)@ -> finish()@ } -> appName=aInfo.loadLabel(packageManager,).toString()@ -> ap.mIcon=aInfo.loadIcon(packageManager,)@
results[https://github.com/sandrocheng/sandro/blob/2d1449979aa8596736148fa127c474b56b072331/project/AppLockDemo/src/com/guangli/applock/PasswordInutActivity.java][initAppInfo][1] = -> pManager=getPackageManager()@ -> TRY { -> info=pManager.getApplicationInfo(packename,PackageManager.GET_META_DATA,)@ -> appIcon.setImageDrawable(info.loadIcon(pManager,),)@ -> appLable.setText(info.loadLabel(pManager,),)@ } CATCH(NameNotFoundException) { -> e.printStackTrace()@ }
results[https://github.com/davros-/frameworks_base/blob/da9165e10f476bc46f990e1d63a0f63dcbadbc26/packages/VpnDialogs/src/com/android/vpndialogs/ManageDialog.java][onResume][7] = -> TRY { } ELSE { -> pm=getPackageManager()@ -> app=pm.getApplicationInfo(mConfig.user,0,)@ -> mAlertParams.mIcon=app.loadIcon(pm,)@ -> mAlertParams.mTitle=app.loadLabel(pm,)@ } CATCH(Exception) { -> Log.e(TAG,"onResume",e,)@ -> finish()@ }
results[https://github.com/mariotaku/twidere/blob/1d36e89505925b6072e4491b7272458cbbbc4fb7/src/org/mariotaku/twidere/activity/RequestPermissionsActivity.java][loadInfo][2] = -> pm=getPackageManager()@ -> TRY { -> info=pm.getApplicationInfo(pname,PackageManager.GET_META_DATA,)@ -> mIconView.setImageDrawable(info.loadIcon(pm,),)@ -> mNameView.setText(info.loadLabel(pm,),)@ -> desc=info.loadDescription(pm,)@ } CATCH(NameNotFoundException) { -> setResult(RESULT_CANCELED,)@ -> finish()@ }
results[https://github.com/shkschneider/android_Skeleton/blob/384ec5aff012cc41ecaed4df50b400f7a965d0b8/src/me/shkschneider/skeleton/helpers/ApplicationHelper.java][icon][1] = -> TRY { -> packageManager=SkeletonApplication.CONTEXT.getPackageManager()@ -> IF { -> return null@packageManager==null } -> applicationInfo=packageManager.getApplicationInfo(packageName(),0,)@!(packageManager==null) -> IF { -> return null@applicationInfo==null && !(packageManager==null) } -> return applicationInfo.loadIcon(packageManager,)@!(packageManager==null) && !(applicationInfo==null) } CATCH(PackageManager.NameNotFoundException) { -> LogHelper.error("NameNotFoundException: "+e.getMessage(),)@ }
results[https://github.com/ursatong/GuardroidROM/blob/01a1c6fbcaf758ea6d9cf6296618bc6092733b36/packages/apps/ADWLauncher/src/com/android/launcher/Launcher.java][showActions][1] = -> IF { -> IF { -> TRY { -> packageManager=getPackageManager()@!(existingQA!=null&&existingQA.isShowing()) -> applicationInfo=packageManager.getApplicationInfo(ANDROID_MARKET_PACKAGE,0,)@!(existingQA!=null&&existingQA.isShowing()) -> mMarketIcon=applicationInfo.loadIcon(packageManager,)@!(existingQA!=null&&existingQA.isShowing()) && mMarketIcon==null&&mMarketLabel==null -> mMarketLabel=applicationInfo.loadLabel(packageManager,)@!(existingQA!=null&&existingQA.isShowing()) && mMarketIcon==null&&mMarketLabel==null } } -> IF { -> qa.addItem(mMarketIcon,(String) mMarketLabel,new OnClickListener(),)@!(existingQA!=null&&existingQA.isShowing()) && mMarketIcon!=null&&mMarketLabel!=null } }
results[https://github.com/M66B/XPrivacy/blob/092d4869307fd95c39fd849564e3bdd4303af8c8/src/biz/bokhorst/xprivacy/XActivitySingleApp.java][onCreate][2] = -> TRY { -> appInfo=getPackageManager().getApplicationInfo(packageName,0,)@ } CATCH(Throwable) { -> XUtil.bug(null,ex,)@ } -> tvAppName.setText(String.format("%s (%d)",getPackageManager().getApplicationLabel(appInfo,),appInfo.uid,),)@ -> imgIcon=(ImageView) findViewById(R.id.imgAppEntryIcon,)@ -> imgIcon.setImageDrawable(appInfo.loadIcon(getPackageManager(),),)@ -> mPrivacyListAdapter=new RestrictionAdapter(this,R.layout.xsingleappentry,appInfo,XRestriction.getRestrictions(this,),)@
results[https://github.com/boombuler/ADWLauncher2/blob/c4faadad6b54ed3bd24208b254771f7fdee17267/src/org/adw/launcher2/ItemInfo.java][addMarketActions][1] = -> IF { -> TRY { -> packageManager=view.getContext().getPackageManager()@ -> applicationInfo=packageManager.getApplicationInfo(ANDROID_MARKET_PACKAGE,0,)@ -> mMarketIcon=applicationInfo.loadIcon(packageManager,)@mMarketIcon==null&&mMarketLabel==null -> mMarketLabel=applicationInfo.loadLabel(packageManager,)@mMarketIcon==null&&mMarketLabel==null } } -> IF { -> IF { -> result.add(new EditAction(ACTION_MARKET,mMarketIcon,mMarketLabel,),)@mMarketIcon!=null&&mMarketLabel!=null&&this instanceof ItemPackage } }
results[https://github.com/shkschneider/android_Skeleton/blob/d3c26bc5d3cdf33621fd35c01d7315eedda8fe72/libs/library/src/me/shkschneider/skeleton/helper/AndroidHelper.java][icon][1] = -> IF { -> return null@context==null } -> TRY { -> packageManager=context.getPackageManager()@!(context==null) -> IF { -> return null@packageManager==null && !(context==null) } -> applicationInfo=packageManager.getApplicationInfo(packageName(context,),0,)@!(packageManager==null) && !(context==null) -> IF { -> return null@applicationInfo==null && !(packageManager==null) && !(context==null) } -> return applicationInfo.loadIcon(packageManager,)@!(packageManager==null) && !(applicationInfo==null) && !(context==null) } CATCH(PackageManager.NameNotFoundException) { -> LogHelper.e("NameNotFoundException: "+e.getMessage(),)@!(context==null) }
results[https://github.com/camperdave/packages_apps_settings/blob/49e8d2e90b5239b116fecf2b0d634935496bc3f9/src/com/android/settings/fuelgauge/PowerUsageDetail.java][fillPackagesSection][4] = -> IF { -> return @uid<1 } -> pm=getPackageManager()@!(packagesParent==null) && !(uid<1) -> defaultActivityIcon=pm.getDefaultActivityIcon()@!(packagesParent==null) && !(uid<1) -> mPackages=pm.getPackagesForUid(uid,)@!(packagesParent==null) && !(uid<1) -> IF { -> return @!(packagesParent==null) && mPackages==null||mPackages.length<2 && !(uid<1) } -> LOOP { -> TRY { -> ai=pm.getApplicationInfo(mPackages[i],0,)@!(packagesParent==null) && i<mPackages.length && !(uid<1) && !(mPackages==null||mPackages.length<2) -> label=ai.loadLabel(pm,)@!(packagesParent==null) && !(uid<1) && !(mPackages==null||mPackages.length<2) -> IF { -> icon=ai.loadIcon(pm,)@!(packagesParent==null) && !(uid<1) && !(mPackages==null||mPackages.length<2) } } }
results[https://github.com/mycelial/csip/blob/7a8e05cbd2def5d937e52c43e2b95eb80c14c6a2/ActionBarSherlock/src/com/actionbarsherlock/internal/widget/ActionBarView.java][<init>][1] = -> appInfo=context.getApplicationInfo()@ -> pm=context.getPackageManager()@ -> mIcon=a.getDrawable(R.styleable.SherlockActionBar_icon,)@ -> IF { -> IF { -> TRY { -> mIcon=pm.getActivityIcon((Activity) context.getComponentName(),)@mIcon==null && context instanceof Activity } CATCH(NameNotFoundException) { -> Log.e(TAG,"Activity component name not found!",e,)@ } } -> IF { -> mIcon=appInfo.loadIcon(pm,)@mIcon==null } }
results[https://github.com/75py/DisableManager/blob/5d7193949eb2b26d682c2a36422e2d56061c1f6e/src/com/nagopy/android/disabledapps/util/AppsLoader.java][loadRunningApps][1] = -> packageManager=getContext().getPackageManager()@ -> LOOP { -> LOOP { -> TRY { -> appInfo=packageManager.getApplicationInfo(pkg,PackageManager.GET_META_DATA,)@ } CATCH(NameNotFoundException) { -> e.printStackTrace()@ } -> icon=appInfo.loadIcon(packageManager,)@ -> icon.setBounds(0,0,iconSize,iconSize,)@ -> appStatus=new AppStatus(appInfo.loadLabel(packageManager,).toString(),info.processName,appInfo.enabled,appInfo.flags&ApplicationInfo.FLAG_SYSTEM>0,judgeDisablable.isDisablable(appInfo,),)@ -> iconCache.put(info.processName,icon,)@ } }
results[https://github.com/daproy/android_packages_apps_Settings/blob/49e8d2e90b5239b116fecf2b0d634935496bc3f9/src/com/android/settings/fuelgauge/PowerUsageDetail.java][createDetails][16] = -> IF { -> TRY { -> pm=getPackageManager()@ -> ai=pm.getPackageInfo(iconPackage,0,).applicationInfo@!(TextUtils.isEmpty(iconPackage,)) -> IF { -> mAppIcon=ai.loadIcon(pm,)@ai!=null } } } ELSE { -> IF { -> mAppIcon=getResources().getDrawable(iconId,)@iconId!=0 } } -> IF { -> mAppIcon=getPackageManager().getDefaultActivityIcon()@mAppIcon==null } -> iconImage.setImageDrawable(mAppIcon,)@
results[https://github.com/davros-/platform_frameworks_base/blob/85facc5c16a0b7af6f81bea21df3475485228011/packages/VpnDialogs/src/com/android/vpndialogs/ConfirmDialog.java][onResume][7] = -> TRY { -> IF { -> return @mService.prepareVpn(mPackage,null,) } -> pm=getPackageManager()@!(mService.prepareVpn(mPackage,null,)) -> app=pm.getApplicationInfo(mPackage,0,)@!(mService.prepareVpn(mPackage,null,)) -> view=View.inflate(this,R.layout.confirm,null,)@!(mService.prepareVpn(mPackage,null,)) -> (ImageView) view.findViewById(R.id.icon,).setImageDrawable(app.loadIcon(pm,),)@!(mService.prepareVpn(mPackage,null,)) -> (TextView) view.findViewById(R.id.prompt,).setText(getString(R.string.prompt,app.loadLabel(pm,),),)@!(mService.prepareVpn(mPackage,null,)) -> (CompoundButton) view.findViewById(R.id.check,).setOnCheckedChangeListener(this,)@!(mService.prepareVpn(mPackage,null,)) } CATCH(Exception) { -> Log.e(TAG,"onResume",e,)@ -> finish()@ }
results[https://github.com/ukanth/afwall/blob/b7354884d0026b59bef3a2533c53abfbb9b71294/src/dev/ukanth/ufirewall/AppDetailActivity.java][onCreate][1] = -> image=(ImageView) findViewById(R.id.app_icon,)@ -> IF { -> packageManager=getApplicationContext().getPackageManager()@ -> TRY { -> applicationInfo=packageManager.getApplicationInfo(packageName,packageManager.GET_META_DATA,)@ -> image.setImageDrawable(applicationInfo.loadIcon(packageManager,),)@ -> textView.setText(packageManager.getApplicationLabel(applicationInfo,),)@ } CATCH(NameNotFoundException) { -> download_bytes=TrafficStats.getUidRxBytes(appid,)@appid>0 -> uploaded_bytes=TrafficStats.getUidTxBytes(appid,)@appid>0 -> down.setText(" : "+humanReadableByteCount(download_bytes,false,),)@ -> up.setText(" : "+humanReadableByteCount(uploaded_bytes,false,),)@ -> button.setEnabled(false,)@ } }
results[https://github.com/unidevel/android/blob/bee811e6af67711149d7a84e761c29764aaa26aa/FindMyApp/src/com/unidevel/findmyapp/Util.java][getAllApps][1] = -> pm=context.getPackageManager()@ -> appinfos=pm.getInstalledApplications(0,)@ -> LOOP { -> appInfo=appinfos.get(x,)@x<appinfos.size() -> app=new AppInfo()@ -> app.setName(appInfo.loadLabel(pm,).toString(),)@ -> app.setPackageName(appInfo.packageName,)@ -> app.setIcon(appInfo.loadIcon(pm,),)@ -> app.setPath(appInfo.publicSourceDir,)@ -> app.setDataDir(appInfo.dataDir,)@ -> Log.i("App",appInfo.loadLabel(pm,)+","+appInfo.packageName+","+appInfo.publicSourceDir+","+appInfo.dataDir,)@ -> IF { -> sysApps.add(app,)@ } ELSE { -> userApps.add(app,)@ } }
results[https://github.com/lkorth/screen-notifications/blob/e1e235a22288af505148a75e3b4bd6d2c190bc85/src/com/lukekorth/screennotifications/AppsActivity.java][loadInBackground][1] = -> pm=getPackageManager()@ -> packages=pm.getInstalledApplications(PackageManager.GET_META_DATA,)@ -> Collections.sort(packages,new ApplicationInfo.DisplayNameComparator(pm,),)@ -> LOOP { -> appInfo=packages.get(i,)@i<packages.size() -> data.apps[i]=new App()@i<packages.size() -> data.apps[i].name=(String) appInfo.loadLabel(pm,)@i<packages.size() -> TRY { -> data.apps[i].icon=appInfo.loadIcon(pm,)@i<packages.size() } CATCH(OutOfMemoryError) { -> data.apps[i].icon=this.getResources().getDrawable(R.drawable.sym_def_app_icon,)@i<packages.size() } -> IF { -> currentSection=data.apps[i].name.substring(0,1,).toUpperCase()@i<packages.size() && data.apps[i].name!=null&&data.apps[i].name.length()>0 -> IF { -> data.sections.add(new Section(i,currentSection,),)@i<packages.size() && data.apps[i].name!=null&&data.apps[i].name.length()>0 && !(lastSection.equals(currentSection,)) } } }
results[https://github.com/peteralfonso/platform_packages_apps_Settings/blob/2518c6065b23ebe4564b9e9f55f329b1e4d4372c/src/com/android/settings/fuelgauge/PowerUsageDetail.java][createDetails][57] = -> IF { -> TRY { -> pm=getActivity().getPackageManager()@ -> ai=pm.getPackageInfo(iconPackage,0,).applicationInfo@!(TextUtils.isEmpty(iconPackage,)) -> IF { -> mAppIcon=ai.loadIcon(pm,)@ai!=null } } } ELSE { -> IF { -> mAppIcon=getActivity().getResources().getDrawable(iconId,)@iconId!=0 } } -> IF { -> mAppIcon=getActivity().getPackageManager().getDefaultActivityIcon()@mAppIcon==null } -> icon.setImageDrawable(mAppIcon,)@
results[https://github.com/Blakez/android_frameworks_base/blob/11714fcbb86c041579b3f2c64bc7e27ed7fc2705/services/java/com/android/server/connectivity/Vpn.java][establish][6] = -> pm=mContext.getPackageManager()@ -> TRY { -> app=pm.getApplicationInfo(mPackage,0,)@ } -> info=pm.resolveService(intent,0,)@ -> IF { -> throw new SecurityException("Cannot find "+config.user,)@info==null } -> label=app.loadLabel(pm,).toString()@!(info==null) -> icon=app.loadIcon(pm,)@!(info==null) -> IF { -> icon.setBounds(0,0,width,height,)@!(info==null) && icon.getIntrinsicWidth()>0&&icon.getIntrinsicHeight()>0 -> icon.draw(c,)@!(info==null) && icon.getIntrinsicWidth()>0&&icon.getIntrinsicHeight()>0 } -> TRY { -> IF { -> throw new IllegalStateException("Cannot bind "+config.user,)@!(mContext.bindService(intent,connection,Context.BIND_AUTO_CREATE,)) && !(info==null) } } CATCH(RuntimeException) { -> updateState(DetailedState.FAILED,"establish",)@!(info==null) -> IoUtils.closeQuietly(tun,)@!(info==null) }
results[https://github.com/spacecaker/android_frameworks_base_CSM9.1/blob/a4ee5974d66e944f3fa0466ea794deacb3f32975/services/java/com/android/server/connectivity/Vpn.java][establish][3] = -> pm=mContext.getPackageManager()@ -> TRY { -> app=pm.getApplicationInfo(mPackage,0,)@ } -> info=pm.resolveService(intent,0,)@ -> IF { -> throw new SecurityException("Cannot find "+config.user,)@info==null } -> label=app.loadLabel(pm,).toString()@!(!(BIND_VPN_SERVICE.equals(info.serviceInfo.permission,))) && !(info==null) -> icon=app.loadIcon(pm,)@!(!(BIND_VPN_SERVICE.equals(info.serviceInfo.permission,))) && !(info==null) -> IF { -> icon.setBounds(0,0,width,height,)@!(!(BIND_VPN_SERVICE.equals(info.serviceInfo.permission,))) && !(info==null) && icon.getIntrinsicWidth()>0&&icon.getIntrinsicHeight()>0 -> icon.draw(c,)@!(!(BIND_VPN_SERVICE.equals(info.serviceInfo.permission,))) && !(info==null) && icon.getIntrinsicWidth()>0&&icon.getIntrinsicHeight()>0 } -> TRY { -> IF { -> throw new IllegalStateException("Cannot bind "+config.user,)@!(!(BIND_VPN_SERVICE.equals(info.serviceInfo.permission,))) && !(mContext.bindService(intent,connection,Context.BIND_AUTO_CREATE,)) && !(info==null) } } CATCH(RuntimeException) { -> TRY { -> tun.close()@!(!(BIND_VPN_SERVICE.equals(info.serviceInfo.permission,))) && !(info==null) } }
results[https://github.com/teamgummy/frameworks_base/blob/3e7a90f576deeccc9718b9d15889ecd60ce56772/packages/VpnDialogs/src/com/android/vpndialogs/ConfirmDialog.java][onResume][1] = -> TRY { -> IF { -> return @mService.prepareVpn(mPackage,null,) } -> pm=getPackageManager()@!(mService.prepareVpn(mPackage,null,)) -> app=pm.getApplicationInfo(mPackage,0,)@!(mService.prepareVpn(mPackage,null,)) -> view=View.inflate(this,R.layout.confirm,null,)@!(mService.prepareVpn(mPackage,null,)) -> (ImageView) view.findViewById(R.id.icon,).setImageDrawable(app.loadIcon(pm,),)@!(mService.prepareVpn(mPackage,null,)) -> (TextView) view.findViewById(R.id.prompt,).setText(getString(R.string.prompt,app.loadLabel(pm,),),)@!(mService.prepareVpn(mPackage,null,)) -> (CompoundButton) view.findViewById(R.id.check,).setOnCheckedChangeListener(this,)@!(mService.prepareVpn(mPackage,null,)) -> mDialog=new AlertDialog.Builder(this,).setIcon(android.R.drawable.ic_dialog_alert,).setTitle(android.R.string.dialog_alert_title,).setView(view,).setPositiveButton(android.R.string.ok,this,).setNegativeButton(android.R.string.cancel,this,).setCancelable(false,).create()@!(mService.prepareVpn(mPackage,null,)) } CATCH(Exception) { -> Log.e(TAG,"onResume",e,)@ -> finish()@ }
results[https://github.com/spacecaker/android_frameworks_base_CSM9.1/blob/a4ee5974d66e944f3fa0466ea794deacb3f32975/packages/VpnDialogs/src/com/android/vpndialogs/ConfirmDialog.java][onResume][1] = -> TRY { -> IF { -> return @mService.prepareVpn(mPackage,null,) } -> pm=getPackageManager()@!(mService.prepareVpn(mPackage,null,)) -> app=pm.getApplicationInfo(mPackage,0,)@!(mService.prepareVpn(mPackage,null,)) -> view=View.inflate(this,R.layout.confirm,null,)@!(mService.prepareVpn(mPackage,null,)) -> (ImageView) view.findViewById(R.id.icon,).setImageDrawable(app.loadIcon(pm,),)@!(mService.prepareVpn(mPackage,null,)) -> (TextView) view.findViewById(R.id.prompt,).setText(getString(R.string.prompt,app.loadLabel(pm,),),)@!(mService.prepareVpn(mPackage,null,)) -> (CompoundButton) view.findViewById(R.id.check,).setOnCheckedChangeListener(this,)@!(mService.prepareVpn(mPackage,null,)) -> mDialog=new AlertDialog.Builder(this,).setIconAttribute(android.R.attr.alertDialogIcon,).setTitle(android.R.string.dialog_alert_title,).setView(view,).setPositiveButton(android.R.string.ok,this,).setNegativeButton(android.R.string.cancel,this,).setCancelable(false,).create()@!(mService.prepareVpn(mPackage,null,)) } CATCH(Exception) { -> Log.e(TAG,"onResume",e,)@ -> finish()@ }
results[https://github.com/davros-/platform_frameworks_base/blob/4b50cc39b0518a04b16eb0f0b6286859b32373a3/core/java/com/android/internal/widget/ActionBarView.java][<init>][11] = -> appInfo=context.getApplicationInfo()@ -> pm=context.getPackageManager()@ -> IF { -> IF { -> TRY { -> mLogo=pm.getActivityLogo((Activity) context.getComponentName(),)@mLogo==null && context instanceof Activity } CATCH(NameNotFoundException) { -> Log.e(TAG,"Activity component name not found!",e,)@ } } -> IF { -> mLogo=appInfo.loadLogo(pm,)@mLogo==null } } -> mIcon=a.getDrawable(R.styleable.ActionBar_icon,)@ -> IF { -> IF { -> TRY { -> mIcon=pm.getActivityIcon((Activity) context.getComponentName(),)@mIcon==null && context instanceof Activity } CATCH(NameNotFoundException) { -> Log.e(TAG,"Activity component name not found!",e,)@ } } -> IF { -> mIcon=appInfo.loadIcon(pm,)@mIcon==null } }
results[https://github.com/DavidTPate/diablo3_builder/blob/b4285ddee467f45fc5ce2e5766a2636331e0066b/d3_android/libs/ActionBarSherlock/library/src/com/actionbarsherlock/internal/widget/ActionBarView.java][<init>][142] = -> appInfo=context.getApplicationInfo()@ -> pm=context.getPackageManager()@ -> IF { } ELSE { -> IF { -> TRY { -> mLogo=pm.getActivityLogo((Activity) context.getComponentName(),)@mLogo==null && context instanceof Activity } CATCH(NameNotFoundException) { -> Log.e(TAG,"Activity component name not found!",e,)@ } } -> IF { -> mLogo=appInfo.loadLogo(pm,)@mLogo==null } } -> mIcon=a.getDrawable(R.styleable.SherlockActionBar_icon,)@ -> IF { -> IF { -> TRY { -> mIcon=pm.getActivityIcon((Activity) context.getComponentName(),)@mIcon==null && context instanceof Activity } CATCH(NameNotFoundException) { -> Log.e(TAG,"Activity component name not found!",e,)@ } } -> IF { -> mIcon=appInfo.loadIcon(pm,)@mIcon==null } }
results[https://github.com/VanirAOSP/frameworks_support/blob/0e596afe4a8ed42346afdf676932f6de7d5e7258/v7/appcompat/src/android/support/v7/internal/widget/ActionBarView.java][<init>][10] = -> appInfo=context.getApplicationInfo()@ -> pm=context.getPackageManager()@ -> IF { -> IF { -> IF { -> TRY { -> mLogo=pm.getActivityLogo((Activity) context.getComponentName(),)@mLogo==null && context instanceof Activity } CATCH(NameNotFoundException) { -> Log.e(TAG,"Activity component name not found!",e,)@ } } -> IF { -> mLogo=appInfo.loadLogo(pm,)@mLogo==null } } } -> mIcon=a.getDrawable(R.styleable.ActionBar_icon,)@ -> IF { -> IF { -> TRY { -> mIcon=pm.getActivityIcon((Activity) context.getComponentName(),)@mIcon==null && context instanceof Activity } CATCH(NameNotFoundException) { -> Log.e(TAG,"Activity component name not found!",e,)@ } } -> IF { -> mIcon=appInfo.loadIcon(pm,)@mIcon==null } }
results[https://github.com/teamgummy/frameworks_base/blob/3e7a90f576deeccc9718b9d15889ecd60ce56772/packages/VpnDialogs/src/com/android/vpndialogs/ManageDialog.java][onResume][5] = -> TRY { -> view=View.inflate(this,R.layout.manage,null,)@ -> IF { -> (TextView) view.findViewById(R.id.session,).setText(mConfig.session,)@ } -> mDuration=(TextView) view.findViewById(R.id.duration,)@ -> mDataTransmitted=(TextView) view.findViewById(R.id.data_transmitted,)@ -> mDataReceived=(TextView) view.findViewById(R.id.data_received,)@ -> IF { -> mDialog=new AlertDialog.Builder(this,).setIcon(android.R.drawable.ic_dialog_info,).setTitle(R.string.legacy_title,).setView(view,).setNeutralButton(R.string.disconnect,this,).setNegativeButton(android.R.string.cancel,this,).create()@ } ELSE { -> pm=getPackageManager()@ -> app=pm.getApplicationInfo(mConfig.user,0,)@ -> mDialog=new AlertDialog.Builder(this,).setIcon(app.loadIcon(pm,),).setTitle(app.loadLabel(pm,),).setView(view,).setNeutralButton(R.string.disconnect,this,).setNegativeButton(android.R.string.cancel,this,).create()@ } -> IF { -> mDialog.setButton(DialogInterface.BUTTON_POSITIVE,getText(R.string.configure,),this,)@ } -> mDialog.setOnDismissListener(this,)@ -> mDialog.show()@ } CATCH(Exception) { -> Log.e(TAG,"onResume",e,)@ -> finish()@ }
results[https://github.com/cnmahj/cnAndroidDocs.old/blob/078148cc1033f4070239c6d1e361fa06bf688412/core/java/com/android/internal/app/HeavyWeightSwitcherActivity.java][setIconAndText][13] = -> IF { -> TRY { -> info=getPackageManager().getApplicationInfo(packageName,0,)@ -> appName=info.loadLabel(getPackageManager(),)@ -> appIcon=info.loadIcon(getPackageManager(),)@ } } -> setDrawable(iconId,appIcon,)@
results[https://github.com/guess/pictureframe/blob/0c07cdaf65b77f87ecfb80f0344111e39d6ee849/Launcher/src/ca/taglab/Launcher/apps/AppModel.java][getIcon][1] = -> IF { -> IF { -> mIcon=mInfo.loadIcon(mContext.getPackageManager(),)@mIcon==null } } ELSE { -> IF { -> IF { -> mIcon=mInfo.loadIcon(mContext.getPackageManager(),)@!(mIcon==null) } } } -> return mContext.getResources().getDrawable(android.R.drawable.sym_def_app_icon,)@mIcon==null
results[https://github.com/Gris87/LogViewer2/blob/ec552055fb4b2711006dabd54315a15166eea181/src/Other/LogViewerService/src/com/lgerp/logviewerservice/senders/PackagesSender.java][writePackage][1] = -> TRY {  -> IF { -> return @appInfo==null } -> Log.d(LOG_TAG,"Write package: "+String.valueOf(appInfo,),)@!(appInfo==null) -> nameSequence=appInfo.loadLabel(mContext.getPackageManager(),)@!(appInfo==null) -> aIconArray=iconToBytes(appInfo.loadIcon(mContext.getPackageManager(),).getCurrent(),)@!(appInfo==null) -> Log.d(LOG_TAG,"Write package icon: "+String.valueOf(aIconArray,),)@!(appInfo==null) -> writeArray((aIconArray!=null)?aIconArray: new byte[],)@!(appInfo==null) } CATCH(IOException) {}
results[https://github.com/ronhuang/FileManager/blob/18a18425d41cbb42b072a3cb2b9219fa6cacaa8f/src/org/openintents/filemanager/DirectoryScanner.java][getDrawableForMimetype][1] = -> IF { -> return null@mimetype==null } -> pm=context.getPackageManager()@!(mimetype==null) -> IF { -> pInfo=pm.getPackageArchiveInfo(path,PackageManager.GET_ACTIVITIES,)@!(mimetype.equals(MIME_APK,)) && !(mimetype==null) -> IF { -> return aInfo.loadIcon(pm,)@pInfo!=null && mimetype.equals(MIME_APK,) && !(mimetype==null) } } -> IF { -> TRY { -> ret=pm.getResourcesForApplication(context.getPackageName(),).getDrawable(iconResource,)@!(mimetype.equals(MIME_APK,)) && !(mimetype==null) && iconResource>0 } } -> lri=pm.queryIntentActivities(intent,PackageManager.MATCH_DEFAULT_ONLY,)@!(mimetype.equals(MIME_APK,)) && !(mimetype==null) && !(ret!=null) -> IF { -> return ri.loadIcon(pm,)@!(mimetype.equals(MIME_APK,)) && !(mimetype==null) && lri!=null&&lri.size()>0 && !(ret!=null) }
results[https://github.com/openintents/filemanager/blob/f8f3fd3bcb9ebb3fcca3776d05dff415ebb65516/FileManager/src/org/openintents/filemanager/ThumbnailLoader.java][getDrawableForMimetype][1] = -> IF { -> return null@holder.getMimeType()==null } -> pm=context.getPackageManager()@!(holder.getMimeType()==null) -> IF { -> pInfo=pm.getPackageArchiveInfo(path,PackageManager.GET_ACTIVITIES,)@!(holder.getMimeType()==null) && !(holder.getMimeType().equals(MIME_APK,)) -> IF { -> return aInfo.loadIcon(pm,)@!(holder.getMimeType()==null) && pInfo!=null && holder.getMimeType().equals(MIME_APK,) } } -> IF { -> TRY { -> ret=pm.getResourcesForApplication(context.getPackageName(),).getDrawable(iconResource,)@!(holder.getMimeType()==null) && !(holder.getMimeType().equals(MIME_APK,)) && iconResource>0 } } -> IF { -> return null@!(holder.getMimeType()==null) && "*/*".equals(holder.getMimeType(),) && !(holder.getMimeType().equals(MIME_APK,)) && !(ret!=null) } -> lri=pm.queryIntentActivities(intent,PackageManager.MATCH_DEFAULT_ONLY,)@!(holder.getMimeType()==null) && !(holder.getMimeType().equals(MIME_APK,)) && !("*/*".equals(holder.getMimeType(),)) && !(ret!=null) -> IF { -> return ri.loadIcon(pm,)@!(holder.getMimeType()==null) && !(holder.getMimeType().equals(MIME_APK,)) && !("*/*".equals(holder.getMimeType(),)) && lri!=null&&lri.size()>0 && !(ret!=null) }
results[https://github.com/atrix-aosp/packages_apps_Settings/blob/32d54b19367505547a67c2b717047fdab375db94/src/com/android/settings/fuelgauge/BatterySipper.java][getNameIcon][70] = -> pm=mContext.getPackageManager()@ -> defaultActivityIcon=pm.getDefaultActivityIcon()@ -> packages=pm.getPackagesForUid(uid,)@ -> IF { -> return @packages==null } -> LOOP { -> TRY { -> ai=pm.getApplicationInfo(packageLabels[i],0,)@!(packages==null) && i<packageLabels.length -> label=ai.loadLabel(pm,)@!(packages==null) -> IF { -> icon=ai.loadIcon(pm,)@!(packages==null) } } } } ELSE { -> LOOP { -> TRY { -> pi=pm.getPackageInfo(pkgName,0,)@!(packages==null) -> IF { -> nm=pm.getText(pkgName,pi.sharedUserLabel,pi.applicationInfo,)@!(packages==null) -> IF { -> IF { -> icon=pi.applicationInfo.loadIcon(pm,)@!(packages==null) } } } } }
results[https://github.com/DarkPA/android_packages_apps_Settings/blob/b2b9312b70bbde51fbae485ee83b59bbded8c98c/src/com/android/settings/net/UidDetailProvider.java][buildUidDetail][7] = -> pm=mContext.getPackageManager()@ -> detail.label=pm.getNameForUid(uid,)@ -> detail.icon=pm.getDefaultActivityIcon()@ -> detail.icon=pm.getDefaultActivityIcon()@ -> detail.icon=pm.getDefaultActivityIcon()@ -> detail.icon=pm.getDefaultActivityIcon()@ -> packageNames=pm.getPackagesForUid(uid,)@ -> TRY { -> IF { -> info=pm.getApplicationInfo(packageNames[0],0,)@ -> detail.label=info.loadLabel(pm,).toString()@ -> detail.icon=info.loadIcon(pm,)@ } ELSE { -> IF { -> LOOP { -> packageInfo=pm.getPackageInfo(packageName,0,)@ -> appInfo=pm.getApplicationInfo(packageName,0,)@ -> detail.detailLabels[i]=appInfo.loadLabel(pm,).toString()@i<length -> IF { -> detail.label=pm.getText(packageName,packageInfo.sharedUserLabel,packageInfo.applicationInfo,).toString()@ -> detail.icon=appInfo.loadIcon(pm,)@ } } } } }
results[https://github.com/TheCollective/android_packages_apps_Settings/blob/08123a1dff10d865ec25900e304c0831e1196ef0/src/com/android/settings/fuelgauge/BatterySipper.java][loadNameAndIcon][1] = -> IF { -> return @uidObj==null } -> pm=mContext.getPackageManager()@!(uidObj==null) -> defaultActivityIcon=pm.getDefaultActivityIcon()@!(uidObj==null) -> mPackages=pm.getPackagesForUid(uid,)@!(uidObj==null) -> IF { -> return @!(uidObj==null) && mPackages==null } -> LOOP { -> TRY { -> ai=pm.getApplicationInfo(packageLabels[i],0,)@!(mPackages==null) && !(uidObj==null) && i<packageLabels.length -> label=ai.loadLabel(pm,)@!(mPackages==null) && !(uidObj==null) -> IF { -> icon=ai.loadIcon(pm,)@!(mPackages==null) && !(uidObj==null) } } } } ELSE { -> LOOP { -> TRY { -> pi=pm.getPackageInfo(pkgName,0,)@!(mPackages==null) && !(uidObj==null) -> IF { -> nm=pm.getText(pkgName,pi.sharedUserLabel,pi.applicationInfo,)@!(mPackages==null) && !(uidObj==null) -> IF { -> IF { -> icon=pi.applicationInfo.loadIcon(pm,)@!(mPackages==null) && !(uidObj==null) } } } } }
results[https://github.com/joeDeuce/packages_apps_Settings/blob/5ca9667eba77a7715addcfc4ca8a8d7bab441063/src/com/android/settings/net/UidDetailProvider.java][getUidDetail][18] = } ELSE { -> IF { -> return null@!(cached!=null) } -> pm=mContext.getPackageManager()@cached!=null -> detail.label=pm.getNameForUid(uid,)@cached!=null -> detail.icon=pm.getDefaultActivityIcon()@cached!=null -> detail.icon=pm.getDefaultActivityIcon()@cached!=null -> detail.icon=pm.getDefaultActivityIcon()@cached!=null -> detail.icon=pm.getDefaultActivityIcon()@cached!=null -> packageNames=pm.getPackagesForUid(uid,)@cached!=null -> TRY { -> IF { -> info=pm.getApplicationInfo(packageNames[0],0,)@cached!=null -> detail.label=info.loadLabel(pm,).toString()@cached!=null -> detail.icon=info.loadIcon(pm,)@cached!=null } ELSE { -> IF { -> LOOP { -> packageInfo=pm.getPackageInfo(packageName,0,)@cached!=null -> appInfo=pm.getApplicationInfo(packageName,0,)@cached!=null -> detail.detailLabels[i]=appInfo.loadLabel(pm,).toString()@i<length && cached!=null -> IF { -> detail.label=pm.getText(packageName,packageInfo.sharedUserLabel,packageInfo.applicationInfo,).toString()@cached!=null -> detail.icon=appInfo.loadIcon(pm,)@cached!=null } } } } }
results[https://github.com/mirror-androidarmv6/android_packages_apps_Settings/blob/2c84b9f23c1bf345478bce7a2955ac309e32fe6d/src/com/android/settings/net/UidDetailProvider.java][buildUidDetail][30] = -> pm=mContext.getPackageManager()@ -> detail.label=pm.getNameForUid(uid,)@ -> detail.icon=pm.getDefaultActivityIcon()@ -> detail.icon=pm.getDefaultActivityIcon()@ -> detail.icon=pm.getDefaultActivityIcon()@ -> detail.icon=pm.getDefaultActivityIcon()@ -> IF { -> info=um.getUserInfo(userHandle,)@!(uid<=-2000) -> IF { -> detail.icon=UserUtils.getUserIcon(um,info,res,)@info!=null && !(uid<=-2000) -> return detail@info!=null && uid<=-2000 } } -> packageNames=pm.getPackagesForUid(uid,)@!(uid<=-2000) -> TRY { -> IF { -> info=pm.getApplicationInfo(packageNames[0],0,)@!(uid<=-2000) -> detail.label=info.loadLabel(pm,).toString()@!(uid<=-2000) -> detail.icon=info.loadIcon(pm,)@!(uid<=-2000) } ELSE { -> IF { -> LOOP { -> packageInfo=pm.getPackageInfo(packageName,0,)@!(uid<=-2000) -> appInfo=pm.getApplicationInfo(packageName,0,)@!(uid<=-2000) -> detail.detailLabels[i]=appInfo.loadLabel(pm,).toString()@!(uid<=-2000) && i<length -> IF { -> detail.label=pm.getText(packageName,packageInfo.sharedUserLabel,packageInfo.applicationInfo,).toString()@!(uid<=-2000) -> detail.icon=appInfo.loadIcon(pm,)@!(uid<=-2000) } } } } }
results[https://github.com/TheCollective/android_packages_apps_Settings/blob/08123a1dff10d865ec25900e304c0831e1196ef0/src/com/android/settings/net/UidDetailProvider.java][buildUidDetail][1] = -> pm=mContext.getPackageManager()@ -> detail.label=pm.getNameForUid(uid,)@ -> detail.icon=pm.getDefaultActivityIcon()@ -> detail.icon=pm.getDefaultActivityIcon()@ -> detail.icon=pm.getDefaultActivityIcon()@ -> detail.icon=pm.getDefaultActivityIcon()@ -> IF { -> info=um.getUserInfo(userHandle,)@!(uid<=-2000) -> IF { -> detail.icon=UserUtils.getUserIcon(mContext,um,info,res,)@info!=null && !(uid<=-2000) -> return detail@info!=null && uid<=-2000 } } -> packageNames=pm.getPackagesForUid(uid,)@!(uid<=-2000) -> TRY { -> IF { -> info=pm.getApplicationInfo(packageNames[0],0,)@!(uid<=-2000) -> detail.label=info.loadLabel(pm,).toString()@!(uid<=-2000) -> detail.icon=info.loadIcon(pm,)@!(uid<=-2000) } ELSE { -> IF { -> LOOP { -> packageInfo=pm.getPackageInfo(packageName,0,)@!(uid<=-2000) -> appInfo=pm.getApplicationInfo(packageName,0,)@!(uid<=-2000) -> detail.detailLabels[i]=appInfo.loadLabel(pm,).toString()@!(uid<=-2000) && i<length -> IF { -> detail.label=pm.getText(packageName,packageInfo.sharedUserLabel,packageInfo.applicationInfo,).toString()@!(uid<=-2000) -> detail.icon=appInfo.loadIcon(pm,)@!(uid<=-2000) } } } } }
results[https://github.com/practo/ActionBarSherlock/blob/1f847330fc2575cd9248b34587fbc3323f35c15e/library/src/android/support/v4/app/ActionBarCustom.java][performAttach][8] = -> homeItem=mActionBar.getHomeItem()@ -> homeWrapper=new WatsonItemViewWrapper(homeItem,)@ -> pm=getActivity().getPackageManager()@ -> appInfo=getActivity().getApplicationInfo()@ -> TRY { -> actInfo=pm.getActivityInfo(getActivity().getComponentName(),PackageManager.GET_ACTIVITIES,)@ } -> IF { -> IF { -> mActionBar.setTitle(actInfo.loadLabel(pm,),)@mActionBar.getTitle()==null && actInfo!=null } ELSE { -> mActionBar.setTitle(appInfo.loadLabel(pm,),)@mActionBar.getTitle()==null } } -> IF { -> IF { -> homeItem.setIcon(actInfo.loadIcon(pm,),)@actInfo!=null && homeItem.getIcon()==null } ELSE { -> homeItem.setIcon(appInfo.loadIcon(pm,),)@homeItem.getIcon()==null } } -> IF { -> IF { -> IF { -> homeItem.setLogo(actInfo.loadLogo(pm,),)@actInfo!=null && homeItem.getLogo()==null } ELSE { -> homeItem.setLogo(appInfo.loadLogo(pm,),)@homeItem.getLogo()==null } } }
results[https://github.com/pixmob/freemobilenetstat/blob/1f847330fc2575cd9248b34587fbc3323f35c15e/library/src/android/support/v4/app/ActionBarCustom.java][performAttach][1] = -> mActionBar=(ActionBarWatson) getActivity().findViewById(R.id.actionbar,)@ -> mActionBar.setHomeListener(mHomeListener,)@ -> pm=getActivity().getPackageManager()@ -> appInfo=getActivity().getApplicationInfo()@ -> TRY { -> actInfo=pm.getActivityInfo(getActivity().getComponentName(),PackageManager.GET_ACTIVITIES,)@ } -> IF { -> IF { -> mActionBar.setTitle(actInfo.loadLabel(pm,),)@actInfo!=null && mActionBar.getTitle()==null } ELSE { -> mActionBar.setTitle(appInfo.loadLabel(pm,),)@mActionBar.getTitle()==null } } -> IF { -> IF { -> mActionBar.setHomeIcon(actInfo.loadIcon(pm,),)@actInfo!=null && mActionBar.getHomeIcon()==null } ELSE { -> mActionBar.setHomeIcon(appInfo.loadIcon(pm,),)@mActionBar.getHomeIcon()==null } } -> IF { -> IF { -> IF { -> mActionBar.setHomeLogo(actInfo.loadLogo(pm,),)@mActionBar.getHomeLogo()==null && actInfo!=null } ELSE { -> mActionBar.setHomeLogo(appInfo.loadLogo(pm,),)@mActionBar.getHomeLogo()==null } } }
