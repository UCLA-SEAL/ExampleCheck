results[https://github.com/ntietz/virtualdisk/blob/9342c3bde0458643307a3ff4f45555eb4790a9a2/src/com/virtualdisk/datanode/Drive.java][write][1] = -> TRY { -> out=new RandomAccessFile(f,"rw",)@ -> out.seek(physicalOffset*blockSize,)@ -> out.write(block,)@ -> out.close()@ }
results[https://github.com/bladesilent/Harmony/blob/cfad25367437aa4d561ad52e9ed05453c96469fa/classlib/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/io/RandomAccessFileTest.java][test_writeI][8] = -> TRY {  -> raf=new java.io.RandomAccessFile(fileName,"rw",)@ -> raf.write('t',)@ -> raf.close()@ } CATCH(IOException) {}
results[https://github.com/pbeaman/persistit/blob/10b259d3c0b72a7c5882268df9128b9cdf51d5a4/src/test/java/com/persistit/VolumeTest.java][testCreateOpenVolume][1] = -> TRY {  -> raf=new RandomAccessFile(file,"rw",)@ -> raf.write( new byte[],)@ -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/kingargyle/exist-1.4.x/blob/09d678fd8a58728dd51005c63b942f1ab6541ebc/src/org/exist/cluster/journal/JournalManager.java][writeDataFile][2] = -> TRY {  -> store=new RandomAccessFile(storage,"rws",)@ -> store.seek(start,)@ -> store.write(eventBytes,)@ -> store.close()@ } CATCH(IOException) {}
results[https://github.com/silid/project-x-cvs/blob/5d89f445b50138a6a182a20f0ae76d0ddc0309df/src/net/sourceforge/dvb/projectx/audio/MPAD.java][deleteRIFF][6] = -> TRY {  -> riff=new RandomAccessFile(file,"rw",)@ -> riff.seek(0,)@ -> riff.write( new byte[],)@ -> riff.close()@ } CATCH(IOException) {}
results[https://github.com/apurtell/hadoop/blob/16315f7fdea71c1d1e6ab67f146a6740151fdb62/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestClientReportBadBlock.java][corruptBlock][12] = -> TRY {  -> raFile=new RandomAccessFile(f,"rw",)@ -> LOOP { -> bytes[i]=(byte) i@i<BLOCK_SIZE } -> raFile.write(bytes,)@ -> raFile.close()@ } CATCH(FileNotFoundException,IOException) {}
results[https://github.com/svn2github/H2-Mirror/blob/711a312c29dd7313ac7fa78ce331298d8cd6e9aa/h2/src/tools/org/h2/dev/util/Migrate.java][writeFile][14] = -> TRY { -> ra=new RandomAccessFile(file,"rw",)@ -> ra.write(data,)@ -> ra.setLength(data.length,)@ -> ra.close()@ } CATCH(IOException) { -> throw new RuntimeException("Error writing to file "+file,e,)@ }
results[https://github.com/woggle/mesos-old/blob/9e4b96d1e52898adc0fcdd3313909b7883d3ab68/src/third_party/zookeeper-3.3.1/src/java/test/org/apache/zookeeper/server/CRCTest.java][corruptFile][25] = -> TRY {  -> raf=new RandomAccessFile(file,"rw",)@ -> b="mahadev".getBytes()@ -> raf.seek(writeLen,)@ -> raf.write(b,)@ -> raf.close()@ } CATCH(IOException) {}
results[https://github.com/cmeiklejohn/flume-ng/blob/7a6e3db005dfc7848eeb62b6e66b91dc00a7f726/flume-ng-channels/flume-file-channel/src/test/java/org/apache/flume/channel/file/TestFileChannelRestart.java][doTestCorruptInflights][2] = -> TRY {  -> writer=new RandomAccessFile(inflight,"rw",)@ -> writer.write(new Random().nextInt(),)@ -> writer.close()@ } CATCH(Exception) {}
results[https://github.com/ntietz/virtualdisk/blob/061bcb45ac6ccda6e3ab82c1ea5e28f2998d71fb/src/edu/kent/cs/virtualdisk/datanode/Drive.java][write][1] = -> TRY { -> out=new RandomAccessFile(f,"rw",)@ -> out.seek(physicalOffset*blockSize,)@ -> out.write(block,)@ -> out.close()@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/binwiederhier/syncany/blob/46a6ae1ba2c3cf3b5cdcb81f445a77eda5455131/tests/org/syncany/tests/util/TestFileUtil.java][changeRandomPartOfBinaryFile][3] = -> TRY {  -> randomEngine.nextBytes(changeBytes,)@!(file.isDirectory()) && !(file!=null&&!(file.exists())) -> randomAccessFile=new RandomAccessFile(file,"rw",)@!(file.isDirectory()) && !(file!=null&&!(file.exists())) -> randomAccessFile.seek(changeBytesStartPos,)@!(file.isDirectory()) && !(file!=null&&!(file.exists())) -> randomAccessFile.write(changeBytes,)@!(file.isDirectory()) && !(file!=null&&!(file.exists())) -> randomAccessFile.close()@!(file.isDirectory()) && !(file!=null&&!(file.exists())) } CATCH(IOException) {}
results[https://github.com/Alvw/dreamrec/blob/d5e1b901daf6e3e2ad269326038409e711598d8b/src/com/crostec/ads/edf/EdfWriter.java][stopRecording][2] = -> TRY { -> outStream.seek(0,)@ -> outStream.write(createEdfHeader(),)@ -> outStream.close()@ } CATCH(IOException) { -> log.error(e,)@ }
results[https://github.com/YongJiang/org.eclipse.birt.engine/blob/f4b892eb829fd09c69affb882893e9d1d6ecb1d4/tests/org.eclipse.birt.core.tests/test/org/eclipse/birt/core/archive/ArchiveFileSaveTest.java][copyFile][1] = -> TRY {  -> tgtFile=new RandomAccessFile(tgt,"rw",)@ -> srcFile.read(bytes,)@ -> tgtFile.setLength(0,)@ -> tgtFile.write(bytes,)@ -> tgtFile.close()@ } CATCH(IOException) {}
results[https://github.com/angusmacdonald/h2o/blob/7763bd04c5ea5e21f6e794c198fd802ac04e43e4/src/tools/org/h2/build/BuildBase.java][writeFile][1] = -> TRY { -> ra=new RandomAccessFile(file,"rw",)@ -> ra.write(data,)@ -> ra.setLength(data.length,)@ -> ra.close()@ } CATCH(IOException) { -> throw new Error("Error writing to file "+file,e,)@ }
results[https://github.com/eswartz/emul/blob/8cc1c3663d5f894210c949aebfc4f62318ca6c88/v9t9/v9t9-java/v9t9-common/src/v9t9/common/files/FDR.java][writeFDR][1] = -> TRY {  -> sec=toBytes()@ -> raf=new RandomAccessFile(file,"rw",)@ -> raf.seek(0,)@ -> raf.write(sec,)@ -> raf.close()@ } CATCH(IOException) {}
results[https://github.com/montyqin/my_first_project/blob/b7b972a5f974eb9ca7f203cd7fd3116feba3a468/lancome/src/com/arvato/lancome2/web/servlet/UserServlet.java][writeFileContent][1] = -> TRY {  -> out=new RandomAccessFile(file,"rw",)@ -> fcout=out.getChannel()@ -> out.write(content.getBytes("UTF-8",),)@ -> out.close()@ } CATCH(FileNotFoundException,IOException,UnsupportedEncodingException) {}
results[https://github.com/freenet/contrib-official/blob/308c02c2b0545cf80bbfcea748ab5c2f99d70a93/bdb/test/com/sleepycat/je/log/FileManagerTest.java][testBadHeader][1] = -> TRY {  -> file0=new RandomAccessFile(fileManager.getFullFileName(0,FileManager.JE_SUFFIX,),FileManager.FileMode.READWRITE_MODE.getModeValue(),)@ -> file0.write(badData,)@ -> file0.close()@ } CATCH(IOException,DatabaseException) {}
results[https://github.com/apache/hadoop-common/blob/cc39cbfd6a66578c02ad71a802ffcbc400ddd0da/src/test/hdfs/org/apache/hadoop/hdfs/TestClientReportBadBlock.java][corruptBlock][32] = -> TRY {  -> raFile=new RandomAccessFile(data.getBlockFile(block,),"rw",)@ -> LOOP { -> bytes[i]=(byte) i@i<BLOCK_SIZE } -> raFile.write(bytes,)@ -> raFile.close()@ } CATCH(FileNotFoundException,IOException) {}
results[https://github.com/oxhead/decoupled-hadoop/blob/81db335ac6b67c749006e98223b61973a44ff4de/hadoop-common/src/test/java/org/apache/hadoop/fs/TestDU.java][createFile][68] = -> TRY {  -> random.nextBytes(data,)@ -> file=new RandomAccessFile(newFile,"rws",)@ -> file.write(data,)@ -> file.getFD().sync()@ -> file.close()@ } CATCH(IOException) {}
results[https://github.com/karino2/WhiteBoardCast/blob/c991e5296bd4bb0f9ebb3379184b22bca3c27e15/WhiteBoardCast/src/main/java/com/google/utils/IVFWriter.java][close][1] = -> TRY { -> ivfFile=new RandomAccessFile(file,"rw",)@ -> ivfFile.seek(0,)@ -> fileHeader=ivfFileHeader(frameCount,)@ -> ivfFile.write(fileHeader,)@ -> ivfFile.close()@ } CATCH(IOException) { -> System.err.println("Error closing "+file+" : "+e,)@ }
results[https://github.com/bryanjimenez/empanada/blob/e6a5ffa14bde5495b1182a74875f392f2a968b08/hadoop/hadoop-1.2.1/src/test/org/apache/hadoop/hdfs/server/namenode/TestEditLogLoading.java][testDisplayRecentEditLogOpCodes][4] = -> TRY {  -> rwf=new RandomAccessFile(editFile,"rw",)@ -> rwf.seek(fileLen-40,)@ -> LOOP { -> rwf.write((byte) 2,)@ } -> rwf.close()@ } CATCH(IOException) {}
results[https://github.com/quake0day/gurutella/blob/fa7712e601a466b8dc652d9fbb79ffee704902c7/src/DownloadStorage.java][addData][1] = -> TRY {  -> randomFile=new RandomAccessFile(_fileList.getAbsolutePath()+"//"+hashString,"rw",)@ -> fileLength=randomFile.length()@ -> randomFile.seek(fileLength,)@ -> randomFile.write(data,)@ -> randomFile.close()@ } CATCH(IOException) {}
results[https://github.com/jamesblackburn/cdt-core/blob/474a0e1f24f8c5c647c58a322343abb15e1600fe/utils/org/eclipse/cdt/utils/elf/AR.java][extractFiles][6] = -> TRY {  -> LOOP { -> data=header.getObjectData()@ -> rfile=new RandomAccessFile(output,"rw",)@ -> rfile.write(data,)@ -> rfile.close()@ } } CATCH(IOException) {}
results[https://github.com/bryanjimenez/empanada/blob/e6a5ffa14bde5495b1182a74875f392f2a968b08/hadoop/hadoop-1.2.1/src/test/org/apache/hadoop/hdfs/server/namenode/TestNameNodeRecovery.java][corrupt][4] = -> TRY {  -> rwf=new RandomAccessFile(editFile,"rw",)@ -> rwf.seek(editFile.length(),)@ -> rwf.write((byte) -1,)@ -> pad(rwf,padByte,2098176,)@ -> rwf.close()@ } CATCH(IOException) {}
results[https://github.com/Alvw/dreamrec/blob/21337dfb9a9b4bd1ab7c05145f74caf2d7e85b93/src/com/github/dreamrec/edf/EdfWriter.java][stopRecording][1] = -> TRY { -> outStream.seek(0,)@ -> outStream.write(createEdfHeader().getBytes(characterSet,),)@ -> outStream.close()@ } CATCH(IOException) { -> log.error(e,)@ }
results[https://github.com/cmeiklejohn/flume-ng/blob/7a6e3db005dfc7848eeb62b6e66b91dc00a7f726/flume-ng-channels/flume-file-channel/src/test/java/org/apache/flume/channel/file/TestFileChannelRestart.java][testCorruptCheckpointVersionMostSignificant4Bytes][2] = -> TRY {  -> writer=new RandomAccessFile(checkpoint,"rw",)@ -> writer.seek(EventQueueBackingStoreFile.INDEX_VERSION*Serialization.SIZE_OF_LONG,)@ -> writer.write( new byte[],)@ -> writer.getFD().sync()@ -> writer.close()@ } CATCH(Exception) {}
results[https://github.com/johnugeorge/Hadoop-mdfs/blob/1f724fe78ffd2b7e7fbd9044cc0efbd31f119a12/hadoop-1.2.1/src/test/org/apache/hadoop/hdfs/server/namenode/TestNameNodeRecovery.java][corrupt][4] = -> TRY {  -> rwf=new RandomAccessFile(editFile,"rw",)@ -> rwf.seek(editFile.length(),)@ -> pad(rwf,(byte) 0,2098176,)@ -> rwf.write(0x44,)@ -> rwf.close()@ } CATCH(IOException) {}
results[https://github.com/charleso/naca/blob/9fe1dd7b410a08e36c346ee9711baefd5bb116fc/JLib/src/jlib/persitantQueue/PersistantQueue.java][incMaxIndex][1] = -> TRY { -> fileIndex=new RandomAccessFile(m_csIndexFile,"rw",)@ -> csLine=fileIndex.readLine()@ -> fileIndex.seek(0,)@ -> tb=csLine.getBytes()@ -> fileIndex.write(tb,)@ -> fileIndex.setLength(csLine.length(),)@ -> fileIndex.close()@ }
results[https://github.com/charleso/naca/blob/9fe1dd7b410a08e36c346ee9711baefd5bb116fc/JLib/src/jlib/persitantQueue/PersistantQueue.java][decMaxIndex][2] = -> TRY { -> fileIndex=new RandomAccessFile(m_csIndexFile,"rw",)@ -> csLine=fileIndex.readLine()@ -> tb=csLine.getBytes()@ -> fileIndex.seek(0,)@ -> fileIndex.write(tb,)@ -> fileIndex.setLength(csLine.length(),)@ -> fileIndex.close()@ }
results[https://github.com/angusmacdonald/h2o/blob/d526c604cf8fa3349a5839da4d2990f767e5607c/src/test/org/h2/test/db/TestCsv.java][testNull][1] = -> TRY {  -> file=new RandomAccessFile(f,"rw",)@ -> file.write(csvContent.getBytes("UTF-8",),)@ -> file.close()@ -> assertEquals(csvContent+"\\N",data.trim(),)@ } CATCH(Exception) {}
results[https://github.com/teotigraphix/CausticSDK/blob/4c26b2241a6d10e2f7beb1cf49534f8721ac623f/Caustk/src/com/teotigraphix/caustk/core/CausticFile.java][writeFile][1] = -> TRY {  -> raf=new RandomAccessFile(file,"rw",)@ -> len=raf.length()@ -> raf.seek(len,)@ -> array=buffer.array()@ -> raf.write(array,)@ -> raf.close()@ } CATCH(IOException) {}
results[https://github.com/apurtell/hadoop/blob/82b749ed77b9d10bbc21f3573248c9fd9b0e15ec/hdfs/src/test/hdfs/org/apache/hadoop/hdfs/server/namenode/TestFSEditLogLoader.java][testDisplayRecentEditLogOpCodes][44] = -> TRY {  -> rwf=new RandomAccessFile(editFile,"rw",)@ -> rwf.seek(fileLen-40,)@ -> LOOP { -> rwf.write(FSEditLogOpCodes.OP_DELETE.getOpCode(),)@ } -> rwf.close()@ } CATCH(IOException) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/c445903c23d3316d31b5171130aaf714c23f3446/test/java/io/FileDescriptor/Finalize.java][doRandomAccessFile][3] = -> TRY {  -> raf=new RandomAccessFile(inFile,"r",)@ -> fd=raf.getFD()@ -> raf.close()@ -> raf=new RandomAccessFile(outFile,"rw",)@ -> fd=raf.getFD()@ -> raf.write(data,)@ -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/ezterry/GB-libcore/blob/e595037cf49109e9e20b47e6e191eda45e414008/luni/src/test/java/org/apache/harmony/luni/tests/java/io/RandomAccessFileTest.java][test_length][8] = -> TRY {  -> raf=new java.io.RandomAccessFile(fileName,"rw",)@ -> raf.write(fileString.getBytes(),)@ -> assertEquals("Incorrect length returned",fileString.length(),raf.length(),)@ -> raf.close()@ } CATCH(IOException) {}
results[https://github.com/QingpingMeng/DeID/blob/e012808914325a45ec952fdaba266256a72a1f76/src/niftijlib/Nifti1Dataset.java][writeVolBlob][1] = -> TRY {  } ELSE { -> raf=new RandomAccessFile(ds_datname,"rwd",)@!(ds_datname.endsWith(".gz",)) -> raf.seek(skip_head+skip_data,)@!(ds_datname.endsWith(".gz",)) -> raf.write(baos.toByteArray(),)@!(ds_datname.endsWith(".gz",)) -> raf.close()@!(ds_datname.endsWith(".gz",)) } CATCH(IOException) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/c445903c23d3316d31b5171130aaf714c23f3446/test/java/io/RandomAccessFile/SetLength.java][go][3] = -> TRY {  -> f=new RandomAccessFile(fn,"rw",)@ -> f.setLength(2*chunk,)@ -> f.write(buf,)@ -> f.setLength(3*chunk,)@ -> f.seek(1*chunk,)@ -> f.setLength(2*chunk,)@ -> f.close()@ } CATCH(IOException) {}
results[https://github.com/squirrely/arinc_838/blob/6ddac2c8ccfb523cf469bf7702d80d654efd0ee7/src/main/java/edu/cmu/sv/arinc838/writer/XdfWriter.java][write][1] = -> TRY {  -> randAccessFile=new RandomAccessFile(file,"rw",)@ -> randAccessFile.readFully(contents,)@ -> randAccessFile.seek(0,)@ -> randAccessFile.write("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n".getBytes(),)@ -> randAccessFile.write(contents,)@ -> randAccessFile.close()@ } CATCH(Exception) {}
results[https://github.com/unidevel/android/blob/6429d3139f76f08bf17fe8529e0a9f3718b0c800/MiBoxServer/src/com/unidevel/mibox/server/handler/SendFileHandler.java][handleRequest][1] = -> TRY { -> f=new RandomAccessFile(file,"rw",)@ -> IF { -> f.seek(request.offset,)@ } -> f.write(request.block,)@ -> f.close()@ } CATCH(Exception) { -> result.failedMessage=e.getMessage()@ }
results[https://github.com/mendhak/gpslogger/blob/9a4155fd518d43adadd6155850d7816ebdbd3ae8/GPSLogger/src/com/mendhak/gpslogger/loggers/Gpx10FileLogger.java][run][1] = -> TRY { -> trackPoint=GetTrackPointXml(loc,dateTimeString,)@ -> raf=new RandomAccessFile(gpxFile,"rw",)@ -> raf.seek(startPosition,)@ -> raf.write(trackPoint.getBytes(),)@ -> raf.close()@ } CATCH(Exception) { -> Utilities.LogError("Gpx10FileLogger.Write",e,)@ }
results[https://github.com/SomethingExplosive/android_libcore/blob/21643b11ea824e0e4e65a5437a57abed2052ff7a/luni/src/test/java/libcore/java/io/OldRandomAccessFileTest.java][test_getChannel][52] = -> TRY {  -> raf=new java.io.RandomAccessFile(fileName,"rw",)@ -> fc=raf.getChannel()@ -> raf.write(testString.getBytes(),)@ -> assertTrue("Test 3: Channel position is not equal to file pointer.",fc.position()==raf.getFilePointer(),)@ -> raf.close()@ } CATCH(IOException) {}
results[https://github.com/OpenNMS/jrobin/blob/37a0286891515f5459e973d9a0cf3eaa01a05021/src/org/jrobin/graph/ImageWorker.java][saveImage][4] = -> TRY {  -> bytes=getImageBytes(type,quality,)@ -> f=new RandomAccessFile(path,"rw",)@ -> TRY { -> f.write(bytes,)@ } FINALLY { -> f.close()@ } } CATCH(IOException) {}
results[https://github.com/apurtell/hadoop/blob/1c4a693ac7372ff5f8b1e9c047d6f362da782047/src/test/hdfs/org/apache/hadoop/hdfs/MiniDFSCluster.java][corruptBlock][42] = -> TRY {  -> IF { -> return false@blockFile==null||!(blockFile.exists()) } -> raFile=new RandomAccessFile(blockFile,"rw",)@!(blockFile==null||!(blockFile.exists())) -> channel=raFile.getChannel()@!(blockFile==null||!(blockFile.exists())) -> raFile.seek(rand,)@!(blockFile==null||!(blockFile.exists())) -> raFile.write(badString.getBytes(),)@!(blockFile==null||!(blockFile.exists())) -> raFile.close()@!(blockFile==null||!(blockFile.exists())) } CATCH(IOException) {}
results[https://github.com/bitronix/btm/blob/c8f9d2e94e02a4a5acf7b73314d72bbd22494f0f/test/bitronix/tm/journal/DiskForceTest.java][testRandomAccessFile][4] = -> TRY {  -> raf=new RandomAccessFile("test.dat","rw",)@ -> LOOP { -> raf.write(buffer,)@ -> raf.seek(0L,)@ -> raf.getFD().sync()@ } -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/thialfihar/apg/blob/5dc693c64c14000a3a03903736d000a45795bcee/OpenPGP-Keychain/src/org/sufficientlysecure/keychain/helper/PgpMain.java][deleteFileSecurely][13] = -> TRY {  -> raf=new RandomAccessFile(file,"rws",)@ -> raf.seek(0,)@ -> raf.getFilePointer()@ -> LOOP { -> random.nextBytes(data,)@ -> raf.write(data,)@ } -> raf.close()@ } CATCH(FileNotFoundException,IOException) {}
results[https://github.com/oxhead/decoupled-hadoop/blob/dc0f1a14cb6908e7d05320ecf40d836004d85024/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestNameNodeRecovery.java][corrupt][11] = -> TRY {  -> rwf=new RandomAccessFile(editFile,"rw",)@ -> rwf.seek(editFile.length(),)@ -> rwf.write((byte) -1,)@ -> LOOP { -> rwf.write(padByte,)@ } -> rwf.close()@ } CATCH(IOException) {}
results[https://github.com/jbosstm/narayana/blob/bc9a3668c4ed6e8c52f6b2c3d4596e115c12ccf8/qa/tests/src/org/jboss/jbossts/qa/PerfProfileIOClients/OpenWriteSyncClose.java][main][1] = -> TRY { -> LOOP { -> randomAccessFile=new RandomAccessFile(file,"rw",)@ -> fileDescriptor=randomAccessFile.getFD()@ -> randomAccessFile.write(block,)@ -> randomAccessFile.close()@ } } CATCH(Exception) { -> System.err.println("OpenWriteSyncClose.main: "+exception,)@ -> System.out.println("Failed",)@ }
results[https://github.com/jbosstm/narayana/blob/bc9a3668c4ed6e8c52f6b2c3d4596e115c12ccf8/qa/tests/src/org/jboss/jbossts/qa/PerfProfileIOClients/WriteSync.java][main][1] = -> TRY { -> randomAccessFile=new RandomAccessFile(file,"rw",)@ -> fileDescriptor=randomAccessFile.getFD()@ -> LOOP { -> randomAccessFile.write(block,)@ } -> randomAccessFile.close()@ } CATCH(Exception) { -> System.err.println("WriteSync.main: "+exception,)@ -> System.out.println("Failed",)@ }
results[https://github.com/smashnet/Peergroup/blob/5993a515b71dd32849f8a298b565621cbc81133b/src/de/pgrp/core/FileHandle.java][setChunkData][1] = -> IF { -> return @this.chunks==null } -> TRY { -> stream=new RandomAccessFile(this.file,"rwd",)@!(this.chunks==null) -> stream.seek(recent.getOffset(),)@!(this.chunks==null) -> stream.write(data,)@!(this.chunks==null) -> stream.close()@!(this.chunks==null) } CATCH(IOException) { -> Globals.log.addMsg("Error writing to file:"+ioe,1,)@!(this.chunks==null) }
results[https://github.com/freenet/contrib-official/blob/1cd7931975e5a958dd0e497beaa2de340eda53e9/db4o/src/db4oj/core/src/com/db4o/defragment/DefragmentServicesImpl.java][targetClassCollectionID][1] = -> TRY {  -> raf=new RandomAccessFile(file,"rw",)@ -> TRY { -> raf.seek(CLASSCOLLECTION_POINTER_ADDRESS,)@ -> raf.write(reader._buffer,)@ } FINALLY { -> raf.close()@ } } CATCH(IOException) {}
results[https://github.com/thihy/lucene/blob/0666c43457bc16b46de89efc433cf4c6481ef948/solr/core/src/test/org/apache/solr/search/TestRecovery.java][testCorruptLog][3] = -> TRY {  -> TRY { -> raf=new RandomAccessFile(new File(logDir,files[files.length-1],),"rw",)@ -> len=raf.length()@ -> raf.seek(0,)@ -> raf.write( new byte[],)@ -> raf.close()@ } } CATCH(Exception) {}
results[https://github.com/sbtourist/Journal.IO/blob/90cb13c822d5ecf6bcd3194c1bc2a11cec827626/src/main/java/journal/io/api/DataFile.java][writeHeader][1] = -> TRY {  -> raf=openRandomAccessFile()@ -> TRY { -> raf.write(Journal.MAGIC_STRING,)@ -> raf.writeInt(Journal.STORAGE_VERSION,)@ } FINALLY { -> raf.close()@ } } CATCH(IOException) {}
results[https://github.com/rweng/hdfs-indexer/blob/9d8fa227e5567bf3e08afd05ae1d1c1afc6987fc/src/test/java/de/rwhq/hdfs/index/SecondaryIndexTest.java][addToIndexInputStream][1] = -> TRY { -> file=new RandomAccessFile(new File(tmpFile.toString(),),"rw",)@ -> file.seek(pos,)@ -> file.write(line.getBytes(),)@ -> file.close()@ } CATCH(IOException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/reppie/xchange/blob/7807f15f1bf440b9dc7081d30011d86f81737509/projects/xchange/xchange/XStorageServer.java][transferBlock][1] = -> TRY {  -> raf=new RandomAccessFile(new File("xchange/shared/"+fileName+".!xch",),"rw",)@ -> LOOP { -> temp=inputStream.read(buffer,offset,currentBlockSize-offset,)@offset<currentBlockSize&&temp!=-1&&blockNr!=maxBlockNumber+1 } -> raf.seek(currentBlockSize*blockNr,)@ -> raf.write(buffer,)@ -> raf.close()@ } CATCH(Exception) {}
results[https://github.com/miho/VRL/blob/f1453e2a3a243cec0a7d51f4522fa367ab45fd1b/VRL/src/eu/mihosoft/vrl/ext/com/bric/qt/JPEGMovieAnimation.java][close][2] = -> TRY {  -> TRY { -> raf=new RandomAccessFile(dest,"rw",)@ -> raf.seek(0,)@ -> array[0]=(byte) mdatSize>>24&0xff@ -> array[1]=(byte) mdatSize>>16&0xff@ -> array[2]=(byte) mdatSize>>8&0xff@ -> array[3]=(byte) mdatSize&0xff@ -> raf.write(array,)@ } FINALLY { -> raf.close()@ } } CATCH(IOException) {}
results[https://github.com/exoplatform/jcr/blob/117b213fd7de4383b99b46c735e1b01846611eee/component/ext/src/main/java/org/exoplatform/services/jcr/ext/replication/ChangesFile.java][write][1] = -> TRY {  -> IF { -> randomAccessFile=new RandomAccessFile(file,"rw",)@randomAccessFile==null } -> randomAccessFile.seek(offset,)@ -> randomAccessFile.write(data,)@ -> IF { -> randomAccessFile.close()@ } } CATCH(IOException) {}
results[https://github.com/urbanairship/datacube/blob/c1ec455e9999e7b1d184993f1b2b8e39c7443d61/src/main/java/hacklog/HackLog.java][log][1] = -> TRY { -> raf=new RandomAccessFile(new File("/tmp/hacklog.txt",),"rwd",)@ -> raf.seek(raf.length(),)@ -> raf.write(s+"\n".getBytes(),)@ -> raf.close()@ } CATCH(IOException) { -> System.err.println("HackLog IOException!",)@ }
results[https://github.com/astanway/cannon-torrent/blob/c289575e8f97333afdf210ae5f0713a03c1c18c8/peers/DownloadThread.java][interpret][1] = -> IF { -> return @m==null } -> piece_data=pm.getData()@!(m==null) -> b=new Block(pm.getPieceIndex(),pm.getBegin()/Manager.block_length,piece_data,)@!(m==null) -> b.setData(piece_data,)@!(m==null) -> TRY { -> file=new RandomAccessFile("temp/"+name,"rw",)@!(m==null) -> file.write(piece_data,)@!(m==null) -> file.close()@!(m==null) }
results[https://github.com/Crossbones/android_libcore/blob/21643b11ea824e0e4e65a5437a57abed2052ff7a/luni/src/test/java/libcore/java/io/OldRandomAccessFileTest.java][test_length][52] = -> TRY {  -> raf=new java.io.RandomAccessFile(fileName,"rw",)@ -> raf.write(testString.getBytes(),)@ -> assertEquals("Test 1: Incorrect length returned. ",testLength,raf.length(),)@ -> raf.close()@ -> TRY { -> raf.length()@ } } CATCH(IOException) {}
results[https://github.com/anteoc/hadoop-fork/blob/4e2eeba443dffb7381deeee369b6d192d0cfcb93/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestBlockReaderLocal.java][setup][4] = -> TRY {  -> TRY { -> bf=new RandomAccessFile(blockFile,"rw",)@ -> bf.write( new byte[],)@ } FINALLY { -> IF { -> bf.close()@bf!=null } } } CATCH(IOException) {}
results[https://github.com/bryanjimenez/empanada/blob/e6a5ffa14bde5495b1182a74875f392f2a968b08/hadoop/hadoop-1.2.1/src/test/org/apache/hadoop/hdfs/server/namenode/TestEditLogToleration.java][modify][2] = -> TRY {  -> raf=new RandomAccessFile(f,"rw",)@ -> raf.seek(f.length(),)@ -> IF { -> pad(raf,pad,corruptionLength-1,)@corruptionLength>0 -> raf.write(0xAB,)@ } -> pad(raf,pad,paddingLength,)@ -> raf.close()@ } CATCH(IOException) {}
results[https://github.com/zhoulzhou/IPCPlayer/blob/ccacfcc74df9cb2a338a39ea7bde0e991d9bbe50/src/com/example/ipcplayer/activity/FileActivity.java][write][1] = -> TRY { -> IF { -> raf=new RandomAccessFile(targetFile,"rw",)@ -> raf.seek(targetFile.length(),)@ -> raf.write(content.getBytes(),)@ -> raf.close()@ } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/kelemen/netbeans-gradle-project/blob/374250866837fd15cf57dcb4be7a1a86fe6eb33d/src/test/java/org/netbeans/gradle/project/StringAsFileRefTest.java][testModifiedContent][3] = -> TRY {  -> fileContent=new RandomAccessFile(fileRef1.getFile(),"rw",)@ -> TRY { -> fileContent.setLength(0,)@ -> fileContent.write(modContent,)@ } FINALLY { -> fileContent.close()@ } } CATCH(Exception) {}
results[https://github.com/pbeaman/persistit/blob/10b259d3c0b72a7c5882268df9128b9cdf51d5a4/src/test/java/com/persistit/stress/unit/CommitBench.java][getProperties][1] = -> LOOP { -> IF { -> TRY { -> raf=new RandomAccessFile(file,"rws",)@ -> raf.seek(0,)@ -> raf.write( new byte[],)@ -> raf.close()@ } CATCH(IOException) { -> throw new RuntimeException(e,)@ } } }
results[https://github.com/xupingmao/ServerBenchmarkSystem/blob/b58d9de2ee569eda19d464342d630061a7dce385/src/thedawn/global/ErrorLog.java][log][2] = -> TRY { -> raf=new RandomAccessFile(file,"rw",)@ -> raf.seek(file.length(),)@ -> msg=e.toString()@ -> msg+=System.getProperty("line.separator",)@ -> raf.write(msg.getBytes(),)@ -> raf.close()@ } CATCH(IOException) { -> e1.printStackTrace()@ }
results[https://github.com/exoplatform/jcr/blob/117b213fd7de4383b99b46c735e1b01846611eee/component/ext/src/main/java/org/exoplatform/services/jcr/ext/replication/recovery/RecoveryWriter.java][writeNotConfirmationInfo][1] = -> TRY {  -> LOOP { -> raf=new RandomAccessFile(metaDataFile,"rw",)@ -> raf.seek(metaDataFile.length(),)@ -> raf.write(dataFile.getCanonicalPath()+"\n".getBytes(),)@ -> raf.close()@ } } CATCH(IOException) {}
results[https://github.com/JustAnother1/Friends-United/blob/07176cd1a852cc04ed28104698ae89e7828a5fc0/src/org/FriendsUnited/FriendServer/Util/RequestedTransfer.java][writeBytesFromPacket][1] = -> IF { -> TRY { -> target.seek(packet.getChunkBegin(),)@null!=target -> data=packet.getContent()@ -> target.write(data,)@null!=target -> target.close()@null!=target } CATCH(IOException) { -> log.error(Tool.fromExceptionToString(e,),)@ } }
results[https://github.com/benetech/martus-android/blob/9bcae7e6b104e5f70ad4d377915a0d3768165979/martus-android/src/org/martus/util/ScrubFile.java][scrub][2] = -> TRY {  -> IF { -> Arrays.fill(fillData,singleScrubByte,)@fillData==null } -> randomFile=new RandomAccessFile(file,"rw",)@ -> LOOP { -> randomFile.write(fillData,)@ } -> remander=(int) length-offset@ -> randomFile.write(fillData,0,remander,)@ -> randomFile.close()@ } CATCH(IOException) {}
results[https://github.com/jbosstm/narayana/blob/bc9a3668c4ed6e8c52f6b2c3d4596e115c12ccf8/qa/tests/src/org/jboss/jbossts/qa/PerfProfileIOClients/WriteSyncSeek.java][main][1] = -> TRY { -> randomAccessFile=new RandomAccessFile(file,"rw",)@ -> fileDescriptor=randomAccessFile.getFD()@ -> LOOP { -> randomAccessFile.write(block,)@ -> randomAccessFile.seek(0,)@ } -> randomAccessFile.close()@ } CATCH(Exception) { -> System.err.println("WriteSyncSeek.main: "+exception,)@ -> System.out.println("Failed",)@ }
results[https://github.com/zjshen/hadoop-common/blob/415ccedbd222bc67d91e067978b7b383b3284c5a/src/test/org/apache/hadoop/hdfs/TestDatanodeBlockScanner.java][corruptReplica][27] = -> TRY {  -> LOOP { -> IF { -> raFile=new RandomAccessFile(blockFile,"rw",)@blockFile.exists() -> channel=raFile.getChannel()@ -> raFile.seek(rand,)@ -> raFile.write(badString.getBytes(),)@ -> raFile.close()@ } } } CATCH(IOException) {}
results[https://github.com/apavlo/h-store/blob/e1f70e244e03e6adc24af4950455535ee2119e5f/src/hsqldb19b3/org/hsqldb/persist/RAShadowFile.java][restoreFile][2] = -> TRY {  -> dest=new RandomAccessFile(destName,"rw",)@ -> LOOP { -> source.read(buffer,)@source.getFilePointer()!=source.length() -> dest.seek(position,)@ -> dest.write(buffer,)@ } -> dest.seek(DataFileCache.LONG_FREE_POS_POS,)@ -> length=dest.readLong()@ -> JavaSystem.setRAFileLength(dest,length,)@ -> dest.close()@ } CATCH(IOException) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/0a0f1b3dfb3e04b4f5fc44ad0d5990fe34238495/test/java/io/File/Basic.java][main][3] = -> TRY {  -> IF { -> raf=new RandomAccessFile(bigFile,"rw",)@ -> TRY { -> raf.seek(big,)@ -> raf.write('x',)@ } FINALLY { -> raf.close()@ } } } CATCH(Exception) {}
results[https://github.com/broadinstitute/IGV/blob/26a8717aa3253e34ccc75ef57ebcdbe25d494c26/src/org/broad/igv/gwas/EqtlPreprocessor.java][writeIndexPosition][1] = -> TRY { -> raf=new RandomAccessFile(file,"rw",)@ -> raf.getChannel().position(indexPositionPosition,)@ -> buffer=new BufferedByteWriter()@ -> buffer.putLong(indexPosition,)@ -> buffer.putInt(nbytes,)@ -> raf.write(buffer.getBytes(),)@ -> raf.close()@ } CATCH(IOException) { -> ex.printStackTrace()@ }
results[https://github.com/YongJiang/org.eclipse.birt.common/blob/f1ccca7a7a42784368300ee0f36f4c282cc9ee05/plugins/org.eclipse.birt.core/src/org/eclipse/birt/core/btree/RAMBTreeFile.java][write][1] = -> TRY {  -> rf=new RandomAccessFile(file,"w",)@ -> TRY { -> LOOP { -> block=(byte[]) blocks.get(i,)@i<blockCount -> rf.write(block,)@ } } FINALLY { -> rf.close()@ } } CATCH(IOException) {}
results[https://github.com/oxhead/decoupled-hadoop/blob/5a9843d8e404cb193af9d5ab2bcb4cd79e3b67a9/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestBlockReaderLocal.java][setup][4] = -> TRY {  -> TRY { -> bf=new RandomAccessFile(blockFile,"rw",)@ -> bf.seek(1539,)@ -> bf.write( new byte[],)@ } FINALLY { -> IF { -> bf.close()@bf!=null } } } CATCH(IOException) {}
results[https://github.com/compbio-UofT/savant/blob/678fa18f0ddf6471ab2427571c8b922a5a0207ad/savant.core/src/org/broad/igv/tdf/TDFWriter.java][writeIndexPosition][5] = -> TRY { -> raf=new RandomAccessFile(file,"rw",)@ -> raf.getChannel().position(indexPositionPosition,)@ -> buffer=new BufferedByteWriter()@ -> buffer.putLong(indexPosition,)@ -> buffer.putInt(nbytes,)@ -> raf.write(buffer.getBytes(),)@ -> raf.close()@ } CATCH(IOException) { -> ex.printStackTrace()@ }
results[https://github.com/kambatla/hadoop-1/blob/54aaa5f358494a5fb4166d254d8a823bf8a9bc15/src/test/org/apache/hadoop/dfs/TestFsck.java][testCorruptBlock][2] = -> TRY {  -> LOOP { -> IF { -> raFile=new RandomAccessFile(blockFile,"rw",)@blockFile.exists() -> channel=raFile.getChannel()@ -> raFile.seek(rand,)@ -> raFile.write(badString.getBytes(),)@ -> raFile.close()@ } } } CATCH(Exception) {}
results[https://github.com/empeeoh/BACnet4J/blob/46580a40d33734fd858629266281cac060072e79/src/com/serotonin/bacnet4j/obj/FileObject.java][writeData][1] = -> TRY {  -> raf=new RandomAccessFile(file,"rw",)@ -> TRY { -> data=fileData.getBytes()@ -> raf.seek(start,)@ -> raf.write(data,)@ -> raf.setLength(newLength,)@ } FINALLY { -> raf.close()@ } } CATCH(IOException) {}
results[https://github.com/camptocamp/secureOWS/blob/36abae7e77d3c056352799f286899453ecac360b/owsproxyserver/src/org/deegree/portal/portlet/enterprise/PrintListener.java][forwardPDF][1] = -> TRY {  -> TRY { -> raf=new RandomAccessFile(s,"rw",)@ -> raf.write((byte[]) result,)@ -> raf.close()@ } CATCH(Exception) { -> e.printStackTrace()@ -> LOG.logError("could not write temporary pdf file: "+s,e,)@ -> throw new PortalException("could not write temporary pdf file: "+s,e,)@ } } CATCH(PortalException) {}
results[https://github.com/charleso/naca/blob/9fe1dd7b410a08e36c346ee9711baefd5bb116fc/JLib/src/jlib/persitantQueue/PersistantQueue.java][buildIndexes][1] = -> TRY { -> fileIndex=new RandomAccessFile(m_csIndexFile,"rw",)@ -> tb=csLine.getBytes()@ -> fileIndex.seek(0,)@ -> fileIndex.write(tb,)@ -> fileIndex.setLength(csLine.length(),)@ -> fileIndex.close()@ } CATCH(FileNotFoundException) { -> e.printStackTrace()@ } CATCH(IOException) { -> e.printStackTrace()@ }
results[https://github.com/sisbell/jxta/blob/c1812dadcd3ebcaab2f217782e139ef3096d4e7b/j2se/apps/jxse-shell/src/main/java/net/jxta/impl/shell/bin/xfer/FileReceiver.java][processElement][2] = -> TRY {  -> IF { -> return true@null==fout } -> fout.seek(chunk*blockSize,)@!(null==fout) -> fout.write(element.getBytes(false,),)@!(null==fout) -> written+=element.getByteLength()@!(null==fout) -> IF { -> fout.getFD().sync()@!(null==fout) && !(written>=filesize) -> fout.close()@!(null==fout) && !(written>=filesize) -> return true@!(null==fout) && written>=filesize } } CATCH(IOException) {}
results[https://github.com/davidmoten/java-data-structures/blob/27ce2a31fe988ca1869760ced013bdacff6fa593/src/main/java/com/github/davidmoten/structures/btree/Storage.java][saveToFile][1] = -> TRY { -> f=new RandomAccessFile(getFile(pos.getFileNumber(),),"rw",)@ -> f.seek(pos.getPosition(),)@ -> f.write(bytes,)@ -> f.close()@ } CATCH(FileNotFoundException) { -> throw new RuntimeException(e,)@ } CATCH(IOException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/asascience/THREDDS/blob/c776d816ad599ceb460e316f7f9e1c522afde02d/grib/src/test/java/ucar/nc2/iosp/grib/TestIndexUpdating.java][gribAppend][2] = -> TRY { -> input.read(extra,)@ -> output=new RandomAccessFile(dataFile.getPath(),"rw",)@ -> output.seek(output.length(),)@ -> output.write(extra,)@ -> output.close()@ } CATCH(Exception) { -> fail("Failed to add file ["+input.getLocation()+"] to  file ["+dataFile.getPath()+"]: "+e.getMessage(),)@ }
results[https://github.com/freenet/contrib-official/blob/ffdc0d106578fd7070c60ffcb9b0396b5f1ae551/bdb/test/com/sleepycat/je/util/DbScavengerTest.java][corruptFile][1] = -> TRY {  -> TRY { -> raf=new RandomAccessFile(fileName,"rw",)@ -> raf.seek(fileOffset,)@ -> current=raf.read()@ -> raf.seek(fileOffset,)@ -> raf.write(current+1,)@ -> raf.close()@ } CATCH(IOException) { -> throw new DatabaseException(IOE,)@ } } CATCH(DatabaseException) {}
results[https://github.com/caosd/AdPlatform/blob/c63439a8b6385392b68473be09f1d82df1b3557c/project/portal/src/com/stomato/utils/FileUtils.java][appendBinaryToFile][1] = -> TRY { -> rfile=new RandomAccessFile(file,"rw",)@ -> IF { -> rfile.seek(file.length(),)@ } ELSE { -> rfile.seek(0,)@ } -> rfile.write(data,)@ -> rfile.close()@ } CATCH(IOException) { -> ex.printStackTrace()@ }
results[https://github.com/Flowdalic/openfire/blob/73492891654c2242721f61012921640b5b6b6326/src/plugins/rayo/src/java/com/sun/voip/Recorder.java][writeDataSize][2] = -> TRY { -> IF { -> auHeader[8]=(byte) dataSize>>24&0xff@auHeader!=null -> auHeader[9]=(byte) dataSize>>16&0xff@auHeader!=null -> auHeader[10]=(byte) dataSize>>8&0xff@auHeader!=null -> auHeader[11]=(byte) dataSize&0xff@auHeader!=null -> TRY { -> raf=new RandomAccessFile(recordPath,"rw",)@ -> raf.write(auHeader,)@auHeader!=null -> raf.close()@ } CATCH(FileNotFoundException) { -> Logger.println("Unable to write data size to recording "+recordPath+" "+e.getMessage(),)@ } } -> Logger.println("Exception closing recording "+recordPath+" "+e.getMessage(),)@ }
results[https://github.com/FallenMoonNetwork/CanaryLib/blob/44727922f3137de0402174c396b89aa7cc309c93/src/main/java/net/canarymod/database/xml/XmlDatabase.java][write][1] = -> TRY {  -> sortElements(doc,)@ -> f=new RandomAccessFile(file.getPath(),"rw",)@ -> f.getChannel().lock()@ -> f.setLength(0,)@ -> f.write(xmlSerializer.outputString(doc,).getBytes(Charset.forName("UTF-8",),),)@ -> f.close()@ } CATCH(IOException) {}
results[https://github.com/Grupa/GClasificator/blob/3aaf9ead6a71fa9addb8ae78fdd70a3fcc0e02b2/Code/play-2.0.2/gp/app/models/Logger.java][write][1] = -> outputText="["+new Date().toLocaleString()+"] "+text+separator@ -> TRY { -> file=new RandomAccessFile(name,"rw",)@ -> file.seek(file.length(),)@ -> file.write(outputText.getBytes(),)@ -> file.close()@ } CATCH(FileNotFoundException) { -> e1.printStackTrace()@ } CATCH(IOException) { -> e.printStackTrace()@ }
results[https://github.com/nickman/jzab/blob/c88d9b13e40a99a2331adda5fb54c9fe754621ee/agent/src/main/java/org/helios/jzab/agent/net/active/collection/FileActiveCollectionStream.java][rewritePayloadLength][1] = -> TRY { -> raf=new RandomAccessFile(tmpFile,"rw",)@ -> raf.seek(lengthPosition,)@ -> raf.write(encodeLittleEndianLongBytes(byteCount,),)@ } CATCH(Exception) { -> throw new RuntimeException("Failed to rewritePayloadLength on file ["+tmpFile+"]",e,)@ } FINALLY { -> IF { -> TRY { -> raf.close()@raf!=null } } }
results[https://github.com/kambatla/hadoop-1/blob/714e92e8fecbc85fb91c889ba84a7ae6fd114826/src/test/org/apache/hadoop/dfs/MiniDFSCluster.java][corruptBlockOnDataNode][28] = -> TRY {  -> IF { -> return false@i<0||i>=dataNodes.size() } -> LOOP { -> IF { -> raFile=new RandomAccessFile(blockFile,"rw",)@!(i<0||i>=dataNodes.size()) && blockFile.exists() -> channel=raFile.getChannel()@!(i<0||i>=dataNodes.size()) -> raFile.seek(rand,)@!(i<0||i>=dataNodes.size()) -> raFile.write(badString.getBytes(),)@!(i<0||i>=dataNodes.size()) -> raFile.close()@!(i<0||i>=dataNodes.size()) } } } CATCH(Exception) {}
results[https://github.com/facebook/buck/blob/3ffe61a2cbc549805d73716154614fde426c8f35/third-party/java/emma-2.0.5312/core/java12/com/vladium/emma/instr/InstrProcessorST.java][writeFile][3] = -> TRY {  -> TRY { -> raf=new RandomAccessFile(outFile,"rw",)@ -> IF { -> raf.setLength(data.length,)@ } -> raf.write(data,)@ } FINALLY { -> IF { -> raf.close()@raf!=null } } } CATCH(IOException) {}
results[https://github.com/dgarnier/MDSplus/blob/b2517b54103142bfb18e3e5177d94263560e7c10/javatraverser/LoadFile.java][main][2] = -> TRY { -> serialized=ba.getByteArray()@ } CATCH(Exception) { -> System.err.println("Error reading data in"+nodeName+": "+exc,)@ -> System.exit(0,)@ } -> TRY { -> raf=new RandomAccessFile(fileName,"rw",)@ -> raf.write(serialized,)@ -> raf.close()@ } CATCH(Exception) { -> System.err.println("Cannot read file "+fileName+": "+exc,)@ -> System.exit(0,)@ }
results[https://github.com/crissii/water-esb-new/blob/82254f76ee0b672f5bd7ec01b3ace2197ea613c5/modules/messagecenter/src/main/java/com/sunsharing/msgcenter/msg/process/MsgSaveProcess.java][process][1] = -> TRY { -> raf1=new RandomAccessFile(currentFile,"rw",)@ -> raf1.seek(currentFile.length(),)@ -> raf1.write(request.msg.genneral(),)@ } CATCH(Exception) { -> logger.error("写消息文件出错",e,)@ -> throw new RuntimeException("写文件出错",)@ } FINALLY { -> TRY { -> raf1.close()@ } }
results[https://github.com/orcc/xronos/blob/5e6afdb107630c2bceaf7eec0fc79dbc1adf41d8/eclipse/plugins/net.sf.openforge/src/org/xronos/openforge/app/Xflow.java][runScript][2] = -> IF { -> IF { -> baos=new ByteArrayOutputStream()@ -> pw=new PrintWriter(baos,)@ -> TRY { -> raf=new RandomAccessFile(outfile,"rw",)@outfile!=null -> raf.seek(raf.length(),)@ -> raf.write(baos.toByteArray(),)@ -> raf.close()@ } CATCH(Throwable) { -> logger.error("Couldn't append BitGen command line to file: "+outfile.getAbsolutePath()+" because: "+t.getMessage(),)@outfile!=null } } }
results[https://github.com/square/tape/blob/51b36303762a0a413e7f0fc90dc65c8f176d11e3/tape/src/main/java/com/squareup/tape/QueueFile.java][initialize][2] = -> TRY {  -> raf=open(tempFile,)@ -> TRY { -> raf.setLength(INITIAL_LENGTH,)@ -> raf.seek(0,)@ -> writeInts(headerBuffer,INITIAL_LENGTH,0,0,0,)@ -> raf.write(headerBuffer,)@ } FINALLY { -> raf.close()@ } -> IF { -> throw new IOException("Rename failed!",)@!(tempFile.renameTo(file,)) } } CATCH(IOException) {}
results[https://github.com/apavlo/h-store/blob/e1f70e244e03e6adc24af4950455535ee2119e5f/src/hsqldb19b3/org/hsqldb/persist/RAShadowFile.java][copy][1] = -> TRY {  -> IF { -> return @bitMap.set(pageOffset,)==1 } -> TRY { -> writePos=dest.length()@!(bitMap.set(pageOffset,)==1) -> byteArrayOutputStream.setBuffer(buffer,)@!(bitMap.set(pageOffset,)==1) -> source.read(buffer,12,readSize,)@!(bitMap.set(pageOffset,)==1) -> dest.seek(writePos,)@!(bitMap.set(pageOffset,)==1) -> dest.write(buffer,)@!(bitMap.set(pageOffset,)==1) } CATCH(Throwable) { -> bitMap.unset(pageOffset,)@!(bitMap.set(pageOffset,)==1) -> close()@!(bitMap.set(pageOffset,)==1) -> database.logger.appLog.logContext(SimpleLog.LOG_ERROR,"pos"+position+" "+readSize,)@!(bitMap.set(pageOffset,)==1) -> throw FileUtil.toIOException(t,)@!(bitMap.set(pageOffset,)==1) } } CATCH(IOException) {}
results[https://github.com/utyman/Base-de-Datos-TP1/blob/2a163d7829fcd02f2bd7da648e8b1406eef9d1e6/TP2/sources/UBADB-Original/src/main/java/ubadb/components/diskManager/DiskManagerImpl.java][createNewPage][2] = -> TRY {  -> TRY { -> checkPageSize(pageContents,)@ -> file=getFile(tableId,)@ -> offset=file.length()@ -> file.seek(offset,)@ -> file.write(pageContents,)@ -> file.close()@ -> return new Page(new PageId(newPageNumber,tableId,),pageContents,)@ } CATCH(Exception) { -> throw new DiskManagerException("Cannot create a new page on disk",e,)@ } } CATCH(DiskManagerException) {}
results[https://github.com/apache/openejb/blob/7f55df27c43f89ac1944b50434ffcb32bb865d8b/openejb/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/RAFPassivater.java][passivate][3] = -> TRY {  -> TRY { -> ras=new RandomAccessFile(System.getProperty("java.io.tmpdir",File.separator+"tmp",)+File.separator+"passivation"+fileID+".ser","rw",)@ -> LOOP { -> bytes=Serializer.serialize(obj,)@ -> filepointer=ras.getFilePointer()@ -> ras.write(bytes,)@ } -> ras.close()@ } CATCH(Exception) { -> throw new org.apache.openejb.SystemException(e,)@ } } CATCH(org.apache.openejb.SystemException) {}
results[https://github.com/apache/tomee/blob/fb67de3145cd7967a59aab5ab5c7a298b7968e24/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/RAFPassivater.java][passivate][2] = -> TRY {  -> TRY { -> ras=new RandomAccessFile(System.getProperty("java.io.tmpdir",File.separator+"tmp",)+File.separator+"passivation"+fileID+".ser","rw",)@ -> LOOP { -> bytes=Serializer.serialize(obj,)@ -> filepointer=ras.getFilePointer()@ -> ras.write(bytes,)@ } -> ras.close()@ } CATCH(Exception) { -> throw new SystemException(e,)@ } } CATCH(SystemException) {}
results[https://github.com/kelemen/netbeans-gradle-project/blob/d5770675a5f9fa9964cba6be8c0a92b48e5e88af/netbeans-gradle-default-models/src/test/java/org/netbeans/gradle/model/util/TemporaryFileManagerTest.java][testModifiedContent][1] = -> TRY {  -> TRY { -> fileContent=new RandomAccessFile(fileRef1.getFile(),"rw",)@ -> TRY { -> fileContent.setLength(0,)@ -> fileContent.write(modContent,)@ } FINALLY { -> fileContent.close()@ } -> fileRef1.getFile().delete()@ } } CATCH(Exception) {}
results[https://github.com/freenet/contrib-official/blob/ffdc0d106578fd7070c60ffcb9b0396b5f1ae551/bdb/test/com/sleepycat/je/log/FileEdgeCaseTest.java][corruptSecondEntry][1] = -> TRY {  -> file=new RandomAccessFile(firstFile,FileManager.FileMode.READWRITE_MODE.getModeValue(),)@ -> TRY { -> file.seek(FileManager.firstLogEntryOffset(),)@ -> file.write(junk,)@ } CATCH(Exception) { -> e.printStackTrace()@ } FINALLY { -> file.close()@ } } CATCH(IOException) {}
