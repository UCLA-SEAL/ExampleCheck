results[https://github.com/tijuca/icedove/blob/4920dca05eb3b6daa968edb29fd558ff8d2a423a/directory/sdks/java-sdk/ietfldap/org/ietf/ldap/util/ByteBuf.java][write][50] = -> TRY {  -> out.write(value,0,count,)@ } CATCH(IOException) {}
results[https://github.com/anhquang/contiki/blob/42e4b2b02a2126cb7206cb7e27c0c2b8efd5fda8/tools/coffee-manager/se/sics/coffee/CoffeeImageFile.java][write][31] = -> TRY {  -> imageFile.seek(conf.startOffset+offset,)@ -> imageFile.write(bytes,0,size,)@ } CATCH(IOException) {}
results[https://github.com/copiousfreetime/mp4parser/blob/0b38c00e06cb994f4ac6fdb69ca61c2c28279a57/androidtest/isoparser/src/main/java/com/coremedia/iso/BufferedRandomAccessFile.java][flushBuffer][14] = -> TRY {  -> raf.seek(bufferOffset,)@ -> raf.write(buffer,0,bufferLength,)@ } CATCH(IOException) {}
results[https://github.com/joninvski/Appia/blob/01abf5b5aefaaeb4e29df7e9e6b374fe34e06316/tags/release_3_0/appia/src/org/continuent/appia/test/perf/PerfSession.java][readPayload][26] = -> TRY { -> payloadOut.write(mbuf.data,mbuf.off,mbuf.len,)@ } CATCH(IOException) { -> e.printStackTrace()@ }
results[https://github.com/arekinath/jop/blob/f9c3a15861d0271335b0ee50de886d61a3cf99b6/java/pc/src/yaffs2/utils/emulation/FileEmulationUnix.java][write][2] = -> TRY { -> fildes.write(buf,bufIndex,nbyte,)@ } CATCH(IOException) { -> throw new HiddenException()@ }
results[https://github.com/copperflake/SAT/blob/2c1140df0cff3f33586e27f05129654dcea55754/src/sat/file/SegmentableFile.java][writeSegment][1] = -> TRY {  -> file.write(data.getData(),offset*SEGMENT_SIZE,SEGMENT_SIZE,)@ } CATCH(IOException) {}
results[https://github.com/mirror/jpcsp/blob/f8e523cb7aaeb28b4f04513de0e74c9dd3b0e62f/src/jpcsp/media/FileProtocolHandler.java][write][2] = -> TRY { -> stream.write(buf,0,size,)@ } CATCH(IOException) { -> log.error(e,)@ }
results[https://github.com/eirikbakke/studycaster/blob/e3fe8887e8ad1665ce069e9f8f6682ef91076ca2/sc_server/src/java/no/ebakke/studycaster/util/IOUtilsExt.java][copyLarge][18] = -> TRY {  -> LOOP { -> output.write(buffer,0,n,)@-1!=(n=input.read(buffer,)) } } CATCH(IOException) {}
results[https://github.com/b/project-cassandra/blob/9db8da81b7f269e5a8a7f896b751d482847d7082/src/org/apache/cassandra/io/SequenceFile.java][close][7] = -> TRY {  -> file_.writeUTF(SequenceFile.marker_,)@ -> file_.writeInt(size,)@ -> file_.write(footer,0,size,)@ } CATCH(IOException) {}
results[https://github.com/freenet/plugin-XMLSpider-official/blob/1c121ff6e01d3293dc12bac6f33900372c4d4af9/src/plugins/XMLSpider/org/garret/perst/impl/OSFile.java][write][8] = -> TRY { -> file.seek(pos,)@ -> file.write(buf,0,buf.length,)@ } CATCH(IOException) { -> throw new StorageError(StorageError.FILE_ACCESS_ERROR,x,)@ }
results[https://github.com/artclarke/humble-video/blob/6e0c88c2734ae09f802018c957dea74b2c3c01bf/src/main/java/io/humble/video/customio/FileProtocolHandler.java][write][3] = -> TRY { -> stream.write(buf,0,size,)@ } CATCH(IOException) { -> log.error("Got error writing to file: {}",file,)@ -> e.printStackTrace()@ }
results[https://github.com/dCache/dcache/blob/99422739aa4ffb689721ed7ba7a35c2f50c4a3a3/modules/cells/src/main/java/dmg/util/edb/Sldb.java][put][2] = -> TRY {  -> _file.seek(ei._filePos,)@!(size>_bpdr-4) -> _file.writeInt(size,)@!(size>_bpdr-4) -> _file.write(data,off,size,)@!(size>_bpdr-4) } CATCH(IOException) {}
results[https://github.com/winsock/ElectroCraft/blob/88ec4e75eb8e184a9dbdfad5482c6fb8c80b726f/minecraft/info/cerios/electrocraft/core/jpc/support/FileBackedSeekableIODevice.java][write][1] = -> TRY {  -> image.write(data,offset,length,)@ -> image.getFD().sync()@ } CATCH(IOException) {}
results[https://github.com/Starlink/starjava/blob/5742d01da82d1485720cbe4ff84b92a5adbbd96c/tamfits/src/main/nom/tam/util/BufferedFile.java][flush][2] = -> TRY {  -> IF { -> raf.write(buffer,0,bufferOffset,)@!(doingInput)&&bufferOffset>0 } } CATCH(IOException) {}
results[https://github.com/remi/selenium/blob/ab4929acef85729b97a58a1827c78f4dc4d6e320/remote/server/src/java/org/openqa/jetty/util/TempByteHolder.java][writeToTempFile][12] = -> TRY {  -> IF { -> _tempfile.seek((long) at_offset,)@at_offset!=_file_pos } -> _tempfile.write(data,offset,len,)@ } CATCH(IOException) {}
results[https://github.com/visad/visad/blob/798d5fb9d9a7bc002b81f453f9aff44700012811/deps/src/ucar/netcdf/RandomAccessFile.java][flush][8] = -> TRY {  -> IF { -> file.seek(bufferStart,)@ -> file.write(buffer,0,dataSize,)@ } } CATCH(IOException) {}
results[https://github.com/aiQon/topkey/blob/285805064c78131a8b8c338802bb2ae93304b57a/contiki-image/tools/coffee-manager/se/sics/coffee/CoffeeImageFile.java][erase][28] = -> TRY {  -> LOOP { -> chunkSize=(size>bytes.length)?bytes.length:size@size>0 -> imageFile.seek(conf.startOffset+offset,)@ -> imageFile.write(bytes,0,chunkSize,)@ } } CATCH(IOException) {}
results[https://github.com/deruelle/mobicents/blob/e0368734b363ac3894d3f181686f773205bc40d5/servers/media/core/server-impl/src/main/java/org/mobicents/media/server/impl/resource/zap/BChannel.java][onMediaTransfer][1] = -> TRY {  -> data=(byte[]) buffer.getData()@ -> file.write(data,buffer.getOffset(),buffer.getLength(),)@ } CATCH(IOException) {}
results[https://github.com/Unidata/thredds/blob/8c350afab9c5c67957cb7817112f5d8db9bbd9fd/grib/src/ucar/jpeg/jj2000/j2k/io/BufferedRandomAccessFile.java][flush][6] = -> TRY {  -> IF { -> theFile.seek(offset,)@ -> theFile.write(byteBuffer,0,maxByte,)@ } } CATCH(IOException) {}
results[https://github.com/f1ori/yacy/blob/3b40b982564c86c4d3728d3415a970deb2c0d1a8/source/net/yacy/kelondro/io/CachedRecords.java][flushBuffer][1] = -> TRY { -> raf.seek(raf.length(),)@ -> raf.write(this.buffer,0,this.recordsize*this.buffercount,)@ } CATCH(IOException) { -> Log.logException(e,)@ }
results[https://github.com/QingpingMeng/DeID/blob/e012808914325a45ec952fdaba266256a72a1f76/src/niftijlib/Nifti1Dataset.java][writeData][1] = -> TRY {  -> raf=new RandomAccessFile(ds_datname,"rwd",)@!(ds_datname.endsWith(".gz",)) -> raf.seek(skip_head,)@!(ds_datname.endsWith(".gz",)) -> raf.write(b,0,b.length,)@!(ds_datname.endsWith(".gz",)) -> raf.close()@!(ds_datname.endsWith(".gz",)) } CATCH(IOException) {}
results[https://github.com/thihy/lucene/blob/0dc9de818d4e78426239074d025746d225181575/lucene/src/java/org/apache/lucene/store/FSDirectory.java][flushBuffer][7] = -> TRY {  -> IF { -> rateLimiter.pause(size,)@rateLimiter!=null } -> file.write(b,offset,size,)@ } CATCH(IOException) {}
results[https://github.com/eswartz/emul/blob/8cc1c3663d5f894210c949aebfc4f62318ca6c88/v9t9/v9t9-java/v9t9-common/src/v9t9/common/files/NativeTextFile.java][writeContents][4] = -> TRY {  -> raf=new RandomAccessFile(file,"rw",)@ -> raf.seek(offset,)@ -> raf.write(contents,contentOffset,length,)@ -> raf.close()@ } CATCH(IOException) {}
results[https://github.com/aldaris/opensso/blob/f28e1fdc0b2286917d6faaa873dddf964953c595/extensions/proxy/proxy-core/src/main/java/com/sun/identity/proxy/io/FileRecord.java][write][1] = -> TRY {  -> IF { -> throw new OverflowException()@limit>=0&&raf.getFilePointer()+len>limit } -> raf.write(b,off,len,)@!(limit>=0&&raf.getFilePointer()+len>limit) } CATCH(IOException) {}
results[https://github.com/f1ori/yacy/blob/83ce65707a9b1ebcc62342566271918699c7fc7d/source/de/anomic/kelondro/io/kelondroEcoFS.java][flushBuffer][4] = -> TRY { -> raf.seek(raf.length(),)@ -> raf.write(this.buffer,0,this.recordsize*this.buffercount,)@ } CATCH(IOException) { -> e.printStackTrace()@ }
results[https://github.com/jitlogic/zorka/blob/5e5c2e756e41687da54843fbddcb66b5f327ca5c/zorka-central/src/main/java/com/jitlogic/zorka/central/rds/RAGZOutputStream.java][deflate][2] = -> TRY {  -> LOOP { -> len=deflater.deflate(outputBuf,0,outputBuf.length,Deflater.SYNC_FLUSH,)@len==outputBuf.length -> outFile.write(outputBuf,0,len,)@len==outputBuf.length } } CATCH(IOException) {}
results[https://github.com/godares79/CS848-Project/blob/5fde6a1d649c6d4cb5a086fe976d43f22f073fca/apache-cassandra-1.1.6-src/src/java/org/apache/cassandra/io/util/SequentialWriter.java][flushData][1] = -> TRY {  -> out.write(buffer,0,validBufferBytes,)@ -> IF { -> digest.update(buffer,0,validBufferBytes,)@digest!=null } } CATCH(IOException) {}
results[https://github.com/aptana/Pydev/blob/a87ccdb450e578574d15716e8d897cbbd2792ec1/plugins/org.python.pydev.jython/src_jython/org/python/core/PyFile.java][flush][1] = -> TRY {  -> file.seek(bufferStart,)@ -> file.write(buffer,0,dataSize,)@ -> file.getFD().sync()@ } CATCH(IOException) {}
results[https://github.com/xored/f4/blob/82d3c126f014bec0b060a0a2d66793d45041c562/com.xored.f4.fantom/fantom/src/sys/java/fan/sys/MemBuf.java][pipeTo][1] = -> TRY {  -> len=(int) lenLong@ -> IF { -> throw IOErr.make("Not enough bytes to write",)@pos+len>size } -> dst.write(buf,pos,len,)@!(pos+len>size) } CATCH(IOException) {}
results[https://github.com/grisu/grisu/blob/490570f70edb9fd98b3b0804f92c576dc9713475/grisu-client/src/main/java/org/jvnet/mimepull/WeakDataFile.java][writeTo][1] = -> TRY { -> raf.seek(pointer,)@ -> raf.write(data,offset,length,)@ -> return raf.getFilePointer()@ } CATCH(IOException) { -> throw new MIMEParsingException(ioe,)@ }
results[https://github.com/mcm46/lab2/blob/87a713453f5a521d08c163334654fca4402e4a23/Lab3/virtualdisk/VirtualDisk.java][writeBlock][1] = -> TRY {  -> seekLen=buf.getBlockID()*Constants.BLOCK_SIZE@ -> _file.seek(seekLen,)@ -> _file.write(buf.getBuffer(),0,Constants.BLOCK_SIZE,)@ } CATCH(IOException) {}
results[https://github.com/jitlogic/zorka/blob/58d8693d058f9313a92e0b0c8d9d37974a9c0c93/zorka-central/src/main/java/com/jitlogic/zorka/central/RAGZOutputStream.java][deflate][1] = -> TRY {  -> len=deflater.deflate(outputBuf,0,outputBuf.length,Deflater.SYNC_FLUSH,)@ -> IF { -> outFile.write(outputBuf,0,len,)@len>0 } } CATCH(IOException) {}
results[https://github.com/eclipse/eclipse.pde.build/blob/9427c1a92d5ae5ebec56d69faef91be429f77eea/org.eclipse.pde.build/src/org/eclipse/swt/tools/internal/IconExe.java][unloadShapeData][7] = -> TRY { -> LOOP { -> System.arraycopy(data,offset,buf,0,bpl,)@ -> raf.write(buf,0,destBpl,)@ } } CATCH(IOException) { -> SWT.error(SWT.ERROR_IO,e,)@ }
results[https://github.com/molgenis/systemsgenetics/blob/06fbc453404531ddd4e17f3393a2e470de985981/genetics-lib/src/main/java/umcg/genetica/io/bin/RandomAccessFile.java][close][5] = -> TRY {  -> IF { -> file.seek(bufferStart,)@ -> file.write(buffer,0,(int) dataSize,)@ } -> file.close()@ } CATCH(IOException) {}
results[https://github.com/tiin57/luaforge/blob/38274e59b1ef89d2b949ea7e39f4fc97615a827e/src/common/luaforge/luaj/vm2/lib/jse/JseIoLib.java][write][5] = -> TRY {  } ELSE { -> IF { -> file.write(s.m_bytes,s.m_offset,s.m_length,)@file!=null } } CATCH(IOException) {}
results[https://github.com/AsyncHttpClient/async-http-client/blob/3caad234e1eb88919f7455e7866a099cc22a9fe7/api/src/main/java/com/ning/http/client/consumers/FileBodyConsumer.java][consume][2] = -> TRY {  -> file.write(byteBuffer.array(),byteBuffer.arrayOffset()+byteBuffer.position(),byteBuffer.remaining(),)@ } CATCH(IOException) {}
results[https://github.com/eswartz/emul/blob/6e6da3a7824dde7c1eec5ae825df7a2eecfe4a45/v9t9/v9t9-java/v9t9-engine/src/v9t9/engine/files/NativeFDRFile.java][writeContents][5] = -> TRY {  -> raf=new RandomAccessFile(file,"rw",)@ -> raf.seek(offset+fdr.getFDRSize(),)@ -> raf.write(contents,contentOffset,length,)@ -> raf.close()@ } CATCH(IOException) {}
results[https://github.com/marcusbb/retry/blob/7416dba0012ec322829fd9696e51de4ff04a4be9/retry-hazelcast/src/main/java/ies/retry/spi/hazelcast/LocalQueueLog.java][writeTakeMarker][1] = -> TRY {  -> bInt=ByteBuffer.allocate(INT_BYTE_SIZE,).putInt(curTakeMarker,).array()@ -> takeOs.write(bInt,0,INT_BYTE_SIZE,)@ -> takeOs.seek(0,)@ } CATCH(IOException) {}
results[https://github.com/YongJiang/org.eclipse.birt.data/blob/c8d37caedd40010fd5033db680224eee2ca02de4/plugins/org.eclipse.birt.data/src/org/eclipse/birt/data/engine/olap/data/util/BufferedRandomAccessFile.java][createRandomAccessFile][1] = -> TRY {  -> delegate=FileSecurity.createRandomAccessFile(file,mode,)@ -> IF { -> delegate.write(memoryDelegate,0,length,)@memoryDelegate!=null||length>0 -> delegate.seek(pointer,)@ } } CATCH(IOException) {}
results[https://github.com/Det-Kongelige-Bibliotek/Yggdrasil/blob/f7fa0b5a2b1d6de0c20f9a55f6bcd5ac11fdd88d/src/main/java/dk/kb/yggdrasil/HttpPayload.java][writeToFile][1] = -> TRY {  -> raf=new RandomAccessFile(tmpFile,"rw",)@ -> LOOP { -> raf.write(tmpBuf,0,read,)@(read=in.read(tmpBuf,))!=-1 } -> raf.close()@ } CATCH(IOException) {}
results[https://github.com/dickerpulli/playground/blob/e6aed280e1a7e45a45678c79042c239094b0fbf7/games/ocean/src/java/padIo/BitOutputFile.java][endBitMode][1] = -> TRY {  -> buffer[(int) bitsInBuffer/8]&=0xff>>8-bitsInBuffer%8@ -> file.write(buffer,0,(int) bitsInBuffer/8+(bitsInBuffer%8>0)?1:0,)@ -> currentPosition=file.getFilePointer()@ -> file.seek(counterPosition,)@ -> file.writeInt(totalBits,)@ -> file.seek(currentPosition,)@ } CATCH(IOException) {}
results[https://github.com/imr/Electric-VLSI/blob/e42ced0925e0d334f8aaa8ea23c099bc6f2bb49d/srcj/com/sun/electric/tool/btree/FilePageStorage.java][writePage][2] = -> TRY { -> raf.seek(pageid*getPageSize(),)@!(pageid>=numpages) -> raf.write(buf,ofs,getPageSize(),)@!(pageid>=numpages) } CATCH(IOException) { -> throw new RuntimeException(e,)@!(pageid>=numpages) }
results[https://github.com/xored/f4/blob/82d3c126f014bec0b060a0a2d66793d45041c562/com.xored.f4.fantom/fantom/src/sys/java/fan/sys/FileBuf.java][pipeTo][1] = -> TRY {  -> temp=temp()@ -> LOOP { -> n=fp.read(temp,0,(int) Math.min(temp.length,len-total,),)@total<len -> dst.write(temp,0,n,)@ } } CATCH(IOException) {}
results[https://github.com/eclipse/eclipse.platform.releng.basebuilder/blob/435a23260df1752c5328d8c78f2f467b47c981de/plugins/org.eclipse.pde.build/src/org/eclipse/swt/tools/internal/IconExe.java][unloadMaskData][7] = -> TRY { -> LOOP { -> System.arraycopy(data,offset,buf,0,bpl,)@ -> bitInvertData(buf,0,bpl,)@ -> raf.write(buf,0,destBpl,)@ } } CATCH(IOException) { -> SWT.error(SWT.ERROR_IO,e,)@ }
results[https://github.com/kyorohiro/KyoroHelloAndroid/blob/7c5b170459e6523d23b8a5012ac56f31a74b1453/KyoroCommon/src/info/kyorohiro/helloworld/io/VirtualFile.java][syncWrite][1] = -> TRY {  -> IF { -> throw new IOException()@mRAFile==null } -> cp=mRAFile.getFilePointer()@!(mRAFile==null) -> mRAFile.seek(mCashStartPointPerFile,)@!(mRAFile==null) -> mRAFile.write(mWriteCash,0,mCashLength,)@!(mRAFile==null) } CATCH(IOException) {}
results[https://github.com/alagopus/fraglets/blob/b3291953df7bc2d9b50ac7061b3f11ea9c8c75ae/crm114j/src/net/sf/fraglets/crm114j/CSSFile.java][inflate][1] = -> TRY {  -> LOOP { -> ras.write(blank,)@ } -> IF { -> ras.write(blank,0,(int) size,)@size>0 } } CATCH(IOException) {}
results[https://github.com/codefollower/Lealone/blob/10b550d2a36bf049cc4559b1a32c8f4729355fb0/yourbase-common/src/main/java/com/codefollower/yourbase/store/fs/FilePathDisk.java][write][9] = -> TRY {  -> len=src.remaining()@ -> file.write(src.array(),src.position(),len,)@ -> src.position(src.position()+len,)@ } CATCH(IOException) {}
results[https://github.com/leif81/openmap-maven/blob/f56e367aa99c9863c448ce0eaf37caf38acdeb37/src/openmap/com/bbn/openmap/layer/shape/ShapeFile.java][add][4] = -> TRY {  -> IF { -> nBytes=r.write(recBuf,0,)@r.getShapeType()==fileShapeType -> raf.seek(raf.length(),)@ -> raf.write(recBuf,0,nBytes,)@ } } CATCH(IOException) {}
results[https://github.com/bcoverston/apache-hosted-cassandra/blob/dd8a3c45072efbc0fea14e98552b4b5a9dab9de3/src/java/org/apache/cassandra/io/util/SequentialWriter.java][flushData][1] = -> TRY { -> out.write(buffer,0,validBufferBytes,)@ } CATCH(IOException) { -> throw new FSWriteError(e,getPath(),)@ } -> IF { -> digest.update(buffer,0,validBufferBytes,)@digest!=null }
results[https://github.com/goodow/j2objc/blob/f33bcb131ceaa35061b81bfbb4ae361db3da43f1/jre_emul/android/libcore/harmony-tests/src/test/java/org/apache/harmony/tests/java/io/RandomAccessFileTest.java][test_getFilePointer][8] = -> TRY {  -> raf=new java.io.RandomAccessFile(fileName,"rw",)@ -> raf.write(fileString.getBytes(),0,1000,)@ -> assertEquals("Incorrect filePointer returned",1000,raf.getFilePointer(),)@ -> raf.close()@ } CATCH(IOException) {}
results[https://github.com/apache/activemq/blob/b0c2a40fb979829ceca2ca51858ca67269bd5992/activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/StoreIndexWriter.java][updateIndexes][1] = -> TRY {  -> dataOut.reset()@ -> indexItem.updateIndexes(dataOut,)@ -> file.seek(indexItem.getOffset(),)@ -> file.write(dataOut.getData(),0,IndexItem.INDEXES_ONLY_SIZE,)@ } CATCH(IOException) {}
results[https://github.com/YongJiang/org.eclipse.birt.data/blob/c8d37caedd40010fd5033db680224eee2ca02de4/plugins/org.eclipse.birt.data/src/org/eclipse/birt/data/engine/olap/data/util/BufferedRandomAccessFile.java][delegateWrite][1] = -> TRY {  -> IF { } ELSE { -> System.arraycopy(b,pos,memoryDelegate,pointer,len,)@!(delegate==null) && !(pointer+len>memoryDelegate.length&&!(pureMemory)) -> return @!(pointer+len>memoryDelegate.length&&!(pureMemory)) && delegate==null } -> delegate.write(b,pos,len,)@!(delegate==null) } CATCH(IOException) {}
results[https://github.com/xored/f4/blob/82d3c126f014bec0b060a0a2d66793d45041c562/com.xored.f4.fantom/fantom/src/sys/java/fan/sys/NioBuf.java][pipeTo][2] = -> TRY {  -> temp=temp()@ -> LOOP { -> n=Math.min(temp.length,len-total,)@total<len -> buf.get(temp,0,n,)@ -> dst.write(temp,0,n,)@ } } CATCH(IOException) {}
results[https://github.com/apache/activemq/blob/7f883f6fe207cd40211ad897ec96a56d33c46aa9/activemq-core/src/main/java/org/apache/activemq/kaha/impl/StoreIndexWriter.java][storeItem][1] = -> TRY {  -> dataOut.reset()@ -> indexItem.write(dataOut,)@ -> file.seek(indexItem.getOffset(),)@ -> file.write(dataOut.getData(),0,IndexItem.INDEX_SIZE,)@ } CATCH(IOException) {}
results[https://github.com/victoryckl/android-demos/blob/5aee56faef67c31d1193b9b3afdb38b3bbe8e6b4/android-demos/src/com/example/utils/FileUtils.java][copyFile][2] = -> TRY {  -> LOOP { -> count=in.read(buffer,)@ } ELSE { -> out.write(buffer,0,count,)@!(count<=0) } } CATCH(IOException) {}
results[https://github.com/apache/activemq/blob/b0c2a40fb979829ceca2ca51858ca67269bd5992/activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/StoreIndexWriter.java][storeItem][1] = -> TRY {  -> dataOut.reset()@ -> indexItem.write(dataOut,)@ -> file.seek(indexItem.getOffset(),)@ -> file.write(dataOut.getData(),0,IndexItem.INDEX_SIZE,)@ } CATCH(IOException) {}
results[https://github.com/Starlink/starjava/blob/5742d01da82d1485720cbe4ff84b92a5adbbd96c/tamfits/src/main/nom/tam/util/BufferedFile.java][needBuffer][2] = -> TRY {  -> IF { -> raf.seek(fileOffset,)@ } -> IF { -> raf.write(buffer,0,bufferOffset,)@bufferOffset+need>=bufferSize } } CATCH(IOException) {}
results[https://github.com/codefollower/Lealone/blob/b9c130227ad55b6c700ea3f75b585689b6e1673d/lealone-atomicdb/src/main/java/com/codefollower/lealone/atomicdb/io/util/SequentialWriter.java][flushData][2] = -> TRY { -> out.write(buffer,0,validBufferBytes,)@ } CATCH(IOException) { -> throw new FSWriteError(e,getPath(),)@ } -> IF { -> metadata.append(buffer,0,validBufferBytes,)@metadata!=null }
results[https://github.com/apache/activemq/blob/b0c2a40fb979829ceca2ca51858ca67269bd5992/activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java][writePageHeader][2] = -> TRY {  -> dataOut.reset()@ -> page.writeHeader(dataOut,)@ -> indexFile.seek(page.getId(),)@ -> indexFile.write(dataOut.getData(),0,HashPage.PAGE_HEADER_SIZE,)@ } CATCH(IOException) {}
results[https://github.com/dim-s/jvm-php/blob/0f16e96ff5d55ae4a5386709b7fdecae13380a5a/jphp-core/src/php/runtime/ext/core/stream/FileStream.java][write][2] = -> len=args[1].toInteger()@ -> bytes=args[0].getBinaryBytes()@ -> TRY { -> accessFile.write(bytes,0,(len==0)?bytes.length:len,)@ -> return LongMemory.valueOf((len==0)?bytes.length:len,)@ } CATCH(IOException) { -> exception(env,e.getMessage(),)@ }
results[https://github.com/tingletech/xtf-strap/blob/d92b21e3edff41605dadcddb8c0981c7458835f5/WEB-INF/src/org/cdlib/xtf/util/SubFileWriter.java][checkLength][1] = -> TRY {  -> IF { -> file.seek(writtenPos+segOffset,)@ } -> IF { -> file.write(buf,0,bufTop,)@bufTop+nBytes>BUF_SIZE } } CATCH(IOException) {}
results[https://github.com/f1ori/yacy/blob/3b40b982564c86c4d3728d3415a970deb2c0d1a8/source/net/yacy/kelondro/io/Records.java][flushBuffer][1] = -> IF { -> return @raf==null } -> TRY { -> raf.seek(raf.length(),)@!(raf==null) -> raf.write(this.buffer,0,this.recordsize*this.buffercount,)@!(raf==null) } CATCH(IOException) { -> Log.logException(e,)@!(raf==null) }
results[https://github.com/daxxmax/packages_apps_Mms/blob/91609f61a7ab2883f16b22979ed5158ed1415f31/src/com/android/mms/util/BlobCache.java][insertInternal][62] = -> TRY {  -> sum=checkSum(data,)@ -> writeLong(header,BH_KEY,key,)@ -> writeInt(header,BH_CHECKSUM,sum,)@ -> writeInt(header,BH_OFFSET,mActiveBytes,)@ -> writeInt(header,BH_LENGTH,length,)@ -> mActiveDataFile.write(header,)@ -> mActiveDataFile.write(data,0,length,)@ } CATCH(IOException) {}
results[https://github.com/immutant/immutant/blob/f8a15ed0d528a6a7581898c08f33e24d04fc61f4/modules/web/src/main/java/org/immutant/web/ReusableInputStream.java][data][1] = -> TRY {  -> IF { -> this.data=new RandomAccessFile(this.tmpFile,"rw",)@this.data==null -> LOOP { -> this.data.write(bytes,0,bytesRead,)@(bytesRead=this.source.read(bytes,0,4096,))>0 && this.data==null } -> this.data.seek(0,)@this.data==null } } CATCH(IOException) {}
results[https://github.com/cojen/Tupl/blob/19cf038fada9dde376505fa32d19fbde092e5e7f/src/main/java/org/cojen/tupl/JavaFileIO.java][writeDurably][1] = -> TRY {  -> IF { -> write(pos,buf,offset,length,)@ } ELSE { -> file.seek(pos,)@!(file==null) -> file.write(buf,offset,length,)@!(file==null) } } CATCH(IOException) {}
results[https://github.com/gaffo/jgit/blob/ff09f7e201c285af38fd1293fe5ac08019ae45dc/org.spearce.jgit/src/org/spearce/jgit/fetch/IndexPack.java][sync][7] = -> TRY {  -> packDigest.update(buf,0,bOffset,)@ -> IF { -> packOut.write(buf,0,bOffset,)@packOut!=null } -> IF { -> System.arraycopy(buf,bOffset,buf,0,bAvail,)@bAvail>0 } } CATCH(IOException) {}
results[https://github.com/Unidata/thredds/blob/ceeef0d7d60e447b5f8d03dfb508d1cb494adda3/common/src/java/ucar/unidata/io/RandomAccessFile.java][flush][2] = -> TRY {  -> IF { -> file.seek(bufferStart,)@ -> file.write(buffer,0,dataSize,)@ } -> IF { -> file.setLength(minLength,)@!(readonly)&&minLength!=0&&minLength!=file.length() } } CATCH(IOException) {}
results[https://github.com/tingletech/xtf-strap/blob/d92b21e3edff41605dadcddb8c0981c7458835f5/WEB-INF/src/org/cdlib/xtf/util/SubFileWriter.java][write][1] = -> TRY {  -> checkLength(len,)@ -> IF { -> file.write(b,off,len,)@len>BUF_SIZE } ELSE { -> System.arraycopy(b,off,buf,bufTop,len,)@!(len>BUF_SIZE) } } CATCH(IOException) {}
results[https://github.com/svn2github/H2-Mirror/blob/03d43bc1005046364545e8cd7998c9ad301ec009/h2/src/main/org/h2/store/fs/FilePathDisk.java][write][3] = -> TRY {  -> len=src.remaining()@ -> file.write(src.array(),src.arrayOffset()+src.position(),len,)@ -> src.position(src.position()+len,)@ } CATCH(IOException) {}
results[https://github.com/jonanh/PanChat/blob/ed018316a41bb26f5210a47246ca47742c63aa98/PanChat/src/panchat/share/protocolo/Bloque.java][escribir][1] = -> TRY {  -> os=new RandomAccessFile(pFicheroNombre,"rw",)@ -> IF { -> bytesAEscribir=(int) fichero.getTamanyo()%Bloque_TAMANYO@numBloque+1*Bloque_TAMANYO>fichero.getTamanyo() } -> os.seek(numBloque*Bloque_TAMANYO,)@ -> os.write(data,0,bytesAEscribir,)@ -> os.close()@ } CATCH(IOException) {}
results[https://github.com/apache/activemq/blob/7f883f6fe207cd40211ad897ec96a56d33c46aa9/activemq-core/src/main/java/org/apache/activemq/kaha/impl/StoreIndexWriter.java][redoStoreItem][1] = -> TRY {  -> dataOut.reset()@ -> redo.getIndexItem().write(dataOut,)@ -> file.seek(redo.getOffset(),)@ -> file.write(dataOut.getData(),0,IndexItem.INDEX_SIZE,)@ } CATCH(IOException) {}
results[https://github.com/Vhati/Slipstream-Mod-Manager/blob/b94440e0a0e0f295a181706129dddd745cb0d85c/src/main/java/net/vhati/ftldat/FTLDat.java][writeLittleUInt][1] = -> TRY {  -> IF { -> byteBuffer=ByteBuffer.wrap( new byte[],)@byteBuffer==null||!(byteBuffer.hasArray())||byteBuffer.array().length<4 -> byteBuffer.order(ByteOrder.LITTLE_ENDIAN,)@byteBuffer==null||!(byteBuffer.hasArray())||byteBuffer.array().length<4 } -> byteBuffer.putInt(0,(int) n&0x00000000FFFFFFFFL,)@ -> raf.write(byteBuffer.array(),0,4,)@ } CATCH(IOException) {}
results[https://github.com/sunqimin09/FirstApp/blob/d35d5ba76a130d8d59bae70cdcd01f9d586e87ac/AppVideo/src/com/example/appvideo/play/BBVideoPlayer.java][downloadbyvideoinfo][1] = -> TRY {  -> raf=new RandomAccessFile(new File(localFilePath,),"rws",)@ -> raf.seek(vi.offsetstart,)@ -> LOOP { -> raf.write(buf,0,len,)@(len=in.read(buf,))!=-1 } -> raf.close()@ } CATCH(IOException) {}
results[https://github.com/f1ori/yacy/blob/3b40b982564c86c4d3728d3415a970deb2c0d1a8/source/net/yacy/kelondro/io/Records.java][clean][1] = -> TRY {  -> IF { -> return @index==s-1 && !(index>=s) } -> IF { -> System.arraycopy(zero,0,this.buffer,q*this.recordsize,this.recordsize,)@!(index==s-1) && !(index>=s) && q>=0 } -> raf.seek(index*this.recordsize,)@!(index==s-1) && !(q>=0) && !(index>=s) -> raf.write(zero,0,this.recordsize,)@!(index==s-1) && !(q>=0) && !(index>=s) } CATCH(IOException) {}
results[https://github.com/jonanh/PanChat/blob/ee4d98398b1f2d33c4c85fe96bbb4f302d54964a/PanChat/src/panchat/messages/extras/FileBlockMessage.java][write][3] = -> TRY {  -> os=new RandomAccessFile(pFileName,"rw",)@ -> IF { -> bytesAEscribir=(int) file.getSize()%Bloque_TAMANYO@blockNum+1*Bloque_TAMANYO>file.getSize() } -> os.seek(blockNum*Bloque_TAMANYO,)@ -> os.write(data,0,bytesAEscribir,)@ -> os.close()@ } CATCH(IOException) {}
results[https://github.com/apache/activemq/blob/b0c2a40fb979829ceca2ca51858ca67269bd5992/activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/StoreIndexWriter.java][redoStoreItem][1] = -> TRY {  -> dataOut.reset()@ -> redo.getIndexItem().write(dataOut,)@ -> file.seek(redo.getOffset(),)@ -> file.write(dataOut.getData(),0,IndexItem.INDEX_SIZE,)@ } CATCH(IOException) {}
results[https://github.com/Starlink/starjava/blob/5742d01da82d1485720cbe4ff84b92a5adbbd96c/tamfits/src/main/nom/tam/util/BufferedFile.java][write][2] = -> TRY {  -> IF { -> needBuffer(length,)@length<bufferSize -> System.arraycopy(buf,offset,buffer,bufferOffset,length,)@length<bufferSize } ELSE { -> raf.write(buf,offset,length,)@!(length<bufferSize) } } CATCH(IOException) {}
results[https://github.com/camptocamp/secureOWS/blob/36abae7e77d3c056352799f286899453ecac360b/owsproxyserver/src/org/deegree/io/shpapi/IndexFile.java][writeHeader][1] = -> TRY {  -> ByteUtils.writeBEInt(header,0,ShapeConst.SHAPE_FILE_CODE,)@ -> ByteUtils.writeBEInt(header,24,filelength,)@ -> ByteUtils.writeLEInt(header,28,ShapeConst.SHAPE_FILE_VERSION,)@ -> ByteUtils.writeLEInt(header,32,shptype,)@ -> ShapeUtils.writeBox(header,36,mbr,)@ -> raf.seek(0,)@ -> raf.write(header,0,ShapeConst.SHAPE_FILE_HEADER_LENGTH,)@ } CATCH(IOException) {}
results[https://github.com/mspsim/mspsim/blob/3ddcfefe04621e69da7deb619111ed98d1793368/se/sics/mspsim/chip/FileStorage.java][write][2] = -> TRY {  -> IF { -> throw new IOException("outside storage",)@maxSize>0&&pos+len>maxSize } -> IF { -> file.seek(pos,)@!(maxSize>0&&pos+len>maxSize) && file!=null||ensureOpen(true,) -> file.write(b,offset,len,)@!(maxSize>0&&pos+len>maxSize) && file!=null||ensureOpen(true,) } } CATCH(IOException) {}
results[https://github.com/spacecaker/android_frameworks_base_CSM9.1/blob/a4ee5974d66e944f3fa0466ea794deacb3f32975/core/java/android/speech/tts/FileSynthesisCallback.java][audioAvailable][8] = -> IF { -> Log.d(TAG,"FileSynthesisRequest.audioAvailable("+buffer+","+offset+","+length+")",)@ } -> IF { -> return TextToSpeech.ERROR@mFile==null } -> TRY { -> mFile.write(buffer,offset,length,)@!(mFile==null) } CATCH(IOException) { -> Log.e(TAG,"Failed to write to "+mFileName+": "+ex,)@!(mFile==null) -> cleanUp()@!(mFile==null) }
results[https://github.com/uditrugman/openjdk8-jdk/blob/0980cbc043c0d2e3ee0e965a361351e4ac5e6ad5/src/share/classes/javax/imageio/stream/FileCacheImageInputStream.java][readUntil][4] = -> TRY {  -> cache.seek(length,)@!(pos<length) -> LOOP { -> nbytes=stream.read(buf,0,(int) Math.min(len,(long) BUFFER_LENGTH,),)@len>0 && !(pos<length) -> IF { -> return length@nbytes==-1 && len>0 && !(pos<length) } -> cache.write(buf,0,nbytes,)@!(len>0) && !(pos<length) && !(nbytes==-1) } } CATCH(IOException) {}
results[https://github.com/MiniSEC/adito_reload/blob/56b7770db21e896d57e65e5f58a39c213bea0b06/Alfresco-JLAN/alfresco-jlan/source/java/org/alfresco/jlan/server/filesys/loader/FileSegment.java][writeBytes][6] = -> TRY {  -> fileLen=m_segment.length()@ -> IF { -> m_segment.setLength(endpos,)@ } -> IF { -> return @len==0 } -> m_segment.seek(fileOff,)@!(len==0) -> m_segment.write(buf,pos,len,)@!(len==0) } CATCH(IOException) {}
results[https://github.com/rowboat/libcore/blob/e595037cf49109e9e20b47e6e191eda45e414008/luni/src/test/java/org/apache/harmony/luni/tests/java/io/RandomAccessFileTest.java][test_seekJ][8] = -> TRY {  -> raf=new java.io.RandomAccessFile(fileName,"rw",)@ -> raf.write(fileString.getBytes(),0,fileString.length(),)@ -> raf.seek(12,)@ -> assertEquals("Seek failed to set filePointer",12,raf.getFilePointer(),)@ -> raf.close()@ } CATCH(IOException) {}
results[https://github.com/jeyboy/MUSIC/blob/c68427295b2827ab15affe084eecc72ed47ea199/lib/audiotagger/org/jaudiotagger/tag/lyrics3/Lyrics3v2Field.java][write][7] = -> TRY {  -> IF { -> str=getIdentifier()@ -> LOOP { -> buffer[i]=(byte) str.charAt(i,)@i<str.length() } -> file.write(buffer,0,str.length(),)@ } } CATCH(IOException) {}
results[https://github.com/sangamon/sneer/blob/60b1246c21bd40cfa0f3c3b283ba4dca1ca0b8ea/sneer/src/sneer/apps/transferqueue/TransferQueue.java][writeFilePart][1] = -> TRY { -> raf=new RandomAccessFile(schedule._file,"rws",)@ -> raf.seek(transferPacket._offset,)@ -> raf.write(transferPacket._contents,0,transferPacket._contents.length,)@ -> raf.close()@ } CATCH(FileNotFoundException) { -> e.printStackTrace()@ } CATCH(IOException) { -> e.printStackTrace()@ }
results[https://github.com/charleso/naca/blob/9fe1dd7b410a08e36c346ee9711baefd5bb116fc/JLib/src/jlib/misc/DataFileReadWrite.java][writeRecord][1] = -> nLg=cs.length()@ -> IF { -> TRY { -> m_rw.write(cs.getBytes(),0,nLg,)@m_rw!=null -> m_rw.write((char) FileEndOfLine.LF,)@m_rw!=null } CATCH(IOException) { -> e.printStackTrace()@!(m_rw!=null) -> throw new RuntimeException(e,)@m_rw!=null } }
results[https://github.com/unsound/dmgextractor/blob/566b73abc13e38a3f294b2d77e341d7f48039a34/src/org/catacombae/dmgx/DMGBlockHandlers.java][processStream][1] = -> TRY {  -> bytesRead=is.read(inBuffer,)@ -> LOOP { -> ui.addProgressRaw(bytesRead,)@bytesRead>0 -> IF { -> isoRaf.write(inBuffer,0,bytesRead,)@bytesRead>0 } -> bytesRead=is.read(inBuffer,)@bytesRead>0 } } CATCH(IOException) {}
results[https://github.com/SamMobile/android_dalvik/blob/4130f726d82493748bf7252da631e1f315f2538c/tools/dexdeps/src/com/android/dexdeps/Main.java][openInputFileAsZip][51] = -> TRY {  -> IF { -> throw new ZipException()@entry==null } -> raf=new RandomAccessFile(tempFile,"rw",)@!(entry==null) -> LOOP { -> actual=zis.read(copyBuf,)@!(entry==null) -> raf.write(copyBuf,0,actual,)@!(entry==null) } -> raf.seek(0,)@!(entry==null) } CATCH(IOException) {}
results[https://github.com/ursatong/GuardroidROM/blob/01a1c6fbcaf758ea6d9cf6296618bc6092733b36/libcore/luni/src/test/java/tests/api/java/io/RandomAccessFileTest.java][test_getFilePointer][52] = -> TRY {  -> raf=new java.io.RandomAccessFile(fileName,"rw",)@ -> raf.write(testString.getBytes(),0,testLength,)@ -> assertEquals("Test 1: Incorrect filePointer returned. ",testLength,raf.getFilePointer(),)@ -> raf.close()@ -> TRY { -> raf.getFilePointer()@ } } CATCH(IOException) {}
results[https://github.com/davros-/platform_frameworks_base/blob/4b50cc39b0518a04b16eb0f0b6286859b32373a3/core/java/com/android/internal/widget/LockSettingsService.java][writeFile][8] = -> TRY { -> raf=new RandomAccessFile(name,"rw",)@ -> IF { -> raf.setLength(0,)@ } ELSE { -> raf.write(hash,0,hash.length,)@!(hash==null||hash.length==0) } -> raf.close()@ } CATCH(IOException) { -> Slog.e(TAG,"Error writing to file "+ioe,)@ }
results[https://github.com/DominicWatson/open-bluedragon/blob/7a0bc66077007b1125edcf6de803ac15b6f284f8/src/org/farng/mp3/id3/ID3v2_2Frame.java][write][1] = -> TRY {  -> str=TagUtility.truncate(getIdentifier(),3,)@ -> LOOP { -> buffer[i]=(byte) str.charAt(i,)@i<str.length() } -> file.write(buffer,0,str.length(),)@ -> this.getBody().write(file,)@ } CATCH(IOException) {}
results[https://github.com/opensciencemap/VectorTileMap/blob/f8edcff5e46d4a34fd9edbcb89ad0913dd080b52/map-writer-osmosis/src/main/java/org/mapsforge/map/writer/MapFileWriter.java][writeTile][3] = -> TRY {  -> multipleTilesBuffer.put(tileBuffer.array(),0,tileBuffer.position(),)@ -> IF { -> randomAccessFile.write(multipleTilesBuffer.array(),0,multipleTilesBuffer.position(),)@multipleTilesBuffer.remaining()<MIN_TILE_BUFFER_SIZE -> multipleTilesBuffer.clear()@multipleTilesBuffer.remaining()<MIN_TILE_BUFFER_SIZE } } CATCH(IOException) {}
results[https://github.com/AndrewChanChina/ppc1/blob/270f8e314a3e1b4b54db9e0a092f4a2bb745e58b/src/com/smit/DeskView/commonclass/TvLiveChannelParse.java][doInBackground][2] = -> TRY { -> fos=new RandomAccessFile(file,"rw",)@ -> fos.seek(0,)@ -> LOOP { -> len=bis.read(buf,0,BUFFER_SIZE,)@ -> fos.write(buf,0,len,)@ } -> fos.close()@ } CATCH(IOException) { -> Log.d(tag,e.getMessage(),)@ }
results[https://github.com/f1ori/yacy/blob/3b40b982564c86c4d3728d3415a970deb2c0d1a8/source/net/yacy/kelondro/io/Records.java][cleanLast0][1] = -> TRY {  -> IF { -> System.arraycopy(this.buffer,this.buffercount-1*this.recordsize,b,start,this.recordsize,)@this.buffercount>0 } -> endpos=this.raf.length()-this.recordsize@!(this.buffercount>0) -> raf.seek(endpos,)@!(this.buffercount>0) -> raf.readFully(b,start,this.recordsize,)@!(this.buffercount>0) -> this.raf.seek(endpos,)@!(this.buffercount>0) -> this.raf.write(zero,0,this.recordsize,)@!(this.buffercount>0) -> this.raf.setLength(endpos,)@!(this.buffercount>0) } CATCH(IOException) {}
results[https://github.com/jiongs/cocit/blob/7dd1448ec2d60987c9ba55d1f0904358e92450ad/src/core/com/kmetop/demsy/lang/Zips.java][expand0][1] = -> TRY {  -> IF { -> return ret@entry==null } } ELSE { -> rf=new RandomAccessFile(fileName,"rw",)@!(entry==null) -> LOOP { -> rf.write(dbf,0,rb,)@!(entry==null) && (rb=bin.read(dbf,))>=0 } -> rf.close()@!(entry==null) } CATCH(IOException) {}
results[https://github.com/benetech/martus-android/blob/9bcae7e6b104e5f70ad4d377915a0d3768165979/martus-android/src/org/martus/util/ScrubFile.java][scrub][2] = -> TRY {  -> IF { -> Arrays.fill(fillData,singleScrubByte,)@fillData==null } -> randomFile=new RandomAccessFile(file,"rw",)@ -> LOOP { -> randomFile.write(fillData,)@ } -> remander=(int) length-offset@ -> randomFile.write(fillData,0,remander,)@ -> randomFile.close()@ } CATCH(IOException) {}
results[https://github.com/sangamon/sneer/blob/eb741e202c84b47eea8deff59e79ee86f809d8a4/sneer/apps/filetransfer/src/sneer/apps/filetransfer/gui/FileTransferFrame.java][consume][1] = -> IF { -> return @directory==null } -> TRY { -> raf=new RandomAccessFile(filename,"rws",)@!(directory==null) -> raf.seek(filePart._offset,)@!(directory==null) -> raf.write(filePart._content,0,filePart._content.length,)@!(directory==null) -> raf.close()@!(directory==null) } CATCH(FileNotFoundException) { -> e.printStackTrace()@!(directory==null) } CATCH(IOException) { -> e.printStackTrace()@!(directory==null) }
results[https://github.com/HGitMaster/geotools-osgi/blob/1a6a436c076bf733c6bd0565a05c8ec6f70c1c2d/thirdparty/javax.media.jai.osgi/src/main/java/com/sun/media/jai/codec/FileCacheSeekableStream.java][readUntil][1] = -> TRY {  -> cache.seek(length,)@!(pos<length) -> LOOP { -> nbytes=stream.read(buf,0,(int) Math.min(len,(long) bufLen,),)@len>0 && !(pos<length) -> IF { -> return length@nbytes==-1 && len>0 && !(pos<length) } -> cache.setLength(cache.length()+nbytes,)@!(len>0) && !(pos<length) && !(nbytes==-1) -> cache.write(buf,0,nbytes,)@!(len>0) && !(pos<length) && !(nbytes==-1) } } CATCH(IOException) {}
results[https://github.com/leif81/openmap-maven/blob/fb347bcfd362f29705235e5b232c6077e25eb06d/src/openmap/src/main/java/com/bbn/openmap/layer/shape/ShapeFile.java][writeHeader][1] = -> TRY {  -> writeBEInt(header,0,SHAPE_FILE_CODE,)@ -> writeBEInt(header,24,50,)@ -> writeLEInt(header,28,SHAPE_FILE_VERSION,)@ -> writeLEInt(header,32,SHAPE_TYPE_NULL,)@ -> writeLEDouble(header,36,0.0,)@ -> writeLEDouble(header,44,0.0,)@ -> writeLEDouble(header,52,0.0,)@ -> writeLEDouble(header,60,0.0,)@ -> raf.seek(0,)@ -> raf.write(header,0,SHAPE_FILE_HEADER_LENGTH,)@ } CATCH(IOException) {}
results[https://github.com/f1ori/yacy/blob/0e471ba33b2fb140178adf0ce8bbcd8eb4ee127b/source/de/anomic/kelondro/io/CachedRandomAccess.java][write][1] = -> TRY {  -> seekpos=this.RAFile.getFilePointer()@ -> IF { -> System.arraycopy(b,off,this.cache,this.cachelen,len,)@this.cachelen+len<=this.cache.length&&this.cachestart+this.cachelen==seekpos } ELSE { -> IF { -> System.arraycopy(b,off,this.cache,0,len,)@len<=this.cache.length && !(this.cachelen+len<=this.cache.length&&this.cachestart+this.cachelen==seekpos) } } -> RAFile.write(b,off,len,)@ } CATCH(IOException) {}
