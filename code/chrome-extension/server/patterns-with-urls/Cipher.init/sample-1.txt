results[https://github.com/cml220/Cybernetic-Tiger/blob/14e0aeaf0dd864b81f5230b02ea9cdbb3787898b/NextbooksFinal/pdfrenderer/com/sun/pdfview/decrypt/StandardDecrypter.java][initDecryption][2] = -> TRY {  -> cipher.init(Cipher.DECRYPT_MODE,aKey,)@ } CATCH(InvalidKeyException) {}
results[https://github.com/InsomniaAOSP/platform_libcore/blob/4d9d276d01aee9255fec5eaae93827d3af306d34/luni/src/test/java/org/apache/harmony/crypto/tests/javax/crypto/NullCipherTest.java][testInitintKey][53] = -> TRY {  -> c.init(Cipher.ENCRYPT_MODE,new SecretKeySpec( new byte[],"algorithm",),)@ } CATCH(Exception) {}
results[https://github.com/bladesilent/Harmony/blob/73c10023ad7f61382f0ace1a2f98d0874fd3fdf9/classlib/modules/crypto/src/test/api/java/org/apache/harmony/crypto/tests/javax/crypto/CipherTest.java][test_initILjava_security_Key][6] = -> TRY {  -> cipher=Cipher.getInstance(algorithm+"/ECB/PKCS5Padding",)@ -> cipher.init(Cipher.ENCRYPT_MODE,cipherKey,)@ } CATCH(Exception) {}
results[https://github.com/matthewmccullough/encryption-jvm-bootcamp/blob/cb28c6f16aaa2b43999c52d0c24e44f3ed672d1a/jce-keystore-symmetric-encrypt/src/test/java/com/ambientideas/TestSymmetricEncryptAESFromKeystore.java][decrypt][5] = -> TRY {  -> aesCipher.init(Cipher.DECRYPT_MODE,aesKey,)@ -> decryptedBytes=aesCipher.doFinal(encryptedBytes,)@ } CATCH(Exception) {}
results[https://github.com/pnegre/Safe/blob/ac95dd1534ab2d6e72af847000a765ff5d88db89/src/com/pnegre/simplecrypt/SimpleAESCipher.java][init][1] = -> TRY { -> cipher.init(mode,key,)@ } CATCH(InvalidKeyException) { -> throw new RuntimeException()@ }
results[https://github.com/SimpleServer/SimpleServer/blob/e68cc49599b9208a6170bcba80fada851c3357eb/src/simpleserver/stream/Encryption.java][getCipher][1] = -> TRY {  -> cipher=Cipher.getInstance(transformation,)@ -> cipher.init(mode,key,)@ } CATCH(GeneralSecurityException) {}
results[https://github.com/lcsoftware/free-back-server/blob/77559b7ceda9b2b9dddc03855b3337b176fd5158/freeback/src/net/freeback/utils/FBSecurity.java][encrypt][11] = -> TRY {  -> cipher=Cipher.getInstance("DES",)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> return cipher.doFinal(input,)@ } CATCH(Exception) {}
results[https://github.com/restlet/restlet-framework-java/blob/512ddb34a5413381ffa71ea89bae287606570d8e/modules/org.restlet.ext.oauth/src/org/restlet/ext/oauth/internal/CryptoUtils.java][createCipher][3] = -> TRY {  -> cipher=Cipher.getInstance(algorithm,)@ -> cipher.init(mode,new SecretKeySpec(secretKey,algorithm,),)@ } CATCH(GeneralSecurityException) {}
results[https://github.com/LivotovLabs/RoboTools/blob/996de6819a7cfddbc0b15c20cd637f943b213e9d/src/eu/livotov/labs/android/robotools/crypt/RTSecretKeyWrapper.java][unwrap][1] = -> TRY {  -> mCipher.init(Cipher.UNWRAP_MODE,mPair.getPrivate(),)@ -> return (SecretKey) mCipher.unwrap(blob,"AES",Cipher.SECRET_KEY,)@ } CATCH(GeneralSecurityException) {}
results[https://github.com/ikeji/openjdk7-jdk/blob/677f1cf70eac2abefccac22db54f13b021cd2be9/test/javax/crypto/Cipher/GCMAPI.java][main][3] = -> TRY {  -> c=Cipher.getInstance("AES",)@ -> c.init(Cipher.ENCRYPT_MODE,new SecretKeySpec( new byte[],"AES",),)@ } CATCH(Exception) {}
results[https://github.com/fhdragon/dragon/blob/6f7e55a6c45d6c7994daad1c4f8ae933e5ccd43e/dragon-commons/src/main/java/org/apache/dragon/commons/crypto/RSAByte.java][encrytor][6] = -> TRY { -> cipher.init(Cipher.ENCRYPT_MODE,this.pubKey,)@ -> return cipher.doFinal(t,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/marfnk/gMixGui/blob/f81b599113969cf174f517a55d1ec3069c936cea/src/plugIns/layer2recodingScheme/RSA_OAEP_AES_OFB_v0_001/RSA_OAEP_AES_OFB.java][initAsClient][1] = -> TRY { -> this.asymmetricCipher=Cipher.getInstance(config.ASYM_CRYPTOGRAPHY_ALGORITHM,config.CRYPTO_PROVIDER,)@ -> this.asymmetricCipher.init(Cipher.ENCRYPT_MODE,config.publicKeysOfMixes[config.publicKeysOfMixes.length-1],)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/threerings/narya/blob/a7e0893191b56381e37740de4a639e696a368881/core/src/main/java/com/threerings/presents/util/SecureUtil.java][getRSACipher][2] = -> TRY { -> cipher=Cipher.getInstance("RSA",)@ -> cipher.init(mode,key,)@ } CATCH(GeneralSecurityException) { -> log.warning("Failed to create cipher",gse,)@ }
results[https://github.com/cakeframework/cake/blob/4412bc5a23628992ffe38b95ed442a18838f572d/cake-util/cake-util/src/main/java/org/cakeframework/util/concurrent/ThreadLocalAESRandom.java][seed][3] = -> TRY { -> cipher.init(Cipher.ENCRYPT_MODE,new Key(),)@ } CATCH(GeneralSecurityException) { -> throw new Error(e,)@ }
results[https://github.com/SpigotMC/BungeeCord/blob/94ee61cd35de95e63819cd64055d4914d02ef300/proxy/src/main/java/net/md_5/bungee/EncryptionUtil.java][encrypt][2] = -> TRY {  -> hasher=Cipher.getInstance("RSA",)@ -> hasher.init(Cipher.ENCRYPT_MODE,key,)@ -> return hasher.doFinal(b,)@ } CATCH(GeneralSecurityException) {}
results[https://github.com/LivotovLabs/RoboTools/blob/996de6819a7cfddbc0b15c20cd637f943b213e9d/src/eu/livotov/labs/android/robotools/crypt/RTSecretKeyWrapper.java][wrap][1] = -> TRY {  -> mCipher.init(Cipher.WRAP_MODE,mPair.getPublic(),)@ -> return mCipher.wrap(key,)@ } CATCH(GeneralSecurityException) {}
results[https://github.com/apache/geronimo-gshell/blob/5307fe00e91a6c26d8146a341c2021ff9c8b1431/gshell-remote/gshell-remote-common/src/main/java/org/apache/geronimo/gshell/remote/crypto/CryptoContextImpl.java][codec][2] = -> TRY {  -> cipher=createCipher()@ -> cipher.init(mode,key,)@ -> return cipher.doFinal(bytes,)@ } CATCH(Exception) {}
results[https://github.com/leandrocruz/Xingu/blob/865a2d0a627a36b7921e8e427dba173ca7fdfddb/crypto/src/main/java/br/com/ibnetwork/xingu/crypto/impl/rsa/RSAUtils.java][decrypt][1] = -> TRY {  -> cipher=Cipher.getInstance(ALGORITHM,)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> cis=new CipherInputStream(is,cipher,)@ } CATCH(Exception) {}
results[https://github.com/htwg/UCE/blob/d54d8353680a696b244920b22292476176e791a5/connectivitymanager/src/main/java/de/fhkn/in/uce/connectivitymanager/connection/UCESecureSocket.java][initializeEncryptCipher][2] = -> TRY {  -> this.encrypt=Cipher.getInstance(AES_ALGORITHM_NAME,)@ -> this.encrypt.init(Cipher.ENCRYPT_MODE,this.keyExchange.getSharedKey(AES_ALGORITHM_NAME,),)@ } CATCH(Exception) {}
results[https://github.com/eclipse/riena/blob/91df45e67ec3b71a5991a663915c687b2412fbd7/org.eclipse.riena.core/src/org/eclipse/riena/core/util/CipherUtils.java][getCipher][1] = -> TRY {  -> desCipher=Cipher.getInstance(DES_ALGORITHM,)@ -> desCipher.init(mode,getKey(key,),)@ } CATCH(GeneralSecurityException) {}
results[https://github.com/cbsa-informatik-uni-siegen/gtitool/blob/f9dad48f6082f0fea77945ac000e1535407ca0e6/de.unisiegen.gtitool.ui/source/de/unisiegen/gtitool/ui/exchange/Connection.java][encryptRSA][4] = -> TRY {  -> cipher=Cipher.getInstance(RSA,)@ -> cipher.init(Cipher.ENCRYPT_MODE,this.rsaPublicKey,)@ -> return cipher.doFinal(plainText,)@ } CATCH(NoSuchAlgorithmException,NoSuchPaddingException,InvalidKeyException,IllegalBlockSizeException,BadPaddingException) {}
results[https://github.com/bleujin/aradon/blob/986691e9ac12cfa0b07315950f997da071a8b5b3/src/net/ion/radon/impl/util/CipherUtil.java][initMode][1] = -> TRY {  -> key=CipherUtil.generateKey(CipherUtil.Algorithm.AES,keyBytes,)@ -> cipher=Cipher.getInstance(transformation,)@ -> cipher.init(mode,key,)@ } CATCH(NoSuchAlgorithmException,InvalidKeyException,InvalidKeySpecException,NoSuchPaddingException) {}
results[https://github.com/SpigotMC/BungeeCord/blob/dbca9acac3344a18a1faa4c7caf636cddede21ac/src/main/java/net/md_5/bungee/EncryptionUtil.java][encrypt][1] = -> TRY {  -> hasher=Cipher.getInstance("RSA",)@ -> hasher.init(Cipher.ENCRYPT_MODE,key,)@ -> return hasher.doFinal(b,)@ } CATCH(BadPaddingException,IllegalBlockSizeException,InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException) {}
results[https://github.com/jazzlly/Notes/blob/2b412eb8c53e63924cb7f6afe781bed3ffb851e6/computer.science/languages/java/security/java.sec.src/src/org/zlex/chapter07_2/DESedeCoder.java][decrypt][16] = -> TRY {  -> k=toKey(key,)@ -> cipher=Cipher.getInstance(CIPHER_ALGORITHM,)@ -> cipher.init(Cipher.DECRYPT_MODE,k,)@ -> return cipher.doFinal(data,)@ } CATCH(Exception) {}
results[https://github.com/roalex/android_libcore/blob/21643b11ea824e0e4e65a5437a57abed2052ff7a/luni/src/test/java/org/apache/harmony/crypto/tests/javax/crypto/CipherOutputStream1Test.java][test_ConstructorLjava_io_OutputStreamLjavax_crypto_Cipher][50] = -> TRY {  -> key=kg.generateKey()@ -> c=Cipher.getInstance("DES/CBC/NoPadding",)@ -> c.init(Cipher.ENCRYPT_MODE,key,)@ -> cos=new CipherOutputStream(baos,c,)@ } CATCH(NoSuchAlgorithmException,NoSuchPaddingException,InvalidKeyException) {}
results[https://github.com/iGio90/android_libcore/blob/21643b11ea824e0e4e65a5437a57abed2052ff7a/luni/src/test/java/org/apache/harmony/crypto/tests/javax/crypto/CipherInputStream1Test.java][test_ConstructorLjava_io_InputStreamLjavax_crypto_Cipher][50] = -> TRY {  -> key=kg.generateKey()@ -> c=Cipher.getInstance("DES/CBC/NoPadding",)@ -> c.init(Cipher.ENCRYPT_MODE,key,)@ -> cis=new CipherInputStream(bais,c,)@ } CATCH(NoSuchAlgorithmException,NoSuchPaddingException,InvalidKeyException) {}
results[https://github.com/hjohn/MediaSystem/blob/c55d6d9c2b167a1208247499d74e868adbccbbf2/Mediasystem/src/main/java/hs/mediasystem/util/CryptoUtil.java][encrypt][2] = -> TRY {  -> cipher=Cipher.getInstance("AES",)@ -> cipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(raw,"AES",),)@ -> return cipher.doFinal(clear,)@ } CATCH(InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException,IllegalBlockSizeException,BadPaddingException) {}
results[https://github.com/SVMP/android_libcore/blob/21643b11ea824e0e4e65a5437a57abed2052ff7a/luni/src/test/java/org/apache/harmony/crypto/tests/javax/crypto/SealedObjectTest.java][testGetAlgorithm][53] = -> TRY {  -> key=kg.generateKey()@ -> cipher=Cipher.getInstance(algorithm,)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> so=new SealedObject(secret,cipher,)@ } CATCH(Exception) {}
results[https://github.com/jkiddo/jolivia/blob/5fd6c49ea522f311c6a4bd7a283c035ee14d9a03/src/main/java/org/phlo/AirReceiver/RaopRtspChallengeResponseHandler.java][getSignature][7] = -> TRY { -> m_rsaPkCS1PaddingCipher.init(Cipher.ENCRYPT_MODE,AirTunesCrytography.PrivateKey,)@ -> return m_rsaPkCS1PaddingCipher.doFinal(sigData.array(),)@ } CATCH(Exception) { -> throw new RuntimeException("Unable to sign response",e,)@ }
results[https://github.com/mattgarkusha/HomeSync/blob/551fdb65cf3c923186a6d39cc33a44879705c441/IntelliJ Workspace/Crypto Assignment 3 test/src/FileEncryptor.java][loadKey][10] = -> TRY {  -> cDec=Cipher.getInstance("PBEWithSHAAnd3KeyTripleDES",)@ -> key=keyFact.generateSecret(PBESpec,)@ -> cDec.init(Cipher.DECRYPT_MODE,key,)@ -> decryptedKeyBytes=cDec.doFinal(encryptedKeyBytes,)@ } CATCH(Exception) {}
results[https://github.com/andershong/eCab/blob/670c08fbb8bd4ba792b88b5b2231a74538816746/src/com/jinghong/core/utils/EncryptUtil.java][getEncCode][6] = -> TRY { -> cipher=Cipher.getInstance("DES",)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> byteFina=cipher.doFinal(byteS,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/mixi-inc/triaina/blob/ea93022b3592a62c34620ec64172f3163fcb80e0/android/Commons/src/triaina/commons/utils/CryptUtils.java][decrypt][4] = -> TRY { -> cipher=Cipher.getInstance(mode,)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> return cipher.doFinal(soruce,)@ } CATCH(GeneralSecurityException) { -> throw new SecurityRuntimeException(exp,)@ }
results[https://github.com/derekhiggins/ovirt-engine/blob/ad7dd6e7c7fc07c94f23d634b3c730ab7fe7b8f3/backend/manager/modules/engineencryptutils/src/main/java/org/ovirt/engine/core/engineencryptutils/EncryptionUtils.java][encrypt][2] = -> TRY {  -> rsa=Cipher.getInstance(algo,)@ -> rsa.init(Cipher.ENCRYPT_MODE,cert.getPublicKey(),)@ -> cipher=rsa.doFinal(cipherbytes,)@ } CATCH(GeneralSecurityException) {}
results[https://github.com/ixiaopan/EasyAndroid/blob/2ded76bb35e82dd2e26f18035a3c7f2c024025d8/src/me/xiaopan/java/easy/util/DESCoder.java][decryptByte][6] = -> TRY { -> cipher=Cipher.getInstance("DES",)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> return cipher.doFinal(decryptByteArray,)@ } CATCH(Exception) { -> throw new RuntimeException("Error initializing SqlMap class. Cause: "+e,)@ }
results[https://github.com/jerep6/ogi/blob/f678c3fe3989220d8fbe016e2ae8ded0f7d86abc/ogi-parent/ogi-services/src/main/java/fr/jerep6/ogi/framework/security/CryptageAES.java][encrypt][3] = -> TRY {  -> c=Cipher.getInstance(ALGO,)@ -> c.init(Cipher.ENCRYPT_MODE,key,)@ -> encVal=c.doFinal(Data.getBytes(),)@ } CATCH(Exception) {}
results[https://github.com/chandlersong/TestCase/blob/2ada7db79c507c14bb863ca569076c2c7cac414f/TestCase/src/test/java/com/hilatest/security/chapter7/aes/AESCoder.java][encrypt][2] = -> TRY {  -> k=toKey(key,)@ -> cipher=Cipher.getInstance(CIPHER_ALGORITHM,"BC",)@ -> cipher.init(Cipher.ENCRYPT_MODE,k,)@ -> return cipher.doFinal(data,)@ } CATCH(Exception) {}
results[https://github.com/Dhandapani/gluster-ovirt/blob/bee2165ff04f64ce7a28d34b0ba70e44431c4b14/backend/manager/modules/engineencryptutils/src/main/java/org/ovirt/engine/core/engineencryptutils/EncryptionUtils.java][decode][3] = -> TRY { -> cipher=Cipher.getInstance(params.algorithm,)@ -> cipher.init(Cipher.DECRYPT_MODE,params.secretKey,)@ -> decode=cipher.doFinal(encoding,)@ } CATCH(Exception) { -> log.error("Error in decrypting the secret",e,)@ }
results[https://github.com/SoftwareSynthesis/SoftwareEngineeringProject/blob/79311a26bb01f9b8a98521002c3e08bfc3ed71b4/Sources/ModelManager/Source/org/softwaresysnthesis/mytalk/server/authentication/AESAlgorithm.java][decrypt][2] = -> TRY {  -> cipher=Cipher.getInstance(AESAlgorithm.algorithm,)@ -> key=this.generateKey()@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> decodedValue=cipher.doFinal(decordedValue,)@ } CATCH(Exception) {}
results[https://github.com/eclipse/emf/blob/db0c77791d147ca7b3a5cefe3683177bf69f385c/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/resource/impl/DESCipherImpl.java][decrypt][4] = -> TRY {  -> cipher=Cipher.getInstance(ENCRYPTION_SCHEME,)@ -> cipher.init(Cipher.DECRYPT_MODE,getKey(),)@ -> return new CipherInputStream(inputStream,cipher,)@ } CATCH(Exception) {}
results[https://github.com/florhaf/ravent/blob/07d1623ffe6a2df6e68ee1c2eba335d5b3f4aba6/service/lib/restlet-gae-2.0.10/src/org.restlet.ext.crypto/org/restlet/ext/crypto/internal/CryptoUtils.java][createCipher][6] = -> TRY {  -> cipher=Cipher.getInstance(algo,)@ -> cipher.init(mode,new SecretKeySpec(Base64.decode(base64Secret,),algo,),)@ } CATCH(GeneralSecurityException) {}
results[https://github.com/pavel-slyvka/lavida/blob/d1c226ab677a50463ea802776cf89d1210ae666f/finance/service/src/main/java/com/lavida/service/DecryptionService.java][init][1] = -> TRY { -> key=keyFactory.generatePrivate(keySpec,)@ -> cipher=Cipher.getInstance(ALGORITHM,)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/bakis2011/PocketVDC/blob/aef6cc5bf3a54294d7d4497109c11d293888fe17/src/sate/pocketvdc/Secure.java][decrypt][9] = -> TRY {  -> key=generateKey()@ -> c=Cipher.getInstance(ALGORTM,)@ -> c.init(Cipher.DECRYPT_MODE,key,)@ -> decValue=c.doFinal(decordedValue,)@ } CATCH(Exception) {}
results[https://github.com/brl/JTor/blob/04a3be77bd049fe7969eb0fd69af06e1862d677f/src/com/subgraph/orchid/crypto/TorPublicKey.java][createCipherInstance][2] = -> TRY { -> cipher=getCipherInstance()@ -> cipher.init(Cipher.DECRYPT_MODE,getKey(),)@ } CATCH(InvalidKeyException) { -> throw new TorException(e,)@ }
results[https://github.com/ecsec/open-ecard/blob/6e643ff57bace7801e3cbb6712c35aaeac1de39c/ifd/ifd-protocols/pace/src/main/java/org/openecard/ifd/protocol/pace/SecureMessaging.java][getCipherIV][2] = -> TRY {  -> c=Cipher.getInstance("AES/ECB/NoPadding",)@ -> key=new SecretKeySpec(keyENC,"AES",)@ -> c.init(Cipher.ENCRYPT_MODE,key,)@ -> return c.doFinal(smssc,)@ } CATCH(Exception) {}
results[https://github.com/eclipse/datatools.connectivity/blob/232beda86deccf8decb862f37df424f0256a68de/plugins/org.eclipse.datatools.connectivity/src/org/eclipse/datatools/connectivity/internal/security/DefaultCipherProvider.java][createDecryptionCipher][1] = -> TRY {  -> k=loadKey()@ -> c=Cipher.getInstance(k.getAlgorithm(),)@ -> c.init(Cipher.DECRYPT_MODE,k,)@ } CATCH(GeneralSecurityException) {}
results[https://github.com/dzonekl/netxstudio/blob/f017ca6ed778572bbca6c0f42c0f8045a90f78a4/plugins/com.netxforge.base/src/com/netxforge/base/security/JCAService.java][decrypt][2] = -> TRY { -> cipher=Cipher.getInstance(CIPHER_TYPE,)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> outputBytes=cipher.doFinal(encrypted,)@ } CATCH(Exception) { -> throw new RuntimeException("Failed to decrypt password",e,)@ }
results[https://github.com/TanyaGaleyev/Panda-project/blob/b1f7e749aaa0920d20a5e4b8f12eacc596f1a2f5/SimpleAndroidApp/src/com/pavlukhin/acropanda/game/level/reader/AesDecrypter.java][decrypt][1] = -> TRY {  -> cipher=Cipher.getInstance(key.getAlgorithm(),)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> return cipher.doFinal(bytes,)@ } CATCH(NoSuchPaddingException,NoSuchAlgorithmException,InvalidKeyException,BadPaddingException,IllegalBlockSizeException) {}
results[https://github.com/zenbones/SmallMind/blob/aa86bec667f107d027cb3e71fabef576e11b161c/nutsnbolts/src/main/java/org/smallmind/nutsnbolts/security/EncryptionUtilities.java][encrypt][2] = -> TRY {  -> cipher=Cipher.getInstance(key.getAlgorithm(),)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> return cipher.doFinal(data,)@ } CATCH(NoSuchAlgorithmException,NoSuchPaddingException,InvalidKeyException,IllegalBlockSizeException,BadPaddingException) {}
results[https://github.com/crow-misia/ermaster.old/blob/fe9f5aeb4dfc252c8e0bd90529e64822a31f1d96/org.insightech.er/src/org/insightech/er/util/PasswordCrypt.java][decrypt][2] = -> TRY {  -> key=getKey()@ -> cipher=Cipher.getInstance(CIPHER_ALGORITHM,)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> output=cipher.doFinal(encrypted,)@ } CATCH(Exception) {}
results[https://github.com/SoftwareSynthesis/SoftwareEngineeringProject/blob/86d798b13a8eacd640410950766177fd1475b2ff/Sources/ModelManager/Source/org/softwaresynthesis/mytalk/server/authentication/security/AESDecode.java][completeAlgorithm][4] = -> TRY {  -> cipher=super.getCipher()@ -> cipher.init(Cipher.DECRYPT_MODE,super.getGeneratedKey(),)@ -> buffer=cipher.doFinal(buffer,)@ } CATCH(Exception) {}
results[https://github.com/jenkinsci/translation-plugin/blob/8d8b7d96098a4df4c65a3054ec0f02ef6b983116/src/main/java/hudson/plugins/translation/L10nDecorator.java][getCipher][1] = -> TRY { -> cipher=Cipher.getInstance("AES",)@ -> cipher.init(mode,hudson.getSecretKeyAsAES128(),)@ } CATCH(GeneralSecurityException) { -> throw new Error(e,)@ }
results[https://github.com/DeaneLooi/CyberPrime/blob/a743ab2f57bf5eae9381d805a8518797510c33ce/CyberPrime2/src/cyberprime/util/Algorithms.java][decrypt][1] = -> TRY {  -> cKey=generateKey(key,)@ -> c=Cipher.getInstance(ALGO,)@ -> c.init(Cipher.DECRYPT_MODE,cKey,)@ -> decValue=c.doFinal(decodedValue,)@ } CATCH(Exception) {}
results[https://github.com/markus1978/clickwatch/blob/702e872957a188d6f58bbee85f95691299c951cc/external/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/resource/impl/DESCipherImpl.java][encrypt][4] = -> TRY {  -> cipher=Cipher.getInstance(ENCRYPTION_SCHEME,)@ -> cipher.init(Cipher.ENCRYPT_MODE,getKey(),)@ -> return new CipherOutputStream(outputStream,cipher,)@ } CATCH(Exception) {}
results[https://github.com/ttron/lab/blob/8e5b87a6d50b46fe212da99a143fd44cdf38e528/Zzz/src/security/rsa/RsaMessage.java][decrypt][1] = -> TRY {  -> cipher=Cipher.getInstance("RSA",)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> return cipher.doFinal(toBytes(message,),)@ } CATCH(Exception) {}
results[https://github.com/ysc/APDPlat/blob/0290a747e54177c049148c2f58e1871045ebfea9/APDPlat_Core/src/main/java/org/apdplat/platform/util/PKIUtils.java][decrypt][2] = -> TRY { -> cipher=Cipher.getInstance("RSA/ECB/PKCS1Padding",)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> result=cipher.doFinal(data,)@ } CATCH(NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException) { -> LOG.error("解密数据失败",ex,)@ }
results[https://github.com/ianso/scriptus/blob/738124a83bb556197c889b3612df982d161cd40b/src/main/java/net/ex337/scriptus/CryptUtils.java][encrypt][2] = -> TRY { -> cipher=Cipher.getInstance(cipherScheme,)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> result=cipher.doFinal(plaintext,)@ } CATCH(Exception) { -> throw new ScriptusRuntimeException("Problem with cipher",e,)@ }
results[https://github.com/pavel-slyvka/lavida/blob/d1c226ab677a50463ea802776cf89d1210ae666f/finance/service/src/main/java/com/lavida/service/EncryptionService.java][init][1] = -> TRY { -> key=keyFactory.generatePublic(keySpec,)@ -> cipher=Cipher.getInstance(ALGORITHM,)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/petalslink/petals-studio/blob/6abc4694b12584e08026c91d469ee5dbcc85a78a/plugins/com.ebmwebsourcing.petals.studio/src/com/ebmwebsourcing/petals/studio/welcome/RegistrationManager.java][decode][1] = -> TRY {  -> IF { -> this.cipher.init(Cipher.DECRYPT_MODE,this.secretKey,)@ -> decrypted=this.cipher.doFinal(decrypted,)@ } } CATCH(Exception) {}
results[https://github.com/difi/oxalis/blob/8c7b380e2ba1e77c0bdaa39d44a842393830c9ed/oxalis-commons/src/test/java/eu/peppol/security/EncryptionTest.java][decrypt][1] = -> TRY {  -> cipher=getCipher()@ -> cipher.init(Cipher.DECRYPT_MODE,keyPair.getPrivate(),)@ -> bytes=cipher.doFinal(encryptedBytes,)@ } CATCH(NoSuchPaddingException,NoSuchAlgorithmException,InvalidKeyException,BadPaddingException,IllegalBlockSizeException) {}
results[https://github.com/pmlopes/yoke/blob/7509630d7d76e5febcbf03442e4fc0ecda1c1426/framework/src/main/java/com/jetdrone/vertx/yoke/util/Utils.java][decrypt][1] = -> TRY { -> c=Cipher.getInstance("AES",)@ -> c.init(Cipher.DECRYPT_MODE,key,)@ -> decValue=c.doFinal(decordedValue,)@ } CATCH(IllegalBlockSizeException | InvalidKeyException | BadPaddingException | NoSuchAlgorithmException | NoSuchPaddingException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/waarp/WaarpCommon/blob/1bb1c11a7c41d91ebbf41ecf1192bc2fb5480dfb/src/main/java/org/waarp/common/crypto/KeyObject.java][toCrypt][1] = -> TRY { -> cipher=Cipher.getInstance(getInstance(),)@ -> cipher.init(Cipher.ENCRYPT_MODE,secretKey,)@ } CATCH(Exception) { -> logger.warn("Crypt Error",e,)@ }
results[https://github.com/waarp/WaarpCommon/blob/1bb1c11a7c41d91ebbf41ecf1192bc2fb5480dfb/src/main/java/org/waarp/common/crypto/KeyObject.java][toDecrypt][1] = -> TRY { -> cipher=Cipher.getInstance(getAlgorithm(),)@ -> cipher.init(Cipher.DECRYPT_MODE,secretKey,)@ } CATCH(Exception) { -> logger.warn("Uncrypt Error",e,)@ }
results[https://github.com/bbossgroups/bbossgroups-3.5/blob/e83020f8d2cb27453bccfaa5707d8e21f3e24aee/bbossaop/src-jgroups/bboss/org/jgroups/protocols/ENCRYPT.java][initKeyPair][1] = -> TRY {  -> Kpair=KpairGen.generateKeyPair()@ -> asymCipher=Cipher.getInstance(asymAlgorithm,)@ -> asymCipher.init(Cipher.DECRYPT_MODE,Kpair.getPrivate(),)@ } CATCH(Exception) {}
results[https://github.com/smartSocialNetwork/project/blob/69d592463ecf00ce0d0548f1f00b057167ea0e92/projetFinal/src/srcFaceCrypt/cypher/AsymCypher.java][decrypt][1] = -> TRY {  -> c=Cipher.getInstance(this.getAlgorithm(),)@ -> c.init(Cipher.DECRYPT_MODE,this.privKey,)@ -> decValue=c.doFinal(cyphertext,)@ } CATCH(NoSuchAlgorithmException,NoSuchPaddingException,InvalidKeyException,InvalidAlgorithmParameterException,IllegalBlockSizeException,BadPaddingException) {}
results[https://github.com/jazzlly/Notes/blob/2b412eb8c53e63924cb7f6afe781bed3ffb851e6/computer.science/languages/java/security/java.sec.src/src/org/zlex/chapter08_3/ElGamalCoder.java][decryptByPrivateKey][4] = -> TRY {  -> privateKey=keyFactory.generatePrivate(pkcs8KeySpec,)@ -> cipher=Cipher.getInstance(keyFactory.getAlgorithm(),)@ -> cipher.init(Cipher.DECRYPT_MODE,privateKey,)@ -> return cipher.doFinal(data,)@ } CATCH(Exception) {}
results[https://github.com/Flowdalic/openfire/blob/73492891654c2242721f61012921640b5b6b6326/src/plugins/rayo/src/java/org/ifsoft/rtp/Crypto.java][generateAESKeystream][1] = -> TRY { -> cipher=Cipher.getInstance("AES/ECB/NoPadding",)@ -> cipher.init(1,new SecretKeySpec(BitAssistant.bytesFromArray(key,),"AES",),)@ -> LOOP { -> cipher.update(input,0,16,output,i,)@i<length.intValue() } }
results[https://github.com/rtyley/spongycastle/blob/5f714bd92fbd780d22406f4bc3681be005f6f04a/src/test/java/org/bouncycastle/jce/provider/test/PBETest.java][makePBECipherWithoutParam][5] = -> TRY {  -> pbeSpec=new PBEKeySpec(password,salt,iterationCount,)@ -> keyFact=SecretKeyFactory.getInstance(algorithm,"BC",)@ -> cipher=Cipher.getInstance(algorithm,"BC",)@ -> cipher.init(mode,keyFact.generateSecret(pbeSpec,),)@ } CATCH(Exception) {}
results[https://github.com/ilkerkorkut/ecommerce-spring-mongodb/blob/2fec5adf126bad0d34ea4e2ef9db9b9142ed6787/src/main/java/com/ecommerce/security/PasswordEncryption.java][encrypt][5] = -> TRY {  -> key=generateKey()@ -> cipher=Cipher.getInstance(ALGORITHM,)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> encPass=cipher.doFinal(Data.getBytes(),)@ } CATCH(Exception) {}
results[https://github.com/mattgarkusha/HomeSync/blob/7822ceba3c0f3d4f4d9f0f53760f9278712bb84b/Eclipse Workspace/Crypto Assignment 2/src/PasswordEncryption.java][encrypt][1] = -> TRY {  -> cDec=Cipher.getInstance("PBEWithSHAAnd3KeyTripleDES",)@ -> skey=keyFact.generateSecret(PBESpec,)@ -> cDec.init(Cipher.ENCRYPT_MODE,skey,)@ -> cipherText=cDec.doFinal(CryptoUtils.toByteArray(plaintext,),)@ } CATCH(Exception) {}
results[https://github.com/raykroeker/thinkparity/blob/2f7b0d8d66eddfd25944bd1d8c42a5620275bd38/client-model/src/main/java/com/thinkparity/ophelia/model/AbstractModelImpl.java][getDecryptionCipher][4] = -> TRY {  -> IF { -> decryptionCipher=Cipher.getInstance("AES",)@null==decryptionCipher -> decryptionCipher.init(Cipher.DECRYPT_MODE,getSecretKeySpec(),)@null==decryptionCipher } } CATCH(IOException,InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException) {}
results[https://github.com/lecture2go/plugins-sdk-6.1.1/blob/fd4a5a34159ece9c523b9f591abe2b0699910d6f/portlets/lecture2go-guest-spring-portlet/l2g-src/de/uhh/l2g/util/ReadWriteDES.java][decode][7] = -> TRY {  -> c=Cipher.getInstance("DES",)@ -> k=new SecretKeySpec(pass.getBytes(),"DES",)@ -> c.init(Cipher.DECRYPT_MODE,k,)@ -> cis=new CipherInputStream(is,c,)@ } CATCH(Exception) {}
results[https://github.com/debop/jvm-experiments/blob/a8c066fd7e67702eae36d105e868be4a44092a8a/jvm-experiments-commons/src/main/java/kr/escp/commons/cryptography/symmetric/SymmetricEncryptorBase.java][doEncrypt][2] = -> TRY {  -> cipher=Cipher.getInstance(getAlgorithm(),)@ -> cipher.init(Cipher.ENCRYPT_MODE,generateKey(),)@ -> return cipher.doFinal(plainBytes,)@ } CATCH(Exception) {}
results[https://github.com/disy/jSCSI/blob/c5550dbb7fa9389f6f1afb355597ba3a2978307f/bundles/target/src/main/java/org/jscsi/target/storage/JCloudsStorageModule.java][<init>][1] = -> IF { -> TRY { -> mCipher=Cipher.getInstance(ALGO,)@ -> mCipher.init(Cipher.DECRYPT_MODE,KEY,)@ } CATCH(NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException) { -> throw new RuntimeException(e,)@ } }
results[https://github.com/petalslink/petals-studio/blob/6abc4694b12584e08026c91d469ee5dbcc85a78a/plugins/com.ebmwebsourcing.petals.studio/src/com/ebmwebsourcing/petals/studio/welcome/RegistrationManager.java][encode][1] = -> TRY {  -> IF { -> this.cipher.init(Cipher.ENCRYPT_MODE,this.secretKey,)@ -> encrypted=this.cipher.doFinal(s.getBytes(),)@s!=null&&s.trim().length()>0 } } CATCH(Exception) {}
results[https://github.com/difi/oxalis/blob/8c7b380e2ba1e77c0bdaa39d44a842393830c9ed/oxalis-commons/src/test/java/eu/peppol/security/EncryptionTest.java][encrypt][1] = -> TRY {  -> cipher=getCipher()@ -> cipher.init(Cipher.ENCRYPT_MODE,keyPair.getPublic(),)@ -> bytes=cipher.doFinal(plainText.getBytes(),)@ } CATCH(NoSuchAlgorithmException,NoSuchPaddingException,InvalidKeyException,IllegalBlockSizeException,BadPaddingException) {}
results[https://github.com/denuno/cfdistro/blob/b3afe89f8e20ea7fa9e6104acf9157dee6e44304/java/cfmlengcrypt/src/railo/runtime/crypt/Cryptor.java][decrypt][1] = -> TRY {  -> c=Cipher.getInstance(type,)@ -> k=new SecretKeySpec(decodeKey(key,),type,)@ -> c.init(Cipher.DECRYPT_MODE,k,)@ -> return c.doFinal(message,)@ } CATCH(NoSuchAlgorithmException,NoSuchPaddingException,InvalidKeyException,IllegalBlockSizeException,BadPaddingException) {}
results[https://github.com/marfnk/gMixGui/blob/f81b599113969cf174f517a55d1ec3069c936cea/src/plugIns/layer2recodingScheme/RSA_OAEP_AES_OFB_v0_001/RSA_OAEP_AES_OFB.java][initAsRecoder][3] = -> TRY { -> this.asymmetricCipher=Cipher.getInstance(config.ASYM_CRYPTOGRAPHY_ALGORITHM,config.CRYPTO_PROVIDER,)@ -> this.asymmetricCipher.init(Cipher.DECRYPT_MODE,config.keyPair.getPrivate(),)@ } CATCH(Exception) { -> e.printStackTrace()@ -> throw new RuntimeException("could not init asym cipher at mix",)@ }
results[https://github.com/lecture2go/plugins-sdk-6.1.1/blob/63d8e7ce2d24dcaa3363ef72c3c57e123f40b426/portlets/lecture2go-src/de/uhh/l2g/util/ReadWriteDES.java][encode][4] = -> TRY {  -> c=Cipher.getInstance("DES",)@ -> k=new SecretKeySpec(pass.getBytes(),"DES",)@ -> c.init(Cipher.ENCRYPT_MODE,k,)@ -> cos=new CipherOutputStream(out,c,)@ } CATCH(Exception) {}
results[https://github.com/zhanghao-py/gongyu/blob/4086a3733f9a3d039ca4d9390f2b6052d779ae83/src/main/java/cm/h3c/college/pay/core/encode/des/DESCoder.java][decrypt][2] = -> TRY {  -> k=toKey(Base64.decodeBase64(key,),)@ -> cipher=Cipher.getInstance(DES_ALGORITHM,)@ -> cipher.init(Cipher.DECRYPT_MODE,k,)@ -> return cipher.doFinal(data,)@ } CATCH(Exception) {}
results[https://github.com/chandlersong/TestCase/blob/2ada7db79c507c14bb863ca569076c2c7cac414f/TestCase/src/test/java/com/hilatest/security/chapter8/elgamal/ElGamalCoder.java][encryptByPublicKey][3] = -> TRY {  -> publicKey=keyFactory.generatePublic(x509KeySpec,)@ -> cipher=Cipher.getInstance(keyFactory.getAlgorithm(),)@ -> cipher.init(Cipher.ENCRYPT_MODE,publicKey,)@ -> return cipher.doFinal(data,)@ } CATCH(Exception) {}
results[https://github.com/difi/oxalis/blob/f5df2fa5a22190c064ae2bbcb48452c0add53fc2/oxalis-commons/src/test/java/eu/peppol/security/SignatureTest.java][encrypt][1] = -> TRY {  -> cipher=Cipher.getInstance("AES",)@ -> cipher.init(Cipher.ENCRYPT_MODE,keyPair.getPublic(),)@ -> return cipher.doFinal(plainText.getBytes(),)@ } CATCH(NoSuchAlgorithmException,NoSuchPaddingException,InvalidKeyException,IllegalBlockSizeException,BadPaddingException) {}
results[https://github.com/ikeji/openjdk7-jdk/blob/c445903c23d3316d31b5171130aaf714c23f3446/test/javax/crypto/JceSecurity/SunJCE_BC_LoadOrdering.java][main][1] = -> TRY {  -> key=keyGen.generateKey()@ -> cipher=Cipher.getInstance("DES/CBC/PKCS5Padding",)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> cipher.doFinal("some string".getBytes(),)@ } CATCH(Exception) {}
results[https://github.com/ixcode/platform/blob/6d72e6b6b4700a06cc29942d2559ca31b1654c3b/core/src/test/unit/java/ixcode/platform/cryptography/CryptographyTest.java][can_encrypt_a_value_one_way][2] = -> TRY {  -> key=keyGenerator.generateKey()@ -> aes=Cipher.getInstance("AES",)@ -> aes.init(Cipher.ENCRYPT_MODE,key,)@ -> encryptedBytes=aes.doFinal(mySecret.getBytes("UTF8",),)@ } CATCH(Exception) {}
results[https://github.com/martinb3/egonet/blob/bbf7d93c321d09479af2d2b698e3318ba4442aec/src/com/endlessloopsoftware/elsutils/security/SymmetricKeyEncryption.java][decrypt][1] = -> TRY { -> key=getKey()@ -> desCipher=Cipher.getInstance("DES/ECB/PKCS5Padding",)@ -> desCipher.init(Cipher.DECRYPT_MODE,key,)@ -> cleartext=desCipher.doFinal(ciphertext,)@ } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/lmco/eurekastreams/blob/eac3276e0f194674ba39d214d09cf59053916433/server/src/main/java/org/eurekastreams/server/service/email/TokenEncoder.java][decode][1] = -> key=new SecretKeySpec(keyBytes,algorithm,)@ -> TRY { -> cipher=Cipher.getInstance(algorithm,)@ -> cipher.init(Cipher.DECRYPT_MODE,key,)@ -> decrypted=cipher.doFinal(encrypted,)@ } CATCH(GeneralSecurityException) { -> log.error("Error decrypting data from token",ex,)@ }
results[https://github.com/sunlin901203/sunny/blob/b66cd086cb24d6fa7bdf0bb94dff57d5194993b8/sunny-basic/sunny-common/src/main/java/com/sunny/common/util/CodeUtil.java][encrypt][2] = -> TRY {  -> k=toKey(CodeUtil.decryptBase64(key,),)@ -> cipher=Cipher.getInstance(ALGORITHM,)@ -> cipher.init(Cipher.ENCRYPT_MODE,k,)@ -> return cipher.doFinal(data,)@ } CATCH(Exception) {}
results[https://github.com/obiba/opal/blob/d41235c5d5010291b497c7ccb6b49b28843f20ff/opal-core/src/main/java/org/obiba/opal/core/datasource/onyx/DecryptingOnyxDataInputStrategy.java][getUnwrappedKey][1] = -> TRY {  -> privateKey=getPrivateKey()@ -> cipher=Cipher.getInstance(privateKey.getAlgorithm(),)@ -> cipher.init(Cipher.UNWRAP_MODE,privateKey,)@ -> return cipher.unwrap(wrappedKey,wrappedKeyAlgorithm,Cipher.SECRET_KEY,)@ } CATCH(InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException) {}
results[https://github.com/AbinashBishoyi/FreeRapid-Plugins/blob/762364d716bcf3e8dc7dbb7eaf84564a0595bf5a/src/channel4/cz/vity/freerapid/plugins/services/channel4/Channel4FileRunner.java][getAuthParams][1] = -> TRY {  -> cipher=Cipher.getInstance("Blowfish/ECB/PKCS5Padding",)@ -> cipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(DECRYPT_KEY,"Blowfish",),)@ -> decrypted=cipher.doFinal(Base64.decodeBase64(token,),)@ } CATCH(Exception) {}
results[https://github.com/DeaneLooi/CyberPrime/blob/a743ab2f57bf5eae9381d805a8518797510c33ce/CyberPrime2/src/cyberprime/util/Algorithms.java][encrypt][1] = -> TRY {  -> cKey=generateKey(key,)@ -> c=Cipher.getInstance(ALGO,)@ -> c.init(Cipher.ENCRYPT_MODE,cKey,)@ -> encVal=c.doFinal(Data.getBytes(),)@ } CATCH(Exception) {}
results[https://github.com/projectdanube/xdi2/blob/37368eaaa68a59f32a201c96286067363d2665d5/messaging/src/main/java/xdi2/messaging/target/interceptor/impl/encryption/StaticLiteralCryptoService.java][decryptLiteralDataString][1] = -> TRY {  -> cipher=Cipher.getInstance(this.getTransformation(),)@ -> cipher.init(Cipher.DECRYPT_MODE,this.secretKey,)@ -> literalDataBytes=cipher.doFinal(Base64.decodeBase64(encryptedLiteralDataString,),)@ } CATCH(Exception) {}
results[https://github.com/jdbaltazar/Pilmico/blob/e8cc8ef313ad8082d831fbee08fb7fe0deb93261/src/core/security/SecurityTool.java][encryptString][1] = -> TRY {  -> c=Cipher.getInstance(ALGORITHM,)@ -> c.init(Cipher.ENCRYPT_MODE,generateKey(),)@ -> encValue=c.doFinal(valueToEnc.getBytes(),)@ } CATCH(Exception) {}
results[https://github.com/Yserz/Auto-B-Day/blob/07341e476c2628a46ea7557bd2a5825b9f7bed77/Auto-B-Day-ejb/src/java/de/fhb/autobday/commons/CipherHelper.java][decipher][1] = -> TRY {  -> k=new SecretKeySpec(key.getBytes(),"DES",)@ -> cipher=Cipher.getInstance("DES/ECB/PKCS5Padding",)@ -> cipher.init(Cipher.DECRYPT_MODE,k,)@ -> unverschlusselt=cipher.doFinal(dec,)@ } CATCH(NoSuchAlgorithmException,NoSuchPaddingException,IllegalBlockSizeException,BadPaddingException,InvalidKeyException,UnsupportedEncodingException,IOException) {}
results[https://github.com/communicationfreedom/cffreedom-utils/blob/d89739af47c09c582f474de6cf2cbb20510818f7/src/com/cffreedom/security/EncryptDecryptProxy.java][decrypt][2] = -> TRY { -> cipher=Cipher.getInstance("DES",)@ -> cipher.init(Cipher.DECRYPT_MODE,this.key,)@ -> plainTextPwdBytes=cipher.doFinal(encrypedPwdBytes,)@ } CATCH(Exception) { -> logger.logError(METHOD,e.getMessage(),e,)@ }
results[https://github.com/communicationfreedom/cffreedom-utils/blob/c4b3a82263c3e817d89295dd8587d4a34c7c5306/src/main/java/com/cffreedom/utils/security/EncryptDecryptProxy.java][decrypt][1] = -> TRY { -> cipher=Cipher.getInstance("DES",)@ -> cipher.init(Cipher.DECRYPT_MODE,this.key,)@ -> plainTextPwdBytes=cipher.doFinal(encrypedPwdBytes,)@ } CATCH(Exception) { -> logger.error(e.getMessage(),)@ }
results[https://github.com/Dhandapani/gluster-ovirt/blob/bee2165ff04f64ce7a28d34b0ba70e44431c4b14/backend/manager/modules/engineencryptutils/src/main/java/org/ovirt/engine/core/engineencryptutils/EncryptionUtils.java][Decrypt][1] = -> TRY { -> rsa=Cipher.getInstance(algo,)@ -> rsa.init(Cipher.DECRYPT_MODE,key,)@ -> plainbytes=rsa.doFinal(cipherbytes,)@ } CATCH(Exception) { -> log.error("Error in the Decryption",e,)@ -> error.argvalue=e.getMessage()@ }
results[https://github.com/rSmart/kuali_rice/blob/a4555412dc7dcb71a2783540bbbfff492e2f4141/rice-framework/krad-development-tools/src/main/java/org/kuali/rice/krad/devtools/maintainablexml/EncryptionService.java][setSecretKey][1] = -> TRY {  -> IF { -> cipher=Cipher.getInstance(ALGORITHM,)@ -> cipher.init(Cipher.WRAP_MODE,getDesKey(),)@ } } CATCH(Exception) {}
results[https://github.com/dzonekl/netxstudio/blob/f017ca6ed778572bbca6c0f42c0f8045a90f78a4/plugins/com.netxforge.base/src/com/netxforge/base/security/JCAService.java][encrypt][1] = -> TRY { -> cipher=Cipher.getInstance(CIPHER_TYPE,)@ -> cipher.init(Cipher.ENCRYPT_MODE,key,)@ -> outputBytes=cipher.doFinal(password.getBytes(),)@ } CATCH(Exception) { -> throw new RuntimeException("Failed to encrypt password",e,)@ }
results[https://github.com/mdaniel/svn-caucho-com-resin/blob/7920ff3c49b9539d7ce28ca51101852fc2dcdaaf/modules/resin/src/com/caucho/hemp/servlet/ServerAuthManager.java][decryptKey][1] = -> TRY { -> cipher=Cipher.getInstance("RSA",)@ -> cipher.init(Cipher.UNWRAP_MODE,_authKeyPair.getPrivate(),)@ -> key=cipher.unwrap(encKey,keyAlgorithm,Cipher.SECRET_KEY,)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/zhangkaitao/es/blob/830ad8958937fffeb1af8c2bf973485177dffef4/common/src/main/java/com/sishuok/es/common/utils/security/DESCoder.java][decrypt][1] = -> TRY {  -> k=toKey(decryptBASE64(key,),)@ -> cipher=Cipher.getInstance(ALGORITHM,)@ -> cipher.init(Cipher.DECRYPT_MODE,k,)@ -> return cipher.doFinal(data,)@ } CATCH(Exception) {}
results[https://github.com/derekhiggins/ovirt-engine/blob/ad7dd6e7c7fc07c94f23d634b3c730ab7fe7b8f3/backend/manager/modules/engineencryptutils/src/main/java/org/ovirt/engine/core/engineencryptutils/EncryptionUtils.java][encode][1] = -> TRY { -> cipher=Cipher.getInstance(params.algorithm,)@ -> cipher.init(Cipher.ENCRYPT_MODE,params.secretKey,)@ -> encoding=cipher.doFinal(secret.getBytes(),)@ } CATCH(Exception) { -> log.error("Error in encrypting the secret",e,)@ }
