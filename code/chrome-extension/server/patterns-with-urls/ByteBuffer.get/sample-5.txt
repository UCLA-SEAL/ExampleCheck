results[https://github.com/berkelium-java/berkelium-java/blob/9625439237d846b37f3654f96edabbe60cd8bffa/src/main/java/org/berkelium/java/api/ByteBufferImageAdapter.java][copyLine][1] = -> data.get(buf,)@ -> data.put(buf,)@
results[https://github.com/mirror/jpcsp/blob/c5bb619f0b00aba655a8f012659c4da359af8fd5/src/jpcsp/memory/StandardMemory.java][copyToMemory][2] = -> source.get(data,)@ -> destination=getBuffer(address,length,)@ -> destination.put(data,)@
results[https://github.com/Sciumo/Javolution/blob/c62187e37f4c14dce8c108ed5087cb05313c8b9c/src/java/nio/ByteBuffer.java][put][3] = -> IF { -> src.get(toPut,)@src.remaining()>0 -> src.put(toPut,)@src.remaining()>0 }
results[https://github.com/EtiennePerot/fuse-jna/blob/d6acc648e5f39035b76e5ae16935e68d38b36635/src/net/fusejna/examples/MemoryFS.java][truncate][2] = -> IF { -> newContents=ByteBuffer.allocate((int) size,)@size<contents.capacity() -> contents.get(bytesRead,)@size<contents.capacity() -> newContents.put(bytesRead,)@ }
results[https://github.com/enasequence/cramtools/blob/ed07cb4ce821c7102f1742fe023f57d772f98a7c/src/main/java/net/sf/cram/encoding/UnaryIntegerEncoding.java][toByteArray][1] = -> buf=ByteBuffer.allocate(10,)@ -> ByteBufferUtils.writeUnsignedITF8(offset,buf,)@ -> buf.put((byte) (stopBit)?1:0,)@ -> buf.flip()@ -> buf.get(array,)@
results[https://github.com/jmesnil/hornetq-old/blob/b3533aa2c5b1eb7ba8c0b2ac21d350d7cff80270/tests/src/org/jboss/messaging/core/journal/impl/test/unit/fakes/FakeSequentialFileFactory.java][read][3] = -> TRY {  -> data.get(bytesRead,)@ -> bytes.put(bytesRead,)@ } CATCH(Exception) {}
results[https://github.com/mcai/Archimulator/blob/1755b199be736a89aa0ded79b70b284edc1157de/src/archimulator/isa/memory/datastore/NewBigMemoryDataStore.java][readFromDisk][2] = -> diskBb=this.getDiskBb(pageId,)@ -> diskBb.position(getDiskCacheFileDisplacement(pageId,),)@ -> diskBb.get(data,)@ -> bb.clear()@ -> bb.put(data,)@
results[https://github.com/deanhiller/databus/blob/2fa5fe9142bb20f5d56d2175264ebb0ae1a52314/webapp/app/controllers/api/DocumentUtil.java][combineName][1] = -> buffer=ByteBuffer.allocate(size,)@ -> buffer.put(namePrefix,)@ -> buffer.putLong(time,)@ -> buffer.put(nameAsBytes,)@ -> buffer.flip()@ -> buffer.get(name,)@
results[https://github.com/barchart/barchart-feed-ddf/blob/b84253778a69c419742e24b11e78bcdfc86e7447/barchart-feed-ddf-test/src/main/java/com/barchart/feed/test/replay/DDFLogDeframer.java][copy][1] = -> buffer.flip()@ -> buffer.get(message,)@ -> buffer.clear()@ -> IF { -> buffer.put((byte) next,)@next>-1 }
results[https://github.com/enasequence/cramtools/blob/ed07cb4ce821c7102f1742fe023f57d772f98a7c/src/main/java/net/sf/cram/encoding/ByteArrayStopEncoding.java][toByteArray][1] = -> buf=ByteBuffer.allocate(1024,)@ -> buf.order(ByteOrder.LITTLE_ENDIAN,)@ -> buf.put(stopByte,)@ -> ByteBufferUtils.writeUnsignedITF8(externalId,buf,)@ -> buf.flip()@ -> buf.get(array,)@
results[https://github.com/mcai/Archimulator/blob/7ea8ec6746e69d81d0bfe5ea9b8acd5bbfa85770/src/archimulator/isa/memory/datastore/SimpleCacheBasedNewBigMemoryDataStore.java][writeToDisk][2] = -> diskBb=this.getDiskBb(byteBufferIndex,)@ -> diskBb.position(getDiskCacheFileDisplacement(byteBufferIndex,),)@ -> bb.position(0,)@ -> bb.get(data,)@ -> diskBb.put(data,)@
results[https://github.com/AbinashBishoyi/FreeRapid-Plugins/blob/d2e9c47481916abf89acf4d0ecdb8c2aabdc460f/src/mp4parser/com/googlecode/mp4parser/MemoryDataSourceImpl.java][read][1] = -> TRY {  -> data.get(buf,)@ -> byteBuffer.put(buf,)@ } CATCH(IOException) {}
results[https://github.com/zhuowei/MCPELauncher/blob/890fbcb8d20dbd845686c316b8f690f0d2457fd6/src/net/zhuoweizhang/mcpelauncher/patch/PatchUtils.java][unpatch][2] = -> originalBuf=ByteBuffer.wrap(original,)@ -> LOOP { -> buf.position(addr,)@ -> originalBuf.position(addr,)@ -> originalBuf.get(nextData,)@ -> buf.put(nextData,)@ }
results[https://github.com/rhusar/HornetQ-oldmigration/blob/5039cb0d3175b2e984b39ebdccb2a5bbc02b0140/tests/unit-tests/src/test/java/org/hornetq/tests/unit/core/journal/impl/fakes/FakeSequentialFileFactory.java][read][5] = -> TRY {  -> data.get(bytesRead,)@ -> bytes.put(bytesRead,)@ -> bytes.rewind()@ } CATCH(Exception) {}
results[https://github.com/jexp/batch-import/blob/16328e47ccd138585c4b6c7b931f1981997fab75/src/main/java/org/neo4j/batchimport/handlers/RelationshipUpdateCache.java][copyFailedPositions][1] = -> LOOP { -> buffer.position(pos,)@ -> buffer.get(tmp,)@ -> buffer.position(writePos,)@ -> buffer.put(tmp,)@ -> writePos=buffer.position()@ }
results[https://github.com/XYAOSP/packages_apps_Nfc/blob/108247cf69acd06a7547d85f69306f1f8dd397d8/src/com/android/nfc/handover/HandoverManager.java][createHandoverSelectRecord][9] = -> nestedPayload=nestedMessage.toByteArray()@ -> payload=ByteBuffer.allocate(nestedPayload.length+1,)@ -> payload.put((byte) 0x12,)@ -> payload.put(nestedPayload,)@ -> payload.position(0,)@ -> payload.get(payloadBytes,)@ -> return new NdefRecord(NdefRecord.TNF_WELL_KNOWN,NdefRecord.RTD_HANDOVER_SELECT,null,payloadBytes,)@
results[https://github.com/MoSync/MoSync/blob/69cab3aefea6d208159ad411ea8bf770aa644eda/runtimes/java/platforms/androidJNI/AndroidProject/src/com/mosync/internal/android/nfc/ops/TagTransceive.java][doRun][2] = -> TRY {  -> src.get(buffer,)@ -> result=tag.transceive(buffer,)@ -> dst.put(result,)@ } CATCH(IOException) {}
results[https://github.com/Ginows/SRE-RoboCode/blob/561d38fa9b1b196755a0cdd2bc2fe0c6e06a053a/RobocodeSrc/trunk/robocode.core/src/main/java/net/sf/robocode/robotpaint/Graphics2DSerialized.java][readoutQueuedCalls][2] = -> IF { -> return null@calls==null||calls.position()==0 } -> calls.flip()@!(calls==null||calls.position()==0) -> calls.get(res,)@!(calls==null||calls.position()==0) -> calls.clear()@!(calls==null||calls.position()==0) -> calls.put((calls.order()==ByteOrder.BIG_ENDIAN)?(byte) 1:(byte) 0,)@!(calls==null||calls.position()==0)
results[https://github.com/xnio/xnio/blob/1753816e17c26d294bc371ee0af7aa9b8b7c4891/api/src/test/java/org/xnio/BuffersTestCase.java][testFlipByte][2] = -> buf=ByteBuffer.allocate(100,)@ -> buf.put(data,)@ -> doTestFlip(buf,)@ -> buf.get(data2,)@ -> assertTrue(Arrays.equals(data,data2,),)@ -> assertFalse(buf.hasRemaining(),)@
results[https://github.com/CSEMike/OneSwarm/blob/cd0d359574587b6a6caa50cd7ac257e92c5d2520/oneswarm_f2f/src/edu/washington/cs/oneswarm/f2f/OSF2FSpeedChecker.java][getHsBytes][1] = -> buf=ByteBuffer.allocate(2000,)@ -> buf.put((byte) OSF2FMessage.SPD_HANDSHAKE.getBytes().length,)@ -> buf.put(OSF2FMessage.SPD_HANDSHAKE.getBytes(),)@ -> buf.put(rand,)@ -> buf.flip()@ -> buf.get(data,)@
results[https://github.com/kaupppa/Javnce/blob/83b001030b41813bf63d74d0640c11dfa95aae83/src/main/java/org/javnce/ui/fx/client/VncImage.java][rledecode][4] = -> dst=ByteBuffer.allocate(width*height*bytePerPixel,)@ -> LOOP { -> count=src.get()&0xff@rleSize<=src.remaining()&&bytePerPixel<=dst.remaining() -> src.get(pixel,)@rleSize<=src.remaining()&&bytePerPixel<=dst.remaining() -> LOOP { -> dst.put(pixel,)@rleSize<=src.remaining()&&bytePerPixel<=dst.remaining() } } -> dst.clear()@
results[https://github.com/mcai/Archimulator/blob/ecd4535052d31474a2ff3577958cfb87be6a9725/src/archimulator/isa/memory/bigMemory/BigMemoryDataStore.java][writeback][1] = -> IF { -> diskBb=this.getDiskBb()@ -> diskBb.position(getDiskCacheFileDisplacement(),)@ -> this.bb.position(0,)@ -> this.bb.get(data,)@ -> diskBb.put(data,)@ } -> this.bb.clear()@
results[https://github.com/mcai/Archimulator/blob/925256d360df52621e6a224410c7996c829995b2/src/archimulator/isa/memory/datastore/BigMemoryDataStore.java][writeback][1] = -> IF { -> diskBb=this.getDiskBb()@ -> diskBb.position(BigMemoryDataStore.getDiskCacheFileDisplacement(this.tag,),)@ -> this.bb.position(0,)@ -> this.bb.get(data,)@ -> diskBb.put(data,)@ } -> this.bb.clear()@
results[https://github.com/pagxir/antalk/blob/e3aa4412d2a093d783570a951acf31d45a20b0fe/src/com/zhuri/talk/protocol/PlainSasl.java][toString][2] = -> buffer=ByteBuffer.allocate(1000,)@ -> buffer.put((byte) 0x0,)@ -> buffer.put(mUser.getBytes(),)@ -> buffer.put((byte) 0x0,)@ -> buffer.put(mSecrect.getBytes(),)@ -> buffer.flip()@ -> buffer.get(buf,)@ -> data=Base64Codec.encode(buf,)@
results[https://github.com/dworkin/reddwarf/blob/9d3fd24fc04defd3e3be51303c13809345ce87a6/test/shared/j2se/com/sun/sgs/test/impl/io/MessageFilterTest.java][testSend][1] = -> sendData=getByteSequence(len,)@ -> buf=ByteBuffer.allocate(len+4,false,)@ -> buf.putInt(len,)@ -> buf.put(sendData,)@ -> buf=buf.asReadOnlyBuffer()@ -> buf.flip()@ -> buf.get(expected,)@ -> harness.send(sendData,)@ -> assertTrue("Incorrect send!",Arrays.equals(actual,expected,),)@
results[https://github.com/darkyellow/DarkYellowEngine/blob/3b7485962b2f18bbd85f61071b98ab48e701b778/com/darkyellow/loader/ogg/Packet.java][buildPacketData][1] = -> packetData=ByteBuffer.allocate(totalSize,).order(ByteOrder.LITTLE_ENDIAN,)@ -> currentPosition=oggData.position()@ -> LOOP { -> oggData.position(ps.start,)@ -> oggData.get(subData,)@ -> packetData.put(subData,)@ } -> packetData.flip()@ -> oggData.position(currentPosition,)@
results[https://github.com/mcai/Archimulator/blob/b4ba3a1396cd75c44a7c93bc88404f16a715233c/src/archimulator/isa/memory/datastore/CacheBasedBigMemoryDataStore.java][writeback][1] = -> IF { -> diskBb=this.getDiskBb()@ -> diskBb.position(CacheBasedBigMemoryDataStore.getDiskCacheFileDisplacement(this.getTag(),),)@ -> this.bb.position(0,)@ -> this.bb.get(data,)@ -> diskBb.put(data,)@ } -> this.bb.clear()@
results[https://github.com/alanhorizon/Java-Slick/blob/d6240b841a40e89796338d0fb503523fbc853b73/commet/src/org/newdawn/commet/transport/UDPChannel.java][getData][2] = -> IF { -> IF { -> total+=source.remaining()@source.remaining()<=target.remaining() -> target.put(source,)@source.remaining()<=target.remaining() } ELSE { -> source.get(copy,)@!(source.remaining()<=target.remaining()) -> target.put(copy,)@!(source.remaining()<=target.remaining()) } }
results[https://github.com/ecologylab/ecologylabLocationAware/blob/e7bbc83c66098c7b14d601e1fe5babbb97bc5b24/src/ecologylab/standalone/ImageGeotagger/ImageProcessor.java][setCompassData][1] = -> order=(outputSet.byteOrder==TiffConstants.BYTE_ORDER_BIG_ENDIAN)?ByteOrder.BIG_ENDIAN:ByteOrder.LITTLE_ENDIAN@ -> rationalBuffer=ByteBuffer.allocate(8,)@ -> heading=(long) compassData.getHeading()*100@ -> System.out.println("Heading num: "+heading,)@ -> rationalBuffer.put(intToUnsignedByteArray(heading,order,),)@ -> rationalBuffer.put(intToUnsignedByteArray(100,order,),)@ -> rationalBuffer.flip()@ -> rationalBuffer.get(buf,)@ -> outField=new TiffOutputField(GPSTagConstants.GPS_TAG_GPS_IMG_DIRECTION,TiffFieldTypeConstants.FIELD_TYPE_RATIONAL,1,buf,)@
results[https://github.com/taktod/myLib/blob/e3036f327bf8004f117157e8f5df4265a220d4f0/myLib.MIT/myLib.channels/src/main/java/com/ttProject/nio/channels/ByteReadChannel.java][read][2] = -> TRY {  -> length=(dst.limit()>buffer.remaining())?buffer.remaining():dst.limit()@ -> buffer.get(data,)@ -> dst.put(data,)@ } CATCH(IOException) {}
results[https://github.com/metamx/druid/blob/3a980b8a6852b35a56167bf48eabef1691cdd557/hll/src/main/java/io/druid/query/aggregation/HyperloglogComplexMetricSerde.java][toBytes][1] = -> valueResult=ibmap.values()@ -> buffer=ByteBuffer.allocate(4*indexesResult.length+valueResult.length+8,)@ -> buffer.putInt((int) indexesResult.length,)@ -> buffer.putInt((int) valueResult.length,)@ -> LOOP { -> buffer.putInt(indexesResult[i],)@i<indexesResult.length } -> buffer.put(valueResult,)@ -> buffer.flip()@ -> buffer.get(result,)@
results[https://github.com/Ginows/SRE-RoboCode/blob/561d38fa9b1b196755a0cdd2bc2fe0c6e06a053a/RobocodeSrc/trunk/robocode.core/src/main/java/net/sf/robocode/robotpaint/Graphics2DSerialized.java][reallocBuffer][2] = } ELSE { -> bufferSize=2*calls.capacity()@!(calls==null) -> IF { -> return false@!(isDebugging)&&bufferSize>MAX_BUFFER_SIZE } -> newBuffer=ByteBuffer.allocate(bufferSize,)@!(!(isDebugging)&&bufferSize>MAX_BUFFER_SIZE) -> IF { -> calls.clear()@!(!(isDebugging)&&bufferSize>MAX_BUFFER_SIZE) && calls!=null -> calls.get(copiedBytes,)@!(!(isDebugging)&&bufferSize>MAX_BUFFER_SIZE) && calls!=null -> newBuffer.put(copiedBytes,)@!(!(isDebugging)&&bufferSize>MAX_BUFFER_SIZE) }
results[https://github.com/geir/mongo-java-driver/blob/3308b25abd1a353e9c4a26eaff82aed8f6b05bdf/src/main/org/mongodb/driver/util/types/BabbleOID.java][<init>][2] = -> buf=ByteBuffer.allocate(12,)@ -> buf.order(ByteOrder.LITTLE_ENDIAN,)@ -> buf.putInt(time,)@ -> buf.put(MACHINE,)@ -> buf.put(PID,)@ -> index=getIndex(time,)@ -> buf.put((byte) index&0xFF,)@ -> buf.put((byte) index>>8&0xFF,)@ -> buf.put((byte) index>>16&0xFF,)@ -> buf.flip()@ -> buf.get(_arr,)@
results[https://github.com/frostwire/frostwire-desktop/blob/90eacf1ef657a5664fd9b5e2e84d819091f9ea3c/gui/com/limegroup/gnutella/gui/search/tests/DHTTest.java][onValueRead][1] = -> TRY {  -> readBuffer=dumpl.getReadingByteBuffer()@ -> data=value.getValue()@ -> readBuffer.put(data,)@ -> IF { -> readBuffer.get(data,)@ -> signedMessage=SignedMessage.fromBytes(data,)@ } } CATCH(InterruptedException,IOException) {}
results[https://github.com/fgeraci/cs352-bittorrent-project/blob/e531ea55abb026278c83338f46d88a0434a2c51e/src/bt/Model/Peer.java][cancelIndex][1] = -> TRY {  -> b=(byte) 8@ -> messageBuffer=ByteBuffer.allocate(13,)@ -> messageBuffer.put(b,).putInt(index,).putInt(begin,).putInt(length,)@ -> messageBuffer.get(message,)@ -> out.write(message,)@ } CATCH(IOException) {}
results[https://github.com/CNA/android_packages_apps_Nfc/blob/d5d49385ff41b499cdfcf856362ac9df7665f576/src/com/android/nfc/handover/HandoverManager.java][createHandoverRequestRecord][9] = -> nestedMessage=new NdefMessage(createCollisionRecord(),createBluetoothAlternateCarrierRecord(false,),)@ -> nestedPayload=nestedMessage.toByteArray()@ -> payload=ByteBuffer.allocate(nestedPayload.length+1,)@ -> payload.put((byte) 0x12,)@ -> payload.put(nestedMessage.toByteArray(),)@ -> payload.position(0,)@ -> payload.get(payloadBytes,)@ -> return new NdefRecord(NdefRecord.TNF_WELL_KNOWN,NdefRecord.RTD_HANDOVER_REQUEST,null,payloadBytes,)@
results[https://github.com/OpenNTF/org.openntf.domino/blob/bc810cf55827b86b4f7f4d5c3b15afd845d21dbe/org.openntf.domino/icu4j/com/ibm/icu/text/CharsetRecog_sbcs.java][unshapeLamAlef][1] = -> resultBigBuffer=ByteBuffer.allocate(inputLen*2,)@ -> unshapedLamAlef=(byte) 0xb1(byte) 0x56@ -> LOOP { -> IF { -> resultBigBuffer.put(unshapedLamAlef,)@ } ELSE { -> resultBigBuffer.put(inputBytes[i],)@!(isLamAlef(inputBytes[i],)) && i<inputLen } } -> resultBigBuffer.position(0,)@ -> resultBigBuffer.get(resultBuffer,)@
results[https://github.com/PhiCode/philib/blob/904458692b2f479e87b4f14baf2da2c88fbd9c05/src/test/java/ch/bind/philib/lang/ArrayUtilTest.java][memsetDirectByteBuffer][1] = -> LOOP { -> rand.nextBytes(b,)@ -> bb=ByteBuffer.allocateDirect(i,)@i<2000 -> bb.put(b,)@ -> bb.clear()@ -> memclr(bb,)@ -> bb.get(b,)@ -> LOOP { -> assertTrue(b[j]==0,)@j<i } }
results[https://github.com/tpietzsch/jAER/blob/348f4eae6836901d67d0072e65cc14a0c0ac75ce/host/java/src/ch/unizh/ini/jaer/chip/dvs320/cDVSTest10.java][formatConfigurationBytes][1] = -> bb=ByteBuffer.allocate(1000,)@ -> biasBytes=super.formatConfigurationBytes(biasgen,)@ -> configBytes=allMuxes.formatConfigurationBytes()@ -> bb.put(configBytes,)@ -> bb.put(biasBytes,)@ -> LOOP { -> bb.put(ss.getBinaryRepresentation(),)@ } -> bb.flip()@ -> bb.get(allBytes,)@
results[https://github.com/babble/babble/blob/3529597002b4f2db641e03bef9f466f760d53db2/src/test/ed/net/EchoServer.java][gotData][1] = -> TRY {  -> inBuf.get(bb,)@ -> _writeBuf.clear()@ -> _writeBuf.put(new String(bb,).getBytes(),)@ -> _writeBuf.flip()@ -> write(_writeBuf,)@ } CATCH(IOException) {}
results[https://github.com/undera/jmeter-plugins/blob/365543b6e361684dcc79c066bc6a999523efaba6/extras/test/kg/apc/emulators/SocketChannelEmul.java][read][3] = -> TRY {  -> IF { -> return -1@bytesToRead==null||bytesToRead.remaining()==0 } -> cnt=(bytesToRead.remaining()>dst.capacity())?dst.capacity():bytesToRead.remaining()@!(bytesToRead==null||bytesToRead.remaining()==0) -> bytesToRead.get(byteArray,)@!(bytesToRead==null||bytesToRead.remaining()==0) -> dst.put(byteArray,)@!(bytesToRead==null||bytesToRead.remaining()==0) } CATCH(IOException) {}
results[https://github.com/FoxyCorndog/WorkspaceOld/blob/147ec6072c24c285e9a1ac5610a9a1c4d86a951e/LWJGL/src/org/lwjgl/test/opengl/shaders/Shader.java][getShaderText][6] = -> TRY { -> LOOP { -> fileBuffer.put(character,)@(character=(byte) stream.read())!=-1 } -> fileBuffer.flip()@ -> fileBuffer.get(array,)@ -> shader=new String(array,)@ -> fileBuffer.clear()@ } CATCH(IOException) { -> ShadersTest.kill("Failed to read the shader source file: "+file,e,)@ }
results[https://github.com/jeffmaury/mina/blob/c6998fd4c565af8cf0ef516be0428ad5f15b5cde/filter-compression/src/main/java/org/apache/mina/filter/support/Zlib.java][inflate][2] = -> TRY {  -> inBuffer.get(inBytes,).flip()@ -> outBuffer=ByteBuffer.allocate(outBytes.length,)@ -> outBuffer.setAutoExpand(true,)@ -> LOOP { -> outBuffer.put(outBytes,0,zStream.next_out_index,)@ } -> return outBuffer.flip()@ } CATCH(IOException) {}
results[https://github.com/joeledwards/asl-station-processor/blob/83b134c6f0cab84da54793ae6d4aed8e2219127e/trunk/ofcweb/seed/MiniSeed.java][setTime][5] = -> hour=(byte) g.get(Calendar.HOUR_OF_DAY,)@ -> minute=(byte) g.get(Calendar.MINUTE,)@ -> sec=(byte) g.get(Calendar.SECOND,)@ -> ms.position(20,)@ -> ms.putShort(year,)@ -> ms.putShort(day,)@ -> ms.put(hour,)@ -> ms.put(minute,)@ -> ms.put(sec,)@ -> ms.put((byte) 0,)@ -> ms.putShort(husec,)@ -> ms.position(20,)@ -> ms.get(startTime,)@
results[https://github.com/tpietzsch/jAER/blob/348f4eae6836901d67d0072e65cc14a0c0ac75ce/host/java/src/ch/unizh/ini/jaer/chip/dvs320/cDVSTest20.java][formatConfigurationBytes][1] = -> bb=ByteBuffer.allocate(1000,)@ -> biasBytes=super.formatConfigurationBytes(biasgen,)@ -> configBytes=allMuxes.formatConfigurationBytes()@ -> bb.put(configBytes,)@ -> vdac=(byte) thermometerDAC.getBitValue()@ -> bb.put(vdac,)@ -> bb.put(biasBytes,)@ -> LOOP { -> bb.put(ss.getBinaryRepresentation(),)@ } -> bb.flip()@ -> bb.get(allBytes,)@
results[https://github.com/dworkin/reddwarf/blob/dfb26da95fbd3a17096847118351c3d44177301c/sgs-server/src/test/java/com/sun/sgs/test/impl/service/session/TestClientSessionServiceImplv4.java][receivedMessage][1] = -> message.get(messageBytes,)@ -> buf=new MessageBuffer(messageBytes,)@ -> bytes=buf.getByteArray()@ -> System.err.println("DummyClientSessionListener["+name+"] "+"receivedMessage: "+HexDumper.toHexString(bytes,)+"\nthrow exception: "+receivedMessageException,)@ -> IF { -> throw re@receivedMessageException!=null } -> client.sessionListenerReceivedMessages.add(bytes,)@!(receivedMessageException!=null) -> bbuf=ByteBuffer.allocate(bytes.length,)@!(receivedMessageException!=null) -> bbuf.put(bytes,).flip()@!(receivedMessageException!=null) -> sessionRef.get().send(bbuf,)@!(receivedMessageException!=null)
results[https://github.com/android/platform_packages_apps_im/blob/e3ea5527f63cfebfc1ae7fea0f3bd70200bf8f42/src/com/android/im/imps/SmsSplitter.java][getNext][2] = -> IF { -> throw new IndexOutOfBoundsException()@mCurrentSegment>=mSegmentCount } } ELSE { -> mOutBuffer.clear()@!(mCurrentSegment>=mSegmentCount) -> mOutBuffer.put(mData,0,mPreambleEnd,)@!(mCurrentSegment>=mSegmentCount) -> mOutBuffer.put((byte) 'a'+mCurrentSegment,)@!(mCurrentSegment>=mSegmentCount) -> mOutBuffer.put((byte) 'a'+mSegmentCount-1,)@!(mCurrentSegment>=mSegmentCount) && !(mSegmentCount==1) -> mOutBuffer.put((byte) ' ',)@!(mCurrentSegment>=mSegmentCount) -> len=(offset+segmentPayload>mData.length)?mData.length-offset:segmentPayload@!(mCurrentSegment>=mSegmentCount) -> mOutBuffer.put(mData,offset,len,)@!(mCurrentSegment>=mSegmentCount) -> mOutBuffer.flip()@!(mCurrentSegment>=mSegmentCount) -> mOutBuffer.get(segment,)@!(mCurrentSegment>=mSegmentCount)
results[https://github.com/metamx/druid/blob/69b929fad58c5e8619fb47dad9cc8c21c34dd2a4/index-common/src/main/java/com/metamx/druid/index/v1/CompressedObjectStrategy.java][fromByteBuffer][2] = -> buffer.get(bytes,)@ -> buf=bufHolder.get()@ -> buf.position(0,)@ -> buf.limit(buf.capacity(),)@ -> TRY { -> outputBytes=outputBytesHolder.get()@ -> numDecompressedBytes=LZFDecoder.decode(bytes,outputBytes,)@ -> buf.put(outputBytes,0,numDecompressedBytes,)@ -> buf.flip()@ } CATCH(IOException) { -> throw Throwables.propagate(e,)@ }
results[https://github.com/CSEMike/OneSwarm/blob/cd0d359574587b6a6caa50cd7ac257e92c5d2520/oneswarm_f2f/src/edu/washington/cs/oneswarm/f2f/OSF2FSpeedChecker.java][getDummyPacket][1] = -> TRY {  -> data=OSF2FMessageFactory.createOSF2FRawMessage(new OSF2FChannelDataMsg(OSF2FMessage.CURRENT_VERSION,0,dbuffer,),).getRawData()@ -> buf=ByteBuffer.allocate(OSF2FMessage.MAX_MESSAGE_SIZE+20,)@ -> LOOP { -> buf.put(data[i].getBuffer(DirectByteBuffer.SS_MSG,),)@i<data.length } -> buf.flip()@ -> buf.get(b,)@ } CATCH(IOException) {}
results[https://github.com/unidevel/android/blob/5669dbc739c82e00e4e79a103e65c65b6db73bff/2048/gdx-game/src/com/unidevel/power2/Power2Game.java][getScreenshot][1] = -> pixels=pixmap.getPixels()@ -> Gdx.gl.glReadPixels(x,y,w,h,GL20.GL_RGBA,GL20.GL_UNSIGNED_BYTE,pixels,)@ -> IF { -> pixels.clear()@ -> pixels.get(lines,)@ } ELSE { -> LOOP { -> pixels.position(h-i-1*numBytesPerLine,)@i<h -> pixels.get(lines,i*numBytesPerLine,numBytesPerLine,)@i<h } -> pixels.clear()@ -> pixels.put(lines,)@ }
results[https://github.com/Catacomb-Snatch/Catacomb-Snatch/blob/bb28d3d869114339a80b77b1ac1408aaa388582b/core/src/main/java/net/catacombsnatch/game/core/screen/Screen.java][getScreenshot][1] = -> pixels=pixmap.getPixels()@ -> Gdx.gl.glReadPixels(x,y,w,h,GL10.GL_RGBA,GL10.GL_UNSIGNED_BYTE,pixels,)@ -> IF { -> LOOP { -> pixels.position(h-i-1*numBytesPerLine,)@i<h -> pixels.get(lines,i*numBytesPerLine,numBytesPerLine,)@i<h } -> pixels.clear()@ -> pixels.put(lines,)@ } ELSE { -> pixels.clear()@ -> pixels.get(lines,)@ }
results[https://github.com/dozedoff/commonj/blob/5d40b3a3ff64f2c9b4d85bbfee47c81ce3a3453f/src/main/java/com/github/dozedoff/commonj/file/BinaryFileReader.java][get][2] = -> TRY {  -> IF { -> classBuffer=ByteBuffer.allocate((int) path.length(),)@path.length()>classBuffer.capacity() } -> classBuffer.clear()@ -> LOOP { -> classBuffer.put(c,0,count,)@(count=binary.read(c,))!=-1 } -> classBuffer.flip()@ -> classBuffer.get(varBuffer,)@ } CATCH(IOException) {}
results[https://github.com/svn2github/kryo/blob/5d4695ec004ee47caa42e97f92190074afd39249/src/com/esotericsoftware/kryo/io/ByteBufferInput.java][readAscii][2] = -> LOOP { -> IF { -> return readAscii_slow()@end==limit } -> b=niobuffer.get()@!(end==limit) } -> niobuffer.put(end-1,(byte) niobuffer.get(end-1,)&0x7F,)@ -> niobuffer.position(start,)@ -> niobuffer.get(tmp,)@ -> value=new String(tmp,0,0,end-start,)@ -> niobuffer.put(end-1,(byte) niobuffer.get(end-1,)|0x80,)@ -> niobuffer.position(position,)@
results[https://github.com/prog694/VIRSYSJ/blob/a959d19ed51f409d430ff85ec04aecfd8420cf3c/LWJGL/src/java/org/lwjgl/test/opengles/util/Shader.java][createFromFile][6] = -> TRY {  -> IF { -> throw new IllegalArgumentException("A shader source file could not be found: "+file,)@inputStream==null } -> LOOP { -> fileBuffer.put(character,)@!(inputStream==null) && (character=(byte) stream.read())!=-1 } -> fileBuffer.flip()@!(inputStream==null) -> fileBuffer.get(array,)@!(inputStream==null) -> source=new String(array,)@!(inputStream==null) -> fileBuffer.clear()@!(inputStream==null) } CATCH(IOException) {}
results[https://github.com/restlet/restlet-framework-java/blob/032b49935dc36ee5f9291384efd4049aee8b046c/modules/com.noelios.restlet.ext.grizzly_1.8/src/com/noelios/restlet/ext/grizzly/ReadableEntityChannel.java][read][1] = -> TRY {  -> IF { -> this.remainingBuffer.get(src,)@this.remainingBuffer!=null&&this.remainingBuffer.hasRemaining() -> dst.put(src,)@ } ELSE { -> IF { -> result=(ReadableByteChannel) getSource().read(dst,)@ } } } CATCH(IOException) {}
results[https://github.com/enasequence/cramtools/blob/ed07cb4ce821c7102f1742fe023f57d772f98a7c/src/main/java/net/sf/cram/encoding/HuffmanByteEncoding.java][toByteArray][1] = -> buf.clear()@ -> IF { -> buf=ByteBuffer.allocate(values.length*8,)@buf.capacity()<values.length*8 } -> ByteBufferUtils.writeUnsignedITF8(values.length,buf,)@ -> LOOP { -> buf.put(value,)@ } -> ByteBufferUtils.writeUnsignedITF8(bitLengths.length,buf,)@ -> LOOP { -> ByteBufferUtils.writeUnsignedITF8(value,buf,)@ } -> buf.flip()@ -> buf.get(array,)@
results[https://github.com/joliebig/featurehouse_fstcomp_examples/blob/556385603afc18946ee98b6dbf702352bf149820/Java/ChatSystem/FeatureChat/src/Client/Starter.java][testServerUnsolicited][1] = -> TRY {  -> bb=ByteBuffer.allocate(10,)@ -> LOOP { -> bb.put((byte) c,)@(c=socket.getInputStream().read())!='\n' } -> assertEquals(3,bb.position(),)@ -> bb.flip()@ -> bb.get(unsolicited,)@ -> assertEquals("bar",new String(unsolicited,),)@ } CATCH(Exception) {}
results[https://github.com/CSEMike/OneSwarm/blob/cd0d359574587b6a6caa50cd7ac257e92c5d2520/oneswarm_f2f/src/edu/washington/cs/oneswarm/f2f/OSF2FSpeedChecker.java][getReportBytes][1] = -> TRY {  -> data=OSF2FMessageFactory.createOSF2FRawMessage(new OSF2FChannelReset(OSF2FMessage.CURRENT_VERSION,speed,),).getRawData()@ -> buf=ByteBuffer.allocate(20,)@ -> LOOP { -> buf.put(data[i].getBuffer(DirectByteBuffer.SS_MSG,),)@i<data.length } -> buf.flip()@ -> buf.get(b,)@ } CATCH(IOException) {}
results[https://github.com/mcai/Archimulator/blob/ecd4535052d31474a2ff3577958cfb87be6a9725/src/archimulator/isa/memory/bigMemory/BigMemoryDataStore.java][initOrLoadFromDisk][1] = -> IF { -> this.bb=ByteBuffer.allocateDirect(getByteBufferSize(),).order((memory.isLittleEndian())?ByteOrder.LITTLE_ENDIAN:ByteOrder.BIG_ENDIAN,)@this.bb==null } -> IF { -> diskBb=this.getDiskBb()@ -> diskBb.position(getDiskCacheFileDisplacement(),)@ -> diskBb.get(data,)@ -> this.bb.clear()@ -> this.bb.put(data,)@ }
results[https://github.com/Mobicents/jdiameter/blob/54a49396b12309af8acdf170ef797f916fe025b4/core/jdiameter/impl/src/main/java/org/jdiameter/client/impl/transport/tcp/TCPTransportClient.java][append][2] = -> IF { -> tmp=ByteBuffer.allocate(storage.limit()+data.length*2,)@storage.position()+data.length>=storage.capacity() -> storage.flip()@storage.position()+data.length>=storage.capacity() -> storage.get(tmpData,)@storage.position()+data.length>=storage.capacity() -> tmp.put(tmpData,)@ -> logger.warn("Increase storage size. Current size is {}",storage.array().length,)@storage.position()+data.length>=storage.capacity() } -> TRY { -> storage.put(data,)@ } CATCH(BufferOverflowException) { -> logger.error("Buffer overflow occured",boe,)@ }
results[https://github.com/gusax/despotify/blob/20e1711d8b6039f64919f0e66cbd8587e6339764/java/trunk/src/main/java/se/despotify/client/protocol/Session.java][authenticate][14] = -> TRY {  -> buffer=ByteBuffer.allocate(this.authHash.length+this.clientRandom.length+this.serverRandom.length+1,)@ -> buffer.put(this.authHash,)@ -> buffer.put(this.clientRandom,)@ -> buffer.put(this.serverRandom,)@ -> buffer.put((byte) 0x00,)@ -> buffer.flip()@ -> buffer.get(bytes,)@ -> LOOP { -> bytes[bytes.length-1]=(byte) i@i<=5 -> Hash.hmacSha1(bytes,this.dhSharedKey,hmac,offset,)@ -> System.arraycopy(hmac,offset,bytes,0,20,)@ } } CATCH(DespotifyException) {}
results[https://github.com/i2p/i2p.i2p/blob/99e759a5bebee38baf65c90e49cb89e95c318c76/apps/streaming/java/src/net/i2p/client/streaming/MessageChannel.java][write][2] = -> TRY {  -> LOOP { -> IF { -> return written@buf.remaining()==0 } -> buf.get(lbuf,)@!(buf.remaining()==0) -> TRY { -> out.write(lbuf,0,lbuf.length,)@!(buf.remaining()==0) } CATCH(InterruptedIOException) { -> buf.put(lbuf,)@!(buf.remaining()==0) } } } CATCH(IOException) {}
results[https://github.com/undera/jmeter-plugins/blob/bbb8248967616c2d77425d41920ffa03057ef7a5/plugins/src/kg/apc/jmeter/modifiers/RawRequestSourcePreProcessor.java][getNextChunkSize][2] = -> TRY {  -> metaBuf.clear()@ -> LOOP { -> b=getOneByte()@ } ELSE { -> metaBuf.put(b,)@!(b==10||b==13) } -> metaBuf.rewind()@ -> metaBuf.get(bLine,)@ -> sLine=new String(bLine,).trim()@ } CATCH(IOException) {}
results[https://github.com/fgeraci/cs352-bittorrent-project/blob/e531ea55abb026278c83338f46d88a0434a2c51e/src/bt/Model/Peer.java][sendBitfield][1] = -> TRY {  -> bf=ByteBuffer.allocate(5+bytesInBitField.length,)@ -> bf.rewind()@ -> bf.putInt(length,)@ -> bf.put((byte) 5,)@ -> LOOP { -> bf.put(b,)@ } -> bf.rewind()@ -> sendThis=bf.array()@ -> bf.get(sendThis,)@ -> out.write(sendThis,)@ } CATCH(IOException) {}
results[https://github.com/dCache/dcache/blob/2962b546f98dded928f07f39503a1ac229880889/modules/dCache/src/test/java/org/dcache/util/SimpleGSIEngineTest.java][testSSLv2WrapUnwrap][4] = -> TRY {  -> srcBuffer=ByteBuffer.allocate(TCP_BUFFER_SIZE,)@ -> inputString="Hello world".getBytes()@ -> prepareEngineForUnwrap(header,inputString,)@ -> srcBuffer.put(inputString,).flip()@ -> result=_testEngine.wrap(srcBuffer,dstBuffer,)@ -> srcBuffer.clear()@ -> result=_testEngine.unwrap(dstBuffer,srcBuffer,)@ -> srcBuffer.flip()@ -> srcBuffer.get(unwrapResult,)@ -> assertArrayEquals(inputString,unwrapResult,)@ } CATCH(GSSException,IOException) {}
results[https://github.com/dCache/dcache/blob/2feef4b0157fb721f1285e69b720f1c64249ea6e/modules/dCacheJUnit/org/dcache/util/SimpleGSIEngineTest.java][testSSLv3WrapUnwrap][2] = -> TRY {  -> srcBuffer=ByteBuffer.allocate(TCP_BUFFER_SIZE,)@ -> inputString="Hello world".getBytes()@ -> prepareEngineForUnwrap(header,inputString,)@ -> srcBuffer.put(inputString,).flip()@ -> result=_testEngine.wrap(srcBuffer,dstBuffer,)@ -> dstBuffer2=ByteBuffer.allocate(TCP_BUFFER_SIZE,)@ -> result=_testEngine.unwrap(dstBuffer,dstBuffer2,)@ -> dstBuffer2.flip()@ -> dstBuffer2.get(unwrapResult,)@ -> assertArrayEquals(inputString,unwrapResult,)@ } CATCH(GSSException,IOException) {}
results[https://github.com/felipelalli/micaroni/blob/987a4cd9f5f3f5768ed3215930b2492d6681fd2c/lab/sandbox/campinas-db/src/br/eti/fml/campinas/local/index/HashNode.java][<init>][1] = -> IF { -> this.timestamp=System.currentTimeMillis()@timestamp==0L } -> newBuffer=ByteBuffer.allocate(HASH_NODE_SIZE,)@ -> newBuffer.put(this.key,).put(this.flags,).put(this.address1,).putLong(this.address2,).putLong(this.leftNode,).putLong(this.rightNode,).putLong(this.timestamp,)@ -> newBuffer.position(0,)@ -> newBuffer.get(nodeBuffer,)@ -> this.checksum=Arrays.hashCode(nodeBuffer,)@ -> newBuffer.putInt(this.checksum,)@
results[https://github.com/metamx/druid/blob/3a980b8a6852b35a56167bf48eabef1691cdd557/hll/src/main/java/io/druid/query/aggregation/HyperloglogDruidModule.java][serialize][1] = -> TRY {  -> valueResult=ibmap.values()@ -> buffer=ByteBuffer.allocate(4*indexesResult.length+valueResult.length+8,)@ -> buffer.putInt((int) indexesResult.length,)@ -> buffer.putInt((int) valueResult.length,)@ -> LOOP { -> buffer.putInt(indexesResult[i],)@i<indexesResult.length } -> buffer.put(valueResult,)@ -> buffer.flip()@ -> buffer.get(result,)@ -> str=Base64.encodeBase64String(result,)@ } CATCH(IOException,JsonProcessingException) {}
results[https://github.com/tpietzsch/jAER/blob/348f4eae6836901d67d0072e65cc14a0c0ac75ce/host/java/src/ch/unizh/ini/jaer/chip/dvs320/cDVSTest30.java][formatConfigurationBytes][1] = -> bb=ByteBuffer.allocate(1000,)@ -> biasBytes=super.formatConfigurationBytes(biasgen,)@ -> configBytes=allMuxes.formatConfigurationBytes()@ -> bb.put(configBytes,)@ -> vdac=(byte) thermometerDAC.getBitValue()@ -> bb.put(vdac,)@ -> bb.put(biasBytes,)@ -> LOOP { -> bb.put(ss.getBinaryRepresentation(),)@ } -> configBitBytes=configBits.formatConfigurationBytes()@ -> bb.put(configBitBytes,)@ -> bb.flip()@ -> bb.get(allBytes,)@
results[https://github.com/restlet/restlet-framework-java/blob/a59ec39f7b6b05d51a0c33c1420306e8e0497c28/modules/org.restlet/src/org/restlet/engine/io/ReadableEntityChannel.java][read][2] = -> TRY {  -> IF { -> IF { -> result=this.remainingBuffer.remaining()@this.remainingBuffer!=null&&this.remainingBuffer.hasRemaining() -> this.remainingBuffer.get(src,)@this.remainingBuffer!=null&&this.remainingBuffer.hasRemaining() -> dst.put(src,)@ } ELSE { -> result=(ReadableByteChannel) getSource().read(dst,)@ } } } CATCH(IOException) {}
results[https://github.com/pagxir/antalk/blob/d685ef966d584f6d53797fef1a5c5248562068ae/src/java/com/zhuri/talk/protocol/PlainSasl.java][toString][1] = -> buffer=ByteBuffer.allocate(1000,)@ -> buffer.put((byte) 0x0,)@ -> TRY { -> buffer.put(mUser.getBytes("UTF-8",),)@ } CATCH(Exception) { -> buffer.put(mUser.getBytes(),)@ } -> buffer.put((byte) 0x0,)@ -> buffer.put(mSecrect.getBytes(),)@ -> buffer.flip()@ -> buffer.get(buf,)@ -> data=Base64Codec.encode(buf,)@
results[https://github.com/enasequence/cramtools/blob/ed07cb4ce821c7102f1742fe023f57d772f98a7c/src/test/java/net/sf/cram/TestByteBufferUtils.java][test3][1] = -> buf=ByteBuffer.allocate(1024*1024*10,)@ -> buf.order(ByteOrder.LITTLE_ENDIAN,)@ -> LOOP { -> LOOP { -> buf.put(value,)@ } } -> buf.flip()@ -> LOOP { -> LOOP { -> buf.get(bytes,)@ -> Assert.assertArrayEquals(value,bytes,)@ } } -> System.out.printf("Direct bytes: buf size %.2f megabytes, write time %dms, read time %dms.\n",buf.limit()/1024f/1024f,writeNanos/1000000,readNanos/1000000,)@
results[https://github.com/chenatu/ccnx-underlay/blob/493267acc2ebbcfbacf50aff2f8657c39fce8ac0/javasrc/src/org/ccnx/ccn/impl/CCNNetworkChannel.java][fill][2] = -> TRY {  -> position=_datagram.position()@ -> IF { -> IF { -> _datagram.position(_mark,)@position>=_datagram.capacity() -> _datagram.get(b,)@position>=_datagram.capacity() } -> _datagram.clear()@position>=_datagram.capacity() -> IF { -> _datagram.put(b,)@position>=_datagram.capacity() } -> position=_datagram.position()@position>=_datagram.capacity() } } CATCH(IOException) {}
results[https://github.com/preon/preon/blob/b37f568c9b4102e526f6c8f2eaccaa9187bf4edb/preon-binding/src/main/java/org/codehaus/preon/codec/FixedLengthStringCodec.java][encode][1] = -> TRY {  -> bytebuffer=ByteBuffer.allocate(size,)@ -> encoder.encode(CharBuffer.wrap(value,),bytebuffer,true,)@ -> IF { -> bytebuffer.put( new byte[],)@bytebuffer.position()<size } -> bytebuffer.flip()@ -> bytebuffer.get(bytes,)@ -> LOOP { -> bytes[i]=byteConverter.revert(bytes[i],)@i<bytes.length } -> channel.write(bytes,0,size,)@ } CATCH(IOException) {}
results[https://github.com/qiaohe/exhibition/blob/61e732979e5f5dfd129026f5f7b9cca2e816ef8e/src/main/java/cn/mobiledaily/web/controller/QrcodeController.java][getQrcode][1] = -> TRY { -> json=mapper.writeValueAsString(map,)@ -> buffer=ByteBuffer.allocate(200,)@ -> buffer.put(json.getBytes("UTF-8",),)@ -> buffer.flip()@ -> buffer.get(bs,)@ -> codec="MD:"+ByteUtil.byte2ascii(bs,)@ -> LOOP { -> out.write(bs,0,len,)@(len=in.read(bs,0,bs.length,))>0 } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/elek/identityconnectors/blob/0b6d5880b790f258d65b110a5c7e7e0af19583a5/projects/bundles/ldap/src/org/identityconnectors/ldap/schema/GuardedPasswordAttribute.java][access][2] = -> byteBuf=Charset.forName("UTF-8",).encode(charBuf,)@ -> TRY { -> byteBuf.rewind()@ -> byteBuf.get(bytes,)@ -> TRY { -> attr=new BasicAttribute(attrName,bytes,)@ } FINALLY { -> SecurityUtil.clear(bytes,)@ } -> byteBuf.rewind()@ -> LOOP { -> byteBuf.put((byte) 0,)@byteBuf.remaining()>0 } }
results[https://github.com/mcai/Archimulator/blob/b4ba3a1396cd75c44a7c93bc88404f16a715233c/src/archimulator/isa/memory/datastore/CacheBasedBigMemoryDataStore.java][initOrLoadFromDisk][1] = -> IF { -> this.bb=ByteBuffer.allocateDirect(BUFFER_LENGTH,).order((memory.isLittleEndian())?ByteOrder.LITTLE_ENDIAN:ByteOrder.BIG_ENDIAN,)@this.bb==null } -> IF { -> IF { -> throw new RuntimeException()@!(this.isDiskCacheFileExist(newTag,)) && bufferIdsExistsOnDisk.contains(newTag,) } -> diskBb=this.getDiskBb()@!(bufferIdsExistsOnDisk.contains(newTag,)) && !(!(this.isDiskCacheFileExist(newTag,))) -> diskBb.position(CacheBasedBigMemoryDataStore.getDiskCacheFileDisplacement(newTag,),)@bufferIdsExistsOnDisk.contains(newTag,) && !(!(this.isDiskCacheFileExist(newTag,))) -> diskBb.get(data,)@!(bufferIdsExistsOnDisk.contains(newTag,)) && !(!(this.isDiskCacheFileExist(newTag,))) -> this.bb.clear()@!(bufferIdsExistsOnDisk.contains(newTag,)) && !(!(this.isDiskCacheFileExist(newTag,))) -> this.bb.put(data,)@!(bufferIdsExistsOnDisk.contains(newTag,)) && !(!(this.isDiskCacheFileExist(newTag,))) }
results[https://github.com/CSEMike/OneSwarm/blob/033e0b58f88910e3694e787154055b06432a6fb4/oneswarm_f2f/test/edu/washington/cs/oneswarm/f2ftest/OSF2FMessagesTester.java][writeSearchCancel][1] = -> TRY {  -> data=OSF2FMessageFactory.createOSF2FRawMessage(new OSF2FSearchCancel((byte) 1,0,),).getRawData()@ -> buf=ByteBuffer.allocate(40,)@ -> LOOP { -> buf.put(data[i].getBuffer(DirectByteBuffer.SS_MSG,),)@i<data.length } -> buf.flip()@ -> System.out.println("CLIENT: writing searchCancel, "+buf.remaining()+" bytes",)@ -> buf.get(b,)@ -> out.write(b,)@ } CATCH(IOException) {}
results[https://github.com/restlet/restlet-framework-java/blob/cf62c47da393e705a4dd1b14e609ab49f9cea21c/modules/org.restlet/src/org/restlet/engine/http/io/ReadableEntityChannel.java][read][6] = -> TRY {  -> IF { -> IF { -> result=Math.min(this.remainingBuffer.remaining(),dst.remaining(),)@this.remainingBuffer!=null&&this.remainingBuffer.hasRemaining() -> this.remainingBuffer.get(src,)@this.remainingBuffer!=null&&this.remainingBuffer.hasRemaining() -> dst.put(src,)@ } ELSE { -> result=(ReadableByteChannel) getSource().read(dst,)@ } } } CATCH(IOException) {}
results[https://github.com/mcai/Archimulator/blob/925256d360df52621e6a224410c7996c829995b2/src/archimulator/isa/memory/datastore/BigMemoryDataStore.java][initOrLoadFromDisk][1] = -> IF { -> this.bb=ByteBuffer.allocateDirect(getByteBufferSize(),).order((memory.isLittleEndian())?ByteOrder.LITTLE_ENDIAN:ByteOrder.BIG_ENDIAN,)@this.bb==null } -> IF { -> IF { -> throw new RuntimeException()@!(this.isDiskCacheFileExist(newTag,)) && evictedPageIds.contains(newTag,) } -> diskBb=this.getDiskBb()@!(evictedPageIds.contains(newTag,)) && !(!(this.isDiskCacheFileExist(newTag,))) -> diskBb.position(BigMemoryDataStore.getDiskCacheFileDisplacement(newTag,),)@evictedPageIds.contains(newTag,) && !(!(this.isDiskCacheFileExist(newTag,))) -> diskBb.get(data,)@!(evictedPageIds.contains(newTag,)) && !(!(this.isDiskCacheFileExist(newTag,))) -> this.bb.clear()@!(evictedPageIds.contains(newTag,)) && !(!(this.isDiskCacheFileExist(newTag,))) -> this.bb.put(data,)@!(evictedPageIds.contains(newTag,)) && !(!(this.isDiskCacheFileExist(newTag,))) }
results[https://github.com/rhusar/HornetQ-oldmigration/blob/9636dc2af7030e480da68ffb3c800c806ade78b6/hornetq-core/src/main/java/org/hornetq/core/server/impl/FileLockNodeManager.java][createNodeId][3] = -> TRY {  -> id=ByteBuffer.allocateDirect(16,)@ -> read=channel.read(id,3,)@ -> IF { -> id.put(uuid.asBytes(),0,16,)@ -> id.position(0,)@ -> channel.write(id,3,)@ } ELSE { -> id.position(0,)@ -> id.get(bytes,)@ -> uuid=new UUID(UUID.TYPE_TIME_BASED,bytes,)@ } } CATCH(Exception) {}
results[https://github.com/CSEMike/OneSwarm/blob/033e0b58f88910e3694e787154055b06432a6fb4/oneswarm_f2f/test/edu/washington/cs/oneswarm/f2ftest/OSF2FMessagesTester.java][writeChannelRst][1] = -> TRY {  -> data=OSF2FMessageFactory.createOSF2FRawMessage(new OSF2FChannelReset((byte) 1,0x4949494,),).getRawData()@ -> buf=ByteBuffer.allocate(20,)@ -> LOOP { -> buf.put(data[i].getBuffer(DirectByteBuffer.SS_MSG,),)@i<data.length } -> buf.flip()@ -> System.out.println("CLIENT: writing writeChannelReset, "+buf.remaining()+" bytes",)@ -> buf.get(b,)@ -> out.write(b,)@ } CATCH(IOException) {}
results[https://github.com/kaupppa/Javnce/blob/83b001030b41813bf63d74d0640c11dfa95aae83/src/main/java/org/javnce/rfb/messages/MsgServerInit.java][parseName][4] = -> IF { -> IF { -> IF { -> length=buffer.getInt()&0xFFFFFFFFL@4<=buffer.remaining() -> nameBuffer=ByteBuffer.allocate((int) length,)@null==nameBuffer } } -> LOOP { -> nameBuffer.put(buffer.get(),)@0!=buffer.remaining()&&0!=nameBuffer.remaining() } -> IF { -> nameBuffer.clear()@0==nameBuffer.remaining() -> nameBuffer.get(temp,)@0==nameBuffer.remaining() -> name=new String(temp,)@null==name } }
results[https://github.com/teodormacicas/jboss_benchmarkIO/blob/a66a59c8ec1ba6dad9daeefccae4fc70fc0b69e3/nio2-xnio3-netty-servers/src/main/java/org/jboss/server/xnio3/XnioServer.java][initSession][4] = -> TRY {  -> buffer=ByteBuffer.allocate(512,)@ -> buffer.clear()@ -> nBytes=channel.read(buffer,)@ -> buffer.flip()@ -> buffer.get(bytes,)@ -> System.out.println("["+sessionId+"] "+new String(bytes,).trim(),)@ -> buffer.clear()@ -> buffer.put(response.getBytes(),)@ -> buffer.flip()@ -> channel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/CSEMike/OneSwarm/blob/033e0b58f88910e3694e787154055b06432a6fb4/oneswarm_f2f/test/edu/washington/cs/oneswarm/f2ftest/OSF2FMessagesTester.java][writeHandshake][1] = -> TRY {  -> handshake=OSF2FMessageFactory.createOSF2FRawMessage(new OSF2FHandshake((byte) 1, new byte[],),).getRawData()@ -> buf=ByteBuffer.allocate(2000,)@ -> LOOP { -> buf.put(handshake[i].getBuffer(DirectByteBuffer.SS_MSG,),)@i<handshake.length } -> buf.flip()@ -> System.out.println("CLIENT: writing handshake, "+buf.remaining()+" bytes",)@ -> buf.get(data,)@ -> out.write(data,)@ } CATCH(IOException) {}
results[https://github.com/CSEMike/OneSwarm/blob/033e0b58f88910e3694e787154055b06432a6fb4/oneswarm_f2f/test/edu/washington/cs/oneswarm/f2ftest/OSF2FMessagesTester.java][writeTorrentReq][1] = -> TRY {  -> data=OSF2FMessageFactory.createOSF2FRawMessage(new OSF2FMetaInfoReq((byte) 1,0,OSF2FMessage.METAINFO_TYPE_BITTORRENT,0, new byte[],),).getRawData()@ -> buf=ByteBuffer.allocate(40,)@ -> LOOP { -> buf.put(data[i].getBuffer(DirectByteBuffer.SS_MSG,),)@i<data.length } -> buf.flip()@ -> System.out.println("CLIENT: writing writeTorrentReq, "+buf.remaining()+" bytes",)@ -> buf.get(b,)@ -> out.write(b,)@ } CATCH(IOException) {}
results[https://github.com/CSEMike/OneSwarm/blob/033e0b58f88910e3694e787154055b06432a6fb4/oneswarm_f2f/test/edu/washington/cs/oneswarm/f2ftest/OSF2FMessagesTester.java][writeFilelistResp][1] = -> TRY {  -> data=OSF2FMessageFactory.createOSF2FRawMessage(new OSF2FTextSearchResp((byte) 1,OSF2FMessage.FILE_LIST_TYPE_COMPLETE,0,0, new byte[],),).getRawData()@ -> buf=ByteBuffer.allocate(1020,)@ -> LOOP { -> buf.put(data[i].getBuffer(DirectByteBuffer.SS_MSG,),)@i<data.length } -> buf.flip()@ -> System.out.println("CLIENT: writing writeFilelistResp, "+buf.remaining()+" bytes",)@ -> buf.get(b,)@ -> out.write(b,)@ } CATCH(IOException) {}
results[https://github.com/CSEMike/OneSwarm/blob/033e0b58f88910e3694e787154055b06432a6fb4/oneswarm_f2f/test/edu/washington/cs/oneswarm/f2ftest/OSF2FMessagesTester.java][writeTorrentResp][1] = -> TRY {  -> data=OSF2FMessageFactory.createOSF2FRawMessage(new OSF2FMetaInfoResp((byte) 1,0,OSF2FMessage.METAINFO_TYPE_BITTORRENT,0,0,0, new byte[],),).getRawData()@ -> buf=ByteBuffer.allocate(1020,)@ -> LOOP { -> buf.put(data[i].getBuffer(DirectByteBuffer.SS_MSG,),)@i<data.length } -> buf.flip()@ -> System.out.println("CLIENT: writing writeTorrentResp, "+buf.remaining()+" bytes",)@ -> buf.get(b,)@ -> out.write(b,)@ } CATCH(IOException) {}
results[https://github.com/CSEMike/OneSwarm/blob/033e0b58f88910e3694e787154055b06432a6fb4/oneswarm_f2f/test/edu/washington/cs/oneswarm/f2ftest/OSF2FMessagesTester.java][writeChannelMsg][1] = -> TRY {  -> data=OSF2FMessageFactory.createOSF2FRawMessage(new OSF2FChannelDataMsg((byte) 1,0x4949494,dbuffer,),).getRawData()@ -> buf=ByteBuffer.allocate(17000,)@ -> LOOP { -> buf.put(data[i].getBuffer(DirectByteBuffer.SS_MSG,),)@i<data.length } -> buf.flip()@ -> System.out.println("CLIENT: writing writeChannelMsg, "+buf.remaining()+" bytes",)@ -> buf.get(b,)@ -> out.write(b,)@ } CATCH(IOException) {}
results[https://github.com/teodormacicas/jboss_benchmarkIO/blob/95361b81ab82e4cbec66de3d199ca5d4dbe9096b/src/main/java/org/jboss/nio2/server/async/Nio2AsyncServer.java][initSession][1] = -> TRY {  -> buffer.clear()@ -> future=channel.read(buffer,)@ -> buffer.flip()@ -> buffer.get(bytes,)@ -> System.out.println("["+sessionId+"] "+new String(bytes,).trim(),)@ -> buffer.clear()@ -> buffer.put(response.getBytes(),).flip()@ -> channel.write(buffer,)@ -> buffer.clear()@ } CATCH(Exception) {}
results[https://github.com/CSEMike/OneSwarm/blob/033e0b58f88910e3694e787154055b06432a6fb4/oneswarm_f2f/test/edu/washington/cs/oneswarm/f2ftest/OSF2FMessagesTester.java][writeChannelSetup][1] = -> TRY {  -> data=OSF2FMessageFactory.createOSF2FRawMessage(new OSF2FHashSearchResp((byte) 1,0x4949494,0x10101010,123456,),).getRawData()@ -> buf=ByteBuffer.allocate(100,)@ -> LOOP { -> buf.put(data[i].getBuffer(DirectByteBuffer.SS_MSG,),)@i<data.length } -> buf.flip()@ -> System.out.println("CLIENT: writing writeChannelSetup, "+buf.remaining()+" bytes",)@ -> buf.get(b,)@ -> out.write(b,)@ } CATCH(IOException) {}
results[https://github.com/CSEMike/OneSwarm/blob/033e0b58f88910e3694e787154055b06432a6fb4/oneswarm_f2f/test/edu/washington/cs/oneswarm/f2ftest/OSF2FMessagesTester.java][writeSearch][1] = -> TRY {  -> data=OSF2FMessageFactory.createOSF2FRawMessage(new OSF2FHashSearch((byte) 1,0x4949494,0x10101010,),).getRawData()@ -> buf=ByteBuffer.allocate(100,)@ -> LOOP { -> buf.put(data[i].getBuffer(DirectByteBuffer.SS_MSG,),)@i<data.length } -> buf.flip()@ -> System.out.println("CLIENT: writing search, "+buf.remaining()+" bytes",)@ -> buf.get(b,)@ -> out.write(b,)@ } CATCH(IOException) {}
results[https://github.com/fgeraci/cs352-bittorrent-project/blob/e531ea55abb026278c83338f46d88a0434a2c51e/src/bt/Model/Peer.java][handShake][1] = -> handShakeBB=ByteBuffer.allocate(68,)@ -> b1[0]=(byte) 19@ -> LOOP { -> b2[i]=(byte) 0@i<8 } -> handShakeBB.put(b1,).put(btProtocol.getBytes(),).put(b2,).put(this.hash,).put(clientID,)@ -> handShakeBB.rewind()@ -> handShakeBB.get(handShakeBA,)@ -> TRY { -> this.out.write(handShakeBA,)@ } CATCH(Exception) { -> ClientGUI.getInstance().publishEvent("Error in handshake",)@ }
results[https://github.com/apavlo/h-store/blob/e1f70e244e03e6adc24af4950455535ee2119e5f/src/frontend/gpl_vcr/org/voltdb/messaging/ForeignHost.java][handleRead][2] = -> mailboxId=in.getInt()@ -> IF { -> readyHost=in.getInt()@!(mailboxId==-1) -> in.get(hostnameBytes,)@!(mailboxId==-1) -> m_remoteHostname=new String(hostnameBytes,)@!(mailboxId==-1) -> return @mailboxId==-1 } -> destCount=in.getInt()@!(mailboxId==-1) -> LOOP { -> recvDests[i]=in.getInt()@i<destCount && !(mailboxId==-1) } -> datalen=in.limit()-in.position()@!(mailboxId==-1) -> assert in.limit()!=datalen+VoltMessage.HEADER_SIZE@!(mailboxId==-1) -> raw=ByteBuffer.allocate(datalen+VoltMessage.HEADER_SIZE,)@!(mailboxId==-1) -> raw.position(VoltMessage.HEADER_SIZE,)@!(mailboxId==-1) -> raw.put(in,)@!(mailboxId==-1) -> raw.position(VoltMessage.HEADER_SIZE,)@!(mailboxId==-1) -> message=VoltMessage.createMessageFromBuffer(raw,true,)@!(mailboxId==-1)
results[https://github.com/axDev-JDK/jdk/blob/acbdb0ade569a980d025ec2b09f528c0bc1a29cd/test/java/nio/Buffer/CopyDirectByteMemory.java][test][2] = -> b=ByteBuffer.allocateDirect(1024*1024+1024,)@ -> init(b,)@ -> init(a,)@ -> b.put(a,)@ -> LOOP { -> ck(b,b.get(i,),(byte) ic(i+1,),)@i<a.length } -> init(b,)@ -> init(a,)@ -> b.get(a,)@ -> LOOP { -> IF { -> fail("Copy failed at "+i+": '"+a[i]+"' != '"+b.get(i,)+"'",)@i<a.length && a[i]!=b.get(i,) } }
results[https://github.com/Artaros/jdiameter/blob/0ccc469e59a2c73187e4c50106b3c843f680e814/core/jdiameter/impl/src/main/java/org/jdiameter/client/impl/transport/tls/TLSTransportClient.java][append][2] = -> IF { -> tmp=ByteBuffer.allocate(storage.limit()+data.length*2,)@storage.position()+data.length>=storage.capacity() -> storage.flip()@storage.position()+data.length>=storage.capacity() -> storage.get(tmpData,)@storage.position()+data.length>=storage.capacity() -> tmp.put(tmpData,)@ -> logger.warn("Increase storage size. Current size is {}",storage.array().length,)@storage.position()+data.length>=storage.capacity() } -> TRY { -> storage.put(data,)@ } CATCH(BufferOverflowException) { -> logger.error("Buffer overflow occured",boe,)@ } -> LOOP { -> messageReseived=seekMessage(storage,)@ }
results[https://github.com/AustESE-Infrastructure/calliope/blob/6b0e213074e4bdeeacc9b8b7dc18382de530bfb3/src/calliope/importer/filters/NovelFilter.java][writeCurrent][1] = -> TRY {  -> IF { -> bb=ByteBuffer.allocate(current.length,)@ -> LOOP { -> offset=encodeItalics(current,offset,bb,)@ } -> IF { -> LOOP { -> bb.put(current[i],)@i<current.length } } -> bb.position(0,)@ -> bb.get(current,)@ } -> txt.write(current,)@ } CATCH(IOException) {}
results[https://github.com/teodormacicas/jboss_benchmarkIO/blob/a66a59c8ec1ba6dad9daeefccae4fc70fc0b69e3/nio2-xnio3-netty-servers/src/main/java/org/jboss/server/nio2/NioServer.java][initSession][3] = -> TRY {  -> buffer.clear()@ -> future=channel.read(buffer,)@ -> buffer.flip()@ -> buffer.get(bytes,)@ -> System.out.println("["+sessionId+"] "+new String(bytes,).trim(),)@ -> buffer.clear()@ -> buffer.put(response.getBytes(),).flip()@ -> channel.write(buffer,).get()@ -> buffer.clear()@ } CATCH(Exception) {}
results[https://github.com/marschall/memoryfilesystem/blob/9108781f9285ec89a78de98f3d5fe15a9e7ee317/src/test/java/com/google/code/memoryfilesystem/MemoryContentsTest.java][firstBlockEmpty][2] = -> TRY {  -> src=allocate(SAMPLE_DATA.length,)@ -> src.put(data,)@ -> src.rewind()@ -> assertEquals(SAMPLE_DATA.length,channel.write(src,),)@ -> dst=allocate(SAMPLE_DATA.length,)@ -> assertEquals(SAMPLE_DATA.length,channel.read(dst,),)@ -> dst.rewind()@ -> dst.get(extracted,)@ -> assertArrayEquals(data,extracted,)@ -> dst.rewind()@ -> assertEquals(-1,channel.read(dst,),)@ } CATCH(IOException) {}
results[https://github.com/Cyberspice/platform_tools_base/blob/46d8201c0c7011e2d6fa6fd86c121b1cdb26bf13/jobb/src/main/java/com/android/jobb/EncryptedBlockFile.java][readDecryptedSector][1] = -> TRY {  -> temp=ByteBuffer.allocate(BYTES_PER_SECTOR,)@ -> LOOP { -> read=mFC.read(temp,devOffset,)@!(toRead>0) -> IF { -> throw new IOException()@toRead>0 && read<0 } } -> temp.rewind()@!(toRead>0) -> LOOP { -> temp.get(buf,)@!(toRead>0) -> decryptBuf=Twofish_Algorithm.blockDecrypt(buf,0,mKey,)@!(toRead>0) -> System.arraycopy(buf,0,bufLast,0,blockSize,)@!(toRead>0) -> dest.put(decryptBuf,)@!(toRead>0) } } CATCH(IOException) {}
