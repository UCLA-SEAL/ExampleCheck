results[https://github.com/enasequence/cramtools/blob/ed07cb4ce821c7102f1742fe023f57d772f98a7c/src/main/java/net/sf/cram/encoding/UnaryIntegerEncoding.java][toByteArray][1] = -> buf=ByteBuffer.allocate(10,)@ -> ByteBufferUtils.writeUnsignedITF8(offset,buf,)@ -> buf.put((byte) (stopBit)?1:0,)@ -> buf.flip()@ -> buf.get(array,)@
results[https://github.com/deanhiller/databus/blob/2fa5fe9142bb20f5d56d2175264ebb0ae1a52314/webapp/app/controllers/api/DocumentUtil.java][combineName][1] = -> buffer=ByteBuffer.allocate(size,)@ -> buffer.put(namePrefix,)@ -> buffer.putLong(time,)@ -> buffer.put(nameAsBytes,)@ -> buffer.flip()@ -> buffer.get(name,)@
results[https://github.com/enasequence/cramtools/blob/ed07cb4ce821c7102f1742fe023f57d772f98a7c/src/main/java/net/sf/cram/encoding/ByteArrayStopEncoding.java][toByteArray][1] = -> buf=ByteBuffer.allocate(1024,)@ -> buf.order(ByteOrder.LITTLE_ENDIAN,)@ -> buf.put(stopByte,)@ -> ByteBufferUtils.writeUnsignedITF8(externalId,buf,)@ -> buf.flip()@ -> buf.get(array,)@
results[https://github.com/barchart/barchart-feed-ddf/blob/b84253778a69c419742e24b11e78bcdfc86e7447/barchart-feed-ddf-test/src/main/java/com/barchart/feed/test/replay/DDFLogDeframer.java][copy][1] = -> buffer.flip()@ -> buffer.get(message,)@ -> buffer.clear()@ -> IF { -> buffer.put((byte) next,)@next>-1 }
results[https://github.com/Ginows/SRE-RoboCode/blob/561d38fa9b1b196755a0cdd2bc2fe0c6e06a053a/RobocodeSrc/trunk/robocode.core/src/main/java/net/sf/robocode/robotpaint/Graphics2DSerialized.java][readoutQueuedCalls][2] = -> IF { -> return null@calls==null||calls.position()==0 } -> calls.flip()@!(calls==null||calls.position()==0) -> calls.get(res,)@!(calls==null||calls.position()==0) -> calls.clear()@!(calls==null||calls.position()==0) -> calls.put((calls.order()==ByteOrder.BIG_ENDIAN)?(byte) 1:(byte) 0,)@!(calls==null||calls.position()==0)
results[https://github.com/CSEMike/OneSwarm/blob/cd0d359574587b6a6caa50cd7ac257e92c5d2520/oneswarm_f2f/src/edu/washington/cs/oneswarm/f2f/OSF2FSpeedChecker.java][getHsBytes][1] = -> buf=ByteBuffer.allocate(2000,)@ -> buf.put((byte) OSF2FMessage.SPD_HANDSHAKE.getBytes().length,)@ -> buf.put(OSF2FMessage.SPD_HANDSHAKE.getBytes(),)@ -> buf.put(rand,)@ -> buf.flip()@ -> buf.get(data,)@
results[https://github.com/dworkin/reddwarf/blob/9d3fd24fc04defd3e3be51303c13809345ce87a6/test/shared/j2se/com/sun/sgs/test/impl/io/MessageFilterTest.java][testSend][1] = -> sendData=getByteSequence(len,)@ -> buf=ByteBuffer.allocate(len+4,false,)@ -> buf.putInt(len,)@ -> buf.put(sendData,)@ -> buf=buf.asReadOnlyBuffer()@ -> buf.flip()@ -> buf.get(expected,)@ -> harness.send(sendData,)@ -> assertTrue("Incorrect send!",Arrays.equals(actual,expected,),)@
results[https://github.com/ecologylab/ecologylabLocationAware/blob/e7bbc83c66098c7b14d601e1fe5babbb97bc5b24/src/ecologylab/standalone/ImageGeotagger/ImageProcessor.java][setCompassData][1] = -> order=(outputSet.byteOrder==TiffConstants.BYTE_ORDER_BIG_ENDIAN)?ByteOrder.BIG_ENDIAN:ByteOrder.LITTLE_ENDIAN@ -> rationalBuffer=ByteBuffer.allocate(8,)@ -> heading=(long) compassData.getHeading()*100@ -> System.out.println("Heading num: "+heading,)@ -> rationalBuffer.put(intToUnsignedByteArray(heading,order,),)@ -> rationalBuffer.put(intToUnsignedByteArray(100,order,),)@ -> rationalBuffer.flip()@ -> rationalBuffer.get(buf,)@ -> outField=new TiffOutputField(GPSTagConstants.GPS_TAG_GPS_IMG_DIRECTION,TiffFieldTypeConstants.FIELD_TYPE_RATIONAL,1,buf,)@
results[https://github.com/pagxir/antalk/blob/e3aa4412d2a093d783570a951acf31d45a20b0fe/src/com/zhuri/talk/protocol/PlainSasl.java][toString][2] = -> buffer=ByteBuffer.allocate(1000,)@ -> buffer.put((byte) 0x0,)@ -> buffer.put(mUser.getBytes(),)@ -> buffer.put((byte) 0x0,)@ -> buffer.put(mSecrect.getBytes(),)@ -> buffer.flip()@ -> buffer.get(buf,)@ -> data=Base64Codec.encode(buf,)@
results[https://github.com/metamx/druid/blob/3a980b8a6852b35a56167bf48eabef1691cdd557/hll/src/main/java/io/druid/query/aggregation/HyperloglogComplexMetricSerde.java][toBytes][1] = -> valueResult=ibmap.values()@ -> buffer=ByteBuffer.allocate(4*indexesResult.length+valueResult.length+8,)@ -> buffer.putInt((int) indexesResult.length,)@ -> buffer.putInt((int) valueResult.length,)@ -> LOOP { -> buffer.putInt(indexesResult[i],)@i<indexesResult.length } -> buffer.put(valueResult,)@ -> buffer.flip()@ -> buffer.get(result,)@
results[https://github.com/geir/mongo-java-driver/blob/741cf8f1343da920ef9b29b135a84ef3c8b978a2/src/main/org/mongodb/driver/ts/BabbleOID.java][<init>][2] = -> buf=ByteBuffer.allocate(12,)@ -> buf.order(ByteOrder.LITTLE_ENDIAN,)@ -> buf.putInt(time,)@ -> buf.put(MACHINE,)@ -> buf.put(PID,)@ -> index=getIndex(time,)@ -> buf.put((byte) index&0xFF,)@ -> buf.put((byte) index>>8&0xFF,)@ -> buf.put((byte) index>>16&0xFF,)@ -> buf.flip()@ -> buf.get(_arr,)@
results[https://github.com/tpietzsch/jAER/blob/348f4eae6836901d67d0072e65cc14a0c0ac75ce/host/java/src/ch/unizh/ini/jaer/chip/dvs320/cDVSTest10.java][formatConfigurationBytes][1] = -> bb=ByteBuffer.allocate(1000,)@ -> biasBytes=super.formatConfigurationBytes(biasgen,)@ -> configBytes=allMuxes.formatConfigurationBytes()@ -> bb.put(configBytes,)@ -> bb.put(biasBytes,)@ -> LOOP { -> bb.put(ss.getBinaryRepresentation(),)@ } -> bb.flip()@ -> bb.get(allBytes,)@
results[https://github.com/kevinwang/minecarft/blob/3c6892665ddeaccdc8d6786027c3a0481ae02bd1/lwjgl-source-2.8.2/src/java/org/lwjgl/test/opengl/shaders/Shader.java][getShaderText][6] = -> TRY { -> LOOP { -> fileBuffer.put(character,)@(character=(byte) stream.read())!=-1 } -> fileBuffer.flip()@ -> fileBuffer.get(array,)@ -> shader=new String(array,)@ -> fileBuffer.clear()@ } CATCH(IOException) { -> ShadersTest.kill("Failed to read the shader source file: "+file,e,)@ }
results[https://github.com/tpietzsch/jAER/blob/348f4eae6836901d67d0072e65cc14a0c0ac75ce/host/java/src/ch/unizh/ini/jaer/chip/dvs320/cDVSTest20.java][formatConfigurationBytes][1] = -> bb=ByteBuffer.allocate(1000,)@ -> biasBytes=super.formatConfigurationBytes(biasgen,)@ -> configBytes=allMuxes.formatConfigurationBytes()@ -> bb.put(configBytes,)@ -> vdac=(byte) thermometerDAC.getBitValue()@ -> bb.put(vdac,)@ -> bb.put(biasBytes,)@ -> LOOP { -> bb.put(ss.getBinaryRepresentation(),)@ } -> bb.flip()@ -> bb.get(allBytes,)@
results[https://github.com/android/platform_packages_apps_im/blob/e3ea5527f63cfebfc1ae7fea0f3bd70200bf8f42/src/com/android/im/imps/SmsSplitter.java][getNext][2] = -> IF { -> throw new IndexOutOfBoundsException()@mCurrentSegment>=mSegmentCount } } ELSE { -> mOutBuffer.clear()@!(mCurrentSegment>=mSegmentCount) -> mOutBuffer.put(mData,0,mPreambleEnd,)@!(mCurrentSegment>=mSegmentCount) -> mOutBuffer.put((byte) 'a'+mCurrentSegment,)@!(mCurrentSegment>=mSegmentCount) -> mOutBuffer.put((byte) 'a'+mSegmentCount-1,)@!(mCurrentSegment>=mSegmentCount) && !(mSegmentCount==1) -> mOutBuffer.put((byte) ' ',)@!(mCurrentSegment>=mSegmentCount) -> len=(offset+segmentPayload>mData.length)?mData.length-offset:segmentPayload@!(mCurrentSegment>=mSegmentCount) -> mOutBuffer.put(mData,offset,len,)@!(mCurrentSegment>=mSegmentCount) -> mOutBuffer.flip()@!(mCurrentSegment>=mSegmentCount) -> mOutBuffer.get(segment,)@!(mCurrentSegment>=mSegmentCount)
results[https://github.com/dozedoff/commonj/blob/330f8f4a8e3dc9cd51d1ace37f2828f2b0f245b3/src/file/BinaryFileReader.java][get][2] = -> TRY {  -> IF { -> classBuffer=ByteBuffer.allocate((int) path.length(),)@path.length()>classBuffer.capacity() } -> classBuffer.clear()@ -> LOOP { -> classBuffer.put(c,0,count,)@(count=binary.read(c,))!=-1 } -> classBuffer.flip()@ -> classBuffer.get(varBuffer,)@ } CATCH(IOException) {}
results[https://github.com/enasequence/cramtools/blob/ed07cb4ce821c7102f1742fe023f57d772f98a7c/src/main/java/net/sf/cram/encoding/HuffmanByteEncoding.java][toByteArray][1] = -> buf.clear()@ -> IF { -> buf=ByteBuffer.allocate(values.length*8,)@buf.capacity()<values.length*8 } -> ByteBufferUtils.writeUnsignedITF8(values.length,buf,)@ -> LOOP { -> buf.put(value,)@ } -> ByteBufferUtils.writeUnsignedITF8(bitLengths.length,buf,)@ -> LOOP { -> ByteBufferUtils.writeUnsignedITF8(value,buf,)@ } -> buf.flip()@ -> buf.get(array,)@
results[https://github.com/FoxyCorndog/Workspace/blob/309cbdc3984a6caa05308c06c008ebbe3b8c0735/LWJGL/LWJGL/lwjgl-2.8.5/src/java/org/lwjgl/test/opengles/util/Shader.java][createFromFile][6] = -> TRY {  -> IF { -> throw new IllegalArgumentException("A shader source file could not be found: "+file,)@inputStream==null } -> LOOP { -> fileBuffer.put(character,)@!(inputStream==null) && (character=(byte) stream.read())!=-1 } -> fileBuffer.flip()@!(inputStream==null) -> fileBuffer.get(array,)@!(inputStream==null) -> source=new String(array,)@!(inputStream==null) -> fileBuffer.clear()@!(inputStream==null) } CATCH(IOException) {}
results[https://github.com/CSEMike/OneSwarm/blob/cd0d359574587b6a6caa50cd7ac257e92c5d2520/oneswarm_f2f/src/edu/washington/cs/oneswarm/f2f/OSF2FSpeedChecker.java][getDummyPacket][1] = -> TRY {  -> data=OSF2FMessageFactory.createOSF2FRawMessage(new OSF2FChannelDataMsg(OSF2FMessage.CURRENT_VERSION,0,dbuffer,),).getRawData()@ -> buf=ByteBuffer.allocate(OSF2FMessage.MAX_MESSAGE_SIZE+20,)@ -> LOOP { -> buf.put(data[i].getBuffer(DirectByteBuffer.SS_MSG,),)@i<data.length } -> buf.flip()@ -> buf.get(b,)@ } CATCH(IOException) {}
results[https://github.com/joliebig/featurehouse_fstcomp_examples/blob/556385603afc18946ee98b6dbf702352bf149820/Java/ChatSystem/FeatureChat/src/Client/Starter.java][testServerUnsolicited][1] = -> TRY {  -> bb=ByteBuffer.allocate(10,)@ -> LOOP { -> bb.put((byte) c,)@(c=socket.getInputStream().read())!='\n' } -> assertEquals(3,bb.position(),)@ -> bb.flip()@ -> bb.get(unsolicited,)@ -> assertEquals("bar",new String(unsolicited,),)@ } CATCH(Exception) {}
results[https://github.com/CSEMike/OneSwarm/blob/cd0d359574587b6a6caa50cd7ac257e92c5d2520/oneswarm_f2f/src/edu/washington/cs/oneswarm/f2f/OSF2FSpeedChecker.java][getReportBytes][1] = -> TRY {  -> data=OSF2FMessageFactory.createOSF2FRawMessage(new OSF2FChannelReset(OSF2FMessage.CURRENT_VERSION,speed,),).getRawData()@ -> buf=ByteBuffer.allocate(20,)@ -> LOOP { -> buf.put(data[i].getBuffer(DirectByteBuffer.SS_MSG,),)@i<data.length } -> buf.flip()@ -> buf.get(b,)@ } CATCH(IOException) {}
results[https://github.com/gusax/despotify/blob/0a8508014f009be9aa8f132fedbfe26464e63ef2/java/tags/0.4.5/src/main/java/se/despotify/client/protocol/Session.java][authenticate][14] = -> TRY {  -> buffer=ByteBuffer.allocate(this.authHash.length+this.clientRandom.length+this.serverRandom.length+1,)@ -> buffer.put(this.authHash,)@ -> buffer.put(this.clientRandom,)@ -> buffer.put(this.serverRandom,)@ -> buffer.put((byte) 0x00,)@ -> buffer.flip()@ -> buffer.get(bytes,)@ -> LOOP { -> bytes[bytes.length-1]=(byte) i@i<=5 -> Hash.hmacSha1(bytes,this.dhSharedKey,hmac,offset,)@ -> System.arraycopy(hmac,offset,bytes,0,20,)@ } } CATCH(DespotifyException) {}
results[https://github.com/Mobicents/jdiameter/blob/54a49396b12309af8acdf170ef797f916fe025b4/core/jdiameter/impl/src/main/java/org/jdiameter/client/impl/transport/tcp/TCPTransportClient.java][append][2] = -> IF { -> tmp=ByteBuffer.allocate(storage.limit()+data.length*2,)@storage.position()+data.length>=storage.capacity() -> storage.flip()@storage.position()+data.length>=storage.capacity() -> storage.get(tmpData,)@storage.position()+data.length>=storage.capacity() -> tmp.put(tmpData,)@ -> logger.warn("Increase storage size. Current size is {}",storage.array().length,)@storage.position()+data.length>=storage.capacity() } -> TRY { -> storage.put(data,)@ } CATCH(BufferOverflowException) { -> logger.error("Buffer overflow occured",boe,)@ }
results[https://github.com/metamx/druid/blob/3a980b8a6852b35a56167bf48eabef1691cdd557/hll/src/main/java/io/druid/query/aggregation/HyperloglogDruidModule.java][serialize][1] = -> TRY {  -> valueResult=ibmap.values()@ -> buffer=ByteBuffer.allocate(4*indexesResult.length+valueResult.length+8,)@ -> buffer.putInt((int) indexesResult.length,)@ -> buffer.putInt((int) valueResult.length,)@ -> LOOP { -> buffer.putInt(indexesResult[i],)@i<indexesResult.length } -> buffer.put(valueResult,)@ -> buffer.flip()@ -> buffer.get(result,)@ -> str=Base64.encodeBase64String(result,)@ } CATCH(IOException,JsonProcessingException) {}
results[https://github.com/tpietzsch/jAER/blob/348f4eae6836901d67d0072e65cc14a0c0ac75ce/host/java/src/ch/unizh/ini/jaer/chip/dvs320/cDVSTest30.java][formatConfigurationBytes][1] = -> bb=ByteBuffer.allocate(1000,)@ -> biasBytes=super.formatConfigurationBytes(biasgen,)@ -> configBytes=allMuxes.formatConfigurationBytes()@ -> bb.put(configBytes,)@ -> vdac=(byte) thermometerDAC.getBitValue()@ -> bb.put(vdac,)@ -> bb.put(biasBytes,)@ -> LOOP { -> bb.put(ss.getBinaryRepresentation(),)@ } -> configBitBytes=configBits.formatConfigurationBytes()@ -> bb.put(configBitBytes,)@ -> bb.flip()@ -> bb.get(allBytes,)@
results[https://github.com/qiaohe/exhibition/blob/61e732979e5f5dfd129026f5f7b9cca2e816ef8e/src/main/java/cn/mobiledaily/web/controller/QrcodeController.java][getQrcode][1] = -> TRY { -> json=mapper.writeValueAsString(map,)@ -> buffer=ByteBuffer.allocate(200,)@ -> buffer.put(json.getBytes("UTF-8",),)@ -> buffer.flip()@ -> buffer.get(bs,)@ -> codec="MD:"+ByteUtil.byte2ascii(bs,)@ -> LOOP { -> out.write(bs,0,len,)@(len=in.read(bs,0,bs.length,))>0 } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/pagxir/antalk/blob/d685ef966d584f6d53797fef1a5c5248562068ae/src/java/com/zhuri/talk/protocol/PlainSasl.java][toString][1] = -> buffer=ByteBuffer.allocate(1000,)@ -> buffer.put((byte) 0x0,)@ -> TRY { -> buffer.put(mUser.getBytes("UTF-8",),)@ } CATCH(Exception) { -> buffer.put(mUser.getBytes(),)@ } -> buffer.put((byte) 0x0,)@ -> buffer.put(mSecrect.getBytes(),)@ -> buffer.flip()@ -> buffer.get(buf,)@ -> data=Base64Codec.encode(buf,)@
results[https://github.com/enasequence/cramtools/blob/ed07cb4ce821c7102f1742fe023f57d772f98a7c/src/test/java/net/sf/cram/TestByteBufferUtils.java][test3][1] = -> buf=ByteBuffer.allocate(1024*1024*10,)@ -> buf.order(ByteOrder.LITTLE_ENDIAN,)@ -> LOOP { -> LOOP { -> buf.put(value,)@ } } -> buf.flip()@ -> LOOP { -> LOOP { -> buf.get(bytes,)@ -> Assert.assertArrayEquals(value,bytes,)@ } } -> System.out.printf("Direct bytes: buf size %.2f megabytes, write time %dms, read time %dms.\n",buf.limit()/1024f/1024f,writeNanos/1000000,readNanos/1000000,)@
results[https://github.com/preon/preon/blob/b37f568c9b4102e526f6c8f2eaccaa9187bf4edb/preon-binding/src/main/java/org/codehaus/preon/codec/FixedLengthStringCodec.java][encode][1] = -> TRY {  -> bytebuffer=ByteBuffer.allocate(size,)@ -> encoder.encode(CharBuffer.wrap(value,),bytebuffer,true,)@ -> IF { -> bytebuffer.put( new byte[],)@bytebuffer.position()<size } -> bytebuffer.flip()@ -> bytebuffer.get(bytes,)@ -> LOOP { -> bytes[i]=byteConverter.revert(bytes[i],)@i<bytes.length } -> channel.write(bytes,0,size,)@ } CATCH(IOException) {}
results[https://github.com/CSEMike/OneSwarm/blob/033e0b58f88910e3694e787154055b06432a6fb4/oneswarm_f2f/test/edu/washington/cs/oneswarm/f2ftest/OSF2FMessagesTester.java][writeSearchCancel][1] = -> TRY {  -> data=OSF2FMessageFactory.createOSF2FRawMessage(new OSF2FSearchCancel((byte) 1,0,),).getRawData()@ -> buf=ByteBuffer.allocate(40,)@ -> LOOP { -> buf.put(data[i].getBuffer(DirectByteBuffer.SS_MSG,),)@i<data.length } -> buf.flip()@ -> System.out.println("CLIENT: writing searchCancel, "+buf.remaining()+" bytes",)@ -> buf.get(b,)@ -> out.write(b,)@ } CATCH(IOException) {}
results[https://github.com/teodormacicas/jboss_benchmarkIO/blob/2da661fd37a2c398ab5e034bbb08f5bc9f8a8de2/nio2-xnio3-servers/src/main/java/org/jboss/server/xnio3/XnioServer.java][initSession][4] = -> TRY {  -> buffer=ByteBuffer.allocate(512,)@ -> buffer.clear()@ -> nBytes=channel.read(buffer,)@ -> buffer.flip()@ -> buffer.get(bytes,)@ -> System.out.println("["+sessionId+"] "+new String(bytes,).trim(),)@ -> buffer.clear()@ -> buffer.put(response.getBytes(),)@ -> buffer.flip()@ -> channel.write(buffer,)@ } CATCH(IOException) {}
results[https://github.com/CSEMike/OneSwarm/blob/033e0b58f88910e3694e787154055b06432a6fb4/oneswarm_f2f/test/edu/washington/cs/oneswarm/f2ftest/OSF2FMessagesTester.java][writeHandshake][1] = -> TRY {  -> handshake=OSF2FMessageFactory.createOSF2FRawMessage(new OSF2FHandshake((byte) 1, new byte[],),).getRawData()@ -> buf=ByteBuffer.allocate(2000,)@ -> LOOP { -> buf.put(handshake[i].getBuffer(DirectByteBuffer.SS_MSG,),)@i<handshake.length } -> buf.flip()@ -> System.out.println("CLIENT: writing handshake, "+buf.remaining()+" bytes",)@ -> buf.get(data,)@ -> out.write(data,)@ } CATCH(IOException) {}
results[https://github.com/CSEMike/OneSwarm/blob/033e0b58f88910e3694e787154055b06432a6fb4/oneswarm_f2f/test/edu/washington/cs/oneswarm/f2ftest/OSF2FMessagesTester.java][writeTorrentReq][1] = -> TRY {  -> data=OSF2FMessageFactory.createOSF2FRawMessage(new OSF2FMetaInfoReq((byte) 1,0,OSF2FMessage.METAINFO_TYPE_BITTORRENT,0, new byte[],),).getRawData()@ -> buf=ByteBuffer.allocate(40,)@ -> LOOP { -> buf.put(data[i].getBuffer(DirectByteBuffer.SS_MSG,),)@i<data.length } -> buf.flip()@ -> System.out.println("CLIENT: writing writeTorrentReq, "+buf.remaining()+" bytes",)@ -> buf.get(b,)@ -> out.write(b,)@ } CATCH(IOException) {}
results[https://github.com/CSEMike/OneSwarm/blob/033e0b58f88910e3694e787154055b06432a6fb4/oneswarm_f2f/test/edu/washington/cs/oneswarm/f2ftest/OSF2FMessagesTester.java][writeFilelistResp][1] = -> TRY {  -> data=OSF2FMessageFactory.createOSF2FRawMessage(new OSF2FTextSearchResp((byte) 1,OSF2FMessage.FILE_LIST_TYPE_COMPLETE,0,0, new byte[],),).getRawData()@ -> buf=ByteBuffer.allocate(1020,)@ -> LOOP { -> buf.put(data[i].getBuffer(DirectByteBuffer.SS_MSG,),)@i<data.length } -> buf.flip()@ -> System.out.println("CLIENT: writing writeFilelistResp, "+buf.remaining()+" bytes",)@ -> buf.get(b,)@ -> out.write(b,)@ } CATCH(IOException) {}
results[https://github.com/CSEMike/OneSwarm/blob/033e0b58f88910e3694e787154055b06432a6fb4/oneswarm_f2f/test/edu/washington/cs/oneswarm/f2ftest/OSF2FMessagesTester.java][writeChannelSetup][1] = -> TRY {  -> data=OSF2FMessageFactory.createOSF2FRawMessage(new OSF2FHashSearchResp((byte) 1,0x4949494,0x10101010,123456,),).getRawData()@ -> buf=ByteBuffer.allocate(100,)@ -> LOOP { -> buf.put(data[i].getBuffer(DirectByteBuffer.SS_MSG,),)@i<data.length } -> buf.flip()@ -> System.out.println("CLIENT: writing writeChannelSetup, "+buf.remaining()+" bytes",)@ -> buf.get(b,)@ -> out.write(b,)@ } CATCH(IOException) {}
results[https://github.com/teodormacicas/jboss_benchmarkIO/blob/95361b81ab82e4cbec66de3d199ca5d4dbe9096b/src/main/java/org/jboss/nio2/server/async/Nio2AsyncServer.java][initSession][1] = -> TRY {  -> buffer.clear()@ -> future=channel.read(buffer,)@ -> buffer.flip()@ -> buffer.get(bytes,)@ -> System.out.println("["+sessionId+"] "+new String(bytes,).trim(),)@ -> buffer.clear()@ -> buffer.put(response.getBytes(),).flip()@ -> channel.write(buffer,)@ -> buffer.clear()@ } CATCH(Exception) {}
results[https://github.com/CSEMike/OneSwarm/blob/033e0b58f88910e3694e787154055b06432a6fb4/oneswarm_f2f/test/edu/washington/cs/oneswarm/f2ftest/OSF2FMessagesTester.java][writeSearch][1] = -> TRY {  -> data=OSF2FMessageFactory.createOSF2FRawMessage(new OSF2FHashSearch((byte) 1,0x4949494,0x10101010,),).getRawData()@ -> buf=ByteBuffer.allocate(100,)@ -> LOOP { -> buf.put(data[i].getBuffer(DirectByteBuffer.SS_MSG,),)@i<data.length } -> buf.flip()@ -> System.out.println("CLIENT: writing search, "+buf.remaining()+" bytes",)@ -> buf.get(b,)@ -> out.write(b,)@ } CATCH(IOException) {}
results[https://github.com/CSEMike/OneSwarm/blob/033e0b58f88910e3694e787154055b06432a6fb4/oneswarm_f2f/test/edu/washington/cs/oneswarm/f2ftest/OSF2FMessagesTester.java][writeChannelRst][1] = -> TRY {  -> data=OSF2FMessageFactory.createOSF2FRawMessage(new OSF2FChannelReset((byte) 1,0x4949494,),).getRawData()@ -> buf=ByteBuffer.allocate(20,)@ -> LOOP { -> buf.put(data[i].getBuffer(DirectByteBuffer.SS_MSG,),)@i<data.length } -> buf.flip()@ -> System.out.println("CLIENT: writing writeChannelReset, "+buf.remaining()+" bytes",)@ -> buf.get(b,)@ -> out.write(b,)@ } CATCH(IOException) {}
results[https://github.com/CSEMike/OneSwarm/blob/033e0b58f88910e3694e787154055b06432a6fb4/oneswarm_f2f/test/edu/washington/cs/oneswarm/f2ftest/OSF2FMessagesTester.java][writeTorrentResp][1] = -> TRY {  -> data=OSF2FMessageFactory.createOSF2FRawMessage(new OSF2FMetaInfoResp((byte) 1,0,OSF2FMessage.METAINFO_TYPE_BITTORRENT,0,0,0, new byte[],),).getRawData()@ -> buf=ByteBuffer.allocate(1020,)@ -> LOOP { -> buf.put(data[i].getBuffer(DirectByteBuffer.SS_MSG,),)@i<data.length } -> buf.flip()@ -> System.out.println("CLIENT: writing writeTorrentResp, "+buf.remaining()+" bytes",)@ -> buf.get(b,)@ -> out.write(b,)@ } CATCH(IOException) {}
results[https://github.com/CSEMike/OneSwarm/blob/033e0b58f88910e3694e787154055b06432a6fb4/oneswarm_f2f/test/edu/washington/cs/oneswarm/f2ftest/OSF2FMessagesTester.java][writeChannelMsg][1] = -> TRY {  -> data=OSF2FMessageFactory.createOSF2FRawMessage(new OSF2FChannelDataMsg((byte) 1,0x4949494,dbuffer,),).getRawData()@ -> buf=ByteBuffer.allocate(17000,)@ -> LOOP { -> buf.put(data[i].getBuffer(DirectByteBuffer.SS_MSG,),)@i<data.length } -> buf.flip()@ -> System.out.println("CLIENT: writing writeChannelMsg, "+buf.remaining()+" bytes",)@ -> buf.get(b,)@ -> out.write(b,)@ } CATCH(IOException) {}
results[https://github.com/Artaros/jdiameter/blob/0ccc469e59a2c73187e4c50106b3c843f680e814/core/jdiameter/impl/src/main/java/org/jdiameter/client/impl/transport/tls/TLSTransportClient.java][append][2] = -> IF { -> tmp=ByteBuffer.allocate(storage.limit()+data.length*2,)@storage.position()+data.length>=storage.capacity() -> storage.flip()@storage.position()+data.length>=storage.capacity() -> storage.get(tmpData,)@storage.position()+data.length>=storage.capacity() -> tmp.put(tmpData,)@ -> logger.warn("Increase storage size. Current size is {}",storage.array().length,)@storage.position()+data.length>=storage.capacity() } -> TRY { -> storage.put(data,)@ } CATCH(BufferOverflowException) { -> logger.error("Buffer overflow occured",boe,)@ } -> LOOP { -> messageReseived=seekMessage(storage,)@ }
results[https://github.com/teodormacicas/jboss_benchmarkIO/blob/a66a59c8ec1ba6dad9daeefccae4fc70fc0b69e3/nio2-xnio3-netty-servers/src/main/java/org/jboss/server/nio2/NioServer.java][initSession][3] = -> TRY {  -> buffer.clear()@ -> future=channel.read(buffer,)@ -> buffer.flip()@ -> buffer.get(bytes,)@ -> System.out.println("["+sessionId+"] "+new String(bytes,).trim(),)@ -> buffer.clear()@ -> buffer.put(response.getBytes(),).flip()@ -> channel.write(buffer,).get()@ -> buffer.clear()@ } CATCH(Exception) {}
results[https://github.com/JustAnother1/Friends-United/blob/61f4cd3bea30b0da31babd922515348c700f0f31/src/org/FriendsUnited/NetworkLayer/PacketQueue/NIOPacketQueue.java][handleWrite][1] = -> LOOP { -> writeBuffer.clear()@!(false==queue.isEmpty()) -> buf=queue.get(0,)@false==queue.isEmpty() -> writeBuffer.put(buf,)@!(false==queue.isEmpty()) -> TRY { -> writeBuffer.flip()@!(false==queue.isEmpty()) -> socketChannel.write(writeBuffer,)@!(false==queue.isEmpty()) } CATCH(IOException) { -> log.error(Tool.fromExceptionToString(e,),)@!(false==queue.isEmpty()) } -> IF { -> remainderSize=writeBuffer.remaining()@writeBuffer.remaining()>0 && !(false==queue.isEmpty()) -> writeBuffer.get(remainder,)@writeBuffer.remaining()>0 && !(false==queue.isEmpty()) -> queue.add(0,remainder,)@!(writeBuffer.remaining()>0) && false==queue.isEmpty() -> return @writeBuffer.remaining()>0 && false==queue.isEmpty() } }
results[https://github.com/ikeji/openjdk7-jdk/blob/c445903c23d3316d31b5171130aaf714c23f3446/test/javax/crypto/Cipher/ByteBuffers.java][crypt][3] = -> TRY {  -> out.clear()@ -> out.put( new byte[],)@ -> out.clear()@ -> cipher.update(in,out,)@ -> IF { -> throw new Exception("Buffer not consumed",)@in.hasRemaining() } -> cipher.doFinal(in,out,)@!(in.hasRemaining()) -> IF { -> throw new Exception("Buffer not consumed",)@in.hasRemaining() } -> out.flip()@!(in.hasRemaining()) -> out.get(b,)@!(in.hasRemaining()) -> IF { -> throw new Exception("Encryption output mismatch",)@Arrays.equals(outBytes,b,)==false && !(in.hasRemaining()) } } CATCH(Exception) {}
results[https://github.com/apavlo/h-store/blob/25a80256cec83311639ded7d109005fc9bc9ecb6/src/frontend/edu/mit/hstore/VoltProcedureListener.java][hackWritePasswordOk][1] = -> output=ByteBuffer.allocate(100,)@ -> output.put((byte) 0x0,)@ -> output.put((byte) 0x0,)@ -> output.putInt(0x0,)@ -> output.putLong(0x0,)@ -> output.putLong(0x0,)@ -> output.putInt(0x0,)@ -> output.putInt(BUILD_STRING.length(),)@ -> TRY { -> output.put(BUILD_STRING.getBytes("UTF-8",),)@ } CATCH(UnsupportedEncodingException) { -> throw new RuntimeException(e,)@ } -> output.flip()@ -> output.get(message,)@ -> assert output.remaining()==0@ -> blocked=connection.write(message,)@
results[https://github.com/deruelle/mobicents/blob/dde07c4bdd4059a6a9ce39cc65a2331edcec9e5c/servers/diameter/core/jdiameter/impl/src/main/java/org/jdiameter/client/impl/transport/tcp/TCPTransportClient.java][append][1] = -> IF { -> tmp=ByteBuffer.allocate(storage.limit()+data.length*2,)@storage.position()+data.length>=storage.capacity() -> storage.flip()@storage.position()+data.length>=storage.capacity() -> storage.get(tmpData,)@storage.position()+data.length>=storage.capacity() -> tmp.put(tmpData,)@ -> IF { -> logger.log(Level.FINE,"Increase storage size. Current size is",storage.array().length,)@storage.position()+data.length>=storage.capacity() && logger.isLoggable(Level.FINE,) } } -> TRY { -> storage.put(data,)@ } CATCH(BufferOverflowException) { -> logger.log(Level.WARNING,"Buffer overflow occured",boe,)@ } -> LOOP { -> messageReseived=seekMessage(storage,)@ }
results[https://github.com/jamesblackburn/cdt-core/blob/8be329185be1c6ec22c46a82b0a7d74edab9d460/parser/org/eclipse/cdt/core/parser/CodeReader.java][decodeLargeFile][1] = -> TRY {  -> in=ByteBuffer.allocate(chunk,)@ -> LOOP { -> channel.read(in,)@ -> in.flip()@ -> offset+=in.limit()@offset<isize -> cr=decoder.decode(in,out,offset>=isize,)@offset<isize -> remainingBytes=in.remaining()@ -> IF { -> in.clear()@ } ELSE { -> in.get(rest,)@ -> in.clear()@ -> in.put(rest,)@ } } } CATCH(IOException) {}
results[https://github.com/CSEMike/OneSwarm/blob/033e0b58f88910e3694e787154055b06432a6fb4/oneswarm_f2f/test/edu/washington/cs/oneswarm/f2ftest/SSLClient.java][<init>][1] = -> TRY {  -> TRY { -> bb=ByteBuffer.allocate(40,)@ -> bb.put((byte) OSF2FHandshake.ONESWARM_PROTOCOL.length(),)@ -> bb.put(OSF2FMessage.ONESWARM_PROTOCOL.getBytes(),)@ -> bb.put(OSF2FHandshake.OS_FLAGS,)@ -> bb.flip()@ -> bb.get(b,)@ -> System.out.println(OneSwarmSslTools.bytesToHex(b,),)@ -> out.write(b,)@ } CATCH(IOException) { -> e.printStackTrace()@ } } CATCH(KeyManagementException,NoSuchAlgorithmException,KeyStoreException,CertificateException,UnrecoverableKeyException,IOException,InterruptedException) {}
results[https://github.com/JustAnother1/Friends-United/blob/716e588026e78c5572f8e3b6fa7b1c49347e573b/src/net/FriendsUnited/NodeLevel/RemoteNode.java][handleWrite][1] = -> LOOP { -> writeBuffer.clear()@!(false==queue.isEmpty()) -> buf=queue.get(0,)@false==queue.isEmpty() -> writeBuffer.put(MAGIC,)@!(false==queue.isEmpty()) -> writeBuffer.put(VERSION,)@!(false==queue.isEmpty()) -> writeBuffer.put((byte) 0xff&buf.length/256%256,)@!(false==queue.isEmpty()) -> writeBuffer.put((byte) 0xff&buf.length%256,)@!(false==queue.isEmpty()) -> writeBuffer.put(buf,)@!(false==queue.isEmpty()) -> TRY { -> writeBuffer.flip()@!(false==queue.isEmpty()) -> socketChannel.write(writeBuffer,)@!(false==queue.isEmpty()) } CATCH(IOException) { -> log.error(Tool.fromExceptionToString(e,),)@!(false==queue.isEmpty()) } -> IF { -> remainderSize=writeBuffer.remaining()@writeBuffer.remaining()>0 && !(false==queue.isEmpty()) -> writeBuffer.get(remainder,)@writeBuffer.remaining()>0 && !(false==queue.isEmpty()) -> queue.add(0,remainder,)@!(writeBuffer.remaining()>0) && false==queue.isEmpty() -> return @writeBuffer.remaining()>0 && false==queue.isEmpty() } }
results[https://github.com/apavlo/h-store/blob/fd0b3f89191005371002435ab24e60891306431d/src/frontend/edu/brown/hstore/VoltProcedureListener.java][hackWritePasswordOk][1] = -> output=ByteBuffer.allocate(100,)@ -> output.put((byte) 0x0,)@ -> output.put((byte) 0x0,)@ -> output.putInt(VoltProcedureListener.this.hostId,)@ -> output.putLong(VoltProcedureListener.this.connectionId.incrementAndGet(),)@ -> output.putLong(VoltProcedureListener.this.handler.getInstanceId(),)@ -> output.putInt(0x0,)@ -> output.putInt(BUILD_STRING.length(),)@ -> TRY { -> output.put(BUILD_STRING.getBytes("UTF-8",),)@ } CATCH(UnsupportedEncodingException) { -> throw new RuntimeException(e,)@ } -> output.flip()@ -> output.get(message,)@ -> assert output.remaining()==0@ -> blocked=connection.write(message,)@
results[https://github.com/dozedoff/commonj/blob/0113ea42e68ecc72b9eb7f5b735b42b7682bd446/src/main/java/com/github/dozedoff/commonj/net/GetBinary.java][getRange][1] = -> TRY {  -> dataBuffer=ByteBuffer.allocate(contentLength,)@!(httpCon.getResponseCode()!=206) -> TRY { -> LOOP { -> dataBuffer.put(c,0,count,)@(count=binary.read(c,))!=-1 && !(httpCon.getResponseCode()!=206) } } CATCH(SocketException) { -> logger.warn("SocketException, http response: "+httpCon.getResponseCode(),)@!(httpCon.getResponseCode()!=206) } FINALLY { -> IF { -> binary.close()@!(httpCon.getResponseCode()!=206) && binary!=null } -> closeHttpConnection(httpCon,)@!(httpCon.getResponseCode()!=206) } -> dataBuffer.flip()@!(httpCon.getResponseCode()!=206) -> dataBuffer.get(varBuffer,)@!(httpCon.getResponseCode()!=206) -> dataBuffer.clear()@!(httpCon.getResponseCode()!=206) } CATCH(IOException,PageLoadException) {}
results[https://github.com/elka-projekt/cs-voltdb/blob/8b01731a091d92a069ecc5174a813523d6abdb50/src/frontend/org/voltdb/utils/CompressionService.java][decompressBytes][2] = -> TRY {  -> IF { -> input=ByteBuffer.allocateDirect(Math.max(input.capacity()*2,bytes.length,),)@input.capacity()<bytes.length -> buffers=new IOBuffers(input,output,)@input.capacity()<bytes.length } -> input.clear()@ -> input.put(bytes,)@ -> input.flip()@ -> uncompressedLength=Snappy.uncompressedLength(input,)@ -> IF { -> output=ByteBuffer.allocateDirect(Math.max(output.capacity()*2,uncompressedLength,),)@output.capacity()<uncompressedLength -> buffers=new IOBuffers(input,output,)@output.capacity()<uncompressedLength } -> output.clear()@ -> actualUncompressedLength=Snappy.uncompress(input,output,)@ -> output.get(result,)@ } CATCH(IOException) {}
results[https://github.com/rvs/snappy-java/blob/c884620c8f9a7dda215830d2a46d21ef42656ad9/src/test/java/org/xerial/snappy/SnappyTest.java][bufferOffset][1] = -> TRY {  -> orig=m.getBytes()@ -> input=ByteBuffer.allocateDirect(orig.length+offset,)@ -> input.position(offset,)@ -> input.put(orig,)@ -> input.flip()@ -> input.position(offset,)@ -> maxCompressedLength=Snappy.maxCompressedLength(input.remaining(),)@ -> Snappy.compress(input,compressed,)@ -> uncompressed=ByteBuffer.allocateDirect(uncompressedLength+offset3,)@ -> uncompressed.position(offset3,)@ -> Snappy.uncompress(compressed,uncompressed,)@ -> assertEquals(offset3,uncompressed.position(),)@ -> assertEquals(offset3+uncompressedLength,uncompressed.limit(),)@ -> assertEquals(uncompressedLength,uncompressed.remaining(),)@ -> uncompressed.get(recovered,)@ -> m2=new String(recovered,)@ } CATCH(Exception) {}
results[https://github.com/rvs/snappy-java/blob/c884620c8f9a7dda215830d2a46d21ef42656ad9/src/test/java/org/xerial/snappy/SnappyTest.java][directBuffer][1] = -> TRY {  -> orig=origStr.getBytes()@ -> src=ByteBuffer.allocateDirect(orig.length,)@ -> src.put(orig,)@ -> src.flip()@ -> _logger.debug("input size: "+src.remaining(),)@ -> maxCompressedLen=Snappy.maxCompressedLength(src.remaining(),)@ -> compressedSize=Snappy.compress(src,compressed,)@ -> assertEquals(0,src.position(),)@ -> assertEquals(orig.length,src.remaining(),)@ -> assertEquals(orig.length,src.limit(),)@ -> extract=ByteBuffer.allocateDirect(uncompressedLen,)@ -> uncompressedLen2=Snappy.uncompress(compressed,extract,)@ -> assertEquals(uncompressedLen,extract.remaining(),)@ -> extract.get(b,)@ -> decompressed=new String(b,)@ } CATCH(Exception) {}
results[https://github.com/dozedoff/commonj/blob/0113ea42e68ecc72b9eb7f5b735b42b7682bd446/src/main/java/com/github/dozedoff/commonj/net/GetBinary.java][getViaHttp][1] = -> TRY {  -> dataBuffer=ByteBuffer.allocate(contentLenght,)@!(httpCon.getResponseCode()!=200) -> TRY { -> LOOP { -> dataBuffer.put(c,0,count,)@(count=binary.read(c,))!=-1 && !(httpCon.getResponseCode()!=200) } } CATCH(IOException) { -> retry(url,dataBuffer,contentLenght,)@!(httpCon.getResponseCode()!=200) } CATCH(NullPointerException) { -> logger.error("NullPointerException in GetBinary.getViaHttp",)@!(httpCon.getResponseCode()!=200) } FINALLY { -> IF { -> binary.close()@binary!=null && !(httpCon.getResponseCode()!=200) } -> closeHttpConnection(httpCon,)@!(httpCon.getResponseCode()!=200) } -> dataBuffer.flip()@!(httpCon.getResponseCode()!=200) -> dataBuffer.get(varBuffer,)@!(httpCon.getResponseCode()!=200) -> dataBuffer.clear()@!(httpCon.getResponseCode()!=200) } CATCH(IOException,PageLoadException) {}
results[https://github.com/dozedoff/commonj/blob/c1a8f7cc30e000495c844f7393521e6bdf00ab18/io/GetBinary.java][get][3] = -> TRY {  -> TRY { -> classBuffer.clear()@ -> LOOP { -> classBuffer.put(c,0,count,)@(count=binary.read(c,))!=-1 } -> classBuffer.flip()@ -> classBuffer.get(varBuffer,)@ } CATCH(IOException) { -> throw new IOException("unable to connect to "+url.toString(),)@ } FINALLY { -> IF { -> binary.close()@binary!=null } -> IF { -> thread.disconnect()@thread!=null } -> TRY { -> Thread.sleep(20,)@ } } } CATCH(IOException) {}
results[https://github.com/chototsu/MikuMikuStudio/blob/9bd848aa884de742980627a1e1ad455fb6c0344a/engine/src/jogl2/com/jme3/renderer/jogl/JoglRenderer.java][updateShaderSourceData][1] = -> IF { -> IF { -> IF { -> throw new RendererException("Invalid ID received when trying to create shader.",)@id==-1 && id<=0 } } -> definesCodeData=source.getDefines().getBytes()@!(id==-1) -> sourceCodeData=source.getSource().getBytes()@!(id==-1) -> codeBuf=BufferUtils.createByteBuffer(versionData.length+definesCodeData.length+sourceCodeData.length,)@!(id==-1) -> codeBuf.put(versionData,)@!(id==-1) -> codeBuf.put(definesCodeData,)@!(id==-1) -> codeBuf.put(sourceCodeData,)@!(id==-1) -> codeBuf.flip()@!(id==-1) -> codeBuf.get(array,)@!(id==-1) -> IF { -> length=intBuf1.get(0,)@!(id==-1) -> IF { -> logBuf=BufferUtils.createByteBuffer(length,)@length>3 && !(id==-1) -> gl.getGL2().glGetShaderInfoLog(id,logBuf.limit(),intBuf1,logBuf,)@!(id==-1) -> logBuf.get(logBytes,0,length,)@length>3 && !(id==-1) -> infoLog=new String(logBytes,)@!(id==-1) } } }
results[https://github.com/enasequence/cramtools/blob/ed07cb4ce821c7102f1742fe023f57d772f98a7c/src/main/java/net/sf/cram/structure/ReadTag.java][writeSingleValue][2] = -> buf.clear()@ -> s=(String) value@ -> buf.put(s.getBytes(charset,),)@ -> buf.put((byte) 0,)@ -> buf.put((byte) (Character) value.charValue(),)@ -> buf.putLong((Long) value,)@ -> buf.position(buf.position()-4,)@ -> buf.putInt((Integer) value,)@ -> buf.putShort((Number) value.shortValue(),)@ -> buf.putInt((Number) value.intValue(),)@ -> buf.position(buf.position()-2,)@ -> buf.put((Number) value.byteValue(),)@ -> buf.putShort((Integer) value.shortValue(),)@ -> buf.position(buf.position()-1,)@ -> buf.putFloat((Float) value,)@ -> s=StringUtil.bytesToHexString((byte[]) value,)@ -> buf.put(s.getBytes(charset,),)@ -> buf.put((byte) 0,)@ -> writeArray(value,isUnsignedArray,buf,)@ -> buf.flip()@ -> buf.get(bytes,)@
results[https://github.com/babble/babble/blob/8c313aceb40d91ef22f9ce87abaef87617175f9e/src/main/ed/net/dnsserver/DNSServer.java][run][1] = -> LOOP { -> TRY { -> recv=ByteBuffer.allocateDirect(1024,)@ -> out=ByteBuffer.allocateDirect(1024,)@ -> LOOP { -> TRY { -> recv.clear()@ -> remote=dc.receive(recv,)@ -> recv.flip()@ -> recv.get(bb,)@ -> query=new Message(bb,)@ -> response=process(query,)@ -> out.clear()@ -> out.put(response.toWire(),)@ -> out.flip()@ -> dc.send(out,remote,)@ } CATCH(Exception) { -> LOGGER.error("error handling request",e,)@ } } -> LOGGER.error("error in inf. loop",e,)@ } FINALLY { -> IF { -> TRY { -> dc.close()@dc!=null } } } }
results[https://github.com/jonnywang/mylocal/blob/22d07dd82b10855a0600285d012dc32519ae5a53/java/LogTcpServer/src/com/bi/core/ClientHandler.java][handleRead][1] = -> TRY {  -> LOOP { -> m=client.read(this.readBuffer,)@ } -> this.readBuffer.flip()@ -> this.p=this.readBuffer.position()@ -> this.l=this.readBuffer.limit()@ -> IF { -> IF { -> this.readBuffer.clear()@0==n -> this.writeBuffer.clear()@0==n } ELSE { -> this.readBuffer.rewind()@0==n } -> return @0==n } ELSE { -> IF { -> this.readBuffer.rewind()@0==n && !(n<this.l-this.p) -> return @!(0==n) && n<this.l-this.p } } -> dataLen=this.readBuffer.getInt()@0==n && !(n<this.l-this.p) -> this.readBuffer.get(pack,)@0==n && !(n<this.l-this.p) -> this.readBuffer.compact()@0==n && !(n<this.l-this.p) -> postData=new String(pack,"UTF-8",)@0==n && !(n<this.l-this.p) -> this.writeBuffer.clear()@0==n && !(n<this.l-this.p) -> this.writeBuffer.putInt(responseData.length(),)@0==n && !(n<this.l-this.p) -> this.writeBuffer.put(responseData.getBytes(),)@0==n && !(n<this.l-this.p) } CATCH(IOException) {}
results[https://github.com/jonnywang/mylocal/blob/9e847eb3aeb1cf7013921f3dc2dfc4f512374363/java/LogHttpServer/src/com/bi/core/ClientHandler.java][handleRead][1] = -> TRY {  -> LOOP { -> m=client.read(buffer,)@ } -> IF { -> return @0==n } -> buffer.flip()@!(0==n) -> buffer.get(pack,)@!(0==n) -> Logger.debug("header|total_length=%d|\n%s",n,new String(pack,"UTF-8",),)@!(0==n) -> IF { -> IF { -> header=new String(pack,"UTF-8",).split("\r\n",)@!(0==n) && pack[last]==(byte) 0x0A&&pack[last-1]==(byte) 0x0D&&pack[last-2]==(byte) 0x0A&&pack[last-3]==(byte) 0x0D && pack[0]==(byte) 'G'&&pack[1]==(byte) 'E'&&pack[2]==(byte) 'T' } } ELSE { -> IF { -> IF { -> header=new String(pack,0,eofp-4,"UTF-8",).split("\r\n",)@!(0==n) && !(pack[0]==(byte) 'G'&&pack[1]==(byte) 'E'&&pack[2]==(byte) 'T') && eofp>0 && pack[0]==(byte) 'P'&&pack[1]==(byte) 'O'&&pack[2]==(byte) 'S'&&pack[3]==(byte) 'T' -> IF { -> clientRequestData=new String(pack,eofp,data_length,"UTF-8",)@!(0==n) && data_length==tmp_data_length && !(pack[0]==(byte) 'G'&&pack[1]==(byte) 'E'&&pack[2]==(byte) 'T') && eofp>0 && pack[0]==(byte) 'P'&&pack[1]==(byte) 'O'&&pack[2]==(byte) 'S'&&pack[3]==(byte) 'T' } } } } -> response_header=String.format("HTTP/1.1 200OK\r\nContent-Type:text/html; charset=utf-8\r\nContent-Length: %d\r\n\r\n%s",responseData.length(),responseData,)@!(0==n) -> buffer.clear()@!(0==n) -> buffer.put(response_header.getBytes(),)@!(0==n) } CATCH(IOException) {}
results[https://github.com/dozedoff/commonj/blob/c1a8f7cc30e000495c844f7393521e6bdf00ab18/io/GetBinary.java][getViaHttp][3] = -> TRY {  -> TRY { -> LOOP { -> classBuffer.put(c,0,count,)@(count=binary.read(c,))!=-1 } } CATCH(SocketException) { -> TRY { -> Thread.sleep(5000,)@ } } CATCH(Exception) { -> this.offset=classBuffer.position()@ -> logger.warning("GetBinary failed, reason: "+se.getLocalizedMessage()+"  -> "+classBuffer.position()+"/"+contentLenght+"  "+url.toString(),)@ -> httpCon.disconnect()@ -> return getRange(url,offset,contentLenght-1,)@ } CATCH(NullPointerException) { -> logger.severe("NullPointerException in GetBinary.getViaHttp",)@ } FINALLY { -> IF { -> binary.close()@binary!=null } -> IF { -> httpCon.disconnect()@httpCon!=null -> TRY { -> Thread.sleep(20,)@ } } } -> classBuffer.flip()@ -> classBuffer.get(varBuffer,)@ -> classBuffer.clear()@ } CATCH(IOException,PageLoadException) {}
results[https://github.com/Smartupz/tigase-server/blob/147be59062e1ee9f9a50e6a107a7737274459161/src/main/java/tigase/net/IOService.java][readData][1] = -> TRY {  -> TRY { -> tmpBuffer=socketIO.read(socketInput,)@ -> IF { -> IF { -> IF { -> tmpBuffer=ByteBuffer.allocate(partialCharacterBytes.length+oldTmpBuffer.remaining()+2,)@tmpBuffer!=null && !(socketIO.bytesRead()>0) -> tmpBuffer.put(partialCharacterBytes,)@partialCharacterBytes!=null && tmpBuffer!=null && !(socketIO.bytesRead()>0) -> tmpBuffer.put(oldTmpBuffer,)@tmpBuffer!=null && !(socketIO.bytesRead()>0) -> tmpBuffer.flip()@tmpBuffer!=null && !(socketIO.bytesRead()>0) -> oldTmpBuffer.clear()@!(tmpBuffer!=null) && !(socketIO.bytesRead()>0) } -> IF { -> cb=CharBuffer.allocate(tmpBuffer.remaining()*4,)@tmpBuffer!=null && !(socketIO.bytesRead()>0) && cb.capacity()<tmpBuffer.remaining()*4 } -> cr=decoder.decode(tmpBuffer,cb,false,)@tmpBuffer!=null && !(socketIO.bytesRead()>0) -> IF { -> throw new MalformedInputException(tmpBuffer.remaining(),)@socketIO.bytesRead()>0 && cr.isMalformed() && tmpBuffer!=null } -> IF { -> tmpBuffer.get(partialCharacterBytes,)@tmpBuffer!=null && !(socketIO.bytesRead()>0) && !(cr.isMalformed()) && cr.isUnderflow()&&tmpBuffer.remaining()>0 } -> tmpBuffer.clear()@tmpBuffer!=null && !(socketIO.bytesRead()>0) && !(cr.isMalformed()) -> return result@socketIO.bytesRead()>0 && tmpBuffer!=null && !(cr.isMalformed()) } } } CATCH(BufferUnderflowException) { -> resizeInputBuffer()@ } CATCH(Exception) { -> IF { -> log.log(Level.FINEST,"Socket: "+socketIO+", Exception reading data",eof,)@log.isLoggable(Level.FINEST,) } -> forceStop()@ } } CATCH(IOException) {}
results[https://github.com/apache/incubator-tajo/blob/680b6b73001ba1828690ed28de299d5931dfa517/core/src/main/java/tajo/storage/RowStoreUtil.java][toBytes][3] = -> bb=ByteBuffer.allocate(size,)@ -> LOOP { -> col=schema.getColumn(i,)@i<schema.getColumnNum() -> bb.put(tuple.get(i,).asByte(),)@i<schema.getColumnNum() -> bb.put(tuple.get(i,).asByte(),)@i<schema.getColumnNum() -> bb.put(tuple.get(i,).asByte(),)@i<schema.getColumnNum() -> bb.putShort(tuple.get(i,).asShort(),)@i<schema.getColumnNum() -> bb.putInt(tuple.get(i,).asInt(),)@i<schema.getColumnNum() -> bb.putLong(tuple.get(i,).asLong(),)@i<schema.getColumnNum() -> bb.putFloat(tuple.get(i,).asFloat(),)@i<schema.getColumnNum() -> bb.putDouble(tuple.get(i,).asDouble(),)@i<schema.getColumnNum() -> _string=tuple.get(i,).asByteArray()@i<schema.getColumnNum() -> bb.putInt(_string.length,)@ -> bb.put(_string,)@ -> bytes=tuple.get(i,).asByteArray()@i<schema.getColumnNum() -> bb.putInt(bytes.length,)@ -> bb.put(bytes,)@ -> ipBytes=tuple.getIPv4Bytes(i,)@i<schema.getColumnNum() -> bb.put(ipBytes,)@ -> bb.put(tuple.getIPv6Bytes(i,),)@i<schema.getColumnNum() } -> bb.flip()@ -> bb.get(buf,)@
results[https://github.com/dozedoff/commonj/blob/ec4859e460c0500391576c986f38075651f49097/src/net/GetBinary.java][getRange][3] = -> TRY {  -> TRY { -> LOOP { -> classBuffer.put(c,0,count,)@(count=binary.read(c,))!=-1 } } CATCH(SocketException) { -> logger.warning("SocketException, http response: "+httpCon.getResponseCode(),)@ -> IF { -> TRY { -> Thread.sleep(5000,)@!(failCount<=maxRetry) } } CATCH(Exception) { -> this.offset=classBuffer.position()@!(failCount<=maxRetry) -> httpCon.disconnect()@!(failCount<=maxRetry) -> return getRange(url,offset,contentLenght-1,)@failCount<=maxRetry } ELSE { -> logger.warning("Buffer position at failure: "+classBuffer.position()+"  URL: "+url.toString(),)@!(failCount<=maxRetry) -> httpCon.disconnect()@!(failCount<=maxRetry) } } FINALLY { -> IF { -> binary.close()@binary!=null } -> IF { -> httpCon.disconnect()@httpCon!=null -> TRY { -> Thread.sleep(20,)@ } } } -> IF { -> logger.info("GetBinary Successful -> "+classBuffer.position()+"/"+contentLenght+", "+failCount+" tries, "+url.toString(),)@failCount!=0 } -> classBuffer.flip()@ -> classBuffer.get(varBuffer,)@ -> classBuffer.clear()@ } CATCH(IOException,PageLoadException) {}
results[https://github.com/apache/incubator-tajo/blob/a8646fbf58f99f149b68089a439de850299d26fd/tajo-core/tajo-core-storage/src/main/java/org/apache/tajo/storage/RowStoreUtil.java][toBytes][1] = -> bb=ByteBuffer.allocate(size,)@ -> LOOP { -> col=schema.getColumn(i,)@i<schema.getColumnNum() -> bb.put(tuple.get(i,).asByte(),)@i<schema.getColumnNum() -> bb.put(tuple.get(i,).asByte(),)@i<schema.getColumnNum() -> bb.put(tuple.get(i,).asByte(),)@i<schema.getColumnNum() -> bb.putShort(tuple.get(i,).asInt2(),)@i<schema.getColumnNum() -> bb.putInt(tuple.get(i,).asInt4(),)@i<schema.getColumnNum() -> bb.putLong(tuple.get(i,).asInt8(),)@i<schema.getColumnNum() -> bb.putFloat(tuple.get(i,).asFloat4(),)@i<schema.getColumnNum() -> bb.putDouble(tuple.get(i,).asFloat8(),)@i<schema.getColumnNum() -> _string=tuple.get(i,).asByteArray()@i<schema.getColumnNum() -> bb.putInt(_string.length,)@ -> bb.put(_string,)@ -> bb.putInt(tuple.get(i,).asInt4(),)@i<schema.getColumnNum() -> bb.putLong((TimestampDatum) tuple.get(i,).getMillis(),)@i<schema.getColumnNum() -> bytes=tuple.get(i,).asByteArray()@i<schema.getColumnNum() -> bb.putInt(bytes.length,)@ -> bb.put(bytes,)@ -> ipBytes=tuple.getIPv4Bytes(i,)@i<schema.getColumnNum() -> bb.put(ipBytes,)@ -> bb.put(tuple.getIPv6Bytes(i,),)@i<schema.getColumnNum() } -> bb.flip()@ -> bb.get(buf,)@
results[https://github.com/auxgroup-sanxing/Sesame/blob/73d92d6fa71437d52f77b379897130adc332eef4/sesame-codec/src/main/java/com/sanxing/sesame/codec/impl/Decode8583.java][decodeMessage][1] = -> TRY {  -> TRY { -> bs=BitMap.getBitset(recvBuf,)@ -> LOOP { } ELSE { -> IF { -> IF { -> eleValue=getFField(recvBuf,len,blank,compress,align,charset,elementType,)@!(elements.hasNext()) && "string".equals(elementType,) && !(bs.get(id-1,)) && "F".equals(kind,) } ELSE { -> IF { -> recvBuf.get(temp,)@!(elements.hasNext()) && !(bs.get(id-1,)) && "F".equals(kind,) -> buf=ByteBuffer.allocate(len,)@!(elements.hasNext()) && !(bs.get(id-1,)) && "F".equals(kind,) -> CodecUtil.setByteOrder(endian,buf,)@!(elements.hasNext()) && !(bs.get(id-1,)) && "F".equals(kind,) -> buf.put(temp,)@!(elements.hasNext()) && !(bs.get(id-1,)) && "F".equals(kind,) -> buf.flip()@!(elements.hasNext()) && !(bs.get(id-1,)) && "F".equals(kind,) -> childOfElementMessage.addContent(""+buf.getInt(),)@!(elements.hasNext()) && !(bs.get(id-1,)) && "F".equals(kind,) } ELSE { -> IF { -> recvBuf.get(temp,)@!(elements.hasNext()) && !(bs.get(id-1,)) && "F".equals(kind,) -> childOfElementMessage.addContent(HexBinary.encode(temp,),)@!(elements.hasNext()) && !(bs.get(id-1,)) && "F".equals(kind,) } } } } ELSE { -> IF { -> eleValue=getVField(recvBuf,headLen,headBlank,compress,headAlign,headCompress,headRadix,elementType,charset,elementName,)@!(elements.hasNext()) && "V".equals(kind,) && !(bs.get(id-1,)) && "F".equals(kind,) } ELSE { -> throw new FormatException("element format,attribute kind value is:["+kind+"]error",)@elements.hasNext() && !("F".equals(kind,)) && !(!(bs.get(id-1,))) && !("V".equals(kind,)) } } } -> IF { -> throw new FormatException("bit map error! bitBuffer is not match with schema!",)@!(tempBs.equals(bs,)) && !(elements.hasNext()) } } CATCH(Exception) { -> throw new FormatException(e.getMessage(),e,)@ } } CATCH(FormatException) {}
results[https://github.com/apache/incubator-tajo/blob/e2f4798b09b2efccfe14a6eac46055d3b6c72ffb/tajo-storage/src/main/java/org/apache/tajo/storage/RowStoreUtil.java][toBytes][1] = -> bb=ByteBuffer.allocate(size,)@ -> LOOP { -> col=schema.getColumn(i,)@i<schema.size() -> bb.put(tuple.get(i,).asByte(),)@i<schema.size() -> bb.put(tuple.get(i,).asByte(),)@i<schema.size() -> bb.put(tuple.get(i,).asByte(),)@i<schema.size() -> bb.putShort(tuple.get(i,).asInt2(),)@i<schema.size() -> bb.putInt(tuple.get(i,).asInt4(),)@i<schema.size() -> bb.putLong(tuple.get(i,).asInt8(),)@i<schema.size() -> bb.putFloat(tuple.get(i,).asFloat4(),)@i<schema.size() -> bb.putDouble(tuple.get(i,).asFloat8(),)@i<schema.size() -> _string=tuple.get(i,).asByteArray()@i<schema.size() -> bb.putInt(_string.length,)@ -> bb.put(_string,)@ -> bb.putInt(tuple.get(i,).asInt4(),)@i<schema.size() -> bb.putLong(tuple.get(i,).asInt8(),)@i<schema.size() -> bytes=tuple.get(i,).asByteArray()@i<schema.size() -> bb.putInt(bytes.length,)@ -> bb.put(bytes,)@ -> ipBytes=tuple.get(i,).asByteArray()@i<schema.size() -> bb.put(ipBytes,)@ -> bb.put(tuple.get(i,).asByteArray(),)@i<schema.size() } -> bb.flip()@ -> bb.get(buf,)@
results[https://github.com/open2jamorg/open2jam/blob/5e09662a87f23070778c30665f696110c1ceff71/src/org/open2jam/parser/OJMParser.java][parseOMC][2] = -> TRY {  -> buffer=f.getChannel().map(java.nio.channels.FileChannel.MapMode.READ_ONLY,4,16,)@ -> buffer.order(java.nio.ByteOrder.LITTLE_ENDIAN,)@ -> unk1=buffer.getShort()@ -> unk2=buffer.getShort()@ -> wav_start=buffer.getInt()@ -> ogg_start=buffer.getInt()@ -> filesize=buffer.getInt()@ -> LOOP { -> buffer=f.getChannel().map(java.nio.channels.FileChannel.MapMode.READ_ONLY,file_offset,56,)@file_offset<ogg_start -> buffer.order(java.nio.ByteOrder.LITTLE_ENDIAN,)@ -> buffer.get(sample_name,)@ -> audio_format=buffer.getShort()@ -> num_channels=buffer.getShort()@ -> sample_rate=buffer.getInt()@ -> bit_rate=buffer.getInt()@ -> block_align=buffer.getShort()@ -> bits_per_sample=buffer.getShort()@ -> data=buffer.getInt()@ -> chunk_size=buffer.getInt()@ -> buffer=f.getChannel().map(java.nio.channels.FileChannel.MapMode.READ_ONLY,file_offset,chunk_size,)@file_offset<ogg_start -> buffer.order(java.nio.ByteOrder.LITTLE_ENDIAN,)@ -> buffer.get(buf,)@ -> IF { -> buf=rearrange(buf,)@ -> buf=acc_xor(buf,)@ } -> buffer=ByteBuffer.allocateDirect(buf.length,)@ -> buffer.put(buf,)@ -> buffer.flip()@ -> buffer_id=SoundManager.newBuffer(buffer,bits_per_sample,num_channels,sample_rate,)@ } -> LOOP { -> buffer=f.getChannel().map(java.nio.channels.FileChannel.MapMode.READ_ONLY,file_offset,36,)@file_offset<filesize -> buffer.order(java.nio.ByteOrder.LITTLE_ENDIAN,)@ -> buffer.get(sample_name,)@ -> sample_size=buffer.getInt()@ -> buffer=f.getChannel().map(java.nio.channels.FileChannel.MapMode.READ_ONLY,file_offset,sample_size,)@file_offset<filesize -> buffer.order(java.nio.ByteOrder.LITTLE_ENDIAN,)@ -> buffer_id=SoundManager.newBuffer(new OggInputStream(new ByteBufferInputStream(buffer,),),)@ } } CATCH(IOException) {}
results[https://github.com/open2jamorg/open2jam/blob/cebb4f14878681ee312c5a2a04e05de007e012ec/parsers/src/org/open2jam/parsers/OJMParser.java][parseOMC][1] = -> TRY {  -> buffer=f.getChannel().map(java.nio.channels.FileChannel.MapMode.READ_ONLY,4,16,)@ -> buffer.order(java.nio.ByteOrder.LITTLE_ENDIAN,)@ -> unk1=buffer.getShort()@ -> unk2=buffer.getShort()@ -> wav_start=buffer.getInt()@ -> ogg_start=buffer.getInt()@ -> filesize=buffer.getInt()@ -> LOOP { -> buffer=f.getChannel().map(java.nio.channels.FileChannel.MapMode.READ_ONLY,file_offset,56,)@file_offset<ogg_start -> buffer.order(java.nio.ByteOrder.LITTLE_ENDIAN,)@ -> buffer.get(byte_name,)@ -> sample_name=ByteHelper.toString(byte_name,)@ -> audio_format=buffer.getShort()@ -> num_channels=buffer.getShort()@ -> sample_rate=buffer.getInt()@ -> bit_rate=buffer.getInt()@ -> block_align=buffer.getShort()@ -> bits_per_sample=buffer.getShort()@ -> data=buffer.getInt()@ -> chunk_size=buffer.getInt()@ -> buffer=f.getChannel().map(java.nio.channels.FileChannel.MapMode.READ_ONLY,file_offset,chunk_size,)@file_offset<ogg_start -> buffer.order(java.nio.ByteOrder.LITTLE_ENDIAN,)@ -> buffer.get(buf,)@ -> IF { -> buf=rearrange(buf,)@ -> buf=OMC_xor(buf,)@ } -> buffer=ByteBuffer.allocateDirect(buf.length,)@ -> buffer.put(buf,)@ -> buffer.flip()@ -> audioData=new SampleData(new ByteBufferInputStream(buffer,),header,sample_name,)@ } -> LOOP { -> buffer=f.getChannel().map(java.nio.channels.FileChannel.MapMode.READ_ONLY,file_offset,36,)@file_offset<filesize -> buffer.order(java.nio.ByteOrder.LITTLE_ENDIAN,)@ -> buffer.get(byte_name,)@ -> sample_name=ByteHelper.toString(byte_name,)@ -> sample_size=buffer.getInt()@ -> buffer=f.getChannel().map(java.nio.channels.FileChannel.MapMode.READ_ONLY,file_offset,sample_size,)@file_offset<filesize -> buffer.order(java.nio.ByteOrder.LITTLE_ENDIAN,)@ -> audioData=new SampleData(new ByteBufferInputStream(buffer,),SampleData.Type.OGG,sample_name,)@ } } CATCH(IOException) {}
results[https://github.com/jonnywang/mylocal/blob/9e847eb3aeb1cf7013921f3dc2dfc4f512374363/java/LogHttpServer/src/com/bi/core/ClientHandler.java][formatBiRequestData][2] = -> charset=Charset.forName("UTF-8",)@ -> biLogData=ByteBuffer.allocate(2048,)@ -> biLogData.putInt(LogUtil.getTimestamp(),)@ -> IF { -> biLogData.putInt(Integer.parseInt(requestData.get("time",).toString(),),)@null!=requestData.get("time",) } ELSE { -> biLogData.putInt(0,)@ } -> IF { -> biLogData.putInt(Integer.parseInt(requestData.get("event",).toString(),),)@null!=requestData.get("event",) } ELSE { -> biLogData.putInt(-1,)@ } -> IF { -> IF { -> uid=String.format("%0"+50-requestData.get("uid",).toString().length()+"d%s",0,requestData.get("uid",),)@null!=requestData.get("uid",) && requestData.get("uid",).toString().length()<50 } ELSE { -> uid=requestData.get("uid",).substring(0,50,)@!(requestData.get("uid",).toString().length()<50) && null!=requestData.get("uid",) } } ELSE { -> uid=String.format("%050d",0,)@ } -> biLogData.put(uid.getBytes(charset,),)@ -> LOOP { -> datalen+=(null!=requestData.get(p,))?requestData.get(p,).length():0@ } -> biLogData.putShort(datalen,)@ -> LOOP { -> biLogData.putShort((null!=requestData.get(p,))?(short) requestData.get(p,).length():0,)@ } -> LOOP { -> IF { -> biLogData.put(requestData.get(p,).toString().getBytes(charset,),)@null!=requestData.get(p,) } } -> biLogData.flip()@ -> biLogData.get(logContent,)@ -> biLogData.clear()@ -> Logger.bi((null!=requestData.get("time",))?Integer.parseInt(requestData.get("time",),):LogUtil.getTimestamp(),logContent,)@
results[https://github.com/dCache/dcache/blob/2feef4b0157fb721f1285e69b720f1c64249ea6e/modules/dCacheJUnit/org/dcache/util/SimpleGSIEngineTest.java][testSSLv3WrapUnwrap][2] = -> TRY {  -> srcBuffer=ByteBuffer.allocate(TCP_BUFFER_SIZE,)@ -> inputString="Hello world".getBytes()@ -> prepareEngineForUnwrap(header,inputString,)@ -> srcBuffer.put(inputString,).flip()@ -> result=_testEngine.wrap(srcBuffer,dstBuffer,)@ -> dstBuffer2=ByteBuffer.allocate(TCP_BUFFER_SIZE,)@ -> result=_testEngine.unwrap(dstBuffer,dstBuffer2,)@ -> dstBuffer2.flip()@ -> dstBuffer2.get(unwrapResult,)@ -> assertArrayEquals(inputString,unwrapResult,)@ } CATCH(GSSException,IOException) {}
results[https://github.com/dCache/dcache/blob/2feef4b0157fb721f1285e69b720f1c64249ea6e/modules/dCacheJUnit/org/dcache/util/SimpleGSIEngineTest.java][testSSLv2WrapUnwrap][4] = -> TRY {  -> srcBuffer=ByteBuffer.allocate(TCP_BUFFER_SIZE,)@ -> inputString="Hello world".getBytes()@ -> prepareEngineForUnwrap(header,inputString,)@ -> srcBuffer.put(inputString,).flip()@ -> result=_testEngine.wrap(srcBuffer,dstBuffer,)@ -> srcBuffer.clear()@ -> result=_testEngine.unwrap(dstBuffer,srcBuffer,)@ -> srcBuffer.flip()@ -> srcBuffer.get(unwrapResult,)@ -> assertArrayEquals(inputString,unwrapResult,)@ } CATCH(GSSException,IOException) {}
results[https://github.com/john-tornblom/TVHGuide/blob/e6546e42ca8f8380d784d1693b4fa661e5284e03/src/org/tvheadend/tvhguide/htsp/HTSMessage.java][serializeBinary][2] = -> TRY {  -> buf=ByteBuffer.allocate(Short.MAX_VALUE,)@ -> LOOP { -> sub=serializeBinary(key.toString(),value,)@ -> buf.put(sub,)@ } -> buf.flip()@ -> buf.get(bBuf,)@ } CATCH(IOException) {}
results[https://github.com/twitter/bookkeeper/blob/13a6b77636b5ec9e45feffe6bc3804e17430886d/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java][<init>][2] = -> TRY {  -> IF { -> bb=ByteBuffer.allocate(HEADER_SIZE,)@!(fn.exists()) -> bb.put(MAGIC_WORD,)@!(fn.exists()) -> bb.putInt(formatVersion,)@!(fn.exists()) -> bb.flip()@!(fn.exists()) -> fc.write(bb,)@!(fn.exists()) } ELSE { -> bb=ByteBuffer.allocate(HEADER_SIZE,)@!(fn.exists()) -> c=fc.read(bb,)@!(fn.exists()) -> bb.flip()@!(fn.exists()) -> IF { -> bb.get(first4,)@!(fn.exists()) -> IF { -> formatVersion=bb.getInt()@!(fn.exists()) } } -> IF { -> throw new IOException(err,)@!(!(fn.exists())) && formatVersion<MIN_COMPAT_JOURNAL_FORMAT_VERSION||formatVersion>CURRENT_JOURNAL_FORMAT_VERSION } } } CATCH(IOException) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/9da4913d0479bedb0c9940a47cf16ee774c123fb/test/javax/crypto/CipherSpi/DirectBBRemaining.java][encrypt][2] = -> TRY {  -> random.nextBytes(testdata,)@ -> expected=cipher.doFinal(testdata,)@ -> LOOP { -> inBB.clear()@ -> outBB.clear()@ -> inBB.put(testdata,)@ -> inBB.flip()@ -> cipher.update(inBB,outBB,)@ -> IF { -> throw new Exception("buffer not empty",)@inBB.hasRemaining() } -> cipher.doFinal(inBB,outBB,)@!(inBB.hasRemaining()) -> outBB.flip()@!(inBB.hasRemaining()) -> IF { -> throw new Exception("incomplete encryption output, expected "+expected.length+" bytes but was only "+outBB.remaining()+" bytes",)@!(inBB.hasRemaining()) && outBB.remaining()!=expected.length } -> outBB.get(encrypted,)@!(outBB.remaining()!=expected.length) && !(inBB.hasRemaining()) -> IF { -> throw new Exception("bad encryption output",)@!(outBB.remaining()!=expected.length) && !(inBB.hasRemaining()) && !(Arrays.equals(expected,encrypted,)) } -> IF { -> throw new Exception("Internal buffers still held data!",)@!(Arrays.equals(cipher.doFinal(),cipher.doFinal(),)) && !(!(Arrays.equals(expected,encrypted,))) && !(outBB.remaining()!=expected.length) && !(inBB.hasRemaining()) } } } CATCH(Exception) {}
results[https://github.com/niloc132/mauve-gwt/blob/ab97ffbf30dfe377d3046183399f63f44ebf7445/gnu/testlet/java/nio/channels/FileChannel/offsetSingleDirectBuffer.java][test][1] = -> TRY { -> data="qwertyuiopasdfghjklzxcvbnm".getBytes("UTF-8",)@ -> out=ByteBuffer.allocateDirect(50,)@ -> out.put(data,)@ -> out.flip()@ -> out.position(5,)@ -> in=ByteBuffer.allocateDirect(50,)@ -> numBytes=fc.write(out,)@ -> in.position(5,)@ -> numRead=fcIn.read(in,)@ -> harness.check(in.position(),data.length,"Buffer position",)@ -> System.arraycopy(data,5,oldData,0,21,)@ -> in.flip()@ -> in.position(5,)@ -> in.get(newData,)@ -> harness.check(Arrays.equals(newData,oldData,),"File content",)@ } CATCH(UnsupportedEncodingException) { -> harness.fail("Unsupported Encoding",)@ } CATCH(SecurityException) { -> harness.fail("Unexpected exception: "+e,)@ } CATCH(FileNotFoundException) { -> harness.fail("Unexpected exception: "+e,)@ } CATCH(IOException) { -> harness.fail("Unexpected exception: "+e,)@ }
results[https://github.com/niloc132/mauve-gwt/blob/ab97ffbf30dfe377d3046183399f63f44ebf7445/gnu/testlet/java/nio/channels/FileChannel/offsetSingleBuffer.java][test][1] = -> TRY { -> data="qwertyuiopasdfghjklzxcvbnm".getBytes("UTF-8",)@ -> out=ByteBuffer.allocate(50,)@ -> out.put(data,)@ -> out.flip()@ -> out.position(5,)@ -> in=ByteBuffer.allocate(50,)@ -> numBytes=fc.write(out,)@ -> in.position(5,)@ -> numRead=fcIn.read(in,)@ -> harness.check(in.position(),data.length,"Buffer position",)@ -> in.flip()@ -> System.arraycopy(data,5,oldData,0,21,)@ -> in.position(5,)@ -> in.get(newData,)@ -> harness.check(Arrays.equals(oldData,newData,),"File content",)@ } CATCH(UnsupportedEncodingException) { -> harness.fail("Unsupported Encoding",)@ } CATCH(SecurityException) { -> harness.fail("Unexpected exception: "+e,)@ } CATCH(FileNotFoundException) { -> harness.fail("Unexpected exception: "+e,)@ } CATCH(IOException) { -> harness.fail("Unexpected exception: "+e,)@ }
results[https://github.com/sphereority/sphereority/blob/3c7e2981942b82971b4fc23980e25e27aa3de61a/patrick/CliTest.java][main][1] = -> TRY { -> bytes=LoginMessage.getLoginMessage("user1","password1",)@ -> System.out.println(LoginMessage.getMessageString(bytes,),)@ -> buf=ByteBuffer.allocate(4096,)@ -> buf.put(bytes,)@ -> buf.flip()@ -> numwritten=channel.write(buf,)@ -> buf.clear()@ -> numread=channel.read(buf,)@ -> buf.flip()@ -> buf.get(bytes,)@ -> IF { -> port=LoginMessage.getPort(bytes,)@LoginMessage.isLoginSuccessMessage(bytes,) -> playerid=LoginMessage.getPlayerId(bytes,)@LoginMessage.isLoginSuccessMessage(bytes,) -> mcastString=LoginMessage.getMulticastAddress(bytes,)@LoginMessage.isLoginSuccessMessage(bytes,) -> bytes=LoginMessage.getLoginSuccessMessage(playerid,null,localport,)@LoginMessage.isLoginSuccessMessage(bytes,) -> buf.clear()@ -> buf.put(bytes,)@LoginMessage.isLoginSuccessMessage(bytes,) -> buf.flip()@ -> channel.write(buf,)@ -> bytes=dm.getByteMessage()@LoginMessage.isLoginSuccessMessage(bytes,) -> buf.clear()@ -> buf.put(bytes,)@LoginMessage.isLoginSuccessMessage(bytes,) -> buf.flip()@ -> channel.write(buf,)@ } } CATCH(Exception) { -> e.printStackTrace()@ }
results[https://github.com/elka-projekt/cs-voltdb/blob/8b01731a091d92a069ecc5174a813523d6abdb50/tests/frontend/org/voltdb/client/TestDistributer.java][run][2] = -> TRY { -> LOOP { -> IF { -> usernameBuffer=ByteBuffer.allocate(usernameLength,)@ -> LOOP { -> client.read(usernameBuffer,)@usernameBuffer.remaining()>0 && client!=null } -> usernameBuffer.flip()@ -> passwordBuffer=ByteBuffer.allocate(20,)@ -> LOOP { -> client.read(passwordBuffer,)@client!=null && passwordBuffer.remaining()>0 } -> passwordBuffer.flip()@ -> usernameBuffer.get(usernameBytes,)@ -> passwordBuffer.get(passwordBytes,)@ -> username=new String(usernameBytes,)@ -> responseBuffer=ByteBuffer.allocate(34,)@ -> responseBuffer.putInt(30,)@ -> responseBuffer.put((byte) 0,)@ -> responseBuffer.put((byte) 0,)@ -> responseBuffer.putInt(0,)@ -> responseBuffer.putLong(0,)@ -> responseBuffer.putLong(0,)@ -> responseBuffer.putInt(0,)@ -> responseBuffer.putInt(0,)@ -> responseBuffer.flip()@ -> client.write(responseBuffer,)@client!=null } } } CATCH(IOException) { -> e.printStackTrace()@ }
results[https://github.com/benothman/mod_cluster-proxy/blob/b8ad558bc91f6401e8b2331d2e3b0643ba730808/src/main/java/org/jboss/cluster/proxy/CLNodeService.java][checkHealth0][1] = -> TRY { -> channel=connectionManager.getChannel(node.getHostname(),node.getPort(),)@ -> IF { -> IF { -> return true@channel.isOpen() && !(node.isOptionsEnabled()) } -> buffer.clear()@!(!(node.isOptionsEnabled())) && channel.isOpen() -> buffer.put(getRequest(node,).getBytes(),).flip()@!(!(node.isOptionsEnabled())) && channel.isOpen() -> channel.writeBytes(buffer,)@!(!(node.isOptionsEnabled())) && channel.isOpen() -> buffer.clear()@!(!(node.isOptionsEnabled())) && channel.isOpen() -> n=channel.readBytes(buffer,)@!(!(node.isOptionsEnabled())) && channel.isOpen() -> IF { -> throw new ClosedChannelException()@!(!(node.isOptionsEnabled())) && channel.isOpen() && n<0 } ELSE { -> buffer.flip()@!(!(node.isOptionsEnabled())) && channel.isOpen() && n<0 -> buffer.get(bytes,)@!(!(node.isOptionsEnabled())) && channel.isOpen() && n<0 -> response=new String(bytes,)@!(!(node.isOptionsEnabled())) && channel.isOpen() && n<0 -> IF { -> connectionManager.recycle(node,channel,)@!(!(node.isOptionsEnabled())) && channel.isOpen() && n<0 && status==200&&"OK".equalsIgnoreCase(phrase,) -> return true@!(!(node.isOptionsEnabled())) && channel.isOpen() && !(n<0) && status==200&&"OK".equalsIgnoreCase(phrase,) } ELSE { -> IF { -> node.setOptionsEnabled(false,)@!(!(node.isOptionsEnabled())) && channel.isOpen() && n<0 && !(status==501) && status==200&&"OK".equalsIgnoreCase(phrase,) -> connectionManager.recycle(node,channel,)@!(!(node.isOptionsEnabled())) && channel.isOpen() && n<0 && !(status==501) && status==200&&"OK".equalsIgnoreCase(phrase,) -> return true@status==501 && !(!(node.isOptionsEnabled())) && channel.isOpen() && !(status==200&&"OK".equalsIgnoreCase(phrase,)) && !(n<0) } } } } ELSE { -> return false@!(channel.isOpen()) } }
results[https://github.com/babble/babble/blob/8c313aceb40d91ef22f9ce87abaef87617175f9e/src/main/ed/net/httpserver/Replay.java][_send][1] = -> TRY {  -> IF { -> return null@request.getHeader("X-Replay",)!=null } -> headers=headerString.getBytes()@!(request.getHeader("X-Replay",)!=null) -> IF { -> bb.position(0,)@!(request.getHeader("X-Replay",)!=null) -> bb.limit(bb.capacity(),)@!(request.getHeader("X-Replay",)!=null) } ELSE { -> bb=ByteBuffer.allocateDirect(length,)@!(request.getHeader("X-Replay",)!=null) } -> bb.put(headers,)@!(request.getHeader("X-Replay",)!=null) -> bb.flip()@!(request.getHeader("X-Replay",)!=null) -> TRY { -> written=sock.write(bb,)@!(request.getHeader("X-Replay",)!=null) -> LOOP { -> _readBuffer.position(0,)@!(request.getHeader("X-Replay",)!=null) -> _readBuffer.limit(_readBuffer.capacity(),)@!(request.getHeader("X-Replay",)!=null) -> IF { -> _readBuffer.flip()@!(request.getHeader("X-Replay",)!=null) -> _readBuffer.get(buf,)@!(request.getHeader("X-Replay",)!=null) -> firstChunk=new String(buf,)@firstChunk==null && !(request.getHeader("X-Replay",)!=null) } } } FINALLY { -> IF { -> TRY { -> sock.close()@sock!=null && !(request.getHeader("X-Replay",)!=null) } } } } CATCH(IOException) {}
results[https://github.com/daisy-consortium/pipeline-mod-braille/blob/7e73cde0a8f719d60efc96c9698cdcef2e1eaf49/liblouis-calabash/src/main/java/org/daisy/pipeline/liblouis/calabash/TranslateFileProvider.java][run][2] = -> TRY {  -> TRY { -> IF { -> LOOP { -> LOOP { -> IF { -> throw new XProcException(step.getNode(),"All configuration files must be placed in temp-dir",)@name.contains("/",) && files!=null&&files.hasNext() && styles!=null && styles.moreDocuments() } } } } -> IF { -> LOOP { -> LOOP { -> IF { -> throw new XProcException(step.getNode(),"All semantic action files must be placed in temp-dir",)@name.contains("/",) && semantics.moreDocuments() && files!=null&&files.hasNext() && !(styles!=null) && semantics!=null } } } } -> buffer=ByteBuffer.allocate((int) brailleFile.length(),)@!(semantics!=null) && !(styles!=null) -> LOOP { -> totalStream.read(bytes,)@!(semantics!=null) && (available=totalStream.available())>0 && !(styles!=null) -> buffer.put(bytes,)@!(semantics!=null) && !(styles!=null) } -> assert buffer.position()>=bodyLength@!(semantics!=null) && !(styles!=null) -> buffer.flip()@!(semantics!=null) && !(styles!=null) -> IF { -> buffer.get(bytes,)@!(semantics!=null) && !(styles!=null) -> treeWriter.addText(new String(bytes,"UTF-8",),)@!(semantics!=null) && !(styles!=null) -> buffer.get(bytes,)@!(semantics!=null) && !(styles!=null) -> treeWriter.addText(new String(bytes,"UTF-8",),)@!(semantics!=null) && !(styles!=null) } ELSE { -> buffer.get(bytes,)@!(semantics!=null) && !(styles!=null) -> treeWriter.addText(new String(bytes,"UTF-8",),)@!(semantics!=null) && !(styles!=null) } } CATCH(Exception) { -> throw new XProcException(step.getNode(),e,)@ } } CATCH(SaxonApiException) {}
results[https://github.com/enasequence/cramtools/blob/ed07cb4ce821c7102f1742fe023f57d772f98a7c/src/main/java/net/sf/cram/structure/CompressionHeader.java][write][1] = -> TRY {  -> mapBuf=ByteBuffer.allocate(1024*100,)@ -> ByteBufferUtils.writeUnsignedITF8(5,mapBuf,)@ -> mapBuf.put(RN_readNamesIncluded.getBytes(),)@ -> mapBuf.put((byte) (readNamesIncluded)?1:0,)@ -> mapBuf.put(AP_alignmentPositionIsDelta.getBytes(),)@ -> mapBuf.put((byte) (AP_seriesDelta)?1:0,)@ -> mapBuf.put(RR_referenceRequired.getBytes(),)@ -> mapBuf.put((byte) (referenceRequired)?1:0,)@ -> mapBuf.put(SM_substitutionMatrix.getBytes(),)@ -> mapBuf.put(substitutionMatrix.getEncodedMatrix(),)@ -> mapBuf.put(TD_tagIdsDictionary.getBytes(),)@ -> dBytes=dictionaryToByteArray()@ -> ByteBufferUtils.writeUnsignedITF8(dBytes.length,mapBuf,)@ -> mapBuf.put(dBytes,)@ -> mapBuf.flip()@ -> mapBuf.get(mapBytes,)@ -> os.write(mapBytes,)@ -> mapBuf=ByteBuffer.allocate(1024*100,)@ -> ByteBufferUtils.writeUnsignedITF8(size,mapBuf,)@ -> LOOP { -> mapBuf.put((byte) eKey.name().charAt(0,),)@ -> mapBuf.put((byte) eKey.name().charAt(1,),)@ -> mapBuf.put((byte) 0xFF&params.id.ordinal(),)@ -> ByteBufferUtils.writeUnsignedITF8(params.params.length,mapBuf,)@ -> mapBuf.put(params.params,)@ } -> mapBuf.flip()@ -> mapBuf.get(mapBytes,)@ -> os.write(mapBytes,)@ -> mapBuf=ByteBuffer.allocate(1024*100,)@ -> ByteBufferUtils.writeUnsignedITF8(tMap.size(),mapBuf,)@ -> LOOP { -> ByteBufferUtils.writeUnsignedITF8(eKey,mapBuf,)@ -> mapBuf.put((byte) 0xFF&params.id.ordinal(),)@ -> ByteBufferUtils.writeUnsignedITF8(params.params.length,mapBuf,)@ -> mapBuf.put(params.params,)@ } -> mapBuf.flip()@ -> mapBuf.get(mapBytes,)@ -> os.write(mapBytes,)@ } CATCH(IOException) {}
