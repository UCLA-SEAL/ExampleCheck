results[https://github.com/orfjackal/jumi/blob/78fd1ce302d2eb1b1f57383f7f1b2e939c53cb5b/jumi-core/src/test/java/fi/jumi/core/ipc/buffer/MappedByteBufferSequenceTest.java][read_only_buffers_cannot_be_modified][1] = -> buffer=sequence.get(0,)@ -> buffer.get()@ -> buffer.put((byte) 1,)@
results[https://github.com/xiaomo/rvm/blob/325039bbbcf0e46dfce9e0ef800a1c962971e981/code/red5Server/1_0/test/org/red5/io/mp4/impl/MP4ReaderTest.java][bytesToByte][5] = -> buf=ByteBuffer.allocate(1,)@ -> buf.put(data,)@ -> buf.flip()@ -> return buf.get()@
results[https://github.com/hazelcast/hazelcast/blob/f41222cbac23b683a67e1a07d1343c045ad634bb/hazelcast/src/main/java/com/hazelcast/ascii/memcache/IncrementCommand.java][writeTo][5] = -> LOOP { -> destination.put(response.get(),)@destination.hasRemaining()&&response.hasRemaining() } -> return !(response.hasRemaining())@
results[https://github.com/kaupppa/Javnce/blob/a50c286bfa80ef1cc8de57d220262263716645aa/core/src/main/java/org/javnce/rfb/messages/MsgClientCutText.java][parseData][16] = -> LOOP { -> temp.put(buffer.get(),)@0!=buffer.remaining()&&0!=temp.remaining() } -> return 0==temp.remaining()@
results[https://github.com/rafalkrupinski/jetty/blob/4de5b0ad636ea0f571f379775b158f2580b80b28/jetty-websocket/websocket-core/src/test/java/org/eclipse/jetty/websocket/protocol/MaskedByteBuffer.java][putPayload][4] = -> len=payload.remaining()@ -> LOOP { -> buffer.put((byte) payload.get()^mask[i%4],)@i<len }
results[https://github.com/GeoLatte/geolatte-geom/blob/28e97ee65b1ae44eabbc4fc87a166bf4f521b250/src/test/java/org/geolatte/geom/codec/TestByteBuffer.java][test_put_byte][1] = -> expected=(byte) 0xFF@ -> byteBuffer=ByteBuffer.allocate(1,)@ -> byteBuffer.put(expected,)@ -> byteBuffer.rewind()@ -> assertEquals(expected,byteBuffer.get(),)@
results[https://github.com/open-infinity/cmt/blob/165a6f88b287d62b641fa936e7760ae6744535ac/cloud/cloud-backup/src/main/java/org/openinfinity/cloud/application/backup/job/Tools.java][copyByteBuffer][1] = -> i=b1.position()@ -> LOOP { -> b2.put(b1.get(),)@i<b1.limit() }
results[https://github.com/disy/jSCSI/blob/7dc545a6574be01137cb7b88d24a4282e10282ac/jSCSI-deprecated/src/org/jscsi/parser/datasegment/AbstractDataSegment.java][setDataBuffer][2] = -> src.position(off,)@ -> LOOP { -> dataBuffer.put(src.get(),)@src.hasRemaining()&&++n<length } -> dataBuffer.rewind()@
results[https://github.com/restlet/restlet-framework-java/blob/2a89bf08ba1faf9f2f1ff09fd145fd973d2538b9/modules/org.restlet.ext.nio/src/org/restlet/ext/nio/internal/NioUtils.java][copy][2] = -> maxBuffer=Math.min(sourceBuffer.remaining(),targetBuffer.remaining(),)@ -> LOOP { -> targetBuffer.put(sourceBuffer.get(),)@ }
results[https://github.com/hazelcast/hazelcast/blob/f963f01955d48c55538ee86b08004a22232a050b/hazelcast/src/main/java/com/hazelcast/ascii/memcache/TouchCommand.java][writeTo][5] = -> IF { -> response=ByteBuffer.wrap(STORED,)@response==null } -> LOOP { -> destination.put(response.get(),)@destination.hasRemaining()&&response.hasRemaining() } -> return !(response.hasRemaining())@
results[https://github.com/apache/httpcore/blob/d4f8d6a9e4c925748930e44da4a6d77fb5e4eed3/httpcore-nio/src/test/java/org/apache/http/mockup/ReadableByteChannelMockup.java][read][9] = -> TRY {  -> LOOP { -> dst.put(this.currentChunk.get(),)@dst.hasRemaining()&&this.currentChunk.hasRemaining() } } CATCH(IOException) {}
results[https://github.com/wordrak/kryo/blob/48b0874b7c87b1f6f5c3d2fedcb4e244ee271e46/src/main/java/com/esotericsoftware/kryo/compress/Delta.java][readMore][2] = -> tbuf.compact()@ -> LOOP { -> tbuf.put(targetBuffer.get(),)@targetBuffer.hasRemaining()&&tbuf.hasRemaining() } -> tbuf.flip()@ -> IF { -> return false@!(tbuf.hasRemaining()) }
results[https://github.com/barchart/barchart-feed-ddf/blob/f0cd607923cfab31c0f5eb82c986d490c806566e/barchart-feed-ddf-message/src/test/java/com/barchart/feed/ddf/message/provider/TestDX_XQ_Quote.java][testDecodeEncodeXML][2] = -> source=ByteBuffer.wrap(baXQ1,)@ -> source.get()@ -> msg.decodeXML(source,)@ -> target=ByteBuffer.allocate(baXQ1.length,)@ -> target.put((byte) '%',)@ -> msg.encodeXML(target,)@ -> arraySource=source.array()@ -> arrayTarget=target.array()@
results[https://github.com/hxzon/java-lib-hxzon/blob/ba161a9baa38c5e6c049557fb7be97745d192917/code/java/java nio/nioserver-2008-02-03/src/java/org/ronsoft/nioserver/impl/OutputQueueImpl.java][topUpBuffer][1] = -> IF { -> dest.put(src,)@src.remaining()<=dest.remaining() } ELSE { -> LOOP { -> dest.put(src.get(),)@!(src.remaining()<=dest.remaining()) && dest.hasRemaining() } }
results[https://github.com/frostwire/frostwire-android/blob/1c169f39ddd65545c8391442fc7a5dd456e7ba12/vuze/azureus2/src/com/aelitis/azureus/core/networkmanager/impl/TransportHelperFilterStreamXOR.java][cryptoOut][20] = -> TRY {  -> rem=source_buffer.remaining()@ -> LOOP { -> b=source_buffer.get()@ -> b=(byte) b^mask[++write_position]@ -> target_buffer.put(b,)@ } } CATCH(IOException) {}
results[https://github.com/alevy/comet/blob/6dc1704c63d6d912776766e9973740367280f6f5/src/dht/org/gudy/azureus2/core3/util/MD5.java][completeFinalBuffer][5] = -> LOOP { -> finalBuffer.put(buffer.get(),)@buffer.remaining()>0&&finalBuffer.remaining()>0 && !(finalBuffer.position()==0) } -> IF { -> finalBuffer.position(0,)@!(finalBuffer.position()==0) && finalBuffer.remaining()==0 -> transform(finalBuffer,)@!(finalBuffer.position()==0) && finalBuffer.remaining()==0 -> finalBuffer.position(0,)@!(finalBuffer.position()==0) && finalBuffer.remaining()==0 }
results[https://github.com/aguocool/workspace/blob/a6e10394d7333dab97fa9fc06b4231af6cbe949c/InnerClass/src/io/LockingMappedFiles.java][run][5] = -> TRY { -> LOOP { -> buff.put((byte) buff.get()+1,)@buff.position()<buff.limit()-1 } } CATCH(IOException) { -> throw new RuntimeException(e,)@ }
results[https://github.com/agueganno/h2geometry/blob/2c08fe1e6440d2205fc27170319a0ddb7ec2d583/h2/src/test/org/h2/test/store/TestObjectDataType.java][test][2] = -> buff=ByteBuffer.allocate(1024,)@ -> buff=ot.write(buff,x,)@ -> buff.put((byte) 123,)@ -> buff.flip()@ -> y=ot.read(buff,)@ -> assertEquals(123,buff.get(),)@ -> assertEquals(0,buff.remaining(),)@
results[https://github.com/kaupppa/Javnce/blob/a50c286bfa80ef1cc8de57d220262263716645aa/desktop-ui/src/main/java/org/javnce/ui/fx/client/VncImage.java][rledecode][4] = -> dst=ByteBuffer.allocate(width*height*bytePerPixel,)@ -> LOOP { -> count=src.get()&0xff@rleSize<=src.remaining()&&bytePerPixel<=dst.remaining() -> src.get(pixel,)@rleSize<=src.remaining()&&bytePerPixel<=dst.remaining() -> LOOP { -> dst.put(pixel,)@rleSize<=src.remaining()&&bytePerPixel<=dst.remaining() } } -> dst.clear()@
results[https://github.com/http-kit/http-kit/blob/c9c0b155a4ab05630d332a7d2da0aaf433889772/src/java/org/httpkit/server/WSDecoder.java][isAvailable][1] = -> LOOP { -> IF { -> tmpBuffer.put(src.get(),)@src.hasRemaining() && tmpBuffer.position()<length } ELSE { -> return false@!(src.hasRemaining()) && tmpBuffer.position()<length } } -> tmpBuffer.flip()@!(tmpBuffer.position()<length)
results[https://github.com/ybrs/hazelcastforked/blob/6d494fa5ef514816a415adb7e2e13314d67bbf87/hazelcast/src/main/java/com/hazelcast/impl/ascii/rest/HttpPostCommand.java][readLine][2] = -> LOOP { -> b=cb.get()@cb.hasRemaining() -> c=(char) b@!(cb.hasRemaining()) -> IF { -> return true@cb.hasRemaining() && c=='\n' } ELSE { -> IF { -> line.put(b,)@!(cb.hasRemaining()) && !(c=='\n') } } }
results[https://github.com/araqne/core/blob/231d21caf62a36be959e19676e1cb709436186c2/araqne-core/src/main/java/org/araqne/test/TelnetStateMachine.java][handleSubNegotiation][2] = -> IF { -> negoBuffer.flip()@!(negoState==State.Option&&isInterpreatAsControl(b,)) && !(negoState==State.Command&&b==TelnetCommand.SE) -> c=negoBuffer.get()@!(negoState==State.Option&&isInterpreatAsControl(b,)) && !(negoState==State.Command&&b==TelnetCommand.SE) -> IF { -> width=negoBuffer.getShort()@!(negoState==State.Option&&isInterpreatAsControl(b,)) && !(negoState==State.Command&&b==TelnetCommand.SE) -> height=negoBuffer.getShort()@!(negoState==State.Option&&isInterpreatAsControl(b,)) && !(negoState==State.Command&&b==TelnetCommand.SE) } -> negoBuffer.clear()@!(negoState==State.Option&&isInterpreatAsControl(b,)) && !(negoState==State.Command&&b==TelnetCommand.SE) -> return @!(negoState==State.Option&&isInterpreatAsControl(b,)) && negoState==State.Command&&b==TelnetCommand.SE } -> negoBuffer.put(b,)@!(negoState==State.Option&&isInterpreatAsControl(b,)) && !(negoState==State.Command&&b==TelnetCommand.SE)
results[https://github.com/teiid/teiid/blob/180dbded03a3b8f71b9340aa76f7d6fed9eae93e/engine/src/main/java/org/teiid/query/function/CharsetUtils.java][decodeLoop][1] = -> LOOP { -> bb.put(in.get(),)@in.hasRemaining() -> IF { -> IF { -> return CoderResult.OVERFLOW@in.hasRemaining() && !(bb.hasRemaining()) } -> bb.flip()@!(in.hasRemaining()) && !(bb.hasRemaining()) -> bb.clear()@!(in.hasRemaining()) && !(bb.hasRemaining()) } }
results[https://github.com/svn2github/H2-Mirror/blob/ee3d94f317646cc288f94b6b781f0683f795a5f7/h2/src/test/org/h2/test/store/TestObjectType.java][test][5] = -> buff=ByteBuffer.allocate(ot.getMaxLength(x,)+1,)@ -> ot.write(buff,x,)@ -> buff.put((byte) 123,)@ -> buff.flip()@ -> y=ot.read(buff,)@ -> assertEquals(123,buff.get(),)@ -> assertEquals(0,buff.remaining(),)@
results[https://github.com/xylifyx/ippclient/blob/db215cb7cba946ab28df688979ac1dc1788dfc15/src/ch/ethz/vppserver/ippclient/dispatch/ResponseHandler.java][getChunkBuffer][2] = -> b=ByteBuffer.allocate(BUFSIZE,)@ -> LOOP { } ELSE { -> LOOP { -> b.put(buf.get(),)@ } } -> b.flip()@
results[https://github.com/MinecraftForge/FML/blob/3dfb54e066ab91e44405706233f2dfffee9add72/src/main/java/cpw/mods/fml/repackage/com/nothome/delta/ByteBufferSeekableSource.java][read][2] = -> TRY {  -> IF { -> return -1@!(cur.hasRemaining()) } -> LOOP { -> dest.put(cur.get(),)@cur.hasRemaining()&&dest.hasRemaining() && !(!(cur.hasRemaining())) } } CATCH(IOException) {}
results[https://github.com/apache/avro/blob/350f09f3cefec53e20762e7862cb37f38c6251e6/lang/java/avro/src/test/java/org/apache/avro/file/codec/CustomCodec.java][decompress][2] = -> TRY {  -> out=ByteBuffer.allocate(in.remaining(),)@ -> LOOP { -> out.put((byte) ~in.get(),)@in.position()<in.capacity() } } CATCH(IOException) {}
results[https://github.com/osi/mulgara/blob/b2b416078bbd9ef2b1790d596cd423398e7da326/src/jar/store-stringpool/src/test/java/org/mulgara/store/stringpool/xa/SPGMonthDayUnitTest.java][testValid][10] = -> buffer=ByteBuffer.wrap( new byte[],)@ -> buffer.putLong(monthDayLong,)@ -> buffer.put((byte) 1,)@ -> buffer.flip()@ -> IF { -> log.debug("Original monthDay long vs. stored long: "+monthDayLong+" vs. "+buffer.getLong(),)@log.isDebugEnabled() -> buffer.get()@ -> buffer.flip()@ } -> gMonthDay=(SPGMonthDayImpl) factory.newSPTypedLiteral(0,buffer,)@
results[https://github.com/lalithsuresh/Scaling-HDFS-NameNode/blob/afc156cc261205fcb9314c60fc89e794bcda1e79/hadoop-mapreduce-project/src/test/mapred/org/apache/hadoop/fs/slive/DataWriter.java][generatePartialSegment][56] = -> buf=ByteBuffer.wrap( new byte[],)@!(byteAm<=0) -> buf.putLong(hasher.generate(offset,),)@!(byteAm<=0) -> allBytes=ByteBuffer.wrap( new byte[],)@!(byteAm<=0) -> buf.rewind()@!(byteAm<=0) -> LOOP { -> allBytes.put(buf.get(),)@!(byteAm<=0) } -> allBytes.rewind()@!(byteAm<=0) -> return new GenerateResult(offset,allBytes,)@!(byteAm<=0)
results[https://github.com/frostwire/frostwire-desktop/blob/ad73e10b91d16904a8dcb86f7b17bb5fb45f5399/vuze/azureus2/src/org/gudy/azureus2/core3/util/SHA1.java][completeFinalBuffer][10] = -> IF { -> return @finalBuffer.position()==0 } -> LOOP { -> finalBuffer.put(buffer.get(),)@buffer.remaining()>0&&finalBuffer.remaining()>0 && !(finalBuffer.position()==0) } -> IF { -> transform(finalBuffer.array(),0,)@!(finalBuffer.position()==0) && finalBuffer.remaining()==0 -> finalBuffer.rewind()@!(finalBuffer.position()==0) && finalBuffer.remaining()==0 }
results[https://github.com/alecgorge/jsonapi/blob/8430fe66eef226fe2105a63ba9c0d16319ff31d2/src/main/java/org/java_websocket/SSLSocketChannel2.java][transfereTo][14] = -> fremain=from.remaining()@ -> toremain=to.remaining()@ -> IF { -> LOOP { -> to.put(from.get(),)@fremain>toremain } -> return limit@fremain>toremain } ELSE { -> to.put(from,)@fremain>toremain }
results[https://github.com/frostwire/frostwire-desktop/blob/90eacf1ef657a5664fd9b5e2e84d819091f9ea3c/common/vuze/test/src/org/gudy/azureus2/core3/util/test/SHA1Old.java][completeFinalBuffer][10] = -> IF { -> return @finalBuffer.position()==0 } -> LOOP { -> finalBuffer.put(buffer.get(),)@buffer.remaining()>0&&finalBuffer.remaining()>0 && !(finalBuffer.position()==0) } -> IF { -> finalBuffer.position(0,)@!(finalBuffer.position()==0) && finalBuffer.remaining()==0 -> transform(finalBuffer,)@!(finalBuffer.position()==0) && finalBuffer.remaining()==0 -> finalBuffer.position(0,)@!(finalBuffer.position()==0) && finalBuffer.remaining()==0 }
results[https://github.com/barchart/barchart-feed-ddf/blob/a86af3c54996f235e1529fc297dc7dc1c9004504/barchart-feed-ddf-message/src/test/java/com/barchart/feed/ddf/message/provider/TestDX_XC_Cuvol.java][testDecodeEncodeXML][1] = -> source=ByteBuffer.wrap(baXC1,)@ -> source.get()@ -> msg.decodeXML(source,)@ -> target=ByteBuffer.allocate(baXC1.length,)@ -> target.put((byte) '%',)@ -> msg.encodeXML(target,)@ -> System.out.println(new String(target.array(),),)@ -> arraySource=source.array()@ -> arrayTarget=target.array()@
results[https://github.com/apavlo/h-store/blob/e1f70e244e03e6adc24af4950455535ee2119e5f/src/frontend/gpl_vcr/org/voltdb/messaging/VoltMessage.java][createMessageFromBuffer][1] = -> buffer.position(HEADER_SIZE,)@ -> buffer.mark()@ -> id=buffer.get()@ -> buffer.reset()@ -> IF { -> ownedBuffer=ByteBuffer.allocate(buffer.capacity(),)@ -> ownedBuffer.position(HEADER_SIZE,)@ -> ownedBuffer.put(buffer,)@ } -> message=instantiate(id,)@
results[https://github.com/disy/jSCSI/blob/7dc545a6574be01137cb7b88d24a4282e10282ac/jSCSI-deprecated/src/org/jscsi/parser/datasegment/BinaryDataSegment.java][transferBytes][2] = -> IF { -> throw new IllegalArgumentException("The given length must be less or equal than the remaining bytes in the destination buffer.",)@dst.remaining()<len } -> LOOP { -> IF { -> dst.put(src.get(),)@!(dst.remaining()<len) && !(i<len) && src.hasRemaining()&&dst.hasRemaining() } ELSE { -> throw new RuntimeException("Error by transferring the bytes in this data segment.",)@!(dst.remaining()<len) && i<len && !(src.hasRemaining()&&dst.hasRemaining()) } }
results[https://github.com/JohannesKlug/hbird/blob/2198450228fbed21fbf66fc8d7693edef3755981/src/transport/payload-codec/src/test/java/org/hbird/transport/payloadcodec/codecparameters/number/UnsignedIntegerCodecParameterTest.java][testInccorectIntTypeEncode][2] = -> LOOP { -> p.setValue(i,)@i<=MAX_UNSIGNED_BYTE -> buffer=ByteBuffer.allocate(1,)@ -> buffer.put((byte) i,).flip()@i<=MAX_UNSIGNED_BYTE -> buffer.order(ByteOrder.LITTLE_ENDIAN,)@ -> littleEndianValue=buffer.get()@ -> littleEndianBuffer=ByteBuffer.allocate(1,)@ -> littleEndianBuffer.put(littleEndianValue,)@ -> expected=BitSetUtility.fromByteArray(littleEndianBuffer.array(),)@ }
results[https://github.com/Mindtoeye/Hoop/blob/6bab89c23948b26a1605a0fda4397284c0b94a8b/src/com/google/common/hash/AbstractStreamingHashFunction.java][putBytes][15] = -> IF { -> buffer.put(readBuffer,)@readBuffer.remaining()<=buffer.remaining() -> return this@readBuffer.remaining()<=buffer.remaining() } -> bytesToCopy=bufferSize-buffer.position()@!(readBuffer.remaining()<=buffer.remaining()) -> LOOP { -> buffer.put(readBuffer.get(),)@!(readBuffer.remaining()<=buffer.remaining()) } -> LOOP { -> process(readBuffer,)@!(readBuffer.remaining()<=buffer.remaining()) && readBuffer.remaining()>=chunkSize } -> buffer.put(readBuffer,)@!(readBuffer.remaining()<=buffer.remaining())
results[https://github.com/org-badiff/badiff/blob/2629b45033337e80983a7bf9cd7bdfbe44b6f1c5/badiff/src/main/java/org/badiff/io/PushbufferInputStream.java][read][1] = -> TRY {  -> r=in.read()@ -> IF { -> IF { -> buf.get()@buf.remaining()==0 -> buf.compact()@buf.remaining()==0 } -> buf.put((byte) r,)@r>=0 } } CATCH(IOException) {}
results[https://github.com/xnio/xnio/blob/1753816e17c26d294bc371ee0af7aa9b8b7c4891/api/src/test/java/org/xnio/BuffersTestCase.java][testUnget][1] = -> buffer=ByteBuffer.allocate(10,)@ -> buffer.put("123456".getBytes(),)@ -> Buffers.unget(buffer,3,)@ -> assertEquals('4',buffer.get(),)@ -> buffer.flip()@ -> TRY { -> Buffers.unget(buffer,3,)@ } -> TRY { -> Buffers.unget(buffer,-1,)@ }
results[https://github.com/rafalkrupinski/jetty/blob/d3a7ddbef095e5884e33b45de34b49a236aeea45/jetty-websocket/websocket-core/src/main/java/org/eclipse/jetty/websocket/parser/Parser.java][copyBuffer][1] = -> amt=Math.min(length,src.remaining(),)@ -> IF { -> mask=frame.getMask()@frame.isMasked() -> LOOP { -> dest.put((byte) src.get()^mask[i%4],)@i<amt } } ELSE { -> src.get(b,0,amt,)@ -> dest.put(b,0,amt,)@ }
results[https://github.com/enasequence/cramtools/blob/79a6825ac4366ec5e3194c1920e077d25e1079eb/src/main/java/net/sf/cram/encoding/arith/rANS_Decoder1_1way.java][rans_uncompress_O1][1] = -> out_sz=out_buf.remaining()@ -> ptr=cp.slice()@ -> ptr.order(ByteOrder.LITTLE_ENDIAN,)@ -> rans0=rans_byte.RansDecInit(ptr,)@ -> LOOP { -> c0=0xFF&D[l0].R[RansDecGet(rans0,TF_SHIFT,)]@ -> out_buf.put((byte) c0,)@ -> IF { -> LOOP { -> rans0=rans0<<8|0xFF&ptr.get()@rans0<RANS_BYTE_L } } }
results[https://github.com/dworkin/reddwarf/blob/dfb26da95fbd3a17096847118351c3d44177301c/sgs-server/src/test/java/com/sun/sgs/test/impl/service/session/TestClientSessionServiceImplv4.java][receivedMessage][1] = -> message.get(messageBytes,)@ -> buf=new MessageBuffer(messageBytes,)@ -> bytes=buf.getByteArray()@ -> System.err.println("DummyClientSessionListener["+name+"] "+"receivedMessage: "+HexDumper.toHexString(bytes,)+"\nthrow exception: "+receivedMessageException,)@ -> IF { -> throw re@receivedMessageException!=null } -> client.sessionListenerReceivedMessages.add(bytes,)@!(receivedMessageException!=null) -> bbuf=ByteBuffer.allocate(bytes.length,)@!(receivedMessageException!=null) -> bbuf.put(bytes,).flip()@!(receivedMessageException!=null) -> sessionRef.get().send(bbuf,)@!(receivedMessageException!=null)
results[https://github.com/GrizzlyNIO/grizzly-mirror/blob/7a200042cae8756d47cb9a7f0702b403efebc565/modules/http/src/main/java/org/glassfish/grizzly/http/util/B2CConverter.java][flushRemainder][1] = -> LOOP { -> remainder.put(tmp_bb.get(),)@remainder.position()>0&&tmp_bb.hasRemaining() -> remainder.flip()@remainder.position()>0&&tmp_bb.hasRemaining() -> cr=decoder.decode(remainder,tmp_cb,false,)@remainder.position()>0&&tmp_bb.hasRemaining() -> IF { -> throw new IllegalStateException("CharChunk is not big enough",)@cr==CoderResult.OVERFLOW && remainder.position()>0&&tmp_bb.hasRemaining() } -> IF { -> remainder.clear()@!(cr==CoderResult.OVERFLOW) && !(remainder.hasRemaining()) && remainder.position()>0&&tmp_bb.hasRemaining() } -> remainder.compact()@!(cr==CoderResult.OVERFLOW) && remainder.position()>0&&tmp_bb.hasRemaining() }
results[https://github.com/samthiriot/genlab/blob/6ff6ce9e38a14397a40e3c72db10f685a4772593/genlab.graphstream.corejar/src/org/graphstream/stream/netstream/DefaultNetStreamDecoder.java][readByteArray][4] = -> TRY { -> IF { -> return null@in.read(data,0,len,)!=len } -> bb=ByteBuffer.allocate(len,)@!(in.read(data,0,len,)!=len) -> bb.put(data,)@!(in.read(data,0,len,)!=len) -> bb.flip()@!(in.read(data,0,len,)!=len) -> LOOP { -> res[i]=bb.get()@!(in.read(data,0,len,)!=len) && i<len } } CATCH(IOException) { -> debug("readBooleanArray: could not read array",)@ -> e.printStackTrace()@ }
results[https://github.com/sigmarkarl/world/blob/4fc8f09bd8c98be19a05f3bed4ff0e6f33406f2d/javafasta/src/org/java_websocket/drafts/Draft.java][readLine][17] = -> sbuf=ByteBuffer.allocate(buf.remaining(),)@ -> LOOP { -> cur=buf.get()@buf.hasRemaining() -> sbuf.put(cur,)@!(buf.hasRemaining()) -> IF { -> sbuf.limit(sbuf.position()-2,)@!(prev==(byte) '\r'&&cur==(byte) '\n') && !(buf.hasRemaining()) -> sbuf.position(0,)@!(prev==(byte) '\r'&&cur==(byte) '\n') && !(buf.hasRemaining()) -> return sbuf@buf.hasRemaining() && prev==(byte) '\r'&&cur==(byte) '\n' } } -> buf.position(buf.position()-sbuf.position(),)@!(buf.hasRemaining())
results[https://github.com/BelieveROM/android_libcore/blob/5aced732888f8737c9c30ddf6e2e16ee911c4a54/benchmarks/regression/ByteBufferScalarVersusVectorBenchmark.java][timeManualByteBufferCopy][21] = -> TRY {  -> src=ByteBufferBenchmark.newBuffer(byteOrder,aligned,bufferType,)@ -> dst=ByteBufferBenchmark.newBuffer(byteOrder,aligned,bufferType,)@ -> LOOP { -> src.position(0,)@ -> dst.position(0,)@ -> LOOP { -> dst.put(src.get(),)@ } } } CATCH(Exception) {}
results[https://github.com/disy/jSCSI/blob/c5550dbb7fa9389f6f1afb355597ba3a2978307f/bundles/initiator/src/main/java/org/jscsi/initiator/connection/state/ReadResponseState.java][readHandleImmediateData][1] = -> TRY {  -> dataSegment=protocolDataUnit.getDataSegment()@ -> LOOP { -> buffer.put(dataSegment.get(),)@buffer.hasRemaining()&&dataSegment.hasRemaining() } -> IF { -> return @parser.getStatus()==SCSIStatus.GOOD } ELSE { -> throw new InternetSCSIException()@!(parser.getStatus()==SCSIStatus.GOOD) } } CATCH(InternetSCSIException) {}
results[https://github.com/graphstream/gs-core/blob/6c49e2bd0f8164ffc1bf568c70098924466dc59b/src/org/graphstream/stream/netstream/packing/Base64Unpacker.java][main][2] = -> source=ByteBuffer.allocate(9,)@ -> source.putInt(-1,).putFloat(0.1f,)@ -> source.put((byte) 'e',)@ -> source.rewind()@ -> bb=b.unpackMessage(packer.packMessage(source,),)@ -> bb.rewind()@ -> System.out.println(bb.getInt(),)@ -> System.out.println(bb.getFloat(),)@ -> System.out.println((char) bb.get(),)@
results[https://github.com/ChioriGreene/ChioriWebServer/blob/25af99a3457360bbb54a71b4a36ff8541ea8d58c/api/src/com/esotericsoftware/kryo/io/ByteBufferInput.java][readAscii][2] = -> LOOP { -> IF { -> return readAscii_slow()@end==limit } -> b=niobuffer.get()@!(end==limit) } -> niobuffer.put(end-1,(byte) niobuffer.get(end-1,)&0x7F,)@ -> niobuffer.position(start,)@ -> niobuffer.get(tmp,)@ -> value=new String(tmp,0,0,end-start,)@ -> niobuffer.put(end-1,(byte) niobuffer.get(end-1,)|0x80,)@ -> niobuffer.position(position,)@
results[https://github.com/GeoLatte/geolatte-geom/blob/cefdae248f9a111dfac4590d836398b6d087edae/src/test/java/org/geolatte/geom/support/PostgisJDBCWithSRIDTestInputs.java][toSRIDPrefixedWKB][1] = -> inBuffer=ByteBuffer.from(hexBase,)@!(base.getExpected(testCase,).isEmpty()) -> inBuffer.setByteOrder(ByteOrder.NDR,)@!(base.getExpected(testCase,).isEmpty()) -> bo=inBuffer.get()@!(base.getExpected(testCase,).isEmpty()) -> type=inBuffer.getInt()@!(base.getExpected(testCase,).isEmpty()) -> bytes=inBuffer.toByteArray()@!(base.getExpected(testCase,).isEmpty()) -> outBuffer=ByteBuffer.allocate(outputSize,)@!(base.getExpected(testCase,).isEmpty()) -> outBuffer.setByteOrder(ByteOrder.NDR,)@!(base.getExpected(testCase,).isEmpty()) -> outBuffer.put(bo,)@!(base.getExpected(testCase,).isEmpty()) -> outBuffer.putInt(type,)@!(base.getExpected(testCase,).isEmpty()) -> outBuffer.putInt(4326,)@!(base.getExpected(testCase,).isEmpty()) -> LOOP { -> outBuffer.put(bytes[i],)@i<bytes.length && !(base.getExpected(testCase,).isEmpty()) } -> return outBuffer.toString()@!(base.getExpected(testCase,).isEmpty())
results[https://github.com/apache/jena/blob/7d85d2b15d5d10cd3da4dc1e27d72f350842a4d4/jena-tdb/src/main/java/com/hp/hpl/jena/tdb/base/file/BufferChannelMem.java][read][1] = -> IF { -> log("read<<["+buffer.capacity()+"]",)@ } -> x=bytes.position()@ -> len=buffer.limit()-buffer.position()@ -> IF { -> len=bytes.remaining()@len>bytes.remaining() } -> LOOP { -> b=bytes.get()@ -> buffer.put(b,)@ }
results[https://github.com/robo-code/robocode/blob/55141be5ad2bbb57425228296254e3fdc97178be/robocode.core/src/main/java/net/sf/robocode/robotpaint/Graphics2DSerialized.java][processTo][1] = -> calls.clear()@ -> calls.mark()@ -> TRY { -> calls.put((byte[]) graphicsCalls,)@ } CATCH(BufferOverflowException) { -> calls.reset()@ -> IF { -> processTo(g,graphicsCalls,)@ } -> calls.clear()@ } -> calls.flip()@ -> calls.order((calls.get()==1)?ByteOrder.BIG_ENDIAN:ByteOrder.LITTLE_ENDIAN,)@
results[https://github.com/disy/jSCSI/blob/c5550dbb7fa9389f6f1afb355597ba3a2978307f/bundles/commons/src/main/java/org/jscsi/parser/datasegment/AbstractDataSegment.java][next][2] = -> IF { -> throw new IllegalArgumentException()@chunkSize<0&&chunkSize>maxChunkSize } -> pos=dataBuffer.position()@!(chunkSize<0&&chunkSize>maxChunkSize) -> dataBuffer.position(cursor,)@!(chunkSize<0&&chunkSize>maxChunkSize) -> data.position(0,).limit(chunkSize,)@!(chunkSize<0&&chunkSize>maxChunkSize) -> LOOP { -> data.put(dataBuffer.get(),)@data.hasRemaining()&&dataBuffer.hasRemaining() && !(chunkSize<0&&chunkSize>maxChunkSize) } -> dataSegmentLength=data.position()@!(chunkSize<0&&chunkSize>maxChunkSize) -> data.limit(totalLength,)@!(chunkSize<0&&chunkSize>maxChunkSize) -> data.rewind()@!(chunkSize<0&&chunkSize>maxChunkSize) -> dataBuffer.position(pos,)@!(chunkSize<0&&chunkSize>maxChunkSize)
results[https://github.com/cm4j/cm4j-all/blob/2543e6c70a6fb559e74e28000c0261d71e61bae3/cm4j-test/src/main/java/com/cm4j/test/syntax/nio/s4_selector/SelectSockets.java][readDataFromSocket][1] = -> TRY {  -> buffer.clear()@ -> LOOP { -> buffer.flip()@(count=socketChannel.read(buffer,))>0 -> LOOP { -> result=buffer.get()@(count=socketChannel.read(buffer,))>0 && buffer.hasRemaining() -> System.out.println("server received:"+(char) result,)@ -> buffer.put(result,)@(count=socketChannel.read(buffer,))>0 && buffer.hasRemaining() -> socketChannel.write(buffer,)@(count=socketChannel.read(buffer,))>0 && buffer.hasRemaining() } -> buffer.clear()@(count=socketChannel.read(buffer,))>0 } } CATCH(Exception) {}
results[https://github.com/pagxir/antalk/blob/938ffa57248d8a8c73acb9ab9ba4e04f46f879f3/src/wave/ssl/SSLChannel.java][read][3] = -> TRY {  -> IF { -> IF { -> return appBytesProduced@appBytesProduced==-1||appBytesProduced==0 && !(peerAppData.hasRemaining()) } } -> limit=Math.min(peerAppData.remaining(),dst.remaining(),)@!(!(peerAppData.hasRemaining())) -> LOOP { -> dst.put(peerAppData.get(),)@!(!(peerAppData.hasRemaining())) } } CATCH(IOException) {}
results[https://github.com/thecookie/Ardor3D/blob/55b913716a9f39f1b6998fca778450c1e6fc3f4c/ardor3d-lwjgl/src/main/java/com/ardor3d/framework/lwjgl/LwjglCanvas.java][_RGB888_to_RGBA8888][1] = -> rgb=rgb888.getData(0,)@ -> rgba8888=BufferUtils.createByteBuffer(size,)@ -> rgb.rewind()@ -> LOOP { -> IF { -> rgba8888.put((byte) 0xFF,)@ } ELSE { -> rgba8888.put(rgb.get(),)@ } } -> return new Image(Image.Format.RGBA8,rgb888.getWidth(),rgb888.getHeight(),rgba8888,)@
results[https://github.com/FoxyCorndog/WorkspaceOld/blob/495cbdb832ea4148e04db196e2c185b5b7e49fee/gafggfds/slick/src/org/newdawn/slick/openal/WaveData.java][convertAudioBytes][30] = -> dest=ByteBuffer.allocateDirect(audio_bytes.length,)@ -> dest.order(ByteOrder.nativeOrder(),)@ -> src=ByteBuffer.wrap(audio_bytes,)@ -> src.order(ByteOrder.LITTLE_ENDIAN,)@ -> IF { -> dest_short=dest.asShortBuffer()@ -> src_short=src.asShortBuffer()@ } ELSE { -> LOOP { -> dest.put(src.get(),)@src.hasRemaining() } } -> dest.rewind()@
results[https://github.com/taktod/myLib/blob/26a53fc1f96b2f989a0a4dd9123a0e75dd3923f1/myLib.MIT/myLib.packet.flv/src/main/java/com/ttProject/packet/flv/FlvHeaderPacket.java][analize][2] = -> type=buffer.get()@ -> buffer.rewind()@ -> data=ByteBuffer.allocate(flvHeader.limit()+(videoSequenceHeader==null)?0:videoSequenceHeader.limit()+(audioSequenceHeader==null)?0:audioSequenceHeader.limit(),)@ -> data.put(flvHeader,)@ -> flvHeader.rewind()@ -> IF { -> data.put(videoSequenceHeader,)@videoSequenceHeader!=null -> videoSequenceHeader.rewind()@videoSequenceHeader!=null } -> IF { -> data.put(audioSequenceHeader,)@audioSequenceHeader!=null -> audioSequenceHeader.rewind()@audioSequenceHeader!=null }
results[https://github.com/uci-cbcl/genomix/blob/0a39165800d42ff61fee2abb4e8549a5bf4f1465/genomix/genomix-core/src/main/java/edu/uci/ics/genomix/dataflow/aggregators/MergeKmerAggregateFactory.java][aggregate][1] = -> TRY {  -> bitmap|=accessor.getBuffer().get(tupleOffset+accessor.getFieldSlotsLength()+fieldStart,)@ -> stateoffset=statetupleOffset+stateAccessor.getFieldSlotsLength()+statefieldStart@ -> buf=ByteBuffer.wrap(data,)@ -> bitmap|=buf.getChar(stateoffset,)@ -> buf.position(stateoffset+1,)@ -> count+=buf.get()@ -> IF { -> count=(byte) max@count>max } -> buf.put(stateoffset,bitmap,)@ -> buf.put(stateoffset+1,count,)@ } CATCH(HyracksDataException) {}
results[https://github.com/buzheng/buzheng-study-java/blob/806c68192742caab7d45b6c523cfbe492b123f63/src/main/java/org/buzheng/study/nio/TestReadOnlyBuffer.java][main][1] = -> buffer=ByteBuffer.allocate(10,)@ -> LOOP { -> buffer.put((byte) i,)@i<buffer.capacity() } -> readonly=buffer.asReadOnlyBuffer()@ -> LOOP { -> b=buffer.get(i,)@i<buffer.capacity() -> buffer.put(i,b,)@i<buffer.capacity() } -> readonly.position(0,)@ -> readonly.limit(buffer.capacity(),)@ -> LOOP { -> System.out.println(readonly.get(),)@readonly.remaining()>0 }
results[https://github.com/cometd/cometd/blob/e166b0f4b186cace98f6911bf261444291de2e1d/cometd-java/wharf-io/src/test/java/com/webtide/wharf/io/async/AsyncServerConnectorWriteZeroTest.java][writeAggressively][1] = -> TRY {  } ELSE { -> IF { -> newBuffer=ByteBuffer.allocate(1,)@ -> newBuffer.put(buffer.get(),)@ -> channel.write(newBuffer,)@ -> return newBuffer.capacity()@ } ELSE { -> result=super.writeAggressively(channel,buffer,)@ } } CATCH(IOException) {}
results[https://github.com/disy/jSCSI/blob/c5550dbb7fa9389f6f1afb355597ba3a2978307f/bundles/commons/src/main/java/org/jscsi/parser/AdditionalHeaderSegment.java][serialize][2] = -> TRY {  -> dst.position(offset,)@ -> IF { -> throw new IllegalArgumentException("Destination array is too small.",)@dst.remaining()<length } -> dst.putShort(length,)@!(dst.remaining()<length) -> dst.put(type.value(),)@!(dst.remaining()<length) -> dst.put(specificField.get(),)@!(dst.remaining()<length) -> LOOP { -> dst.putInt(specificField.getInt(),)@specificField.hasRemaining() && !(dst.remaining()<length) } } CATCH(InternetSCSIException) {}
results[https://github.com/kaupppa/Javnce/blob/83b001030b41813bf63d74d0640c11dfa95aae83/src/main/java/org/javnce/rfb/messages/MsgServerInit.java][parseName][4] = -> IF { -> IF { -> IF { -> length=buffer.getInt()&0xFFFFFFFFL@4<=buffer.remaining() -> nameBuffer=ByteBuffer.allocate((int) length,)@null==nameBuffer } } -> LOOP { -> nameBuffer.put(buffer.get(),)@0!=buffer.remaining()&&0!=nameBuffer.remaining() } -> IF { -> nameBuffer.clear()@0==nameBuffer.remaining() -> nameBuffer.get(temp,)@0==nameBuffer.remaining() -> name=new String(temp,)@null==name } }
results[https://github.com/vyloy/lnvc/blob/38625c0c7f2c0e5c562bcd3cea11043a281b6a54/lvmc/openfire_src/src/java/org/jivesoftware/openfire/net/TLSStreamWriter.java][tlsWrite][4] = -> TRY {  -> buf.hasRemaining()@ -> LOOP { -> tlsBuffer=ByteBuffer.allocate(Math.min(buf.remaining(),wrapper.getAppBuffSize(),),)@ -> LOOP { -> tlsBuffer.put(buf.get(),)@tlsBuffer.hasRemaining()&&buf.hasRemaining() } -> tlsBuffer.flip()@ -> wrapper.wrap(tlsBuffer,tlsOutput,)@ } } CATCH(IOException) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/c445903c23d3316d31b5171130aaf714c23f3446/test/java/nio/channels/ServerSocketChannel/Basic.java][go][3] = -> TRY {  -> bb=ByteBuffer.allocateDirect(100,)@ -> IF { -> throw new Exception("Read failed",)@sc.read(bb,)!=1 } -> bb.flip()@!(sc.read(bb,)!=1) -> b=bb.get()@!(sc.read(bb,)!=1) -> log.println("Server: Read "+b+", writing "+b+1,)@!(sc.read(bb,)!=1) -> bb.clear()@!(sc.read(bb,)!=1) -> bb.put((byte) 43,)@!(sc.read(bb,)!=1) -> bb.flip()@!(sc.read(bb,)!=1) -> IF { -> throw new Exception("Write failed",)@sc.write(bb,)!=1 && !(sc.read(bb,)!=1) } } CATCH(Exception) {}
results[https://github.com/hazelcast/hazelcast/blob/4a923f283aa641f947eed63633e1e584bf570090/hazelcast/src/main/java/com/hazelcast/nio/ascii/SocketTextReader.java][doRead][1] = -> LOOP { -> b=bb.get()@!(commandLineRead)&&bb.hasRemaining() -> c=(char) b@ } ELSE { -> IF { -> commandLine.put(b,)@ } } -> IF { -> IF { -> processCmd(toStringAndClear(commandLine,),)@ } -> IF { -> complete=command.readFrom(bb,)@command!=null } }
results[https://github.com/benruijl/WalledIn/blob/43ae595df781ae50ae96e85eefd53684dc826b04/src/walledin/game/network/client/Client.java][readDatagrams][1] = -> TRY {  -> LOOP { -> buffer.limit(BUFFER_SIZE,)@ -> buffer.rewind()@ -> channel.read(buffer,)@ -> buffer.flip()@ -> ident=buffer.getInt()@ident!=NetworkDataManager.DATAGRAM_IDENTIFICATION } -> type=buffer.get()@ -> buf=ByteBuffer.allocate(6,)@ -> buf.putInt(NetworkDataManager.DATAGRAM_IDENTIFICATION,)@ -> buf.put(NetworkDataManager.ALIVE_MESSAGE,)@ -> buf.flip()@ -> channel.write(buf,)@ } CATCH(IOException) {}
results[https://github.com/ybrs/hazelcastforked/blob/6d494fa5ef514816a415adb7e2e13314d67bbf87/hazelcast/src/main/java/com/hazelcast/nio/ascii/SocketTextReader.java][doRead][1] = -> LOOP { -> b=bb.get()@!(commandLineRead)&&bb.hasRemaining() -> c=(char) b@ } ELSE { -> IF { -> commandLine.put(b,)@ } } -> IF { -> IF { -> processCmd(toStringAndClear(commandLine,),)@ } -> IF { -> complete=command.doRead(bb,)@command!=null } }
results[https://github.com/void256/nifty-gui/blob/5cbd8e893928b49ebc29a0e7aa2e6732e63f5cc3/src/main/java/de/lessvoid/nifty/sound/openal/slick/AiffData.java][convertAudioBytes][20] = -> dest=ByteBuffer.allocateDirect(audio_bytes.length,)@ -> dest.order(ByteOrder.nativeOrder(),)@ -> src=ByteBuffer.wrap(audio_bytes,)@ -> src.order(ByteOrder.BIG_ENDIAN,)@ -> IF { -> dest_short=dest.asShortBuffer()@ -> src_short=src.asShortBuffer()@ } ELSE { -> LOOP { -> b=src.get()@src.hasRemaining() -> IF { -> b=(byte) b+127@ } -> dest.put(b,)@ } } -> dest.rewind()@
results[https://github.com/ttron/lab/blob/2139f978c863b2de04fa565a8df4d2fdbf2ceb8d/HttpCore-4.3/httpcore-nio/src/main/java/org/apache/http/nio/reactor/ssl/SSLIOSession.java][readPlain][1] = -> Args.notNull(dst,"Byte buffer",)@ -> IF { -> this.inPlain.flip()@this.inPlain.position()>0 -> n=Math.min(this.inPlain.remaining(),dst.remaining(),)@this.inPlain.position()>0 -> LOOP { -> dst.put(this.inPlain.get(),)@this.inPlain.position()>0 } -> this.inPlain.compact()@this.inPlain.position()>0 -> return n@this.inPlain.position()>0 } ELSE { -> IF { -> return -1@!(this.inPlain.position()>0) } ELSE { -> return 0@!(this.inPlain.position()>0) } }
results[https://github.com/taktod/myLib/blob/155ea22183193f12a78f19d4c799c3fbba86f425/myLib.MIT/myLib.media.vp6/src/test/java/com/ttProject/media/vp6/test/FileAnalyzeTest.java][test][1] = -> TRY {  -> LOOP { -> IF { -> IF { -> buffer=vTag.getRawData()@vTag.getCodec()==CodecType.ON2VP6 -> data=ByteBuffer.allocate(buffer.remaining(),)@ -> first=buffer.get()@ -> data.put(buffer,)@ -> data.put(first,)@ -> data.flip()@ -> dataChannel=new ByteReadChannel(data,)@ } } } } CATCH(Exception) {}
results[https://github.com/teodormacicas/jboss_benchmarkIO/blob/b06944d950067a094de73c86b923562187b55c14/nio2-xnio3-clients/src/main/java/org/jboss/server/nio2/NioServer.java][initSession][3] = -> TRY {  -> buffer.clear()@ -> future=channel.read(buffer,)@ -> buffer.flip()@ -> buffer.get(bytes,)@ -> System.out.println("["+sessionId+"] "+new String(bytes,).trim(),)@ -> buffer.clear()@ -> buffer.put(response.getBytes(),).flip()@ -> channel.write(buffer,).get()@ -> buffer.clear()@ } CATCH(Exception) {}
results[https://github.com/hugojosefson/neo4j-components-svn/blob/8832e1da94228bc88dce28f0e72bd66ab1677bd2/neo/branches/xa-log-rotate/src/java/org/neo4j/impl/nioneo/store/IdGenerator.java][initGenerator][2] = -> TRY { -> buffer=ByteBuffer.allocate(HEADER_SIZE,)@ -> totalBytesRead=fileChannel.read(buffer,)@ -> buffer.flip()@!(totalBytesRead!=HEADER_SIZE) -> storageStatus=buffer.get()@!(totalBytesRead!=HEADER_SIZE) -> IF { -> throw new StoreFailureException("Sticky generator[ "+fileName+"] delete this id generator and build a new one",)@!(totalBytesRead!=HEADER_SIZE) && storageStatus!=CLEAN_GENERATOR } -> this.nextFreeId=buffer.getInt()@!(totalBytesRead!=HEADER_SIZE) && !(storageStatus!=CLEAN_GENERATOR) -> buffer.flip()@!(totalBytesRead!=HEADER_SIZE) && !(storageStatus!=CLEAN_GENERATOR) -> buffer.put(STICKY_GENERATOR,).limit(1,).flip()@!(totalBytesRead!=HEADER_SIZE) && !(storageStatus!=CLEAN_GENERATOR) -> fileChannel.write(buffer,)@!(totalBytesRead!=HEADER_SIZE) && !(storageStatus!=CLEAN_GENERATOR) } CATCH(IOException) { -> throw new StoreFailureException("Unable to init id generator "+fileName,e,)@ }
results[https://github.com/hugojosefson/neo4j-components-svn/blob/917c3d6d36dfef815e1fac5769f384687e9f29d0/kernel/tags/1.0-rc/src/main/java/org/neo4j/kernel/impl/nioneo/store/IdGeneratorImpl.java][initGenerator][10] = -> TRY { -> buffer=ByteBuffer.allocate(HEADER_SIZE,)@ -> totalBytesRead=fileChannel.read(buffer,)@ -> buffer.flip()@!(totalBytesRead!=HEADER_SIZE) -> storageStatus=buffer.get()@!(totalBytesRead!=HEADER_SIZE) -> IF { -> throw new InvalidIdGeneratorException("Sticky generator[ "+fileName+"] delete this id generator and build a new one",)@!(totalBytesRead!=HEADER_SIZE) && storageStatus!=CLEAN_GENERATOR } -> this.nextFreeId=buffer.getLong()@!(totalBytesRead!=HEADER_SIZE) && !(storageStatus!=CLEAN_GENERATOR) -> buffer.flip()@!(totalBytesRead!=HEADER_SIZE) && !(storageStatus!=CLEAN_GENERATOR) -> buffer.put(STICKY_GENERATOR,).limit(1,).flip()@!(totalBytesRead!=HEADER_SIZE) && !(storageStatus!=CLEAN_GENERATOR) -> fileChannel.write(buffer,)@!(totalBytesRead!=HEADER_SIZE) && !(storageStatus!=CLEAN_GENERATOR) } CATCH(IOException) { -> throw new UnderlyingStorageException("Unable to init id generator "+fileName,e,)@ }
results[https://github.com/macavity23/robonobo/blob/3d8b6f0b66b5164ea8c7bcd49d035f9ec2cb059f/common/src/java/com/robonobo/common/dlugosz/Dlugosz.java][readLong][1] = -> TRY {  -> fbBuf=ByteBuffer.allocate(1,)@ -> chan.read(fbBuf,)@ -> fbBuf.flip()@ -> firstByte=fbBuf.get()@ -> encLen=encLenFromFirstByte(firstByte,)@ -> fbBuf.flip()@ -> IF { -> return readLong(fbBuf,)@encLen==1 } -> buf=ByteBuffer.allocate(encLen,)@!(encLen==1) -> buf.put(fbBuf,)@!(encLen==1) -> chan.read(buf,)@!(encLen==1) -> buf.flip()@!(encLen==1) -> return readLong(buf,)@!(encLen==1) } CATCH(IOException) {}
results[https://github.com/nimysan/pubshare/blob/a368eab08ab9b84f8cea9f4b3ee411a4bcf03b3b/webmvc3/src/main/java/org/nimysan/core/race/ReadFileByNIO.java][main][1] = -> TRY {  -> buf=ByteBuffer.allocate(4,)@ -> buf.put(a,)@ -> bytesRead=inChannel.read(buf,)@ -> LOOP { -> showPositions(buf,)@ -> buf.flip()@ -> showPositions(buf,)@ -> LOOP { -> System.out.print("___|"+(char) buf.get(),)@buf.hasRemaining() } -> buf.clear()@ -> bytesRead=inChannel.read(buf,)@bytesRead!=-1 } } CATCH(Exception) {}
results[https://github.com/buzheng/buzheng-study-java/blob/806c68192742caab7d45b6c523cfbe492b123f63/src/main/java/org/buzheng/study/nio/TestBufferSlice.java][main][1] = -> buffer=ByteBuffer.allocate(10,)@ -> LOOP { -> buffer.put((byte) i,)@i<buffer.capacity() } -> buffer.position(3,)@ -> buffer.limit(7,)@ -> slice=buffer.slice()@ -> LOOP { -> b=slice.get(i,)@i<slice.capacity() -> slice.put(i,b,)@i<slice.capacity() } -> buffer.position(0,)@ -> buffer.limit(buffer.capacity(),)@ -> LOOP { -> System.out.println(buffer.get(),)@buffer.remaining()>0 }
results[https://github.com/thobe/neo4j-advanced/blob/4e496d1a578fca9606f358b946108a6bd583c7ae/src/main/java/org/neo4j/kernel/impl/nioneo/store/IdGeneratorImpl.java][initGenerator][8] = -> TRY { -> buffer=ByteBuffer.allocate(HEADER_SIZE,)@ -> totalBytesRead=fileChannel.read(buffer,)@ -> buffer.flip()@!(totalBytesRead!=HEADER_SIZE) -> storageStatus=buffer.get()@!(totalBytesRead!=HEADER_SIZE) -> IF { -> throw new InvalidIdGeneratorException("Sticky generator[ "+fileName+"] delete this id generator and build a new one",)@!(totalBytesRead!=HEADER_SIZE) && storageStatus!=CLEAN_GENERATOR } -> this.nextFreeId.set(buffer.getLong(),)@!(totalBytesRead!=HEADER_SIZE) && !(storageStatus!=CLEAN_GENERATOR) -> buffer.flip()@!(totalBytesRead!=HEADER_SIZE) && !(storageStatus!=CLEAN_GENERATOR) -> buffer.put(STICKY_GENERATOR,).limit(1,).flip()@!(totalBytesRead!=HEADER_SIZE) && !(storageStatus!=CLEAN_GENERATOR) -> fileChannel.write(buffer,)@!(totalBytesRead!=HEADER_SIZE) && !(storageStatus!=CLEAN_GENERATOR) } CATCH(IOException) { -> throw new UnderlyingStorageException("Unable to init id generator "+fileName,e,)@ }
results[https://github.com/brl/netifera/blob/832c7b494b44a0de31a3ccc24f41cd091b003b18/platform/com.netifera.platform.net.wifi/com.netifera.platform.net.wifi.tools/src/com/netifera/platform/net/wifi/tools/TestWifiSniffer.java][processFrame][1] = -> IF { -> return @payload==null } -> payloadBuffer=payload.toByteBuffer()@!(payload==null) -> lineBuffer=ByteBuffer.allocate(1024,)@!(payload==null) -> LOOP { -> b=payloadBuffer.get()@!(payload==null) && payloadBuffer.remaining()>0 -> IF { -> IF { -> lineBuffer.put(b,)@!(payload==null) && lineBuffer.remaining()>0 && b>=32&&b<=126 } } ELSE { -> IF { -> lineBuffer.flip()@!(payload==null) && lineBuffer.position()>=MIN_LENGTH -> printBuffer(lineBuffer,)@!(payload==null) && lineBuffer.position()>=MIN_LENGTH } -> lineBuffer.clear()@!(payload==null) } }
results[https://github.com/apache/httpcore/blob/30658c3ef005fb2616e43186e37099c3ea315e61/httpcore-nio/src/main/java/org/apache/http/nio/reactor/ssl/SSLIOSession.java][readPlain][1] = -> Args.notNull(dst,"Byte buffer",)@ -> IF { -> inPlainBuf=this.inPlain.acquire()@this.inPlain.hasData() -> inPlainBuf.flip()@this.inPlain.hasData() -> n=Math.min(inPlainBuf.remaining(),dst.remaining(),)@this.inPlain.hasData() -> LOOP { -> dst.put(inPlainBuf.get(),)@this.inPlain.hasData() } -> inPlainBuf.compact()@this.inPlain.hasData() -> return n@this.inPlain.hasData() } ELSE { -> IF { -> return -1@!(this.inPlain.hasData()) } ELSE { -> return 0@!(this.inPlain.hasData()) } }
results[https://github.com/TooTallNate/Java-WebSocket/blob/4f702ab22a602730f28fdf5cd35ce6c78c3659df/src/WebSocket.java][recieveFrame][3] = -> newestByte=this.buffer.get()@ } ELSE { -> IF { -> IF { -> textFrame=new String(this.currentFrame.array(),UTF8_CHARSET,)@this.currentFrame!=null } } ELSE { -> frame=ByteBuffer.allocate((this.currentFrame!=null)?this.currentFrame.capacity():0+this.buffer.capacity(),)@ -> IF { -> this.currentFrame.rewind()@this.currentFrame!=null -> frame.put(this.currentFrame,)@this.currentFrame!=null } -> frame.put(newestByte,)@!(newestByte==END_OF_FRAME) && !(newestByte==START_OF_FRAME) }
results[https://github.com/cipango/cipango/blob/6fae3ba8e56b5e522403183d9f9039b527c43374/cipango-diameter/src/test/java/org/cipango/diameter/io/AVPCodecTest.java][testPadding][1] = -> TRY {  -> buffer=ByteBuffer.allocate(64,)@ -> LOOP { -> buffer.put((byte) 44,)@ } -> buffer.position(0,)@ -> Codecs.__avp.encode(buffer,avp,)@ -> view=buffer.duplicate()@ -> view.position(view.position()-3,)@ -> LOOP { -> assertEquals(0,view.get(),)@ } -> buffer.flip()@ -> decoded=(AVP<byte[]>) Codecs.__avp.decode(buffer,)@ } CATCH(IOException) {}
results[https://github.com/jmesnil/hornetq-old/blob/624422fb8ae6761c6c7e65778189e9cf5b87ff20/tests/src/org/jboss/messaging/tests/unit/core/asyncio/timedbuffer/TimedBufferTest.java][testFillBuffer][3] = -> LOOP { -> record=ByteBuffer.allocate(10,)@ -> LOOP { -> record.put((byte) getSamplebyte(++x,),)@ } -> record.rewind()@ -> timedBuffer.addBytes(record,dummyCallback,)@ } -> flushedBuffer=buffers.get(0,)@ -> assertEquals(100,flushedBuffer.limit(),)@ -> assertEquals(100,flushedBuffer.capacity(),)@ -> flushedBuffer.rewind()@ -> LOOP { -> assertEquals(getSamplebyte(i,),flushedBuffer.get(),)@i<100 }
results[https://github.com/bigbrother82/android-test/blob/b99b5cd0be8ab0d9791768c21ffd0d637b564df8/libcore/nio/src/test/java/org/apache/harmony/nio/tests/java/nio/channels/SocketChannelTest.java][test_writeLjava_nio_ByteBuffer_Blocking][13] = -> TRY {  -> writeContent=ByteBuffer.allocate(CAPACITY_NORMAL,)@ -> LOOP { -> writeContent.put((byte) i,)@i<CAPACITY_NORMAL } -> writeContent.flip()@ -> writtenCount=channel1.write(writeContent,)@ -> assertEquals(CAPACITY_NORMAL,writeContent.position(),)@ -> LOOP { -> count=in.read(readContent,totalCount,readContent.length-totalCount,)@totalCount<=CAPACITY_NORMAL } -> writeContent.flip()@ -> LOOP { -> assertEquals(writeContent.get(),readContent[i],)@i<CAPACITY_NORMAL } } CATCH(IOException) {}
results[https://github.com/wallnerryan/FL_HAND/blob/86d856bef44399237ea1aa79493475acc12aff82/src/main/java/net/floodlightcontroller/packet/ICMP.java][serialize][6] = -> IF { -> payloadData=payload.serialize()@ } -> bb=ByteBuffer.wrap(data,)@ -> bb.put(this.icmpType,)@ -> bb.put(this.icmpCode,)@ -> bb.putShort(this.checksum,)@ -> IF { -> bb.put(payloadData,)@payloadData!=null } -> IF { -> bb.rewind()@ -> LOOP { -> accumulation+=0xffff&bb.getShort()@ } -> IF { -> accumulation+=bb.get()&0xff<<8@ } -> this.checksum=(short) ~accumulation&0xffff@this.checksum==0 -> bb.putShort(2,this.checksum,)@this.checksum==0 }
results[https://github.com/wordrak/kryo/blob/48b0874b7c87b1f6f5c3d2fedcb4e244ee271e46/src/main/java/com/esotericsoftware/kryo/compress/Delta.java][longestMatch][2] = -> LOOP { -> IF { -> sbuf.clear()@!(sbuf.hasRemaining()) -> TRY { -> IF { -> return match@!(sourceBuffer.hasRemaining()) && !(sbuf.hasRemaining()) } -> LOOP { -> sbuf.put(sourceBuffer.get(),)@!(sbuf.hasRemaining()) && sourceBuffer.hasRemaining()&&sbuf.hasRemaining() && !(!(sourceBuffer.hasRemaining())) } } FINALLY { -> sbuf.flip()@!(sbuf.hasRemaining()) && !(!(sourceBuffer.hasRemaining())) } } -> IF { -> return match@!(tbuf.hasRemaining())&&!(readMore()) && !(!(sbuf.hasRemaining())) } -> IF { -> return match@sbuf.get()!=tbuf.get() && !(!(sbuf.hasRemaining())) && !(!(tbuf.hasRemaining())&&!(readMore())) } }
results[https://github.com/rhusar/HornetQ-oldmigration/blob/3d8f590384cc06a44589a03ec50cdf80c1c57048/tests/src/org/jboss/messaging/tests/unit/util/timedbuffer/TimedBufferTest.java][testFillBuffer][1] = -> LOOP { -> record=ByteBuffer.allocate(10,)@ -> LOOP { -> record.put((byte) getSamplebyte(++x,),)@ } -> record.rewind()@ -> timedBuffer.addBytes(record,false,dummyCallback,)@ } -> flushedBuffer=buffers.get(0,)@ -> assertEquals(100,flushedBuffer.limit(),)@ -> assertEquals(100,flushedBuffer.capacity(),)@ -> flushedBuffer.rewind()@ -> LOOP { -> assertEquals(getSamplebyte(i,),flushedBuffer.get(),)@i<100 }
results[https://github.com/ttron/lab/blob/8e5b87a6d50b46fe212da99a143fd44cdf38e528/HttpCore-4.2/httpcore-nio/src/main/java/org/apache/http/nio/reactor/ssl/SSLIOSession.java][readPlain][1] = -> IF { -> throw new IllegalArgumentException("Byte buffer may not be null",)@dst==null } -> IF { -> this.inPlain.flip()@this.inPlain.position()>0 && !(dst==null) -> n=Math.min(this.inPlain.remaining(),dst.remaining(),)@this.inPlain.position()>0 && !(dst==null) -> LOOP { -> dst.put(this.inPlain.get(),)@this.inPlain.position()>0 && !(dst==null) } -> this.inPlain.compact()@this.inPlain.position()>0 && !(dst==null) -> return n@this.inPlain.position()>0 && !(dst==null) } ELSE { -> IF { -> return -1@!(this.inPlain.position()>0) && !(dst==null) } ELSE { -> return 0@!(this.inPlain.position()>0) && !(dst==null) } }
results[https://github.com/metamx/druid/blob/50b6888210c432304730459731bb749ff52230f3/processing/src/main/java/io/druid/query/aggregation/hyperloglog/HyperLogLogCollector.java][convertToDenseStorage][1] = -> tmpBuffer=ByteBuffer.allocateDirect(getNumBytesForDenseStorage(),)@ -> setVersion(tmpBuffer,)@ -> setRegisterOffset(tmpBuffer,getRegisterOffset(),)@ -> setNumNonZeroRegisters(tmpBuffer,getNumNonZeroRegisters(),)@ -> setMaxOverflowValue(tmpBuffer,getMaxOverflowValue(),)@ -> setMaxOverflowRegister(tmpBuffer,getMaxOverflowRegister(),)@ -> storageBuffer.position(getPayloadBytePosition(),)@ -> tmpBuffer.position(getPayloadBytePosition(tmpBuffer,),)@ -> LOOP { -> tmpBuffer.put(storageBuffer.getShort(),storageBuffer.get(),)@storageBuffer.hasRemaining() } -> tmpBuffer.rewind()@
results[https://github.com/MinecraftForge/MinecraftForge/blob/bd93dd58d0a09e55298cfbdd05f69becf59ab4e8/client/paulscode/sound/codecs/CodecIBXM.java][convertAudioBytes][6] = -> dest=ByteBuffer.allocateDirect(audio_bytes.length,)@ -> dest.order(ByteOrder.nativeOrder(),)@ -> src=ByteBuffer.wrap(audio_bytes,)@ -> src.order(ByteOrder.LITTLE_ENDIAN,)@ -> IF { -> dest_short=dest.asShortBuffer()@ -> src_short=src.asShortBuffer()@ } ELSE { -> LOOP { -> dest.put(src.get(),)@src.hasRemaining() } } -> dest.rewind()@ -> IF { -> dest.get(arrayBackedBuffer,)@!(dest.hasArray()) -> dest.clear()@!(dest.hasArray()) -> return arrayBackedBuffer@!(dest.hasArray()) } -> return dest.array()@!(!(dest.hasArray()))
results[https://github.com/apache/activemq/blob/c8a5fb769e9acc68f7a83c9d8b37682a4225de25/activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java][handleAmqpHeader][1] = -> currentBuffer=ByteBuffer.allocate(8,)@ -> currentBuffer.putInt(AMQP_HEADER_VALUE,)@ -> LOOP { -> currentBuffer.put(plain.get(),)@currentBuffer.hasRemaining() } -> currentBuffer.flip()@ -> IF { -> transportSupport.doConsume(new AmqpHeader(new Buffer(currentBuffer,),),)@ } ELSE { -> transportSupport.doConsume(AmqpSupport.toBuffer(currentBuffer,),)@ } -> IF { } ELSE { -> nextFrameSize=plain.getInt()@plain.hasRemaining() && !(plain.remaining()<4) }
results[https://github.com/cml220/Cybernetic-Tiger/blob/15c8ef1f65dba02d630e714d8dd14c9fbfe2062b/04_theLeague/NextbooksFinal/pdfrenderer/com/sun/pdfview/decode/PNGPredictor.java][unpredict][1] = -> TRY {  -> LOOP { -> algorithm=(int) imageData.get()&0xff@imageData.remaining()>=rowSize+1 -> imageData.get(curLine,)@imageData.remaining()>=rowSize+1 -> doSubLine(curLine,)@ -> doUpLine(curLine,prevLine,)@ -> doAverageLine(curLine,prevLine,)@ -> doPaethLine(curLine,prevLine,)@ -> rows.add(curLine,)@ } -> outBuf=ByteBuffer.allocate(rows.size()*rowSize,)@ -> i=rows.iterator()@ -> LOOP { -> outBuf.put((byte[]) i.next(),)@i.hasNext() } -> outBuf.flip()@ } CATCH(IOException) {}
results[https://github.com/mikera/mikera/blob/227a411e0b20c69c219ee8933a03bfab9d7f1c3b/src/test/java/mikera/data/TestData.java][testDataToByteBuffers][2] = -> bb=ByteBuffer.allocate(100,)@ -> LOOP { -> bb.put((byte) i,)@i<100 } -> bb.flip()@ -> assertEquals(100,bb.remaining(),)@ -> d.appendByteBuffer(bb,)@ -> assertEquals(0,bb.remaining(),)@ -> d.appendByteBuffer(bb,)@ -> assertEquals(0,bb.remaining(),)@ -> bb2=d.toFlippedByteBuffer()@ -> assertEquals(100,bb2.remaining(),)@ -> LOOP { -> assertEquals(i,bb2.get(),)@i<100 } -> assertEquals(0,bb2.remaining(),)@
results[https://github.com/benjaminvm/vm/blob/eeeed1aa9d93e06fe4597aaefde906dbc4b2648b/libcore/nio/src/test/java/org/apache/harmony/nio/tests/java/nio/channels/SocketChannelTest.java][test_writeLjava_nio_ByteBuffer_NonBlocking][10] = -> TRY {  -> writeContent=ByteBuffer.allocate(CAPACITY_NORMAL,)@ -> LOOP { -> writeContent.put((byte) i,)@i<CAPACITY_NORMAL } -> writeContent.flip()@ -> LOOP { -> writtenCount=channel1.write(writeContent,)@ } -> assertEquals(CAPACITY_NORMAL,writeContent.position(),)@ -> LOOP { -> count=in.read(readContent,totalCount,readContent.length-totalCount,)@totalCount<=CAPACITY_NORMAL } -> writeContent.flip()@ -> LOOP { -> assertEquals(writeContent.get(),readContent[i],)@i<CAPACITY_NORMAL } } CATCH(Exception) {}
results[https://github.com/wordrak/kryo/blob/81fd8015ba7e9dcf73b83d7d06e00d0630b67365/src/com/esotericsoftware/kryo/compress/Delta.java][compress][2] = -> LOOP { -> LOOP { -> low+=single_hash[sourceBuffer.get()+128]@sourceBuffer.remaining()>=chunkSize } } -> LOOP { -> IF { -> sourceBuffer.position(offset,)@ -> length=longestMatch(sourceBuffer,)@ -> IF { -> writeAppend(outputBuffer,)@ -> IF { -> System.out.println("compress COPY at "+offset+", length "+length+": "+dump(sourceBuffer,offset,length,),)@length>=chunkSize } -> outputBuffer.put(COMMAND_COPY,)@ -> IntSerializer.put(outputBuffer,length,true,)@length>=chunkSize -> IntSerializer.put(outputBuffer,offset,true,)@ } } } -> writeAppend(outputBuffer,)@
results[https://github.com/hazelcast/hazelcast/blob/4a923f283aa641f947eed63633e1e584bf570090/hazelcast/src/main/java/com/hazelcast/nio/IOUtil.java][copyToHeapBuffer][1] = -> IF { -> return 0@src==null } -> n=Math.min(src.remaining(),dest.remaining(),)@!(src==null) -> IF { -> IF { -> LOOP { -> dest.put(src.get(),)@!(src==null) } } ELSE { -> srcPosition=src.position()@!(src==null) -> destPosition=dest.position()@!(src==null) -> System.arraycopy(src.array(),srcPosition,dest.array(),destPosition,n,)@!(src==null) && n>0 && !(n<16) -> src.position(srcPosition+n,)@!(src==null) && n>0 && !(n<16) -> dest.position(destPosition+n,)@!(src==null) && n>0 && !(n<16) } }
results[https://github.com/linkedin/databus/blob/0f519041f31e234ec49525950935a50416c488e5/databus-core/databus-core-impl/src/test/java/com/linkedin/databus/core/TestDbusEventV2.java][testSerDeser][1] = -> TRY {  -> buf=ByteBuffer.allocate(maxEventLen,).order(byteOrder,)@ -> IF { -> buf.put(junk,)@ } -> eventLen=DbusEventFactory.serializeEvent(key,buf,evInfo,)@ -> evt=evt.reset(buf,bufferOffset,)@ -> bb=evt.getRawBytes()@ -> bb.get(rawEvent,)@ } ELSE { -> metadataBB=metadataPart.getData()@!(metadataPart==null) -> Assert.assertEquals(metadataBytes.length,metadataBB.remaining(),)@ -> LOOP { -> Assert.assertEquals(metadataBytes[i],metadataBB.get(),)@i<metadataBytes.length } } CATCH(Exception) {}
results[https://github.com/philipv/bonfire/blob/00ebac8b7ed1279187bb2a19be7f554d89bee441/default/nio-resources/src/SliceBuffer.java][main][1] = -> TRY {  -> buffer=ByteBuffer.allocate(10,)@ -> LOOP { -> buffer.put((byte) i,)@i<buffer.capacity() } -> buffer.position(3,)@ -> buffer.limit(7,)@ -> slice=buffer.slice()@ -> LOOP { -> b=slice.get(i,)@i<slice.capacity() -> slice.put(i,b,)@i<slice.capacity() } -> buffer.position(0,)@ -> buffer.limit(buffer.capacity(),)@ -> LOOP { -> System.out.println(buffer.get(),)@buffer.remaining()>0 } } CATCH(Exception) {}
results[https://github.com/hxzon/java-lib-hxzon/blob/ba161a9baa38c5e6c049557fb7be97745d192917/code/java/java nio/nioserver-2008-02-03/src/java/org/ronsoft/nioserver/impl/InputQueueImpl.java][dequeueBytes][1] = -> IF { -> return emptyBuffer@buffer==null||buffer.position()==0||count==0 } -> size=Math.min(count,buffer.position(),)@!(buffer==null||buffer.position()==0||count==0) -> result=ByteBuffer.allocate(size,)@!(buffer==null||buffer.position()==0||count==0) -> buffer.flip()@!(buffer==null||buffer.position()==0||count==0) -> IF { -> result.put(buffer,)@buffer.remaining()<=result.remaining() && !(buffer==null||buffer.position()==0||count==0) } ELSE { -> LOOP { -> result.put(buffer.get(),)@!(buffer.remaining()<=result.remaining()) && !(buffer==null||buffer.position()==0||count==0) && result.hasRemaining() } } -> IF { -> bufferFactory.returnBuffer(buffer,)@!(buffer==null||buffer.position()==0||count==0) && buffer.remaining()==0 } ELSE { -> buffer.compact()@!(buffer.remaining()==0) && !(buffer==null||buffer.position()==0||count==0) } -> result.flip()@!(buffer==null||buffer.position()==0||count==0)
results[https://github.com/Smartupz/tigase-server/blob/9243406d4d9c5f635e99ff60eb9bfa80c1df77c4/src/tigase/io/TLSIO.java][write][1] = -> TRY {  -> log.finer("TLS - Writing data, remaining: "+buff.remaining(),)@ -> buff.hasRemaining()@ -> LOOP { -> tlsBuffer=ByteBuffer.allocate(Math.min(buff.remaining(),tlsWrapper.getAppBuffSize(),),)@ -> LOOP { -> tlsBuffer.put(buff.get(),)@tlsBuffer.hasRemaining()&&buff.hasRemaining() } -> tlsBuffer.flip()@ -> tlsWrapper.wrap(tlsBuffer,tlsOutput,)@ -> IF { -> throw new EOFException("Socket has been closed.",)@tlsWrapper.getStatus()==TLSStatus.CLOSED } } } CATCH(IOException) {}
