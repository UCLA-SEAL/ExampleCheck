results[https://github.com/lalithsuresh/Scaling-HDFS-NameNode/blob/410f3232d2ad6e5c0fa37486e9799c60f97739a5/hadoop-common/src/test/java/org/apache/hadoop/util/TestDataChecksum.java][corruptBufferOffset][101] = -> buf.put(offset,(byte) buf.get(offset,)+1,)@
results[https://github.com/eclipse/ptp/blob/64f612ea9758b7f6d476d686c57a3fae05e45689/core/org.eclipse.ptp.proxy.protocol/util/org/eclipse/ptp/proxy/util/compression/BitUtils.java][setBit][4] = -> input.put(pos>>3,(byte) input.get(pos>>3,)|1<<pos%NBITS_PER_BYTE,)@
results[https://github.com/amusecode/amuse/blob/94ed535c4b72be11a4877d9a454d4bea9da1f970/sandbox/ndrost/estars/amuse/code/Worker.java][clear][5] = -> headerBytes.clear()@ -> zeros[HEADER_BIG_ENDIAN_FLAG]=headerBytes.get(HEADER_BIG_ENDIAN_FLAG,)@ -> headerBytes.put(zeros,)@
results[https://github.com/LWJGL/lwjgl3/blob/597411e7ac7d9520269f59292898fc28f876d1dc/src/core/org/lwjgl/system/linux/XMacros.java][XISetMask][2] = -> index=ptr.position()+event>>3@ -> ptr.put(index,(byte) ptr.get(index,)|1<<event&7,)@
results[https://github.com/orfjackal/jumi/blob/78fd1ce302d2eb1b1f57383f7f1b2e939c53cb5b/jumi-core/src/test/java/fi/jumi/core/ipc/buffer/MappedByteBufferSequenceTest.java][read_only_buffers_cannot_be_modified][1] = -> buffer=sequence.get(0,)@ -> buffer.get()@ -> buffer.put((byte) 1,)@
results[https://github.com/yosit/cocos2d-android/blob/e5bdc424d3a6f1465ac9e043ab7a0c13077da782/cocos2d-android/src/org/cocos2d/opengl/CCTextureAtlas.java][memcopyByte][6] = -> LOOP { -> dst.put(i+to,src.get(i+from,),)@i<size }
results[https://github.com/ridiculousRPG/ridiculousRPG/blob/fe895a5e312009742a6a89a1d840603f5f124679/ridiculousRPG/src/com/ridiculousRPG/video/VideoARGBintPixmapWrapper.java][shiftARGBtoRGBA][3] = -> bb=getPixels()@ -> bb.put(lastAlphaAfterShift,bb.get(0,),)@ -> bb.position(1,)@
results[https://github.com/thallgren/sqlite4java/blob/5ea7852294ff0396b3237ec2f4a181b91a85712b/java/sqlite/DirectBuffer.java][incUsed][6] = -> IF { -> controlBuffer.put(0,(byte) controlBuffer.get(0,)+1,)@controlBuffer!=null }
results[https://github.com/undertow-io/undertow/blob/16ee378e64cff1c369b8dfa8b85d1a668be12edb/websockets/src/main/java/io/undertow/websockets/protocol/version07/Masker.java][mask][6] = -> LOOP { -> buf.put(i,(byte) buf.get(i,)^maskingKey[++m],)@i<limit }
results[https://github.com/adyliu/jafka/blob/55d4b9b1a3beb6ba334f01a4509f8bac2e6bfe78/src/test/java/com/sohu/jafka/message/MessageTest.java][testIsValid][1] = -> buf.put(buf.limit()-1,(byte) 1+buf.get(buf.limit()-1,),)@
results[https://github.com/metamx/druid/blob/50b6888210c432304730459731bb749ff52230f3/processing/src/main/java/io/druid/query/aggregation/hyperloglog/HyperLogLogCollector.java][addNibbleRegister][1] = -> position=(short) bucket>>1@ -> shiftedPositionOf1=(isUpperNibble)?(byte) positionOf1<<bitsPerBucket:positionOf1@ -> origVal=storageBuffer.get(getPayloadBytePosition()+position,)@ -> newValueMask=(isUpperNibble)?(byte) 0xf0:(byte) 0x0f@ -> originalValueMask=(byte) newValueMask^0xff@ -> storageBuffer.put(getPayloadBytePosition()+position,(byte) UnsignedBytes.max((byte) origVal&newValueMask,shiftedPositionOf1,)|origVal&originalValueMask,)@
results[https://github.com/nBdde/l2jserver/blob/57579eb5252775f4ae3342bbc787131aa45faf44/L2_GameServer_T1/java/net/sf/l2j/gameserver/Crypt.java][decrypt][4] = -> sz=buf.remaining()@!(!(_isEnabled)) -> LOOP { -> temp2=buf.get(i,)@!(!(_isEnabled)) && i<sz -> buf.put(i,(byte) temp2^_key[i&15]^temp,)@!(!(_isEnabled)) && i<sz } -> _key[8]=(byte) old&0xff@!(!(_isEnabled)) -> _key[9]=(byte) old>>0x08&0xff@!(!(_isEnabled)) -> _key[10]=(byte) old>>0x10&0xff@!(!(_isEnabled)) -> _key[11]=(byte) old>>0x18&0xff@!(!(_isEnabled))
results[https://github.com/jerrycable/Tasquid/blob/b4ef1af8e81c10f4b7164e3038f130a496ec8fda/src/com/googlecode/mp4parser/boxes/mp4/objectdescriptors/BitWriterBuffer.java][writeBits][9] = -> IF { -> current=buffer.get(initialPos+position/8,)@ -> current=(current<0)?current+256:current@ -> buffer.put(initialPos+position/8,(byte) (current>127)?current-256:current,)@ } -> buffer.position(initialPos+position/8+(position%8>0)?1:0,)@
results[https://github.com/kirkch/SandboxMosaic/blob/257702afa958335f97161e753e8b3b8634b98ed4/push-parser-mosaic/src/main/java/com/mosaic/io/Bytes.java][writeTo][3] = -> i=buf.position()+this.positionOffset@ -> LOOP { -> targetBuffer.put(buf.get(i,),)@i<limit }
results[https://github.com/graphstream/gs-core/blob/e65caae72447e1c98aaa66399c65908c08599a92/src/org/graphstream/io/file/FileSinkSWF.java][__resize][1] = -> nBuffer=ByteBuffer.allocate(size,)@ -> LOOP { -> nBuffer.put(buffer.get(i,),)@i<Math.min(this.size,size,) }
results[https://github.com/brl/netifera/blob/27bc05a8ff2103f75b5fbcbee0a2f708f57ceaff/platform/com.netifera.platform.net.packets/com.netifera.platform.net.packets/src/com/netifera/platform/net/packets/tcpip/IPv4.java][copyHeader][1] = -> b=toByteBuffer()@ -> LOOP { -> writeBuffer.put(b.get(i,),)@i<getHeaderLength() }
results[https://github.com/hashio/websocket-client/blob/721e41b9e7cbe83352ad00f7d786717958b95191/src/main/java/jp/a840/websocket/util/MaskDecoder.java][decode][1] = -> idx=masked.position()+offset@ -> LOOP { -> masked.put(idx,(byte) masked.get(idx,)^key[++c%4],)@ }
results[https://github.com/disy/jSCSI/blob/c5550dbb7fa9389f6f1afb355597ba3a2978307f/bundles/target/src/main/java/org/jscsi/target/scsi/sense/senseDataDescriptor/senseKeySpecific/FieldPointerSenseKeySpecificData.java][serializeSpecificFields][2] = -> b=byteBuffer.get(index,)@ -> b=BitManip.getByteWithBitSet(b,6,commandData,)@ -> b=BitManip.getByteWithBitSet(b,3,bitPointerValid,)@ -> byteBuffer.put(index,b,)@ -> ReadWrite.writeTwoByteInt(byteBuffer,fieldPointer,byteBuffer.position(),)@
results[https://github.com/rafalkrupinski/jetty/blob/727cf815a250f9a2305f3b377f8f0450b9820bd9/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/payload/DeMaskProcessor.java][process][3] = -> start=payload.position()@ -> end=payload.limit()@ -> LOOP { -> payload.put(i,(byte) payload.get(i,)^mask[offset%4],)@i<end }
results[https://github.com/FreakyPenguin/elexis-hilotec-base/blob/a03ec9ac9020af9ee6cd14b2cf9cc1a46863f035/elexis-importer/src/com/healthmarketscience/jackcess/UsageMap.java][updateMap][3] = -> TRY {  -> b=buffer.get(_startOffset+offset,)@ -> buffer.put(_startOffset+offset,b,)@!(isOn==add) } CATCH(IOException) {}
results[https://github.com/talknomoney66/sqlite4java/blob/037777ca77971d89ad84681ef4e5eff0293b66f3/java/com/almworks/sqlite4java/DirectBuffer.java][decUsed][4] = -> IF { -> usage=controlBuffer.get(0,)@controlBuffer!=null -> IF { -> controlBuffer.put(0,(byte) usage-1,)@controlBuffer!=null && usage>0 } }
results[https://github.com/Elusivehawk-LLC/Caelum-Engine/blob/57ad868ff54decc27a5adb5b5d8c878a21010266/java/CaelumEngine/src/com/elusivehawk/engine/core/BufferHelper.java][makeByteBuffer][4] = -> ret=createByteBuffer(count,)@ -> LOOP { -> ret.put(buf.get(c+offset,),)@c<count } -> ret.flip()@
results[https://github.com/metamx/druid/blob/50b6888210c432304730459731bb749ff52230f3/processing/src/main/java/io/druid/query/aggregation/hyperloglog/HyperLogLogCollector.java][mergeAndStoreByteRegister][1] = -> IF { -> return 0@byteToAdd==0 } -> currVal=storageBuffer.get(position,)@!(byteToAdd==0) -> newUpper=Math.max(upperNibble,otherUpper,)@!(byteToAdd==0) -> newLower=Math.max(lowerNibble,otherLower,)@!(byteToAdd==0) -> storageBuffer.put(position,(byte) newUpper|newLower&0xff,)@!(byteToAdd==0)
results[https://github.com/LucidDB/luciddb/blob/d322a8b657b243a85e965487dcf95bbcbd36550c/farrago/src/net/sf/farrago/fennel/tuple/FennelAttributeAccessor.java][marshalValueData][1] = -> TRY {  -> val=pDestData.get(valueBitOffset,)@ -> pDestData.put(valueBitOffset,val,)@ } CATCH(NullPointerException) {}
results[https://github.com/graphstream/gs-core/blob/e65caae72447e1c98aaa66399c65908c08599a92/src/org/graphstream/io/file/FileSinkSWF.java][setValue][1] = -> val=buffer.get(id/8,)@ -> IF { -> val=(byte) val|1<<7-id%8@ } ELSE { -> val=(byte) val&~1<<7-id%8@ } -> buffer.put(id/8,val,)@
results[https://github.com/apache/jena/blob/59b733bd4375e407a95647904849c0b7ff484c52/jena-arq/src/main/java/org/apache/jena/atlas/lib/ByteBufferLib.java][bbcopy][1] = -> IF { -> acopyArray(bb1,src,bb2,dst,length,slotLen,)@allowArray&&bb1.hasArray()&&bb2.hasArray() } -> LOOP { -> bb2.put(bDst+i,bb1.get(bSrc+i,),)@!(allowArray&&bb1.hasArray()&&bb2.hasArray()) && i<bLen }
results[https://github.com/jbosstm/narayana/blob/3ea8b35a743598158ec313180ce8b0d9fbd16115/blacktie/jatmibroker-xatmi/src/main/java/org/jboss/narayana/blacktie/jatmibroker/xatmi/impl/BufferImpl.java][readByte][2] = -> TRY {  -> x=dis.readByte()@ -> bbuf=ByteBuffer.allocate(BYTE_SIZE,)@ -> bbuf.put(x,)@ -> return bbuf.get(0,)@ } CATCH(IOException) {}
results[https://github.com/apache/accumulo/blob/a4e562602a4dbfff9611f292fd8369124279f83c/core/src/main/java/org/apache/accumulo/core/client/security/tokens/PasswordToken.java][setPassword][1] = -> bb=Constants.UTF8.encode(charBuffer,)@ -> bb.get(this.password,)@ -> IF { -> bb.rewind()@!(bb.isReadOnly()) -> LOOP { -> bb.put((byte) 0,)@bb.remaining()>0 && !(bb.isReadOnly()) } }
results[https://github.com/polyvi/xface-android/blob/61c0fe6b2b730df1d67a35f9bc41d32a190b6cd0/framework/src/com/polyvi/xface/util/XCryptor.java][handleDoFinalBytes][1] = -> LOOP { -> decryptData=decryptBuffer.get(i,)@i<decryptDataLen -> IF { -> decryptBuffer.put(decryptData,)@decryptData!=0&&decryptData!=-1&&decryptData!=1 } } -> decryptBuffer.position(decryptDataLen,)@ -> decryptBuffer.get(handledArray,0,handledArrayLen,)@
results[https://github.com/mcai/Archimulator/blob/ecd4535052d31474a2ff3577958cfb87be6a9725/src/archimulator/isa/memory/bigMemory/BasicMemoryDataStore.java][access][1] = -> bb=this.bbs.get(pageId,)@ -> bb.position(displacement,)@ -> IF { -> bb.put(buf,offset,size,)@ } ELSE { -> bb.get(buf,offset,size,)@ }
results[https://github.com/ldesegur/cocos2d-android/blob/40b5fb003181d882e4d72d81460a2b2dae216901/src/org/cocos2d/opengl/TextureAtlas.java][memmoveByte][4] = -> IF { -> memcopyByte(src,from,dst,to,size,)@to<from } ELSE { -> LOOP { -> dst.put(i+to,src.get(i+from,),)@i>=0 && !(to<from) } }
results[https://github.com/thinkaurelius/titan/blob/e50826bd9866ca1fc1b8844a18f1dfdc0e122629/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/util/ByteBufferUtil.java][nextBiggerBuffer][1] = -> len=buffer.remaining()@ -> pos=buffer.position()@ -> next=ByteBuffer.allocate(len,)@ -> LOOP { -> b=buffer.get(i+pos,)@i>=0 -> next.put(i,b,)@i>=0 } -> next.position(0,)@ -> next.limit(len,)@
results[https://github.com/undertow-io/undertow/blob/8454269245db70e584904d5084db941d3592be54/websockets/src/main/java/io/undertow/websockets/masking/Masker.java][mask][1] = -> IF { -> d=buf.duplicate()@ -> d.flip()@ } -> i=d.position()@ -> LOOP { -> d.put(i,(byte) d.get(i,)^maskingKey[++m],)@i<d.limit() }
results[https://github.com/thinkaurelius/titan/blob/e50826bd9866ca1fc1b8844a18f1dfdc0e122629/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/util/WriteByteBuffer.java][getStaticBufferFlipBytes][1] = -> b=buffer.duplicate()@ -> b.flip()@ -> Preconditions.checkArgument(to<=b.limit(),)@ -> LOOP { -> b.put(i,(byte) ~b.get(i,),)@i<to } -> return new StaticByteBuffer(b,)@
results[https://github.com/chototsu/MikuMikuStudio/blob/76ffb3fc39af223c1ddf6f86de345024997e3321/gdx/src/main/java/com/jme3/texture/plugins/gdx/GdxImageLoader.java][resize2][1] = -> out=BufferUtils.createByteBuffer(w2*h2*3,)@ -> f1=(float) w1/(float) w2@ -> LOOP { -> LOOP { -> index=(int) (int) f2*(float) y*(float) w1+f1*(float) x@y<h2 && x<w2 -> LOOP { -> out.put(x+y*w2*3+i,bb.get(index*3+i,),)@i<3 && y<h2 && x<w2 } } }
results[https://github.com/cris-b/blacktie/blob/d929c7d1ebd45ea9a161c8c6ceb3a8c0942eba10/jatmibroker-xatmi/src/main/java/org/jboss/blacktie/jatmibroker/xatmi/Buffer.java][readByte][2] = -> TRY {  -> x=dis.readByte()@ -> bbuf=ByteBuffer.allocate(BYTE_SIZE,)@ -> bbuf.order(ByteOrder.LITTLE_ENDIAN,)@ -> bbuf.put(x,)@ -> bbuf.order(ByteOrder.BIG_ENDIAN,)@ -> return bbuf.get(0,)@ } CATCH(IOException) {}
results[https://github.com/gpothier/stiq/blob/24a65017f89dfda948783fbc89b76063d98494d6/STIQ-core/src/cl/inria/stiq/db/file/classic/ClassicPagedFile.java][copy][1] = -> TRY { -> theBuffer=getBuffer()@ -> LOOP { -> theBuffer.put(++theDst,theBuffer.get(++theSrc,),)@ } } FINALLY { -> unlock()@ }
results[https://github.com/pagxir/antalk/blob/7d8ff151782b6e16ab51fd7e30b21c6c3bb2e966/src/wave/talk/protocol/Jabber.java][plainSaslAuth][2] = -> buffer=ByteBuffer.allocate(1000,)@ -> buffer.put((byte) 0x0,)@ -> buffer.put(user.getBytes(),)@ -> buffer.put((byte) 0x0,)@ -> buffer.put(password.getBytes(),)@ -> buffer.flip()@ -> buffer.get(buf= new byte[],)@ -> data=wave.util.Base64Codec.encode(buf,)@
results[https://github.com/mkovatsc/Californium/blob/09fc7cc50d1ea0b68b94409fcb4dbcf4884db49d/src/ch/ethz/inf/vs/californium/coap/Option.java][getIntValue][3] = -> byteLength=value.capacity()@ -> temp=ByteBuffer.allocate(4,)@ -> LOOP { -> temp.put((byte) 0,)@ } -> LOOP { -> temp.put(value.get(i,),)@i<byteLength } -> val=temp.getInt(0,)@
results[https://github.com/LWJGL/lwjgl3/blob/fc8a8cf3277f85bb1f6572810563ca5a1cb248ce/src/tests/org/lwjgl/system/MemoryUtilTest.java][testMemSet][1] = -> buffer=BufferUtils.createByteBuffer(32,)@ -> LOOP { -> buffer.put(i,(byte) i,)@i<buffer.capacity() } -> memSet(nGetAddress(buffer,),0x7F,buffer.capacity(),)@ -> LOOP { -> assertEquals(buffer.get(i,),0x7F,)@i<buffer.capacity() }
results[https://github.com/chototsu/MikuMikuStudio/blob/76ffb3fc39af223c1ddf6f86de345024997e3321/gdx/src/main/java/com/jme3/texture/plugins/gdx/GdxImageLoader.java][resize][1] = -> IF { -> return bb@w1==w2&&h1==h2 } -> out=BufferUtils.createByteBuffer(w2*h2*4,)@!(w1==w2&&h1==h2) -> f1=(float) w1/(float) w2@!(w1==w2&&h1==h2) -> LOOP { -> LOOP { -> index=(int) (int) f2*(float) y*(float) w1+f1*(float) x@!(w1==w2&&h1==h2) && y<h2 && x<w2 -> LOOP { -> out.put(x+y*w2*4+i,bb.get(index*4+i,),)@i<4 && !(w1==w2&&h1==h2) && y<h2 && x<w2 } } }
results[https://github.com/svn2github/sakai-kernel/blob/bbabe332a08b1cb6da9f3dd098229f2cc630ba5a/branches/SAK-13408/kernel-impl/src/test/java/org/sakaiproject/content/impl/test/ContentIntegrationTestDisabled.java][setUp][123] = -> TRY {  -> buf=ByteBuffer.allocate(CONTENT_SIZE,)@ -> LOOP { -> buf.put(b,b,)@b<=Byte.MAX_VALUE } -> LOOP { -> buf.put(CONTENT_SIZE-i,buf.get(i,),)@i<CONTENT_SIZE/2 } } CATCH(Exception) {}
results[https://github.com/artclarke/humble-video/blob/75bfb0098ff2e06bc3d07116254bb1ce4e5891f8/humble-video-all/src/test/java/io/humble/ferry/BufferTest.java][testCreationFromJavaDirectByteBuffer][3] = -> directByteBuffer=ByteBuffer.allocateDirect(numBytes,)@ -> LOOP { -> directByteBuffer.put(i,(byte) i,)@i<numBytes } -> ibuf=Buffer.make(null,directByteBuffer,0,numBytes,)@ -> outputDirectByteBuffer=ibuf.getByteBuffer(0,numBytes,)@ -> assertEquals(numBytes,outputDirectByteBuffer.capacity(),)@ -> LOOP { -> assertEquals(i,outputDirectByteBuffer.get(i,),)@i<numBytes }
results[https://github.com/ttron/lab/blob/8e5b87a6d50b46fe212da99a143fd44cdf38e528/HttpCore-4.2/httpcore-nio/src/test/java/org/apache/http/impl/nio/codecs/TestChunkEncoder.java][write][3] = -> TRY {  -> start=src.position()@ -> LOOP { -> b=src.get(i,)@i<src.limit()&&buffer.remaining()>0 -> baos.write(b,)@ -> buffer.put(b,)@i<src.limit()&&buffer.remaining()>0 } -> src.position(src.position()+count,)@ } CATCH(IOException) {}
results[https://github.com/ninowalker/jmemcache-daemon/blob/ad08d8eef61c559ed3ad6c7af60a1485aeb6638f/jmemcached-core/src/main/java/com/thimbleware/jmemcached/Cache.java][prepend][2] = -> TRY { } ELSE { -> b=ByteBuffer.allocate(ret.dataLength,)@ -> b.put(element.data,)@ -> b.put(ret.data,)@ -> b.flip()@ -> b.get(ret.data,)@ } FINALLY { -> finishCacheWrite()@ }
results[https://github.com/mkovatsc/Californium/blob/09fc7cc50d1ea0b68b94409fcb4dbcf4884db49d/src/ch/ethz/inf/vs/californium/coap/Option.java][setIntValue][3] = -> IF { -> value=ByteBuffer.allocate(1,)@ -> value.put((byte) 0,)@ } ELSE { -> aux=ByteBuffer.allocate(4,)@ -> aux.putInt(val,)@!(val==0) -> value=ByteBuffer.allocate(neededBytes,)@ -> LOOP { -> value.put(aux.get(3-i,),)@i>=0 } }
results[https://github.com/warrenfalk/meldfs/blob/84e4a1a11603eaf726b0bbea199b09dc8f479458/meldfs/test/warrenfalk/meldfs/TestChannelStriper.java][calculate][2] = -> LOOP { -> buffer.limit(csSize,)@ -> LOOP { -> LOOP { -> value=hash(value,(position<dataColumn.limit())?dataColumn.get(position,):0&0xFF,)@position<csSize } -> buffer.put(position,(byte) value&0xFF,)@position<csSize } -> buffer.position(csSize,)@ -> buffer.flip()@ }
results[https://github.com/tulskiy/musique/blob/500f8156562eaccd3f3a46ce1ece63dd2f191ca4/dependencies/jaudiotagger/src/main/java/org/jaudiotagger/audio/flac/metadatablock/MetadataBlockHeader.java][<init>][7] = -> rawdata=ByteBuffer.allocate(HEADER_LENGTH,)@ -> IF { -> type=(byte) 0x80|blockType.getId()@ } ELSE { -> type=(byte) blockType.getId()@ } -> rawdata.put(type,)@ -> rawdata.put((byte) dataLength&0xFF0000>>>16,)@ -> rawdata.put((byte) dataLength&0xFF00>>>8,)@ -> rawdata.put((byte) dataLength&0xFF,)@ -> LOOP { -> bytes[i]=rawdata.get(i,)@i<HEADER_LENGTH }
results[https://github.com/Spoutcraft/Spoutcraft/blob/a4bffbc784ac378bacc3edf458f7d3a69f3652d4/src/minecraft/org/spoutcraft/client/packet/PacketCustomBlockChunkOverride.java][run][1] = -> IF { -> IF { -> return @!(SpoutClient.getInstance().getRawWorld().chunkProvider.chunkExists(chunkX,chunkZ,)) } -> buffer=ByteBuffer.allocate(data.length,)@!(!(SpoutClient.getInstance().getRawWorld().chunkProvider.chunkExists(chunkX,chunkZ,))) -> buffer.put(data,)@!(!(SpoutClient.getInstance().getRawWorld().chunkProvider.chunkExists(chunkX,chunkZ,))) -> LOOP { -> customIds[i]=buffer.getShort(i*3,)@!(!(SpoutClient.getInstance().getRawWorld().chunkProvider.chunkExists(chunkX,chunkZ,))) && i<customIds.length -> customData[i]=buffer.get(i*3+2,)@!(!(SpoutClient.getInstance().getRawWorld().chunkProvider.chunkExists(chunkX,chunkZ,))) && i<customIds.length -> cb=MaterialData.getCustomBlock(customIds[i],)@!(!(SpoutClient.getInstance().getRawWorld().chunkProvider.chunkExists(chunkX,chunkZ,))) && i<customIds.length } -> Spoutcraft.getWorld().getChunkAt(chunkX,chunkZ,).setCustomBlockData(customData,)@!(!(SpoutClient.getInstance().getRawWorld().chunkProvider.chunkExists(chunkX,chunkZ,))) }
results[https://github.com/ChioriGreene/ChioriWebServer/blob/25af99a3457360bbb54a71b4a36ff8541ea8d58c/api/src/com/esotericsoftware/kryo/io/ByteBufferOutput.java][writeAscii][2] = -> TRY {  -> IF { -> return @value==null } -> IF { -> return @!(value==null) && charCount==0 } } ELSE { -> tmp=value.getBytes()@!(value==null) && !(charCount==0) -> niobuffer.put(tmp,0,tmp.length,)@!(value==null) && !(charCount==0) -> niobuffer.put(position-1,(byte) niobuffer.get(position-1,)|0x80,)@!(value==null) && !(charCount==0) } CATCH(KryoException) {}
results[https://github.com/Spoutcraft/Spoutcraft/blob/532f51f717ec0b8747ac77ad25f17def456ceae1/src/main/java/org/spoutcraft/client/packet/PacketCustomBlockChunkOverride.java][run][1] = -> IF { -> IF { -> return @!(SpoutClient.getInstance().getRawWorld().chunkProvider.chunkExists(chunkX,chunkZ,)) } -> buffer=ByteBuffer.allocate(data.length,)@!(!(SpoutClient.getInstance().getRawWorld().chunkProvider.chunkExists(chunkX,chunkZ,))) -> buffer.put(data,)@!(!(SpoutClient.getInstance().getRawWorld().chunkProvider.chunkExists(chunkX,chunkZ,))) -> LOOP { -> customIds[i]=buffer.getShort(i*3,)@!(!(SpoutClient.getInstance().getRawWorld().chunkProvider.chunkExists(chunkX,chunkZ,))) && i<customIds.length -> customData[i]=buffer.get(i*3+2,)@!(!(SpoutClient.getInstance().getRawWorld().chunkProvider.chunkExists(chunkX,chunkZ,))) && i<customIds.length } -> Spoutcraft.getChunk(SpoutClient.getInstance().getRawWorld(),chunkX,chunkZ,).setCustomBlockData(customData,)@!(!(SpoutClient.getInstance().getRawWorld().chunkProvider.chunkExists(chunkX,chunkZ,))) }
results[https://github.com/trombonehero/Footlights/blob/41a5fa28b70eb1d61db78206bf873bf4ee2a9708/Client/Core/src/main/java/me/footlights/core/data/Block.java][build][1] = -> TRY {  -> IF { -> flattened=content.get(0,)@content.size()==1 } ELSE { -> flattened=ByteBuffer.allocate(contentSize,)@ -> LOOP { -> flattened.put(b,)@ } -> flattened.flip()@ } -> return new Block(links,flattened,padding,desiredSize,fingerprintBuilder,)@ } CATCH(FormatException) {}
results[https://github.com/wordrak/kryo/blob/48b0874b7c87b1f6f5c3d2fedcb4e244ee271e46/src/main/java/com/esotericsoftware/kryo/compress/Delta.java][writeAppend][2] = -> IF { -> outputBuffer.put((byte) length,)@!(appendLength==0) && length<=DATA_MAX } ELSE { -> outputBuffer.put(COMMAND_APPEND,)@!(appendLength==0) -> IntSerializer.put(outputBuffer,length,true,)@!(appendLength==0) && !(length<=DATA_MAX) } -> LOOP { -> outputBuffer.put(targetBuffer.get(i,),)@!(appendLength==0) && i<n } -> IF { -> System.out.println("compress APPEND "+length+": "+dump(targetBuffer,appendPosition,length,),)@!(appendLength==0) }
results[https://github.com/waldheinz/fat32-lib/blob/41ab901f11fe10bbb371ea82e71afc26f8bfb2fe/src/test/java/de/waldheinz/fs/fat/ClusterChainTest.java][testReadOffset][1] = -> TRY {  -> write=ByteBuffer.allocate(768,)@ -> LOOP { -> write.put(i,(byte) i,)@i<512 } -> cc.writeData(0,write,)@ -> read=ByteBuffer.allocate(512-5,)@ -> cc.readData(5,read,)@ -> LOOP { -> assertEquals(i%256,(int) read.get(i-5,)&0xff,)@i<512 } } CATCH(IOException) {}
results[https://github.com/stumbleupon/hbase/blob/605bbb7817a95e256887b280635c2e6679a562e5/src/main/java/org/apache/hadoop/hbase/util/ByteBufferUtils.java][copyFromBufferToBuffer][9] = -> IF { -> System.arraycopy(in.array(),sourceOffset+in.arrayOffset(),out.array(),out.position()+out.arrayOffset(),length,)@in.hasArray()&&out.hasArray() -> skip(out,length,)@in.hasArray()&&out.hasArray() } ELSE { -> LOOP { -> out.put(in.get(sourceOffset+i,),)@!(in.hasArray()&&out.hasArray()) && i<length } }
results[https://github.com/godares79/CS848-Project/blob/5fde6a1d649c6d4cb5a086fe976d43f22f073fca/apache-cassandra-1.1.6-src/src/java/org/apache/cassandra/utils/ByteBufferUtil.java][arrayCopy][6] = -> IF { -> System.arraycopy(src.array(),src.arrayOffset()+srcPos,dst.array(),dst.arrayOffset()+dstPos,length,)@src.hasArray()&&dst.hasArray() } ELSE { -> IF { -> throw new IndexOutOfBoundsException()@src.limit()-srcPos<length||dst.limit()-dstPos<length && !(src.hasArray()&&dst.hasArray()) } -> LOOP { -> dst.put(++dstPos,src.get(++srcPos,),)@!(src.hasArray()&&dst.hasArray()) && !(src.limit()-srcPos<length||dst.limit()-dstPos<length) } }
results[https://github.com/uci-cbcl/genomix/blob/0a39165800d42ff61fee2abb4e8549a5bf4f1465/genomix/genomix-core/src/main/java/edu/uci/ics/genomix/dataflow/aggregators/MergeKmerAggregateFactory.java][aggregate][1] = -> TRY {  -> bitmap|=accessor.getBuffer().get(tupleOffset+accessor.getFieldSlotsLength()+fieldStart,)@ -> stateoffset=statetupleOffset+stateAccessor.getFieldSlotsLength()+statefieldStart@ -> buf=ByteBuffer.wrap(data,)@ -> bitmap|=buf.getChar(stateoffset,)@ -> buf.position(stateoffset+1,)@ -> count+=buf.get()@ -> IF { -> count=(byte) max@count>max } -> buf.put(stateoffset,bitmap,)@ -> buf.put(stateoffset+1,count,)@ } CATCH(HyracksDataException) {}
results[https://github.com/buzheng/buzheng-study-java/blob/806c68192742caab7d45b6c523cfbe492b123f63/src/main/java/org/buzheng/study/nio/TestReadOnlyBuffer.java][main][1] = -> buffer=ByteBuffer.allocate(10,)@ -> LOOP { -> buffer.put((byte) i,)@i<buffer.capacity() } -> readonly=buffer.asReadOnlyBuffer()@ -> LOOP { -> b=buffer.get(i,)@i<buffer.capacity() -> buffer.put(i,b,)@i<buffer.capacity() } -> readonly.position(0,)@ -> readonly.limit(buffer.capacity(),)@ -> LOOP { -> System.out.println(readonly.get(),)@readonly.remaining()>0 }
results[https://github.com/thecookie/Ardor3D/blob/eabcf8176ed8cfcb25b31dfd2f1dbc09f983f82b/ardor3d-core/src/main/java/com/ardor3d/image/util/GeneratedImageFactory.java][createColorImageFromLuminance8][1] = -> LOOP { -> src=lumImage.getData(i,)@i<lumImage.getDepth() -> size=src.capacity()@ -> out=BufferUtils.createByteBuffer(size*(useAlpha)?4:3,)@ -> LOOP { -> c=colorTable[src.get(x,)&0xFF]@x<size -> data[++j]=(byte) c.getRed()*255@ -> data[++j]=(byte) c.getGreen()*255@ -> data[++j]=(byte) c.getBlue()*255@ -> IF { -> data[++j]=(byte) c.getAlpha()*255@ } } -> out.put(data,)@ -> dataList.add(out,)@ }
results[https://github.com/linkedin/databus/blob/0f519041f31e234ec49525950935a50416c488e5/databus-core/databus-core-impl/src/main/java/com/linkedin/databus/core/DbusEventBuffer.java][compactStgBuffer][1] = -> _readBuffer.clear()@ -> IF { -> IF { -> LOG.debug("Copying "+readPos.bytesRemaining()+" bytes to the start of the readBuffer",)@readPos.hasNext() } -> LOOP { -> _readBuffer.put(_readBuffer.get(readPos.getPosition()+i,),)@readPos.hasNext() && i<readPos.bytesRemaining() } -> readPos.startIteration()@readPos.hasNext() -> IF { -> _log.debug("readBuffer after compaction: "+_readBuffer+"; "+readPos,)@readPos.hasNext() } }
results[https://github.com/OpenSpaces/OpenSpaces/blob/af877e00a33332764e43a1a3a1ec6a6090d5ad04/src/main/java/org/openspaces/memcached/LocalCacheElement.java][append][4] = -> newLength=getData().length+element.getData().length@ -> replace=new LocalCacheElement(getKey(),getFlags(),getExpire(),0L,)@ -> b=ByteBuffer.allocateDirect(newLength,)@ -> b.put(getData(),)@ -> b.put(element.getData(),)@ -> replace.setData( new byte[],)@ -> b.flip()@ -> b.get(replace.getData(),)@ -> replace.setCasUnique(replace.getCasUnique()+1,)@
results[https://github.com/rafalkrupinski/jetty/blob/4de5b0ad636ea0f571f379775b158f2580b80b28/jetty-websocket/websocket-core/src/test/java/org/eclipse/jetty/websocket/protocol/RFC6455ExamplesParserTest.java][testSingleUnmasked64KByteBinaryMessage][4] = -> buf=ByteBuffer.allocate(dataSize+10,)@ -> buf.put( new byte[],)@ -> buf.putLong(dataSize,)@ -> LOOP { -> buf.put((byte) 0x77,)@ } -> buf.flip()@ -> parser.parse(buf,)@ -> data=bin.getPayload()@ -> Assert.assertThat("BinaryFrame.payload.length",data.remaining(),is(dataSize,),)@ -> LOOP { -> Assert.assertThat("BinaryFrame.payload["+i+"]",data.get(i,),is((byte) 0x77,),)@i<dataSize }
results[https://github.com/rektide/waterken-mirror/blob/6abadd762007353fc49f3478eb1fbf05e4c1c7a6/waterken/k2v/src/org/k2v/trie/Trie.java][listMap][2] = -> IF { -> heads=map.duplicate()@!(SizeOfBitmap>=arity) -> heads.rewind().limit(arity,)@SizeOfBitmap>=arity -> map.position(arity,)@SizeOfBitmap>=arity -> return heads@SizeOfBitmap>=arity } -> heads=ByteBuffer.allocate(arity,)@!(SizeOfBitmap>=arity) -> LOOP { -> flags=map.get(i,)@i!=SizeOfBitmap && !(SizeOfBitmap>=arity) -> LOOP { -> IF { -> heads.put((byte) i*8+j,)@i!=SizeOfBitmap && !(SizeOfBitmap>=arity) } } } -> heads.rewind()@!(SizeOfBitmap>=arity) -> map.position(SizeOfBitmap,)@!(SizeOfBitmap>=arity)
results[https://github.com/rwl/j2objc/blob/1496c1c02d708c136e32b7c19907df621d01c8ad/jre_emul/apache_harmony/classlib/modules/nio/src/test/java/common/org/apache/harmony/nio/tests/java/nio/ByteBufferTest.java][testPutbyte][7] = -> IF { -> TRY { -> buf.clear()@buf.isReadOnly() -> buf.put((byte) 0,)@buf.isReadOnly() } -> return @buf.isReadOnly() } -> buf.clear()@!(buf.isReadOnly()) -> LOOP { -> assertEquals(buf.position(),i,)@i<buf.capacity() && !(buf.isReadOnly()) -> ret=buf.put((byte) i,)@i<buf.capacity() && !(buf.isReadOnly()) -> assertEquals(buf.get(i,),(byte) i,)@i<buf.capacity() && !(buf.isReadOnly()) -> assertSame(ret,buf,)@i<buf.capacity() && !(buf.isReadOnly()) } -> TRY { -> buf.put((byte) 0,)@!(buf.isReadOnly()) }
results[https://github.com/hashio/websocket-client/blob/976ca73086e6d3c4d992e212eb6a150aa8137ccc/src/main/java/jp/a840/websocket/handler/MaskDraft06FrameStreamHandler.java][nextUpstreamHandler][2] = -> TRY {  -> buf=ByteBuffer.allocate(4+buffer.remaining(),)@ -> buf.putInt(random.nextInt(),)@ -> buf.put(buffer,)@ -> buf.flip()@ -> buf.get(maskkey,0,4,)@ -> LOOP { -> position=buf.position()@buf.hasRemaining() -> buf.put((byte) buf.get(position,)^maskkey[++m%4],)@buf.hasRemaining() } -> buf.flip()@ -> chain.nextUpstreamHandler(ws,buf,frame,)@ } CATCH(WebSocketException) {}
results[https://github.com/bnicolae/blobseer/blob/78d3e10b760424c10181a029bd5e3897dd9450c8/bindings/java/test/Test.java][main][2] = -> buffer=ByteBuffer.allocateDirect(2*BUFFER_SIZE,)@ -> LOOP { -> buffer.put(i,(byte) 0,)@i<2*BUFFER_SIZE } -> handler.append(2*BUFFER_SIZE,buffer,)@ -> LOOP { -> buffer.put(i,(byte) i,)@i<BUFFER_SIZE } -> handler.write(0,BUFFER_SIZE,buffer,)@ -> result=ByteBuffer.allocateDirect(BUFFER_SIZE,)@ -> LOOP { -> result.put(i,(byte) 0,)@i<BUFFER_SIZE } -> handler.read(0,BUFFER_SIZE,result,0,)@ -> LOOP { -> c=c&result.get(i,)==(byte) i%256@i<BUFFER_SIZE } -> System.out.println(c,)@
results[https://github.com/JustAnother1/Friends-United/blob/61f4cd3bea30b0da31babd922515348c700f0f31/src/org/FriendsUnited/NetworkLayer/PacketQueue/NIOPacketQueue.java][handleWrite][1] = -> LOOP { -> writeBuffer.clear()@!(false==queue.isEmpty()) -> buf=queue.get(0,)@false==queue.isEmpty() -> writeBuffer.put(buf,)@!(false==queue.isEmpty()) -> TRY { -> writeBuffer.flip()@!(false==queue.isEmpty()) -> socketChannel.write(writeBuffer,)@!(false==queue.isEmpty()) } CATCH(IOException) { -> log.error(Tool.fromExceptionToString(e,),)@!(false==queue.isEmpty()) } -> IF { -> remainderSize=writeBuffer.remaining()@writeBuffer.remaining()>0 && !(false==queue.isEmpty()) -> writeBuffer.get(remainder,)@writeBuffer.remaining()>0 && !(false==queue.isEmpty()) -> queue.add(0,remainder,)@!(writeBuffer.remaining()>0) && false==queue.isEmpty() -> return @writeBuffer.remaining()>0 && false==queue.isEmpty() } }
results[https://github.com/waldheinz/fat32-lib/blob/41ab901f11fe10bbb371ea82e71afc26f8bfb2fe/src/test/java/de/waldheinz/fs/fat/ClusterChainTest.java][testWriteData][2] = -> TRY {  -> data=ByteBuffer.allocate(chunkSize,)@ -> LOOP { -> data.put(i,(byte) i&0xff,)@i<chunkSize } -> LOOP { -> cc.writeData(i*chunkSize,data,)@i<writes -> data.rewind()@ } -> read=ByteBuffer.allocate(writes*chunkSize,)@ -> cc.readData(0,read,)@ -> LOOP { -> assertEquals(expected&0xff,read.get(i,),)@i<writes*chunkSize -> expected=(byte) ++expected%chunkSize@i<writes*chunkSize } } CATCH(IOException) {}
results[https://github.com/rafalkrupinski/jetty/blob/d19f177caea3cc508bde905f12cb15b9461c89ab/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/core/extensions/compress/DeflateCompressionMethod.java][process][2] = -> buf=ByteBuffer.allocate(bufferSize,)@ -> BufferUtil.clearToFill(buf,)@ -> LOOP { -> len=deflater.deflate(out,0,out.length,Deflater.SYNC_FLUSH,)@!(deflater.finished()) -> IF { -> LOG.debug("Deflater: finished={}, needsInput={}, len={}",deflater.finished(),deflater.needsInput(),len,)@!(deflater.finished()) && LOG.isDebugEnabled() } -> buf.put(out,0,len,)@ } -> BufferUtil.flipToFlush(buf,0,)@ -> IF { -> b0=buf.get(0,)@ -> IF { -> buf.put(0,b0^=1,)@b0&1!=0 } }
results[https://github.com/buzheng/buzheng-study-java/blob/806c68192742caab7d45b6c523cfbe492b123f63/src/main/java/org/buzheng/study/nio/TestBufferSlice.java][main][1] = -> buffer=ByteBuffer.allocate(10,)@ -> LOOP { -> buffer.put((byte) i,)@i<buffer.capacity() } -> buffer.position(3,)@ -> buffer.limit(7,)@ -> slice=buffer.slice()@ -> LOOP { -> b=slice.get(i,)@i<slice.capacity() -> slice.put(i,b,)@i<slice.capacity() } -> buffer.position(0,)@ -> buffer.limit(buffer.capacity(),)@ -> LOOP { -> System.out.println(buffer.get(),)@buffer.remaining()>0 }
results[https://github.com/royb3/Energy_Vampires/blob/e0ca639706de77227d928217a455f76a1e3fecff/Mobile/EnergyVampire/src/net/tootallnate/websocket/WebSocket.java][handleRead][1] = -> TRY {  -> TRY { -> socketBuffer.rewind()@ -> bytesRead=this.socketChannel.read(this.socketBuffer,)@ } } ELSE { -> IF { -> LOOP { -> buffer.rewind()@ -> buffer.put(socketBuffer.get(i,),)@i<bytesRead -> this.buffer.rewind()@ } } } CATCH(IOException,NoSuchAlgorithmException) {}
results[https://github.com/rafalkrupinski/jetty/blob/727cf815a250f9a2305f3b377f8f0450b9820bd9/jetty-websocket/websocket-common/src/test/java/org/eclipse/jetty/websocket/common/extensions/compress/FrameCompressionExtensionTest.java][testDeflateBasics][1] = -> TRY {  -> outbuf=ByteBuffer.allocate(64,)@ -> BufferUtil.clearToFill(outbuf,)@ -> LOOP { -> len=compressor.deflate(out,0,out.length,Deflater.SYNC_FLUSH,)@!(compressor.finished()) -> IF { -> outbuf.put(out,0,len,)@len>0 } } -> BufferUtil.flipToFlush(outbuf,0,)@ -> b0=outbuf.get(0,)@ -> IF { -> outbuf.put(0,b0^=1,)@b0&1!=0 } -> compressed=BufferUtil.toArray(outbuf,)@ } CATCH(Exception) {}
results[https://github.com/rafalkrupinski/jetty/blob/fac580c374127acd8fc9b955f415cedd8b5ec6dc/jetty-websocket/websocket-core/src/test/java/org/eclipse/jetty/websocket/core/extensions/WebkitDeflateFrameExtensionTest.java][testDeflateBasics][3] = -> TRY {  -> outbuf=ByteBuffer.allocate(64,)@ -> BufferUtil.clearToFill(outbuf,)@ -> LOOP { -> len=compressor.deflate(out,0,out.length,Deflater.SYNC_FLUSH,)@!(compressor.finished()) -> IF { -> System.err.printf("Compressed %,d bytes%n",len,)@len>0 -> outbuf.put(out,0,len,)@len>0 } } -> BufferUtil.flipToFlush(outbuf,0,)@ -> b0=outbuf.get(0,)@ -> IF { -> outbuf.put(0,b0^=1,)@b0&1!=0 } -> compressed=BufferUtil.toArray(outbuf,)@ } CATCH(Exception) {}
results[https://github.com/GrizzlyNIO/grizzly-mirror/blob/e1306941769ac79f445ac3d70ae930302c4c17c7/modules/grizzly/src/main/java/org/glassfish/grizzly/memory/BufferUtils.java][put][1] = -> IF { -> throw new BufferOverflowException()@dstBuffer.remaining()<length } -> IF { -> System.arraycopy(srcBuffer.array(),srcBuffer.arrayOffset()+srcOffset,dstBuffer.array(),dstBuffer.arrayOffset()+dstBuffer.position(),length,)@srcBuffer.hasArray()&&dstBuffer.hasArray() && !(dstBuffer.remaining()<length) -> dstBuffer.position(dstBuffer.position()+length,)@srcBuffer.hasArray()&&dstBuffer.hasArray() && !(dstBuffer.remaining()<length) } ELSE { -> LOOP { -> dstBuffer.put(srcBuffer.get(i,),)@!(srcBuffer.hasArray()&&dstBuffer.hasArray()) && i<srcOffset+length && !(dstBuffer.remaining()<length) } }
results[https://github.com/jmesnil/hornetq-old/blob/624422fb8ae6761c6c7e65778189e9cf5b87ff20/tests/src/org/jboss/messaging/tests/unit/core/asyncio/timedbuffer/TimedBufferTest.java][testFillBuffer][3] = -> LOOP { -> record=ByteBuffer.allocate(10,)@ -> LOOP { -> record.put((byte) getSamplebyte(++x,),)@ } -> record.rewind()@ -> timedBuffer.addBytes(record,dummyCallback,)@ } -> flushedBuffer=buffers.get(0,)@ -> assertEquals(100,flushedBuffer.limit(),)@ -> assertEquals(100,flushedBuffer.capacity(),)@ -> flushedBuffer.rewind()@ -> LOOP { -> assertEquals(getSamplebyte(i,),flushedBuffer.get(),)@i<100 }
results[https://github.com/codefireXperiment/libcore/blob/e69c2998bebbe2bf8e9f01ca6e644fd41c7914ec/harmony-tests/src/test/java/org/apache/harmony/nio/tests/java/nio/ByteBufferTest.java][testPutbyteArray][7] = -> IF { -> TRY { -> buf.put(array,)@buf.isReadOnly() } -> return @buf.isReadOnly() } -> buf.clear()@!(buf.isReadOnly()) -> LOOP { -> assertEquals(buf.position(),i,)@i<buf.capacity() && !(buf.isReadOnly()) -> array[0]=(byte) i@i<buf.capacity() && !(buf.isReadOnly()) -> ret=buf.put(array,)@i<buf.capacity() && !(buf.isReadOnly()) -> assertEquals(buf.get(i,),(byte) i,)@i<buf.capacity() && !(buf.isReadOnly()) -> assertSame(ret,buf,)@i<buf.capacity() && !(buf.isReadOnly()) } -> TRY { -> buf.put(array,)@!(buf.isReadOnly()) } -> TRY { -> buf.put((byte[]) null,)@!(buf.isReadOnly()) }
results[https://github.com/uvalbbu/dalvik_test/blob/e595037cf49109e9e20b47e6e191eda45e414008/luni/src/test/java/org/apache/harmony/nio/tests/java/nio/ByteBufferTest.java][testPutbyteArray][13] = -> IF { -> TRY { -> buf.put(array,)@buf.isReadOnly() } -> return @buf.isReadOnly() } -> buf.clear()@!(buf.isReadOnly()) -> LOOP { -> assertEquals(i,buf.position(),)@i<buf.capacity() && !(buf.isReadOnly()) -> array[0]=(byte) i@i<buf.capacity() && !(buf.isReadOnly()) -> ret=buf.put(array,)@i<buf.capacity() && !(buf.isReadOnly()) -> assertEquals((byte) i,buf.get(i,),)@i<buf.capacity() && !(buf.isReadOnly()) -> assertSame(ret,buf,)@i<buf.capacity() && !(buf.isReadOnly()) } -> TRY { -> buf.put(array,)@!(buf.isReadOnly()) } -> TRY { -> buf.put((byte[]) null,)@!(buf.isReadOnly()) }
results[https://github.com/rhusar/HornetQ-oldmigration/blob/3d8f590384cc06a44589a03ec50cdf80c1c57048/tests/src/org/jboss/messaging/tests/unit/util/timedbuffer/TimedBufferTest.java][testFillBuffer][1] = -> LOOP { -> record=ByteBuffer.allocate(10,)@ -> LOOP { -> record.put((byte) getSamplebyte(++x,),)@ } -> record.rewind()@ -> timedBuffer.addBytes(record,false,dummyCallback,)@ } -> flushedBuffer=buffers.get(0,)@ -> assertEquals(100,flushedBuffer.limit(),)@ -> assertEquals(100,flushedBuffer.capacity(),)@ -> flushedBuffer.rewind()@ -> LOOP { -> assertEquals(getSamplebyte(i,),flushedBuffer.get(),)@i<100 }
results[https://github.com/apache/mina/blob/3ea75ee84815bbb6502466b8a5b8386454bf0597/core/src/test/java/org/apache/mina/common/ByteBufferTest.java][testSlice][1] = -> TRY {  -> original=ByteBuffer.allocate(16,).sweep()@ -> original.position(4,)@ -> original.limit(10,)@ -> slice=original.slice()@ -> original.put(4,(byte) 127,)@ -> Assert.assertEquals(0,slice.position(),)@ -> Assert.assertEquals(6,slice.limit(),)@ -> Assert.assertEquals(6,slice.capacity(),)@ -> Assert.assertNotSame(original.buf(),slice.buf(),)@ -> Assert.assertEquals(127,slice.get(0,),)@ } CATCH(Exception) {}
results[https://github.com/GrizzlyNIO/grizzly-mirror/blob/cb13c6e50a60bcfcd7fdf890a197e0495999d664/modules/grizzly/src/main/java/org/glassfish/grizzly/memory/Buffers.java][put][1] = -> IF { -> LOGGER.log(Level.WARNING,LogMessages.WARNING_GRIZZLY_BUFFERS_OVERFLOW_EXCEPTION(srcBuffer,srcOffset,length,dstBuffer,),)@dstBuffer.remaining()<length -> throw new BufferOverflowException()@dstBuffer.remaining()<length } -> IF { -> System.arraycopy(srcBuffer.array(),srcBuffer.arrayOffset()+srcOffset,dstBuffer.array(),dstBuffer.arrayOffset()+dstBuffer.position(),length,)@srcBuffer.hasArray()&&dstBuffer.hasArray() && !(dstBuffer.remaining()<length) -> dstBuffer.position(dstBuffer.position()+length,)@srcBuffer.hasArray()&&dstBuffer.hasArray() && !(dstBuffer.remaining()<length) } ELSE { -> LOOP { -> dstBuffer.put(srcBuffer.get(i,),)@!(srcBuffer.hasArray()&&dstBuffer.hasArray()) && i<srcOffset+length && !(dstBuffer.remaining()<length) } }
results[https://github.com/codefireXperiment/libcore/blob/e69c2998bebbe2bf8e9f01ca6e644fd41c7914ec/harmony-tests/src/test/java/org/apache/harmony/nio/tests/java/nio/ByteBufferTest.java][testPutintbyte][7] = -> IF { -> TRY { -> buf.put(0,(byte) 0,)@buf.isReadOnly() } -> return @buf.isReadOnly() } -> buf.clear()@!(buf.isReadOnly()) -> LOOP { -> assertEquals(buf.position(),0,)@i<buf.capacity() && !(buf.isReadOnly()) -> ret=buf.put(i,(byte) i,)@i<buf.capacity() && !(buf.isReadOnly()) -> assertEquals(buf.get(i,),(byte) i,)@i<buf.capacity() && !(buf.isReadOnly()) -> assertSame(ret,buf,)@i<buf.capacity() && !(buf.isReadOnly()) } -> TRY { -> buf.put(-1,(byte) 0,)@!(buf.isReadOnly()) } -> TRY { -> buf.put(buf.limit(),(byte) 0,)@!(buf.isReadOnly()) }
results[https://github.com/rektide/waterken-mirror/blob/6abadd762007353fc49f3478eb1fbf05e4c1c7a6/waterken/k2v/src/org/k2v/trie/Trie.java][growMap][2] = -> IF { -> array=map.array()@!(SizeOfBitmap>arity) -> off=map.arrayOffset()@!(SizeOfBitmap>arity) -> return ByteBuffer.wrap(array,off-1-8,map.limit()+1+8,).slice().putLong(arity+1+index*8,Null,)@SizeOfBitmap>arity } -> IF { -> LOOP { -> unsigned=map.get(i,)&0xFF@!(SizeOfBitmap>arity) && i!=arity } -> map.position(0,)@!(SizeOfBitmap>arity) -> map.put(bitmap,)@!(SizeOfBitmap>arity) } -> array=map.array()@!(SizeOfBitmap>arity) -> off=map.arrayOffset()@!(SizeOfBitmap>arity) -> return ByteBuffer.wrap(array,off-8,map.limit()+8,).slice().putLong(SizeOfBitmap+index*8,Null,)@!(SizeOfBitmap>arity)
results[https://github.com/chris-martin/h2/blob/690ef337c3b41d2d0d43ef07af0b35f14c25db36/h2/src/main/org/h2/compress/CompressLZF.java][expand][6] = -> out.position()<out.capacity()@ -> LOOP { -> ctrl=in.get()&255@ -> IF { -> LOOP { -> out.put(in.get(),)@ } } ELSE { -> IF { -> len+=in.get()&255@len==7 } -> ctrl-=in.get()&255@!(ctrl<MAX_LITERAL) -> ctrl+=out.position()@!(ctrl<MAX_LITERAL) -> LOOP { -> out.put(out.get(++ctrl,),)@!(ctrl<MAX_LITERAL) } } }
results[https://github.com/JustAnother1/Friends-United/blob/716e588026e78c5572f8e3b6fa7b1c49347e573b/src/net/FriendsUnited/NodeLevel/RemoteNode.java][handleWrite][1] = -> LOOP { -> writeBuffer.clear()@!(false==queue.isEmpty()) -> buf=queue.get(0,)@false==queue.isEmpty() -> writeBuffer.put(MAGIC,)@!(false==queue.isEmpty()) -> writeBuffer.put(VERSION,)@!(false==queue.isEmpty()) -> writeBuffer.put((byte) 0xff&buf.length/256%256,)@!(false==queue.isEmpty()) -> writeBuffer.put((byte) 0xff&buf.length%256,)@!(false==queue.isEmpty()) -> writeBuffer.put(buf,)@!(false==queue.isEmpty()) -> TRY { -> writeBuffer.flip()@!(false==queue.isEmpty()) -> socketChannel.write(writeBuffer,)@!(false==queue.isEmpty()) } CATCH(IOException) { -> log.error(Tool.fromExceptionToString(e,),)@!(false==queue.isEmpty()) } -> IF { -> remainderSize=writeBuffer.remaining()@writeBuffer.remaining()>0 && !(false==queue.isEmpty()) -> writeBuffer.get(remainder,)@writeBuffer.remaining()>0 && !(false==queue.isEmpty()) -> queue.add(0,remainder,)@!(writeBuffer.remaining()>0) && false==queue.isEmpty() -> return @writeBuffer.remaining()>0 && false==queue.isEmpty() } }
results[https://github.com/philipv/bonfire/blob/00ebac8b7ed1279187bb2a19be7f554d89bee441/default/nio-resources/src/SliceBuffer.java][main][1] = -> TRY {  -> buffer=ByteBuffer.allocate(10,)@ -> LOOP { -> buffer.put((byte) i,)@i<buffer.capacity() } -> buffer.position(3,)@ -> buffer.limit(7,)@ -> slice=buffer.slice()@ -> LOOP { -> b=slice.get(i,)@i<slice.capacity() -> slice.put(i,b,)@i<slice.capacity() } -> buffer.position(0,)@ -> buffer.limit(buffer.capacity(),)@ -> LOOP { -> System.out.println(buffer.get(),)@buffer.remaining()>0 } } CATCH(Exception) {}
results[https://github.com/yamcs/yamcs/blob/3994912692c5596779c4de1ac2fb77f6f2b2a461/yamcs-core/src/main/java/org/yamcs/tctm/MulticastTmProvider.java][getNextPacket][1] = -> LOOP { -> TRY { -> data=datagram.getData()@ -> offset=datagram.getOffset()@ -> bb=ByteBuffer.wrap(data,)@ -> unixTimesec=0xFFFFFFFFL&(long) bb.getInt(offset+1,)+315964800L@ -> unixTimeMicrosec=0xFF&bb.get(offset+5,)*1000000/256@ -> rectime=TimeEncoding.fromUnixTime(unixTimesec,unixTimeMicrosec,)@ -> IF { -> log.warn("Incomplete packet received on the multicast. expected"+pktLength+", received"+datagram.getLength()-10+": "+datagram,)@datagram.getLength()<10+pktLength } -> bb=ByteBuffer.allocate(pktLength,)@ -> bb.put(data,offset+10,pktLength,)@ } CATCH(IOException) { -> log.warn("exception '"+e.toString()+"' thrown when reading from the multicast socket"+group+":"+port,)@ } } -> return new PacketWithTime(rectime,CcsdsPacket.getInstant(bb,),bb,)@
results[https://github.com/jantje/arduino-eclipse-plugin/blob/10b348cc81b6aae1dcdbf40da2edb0bb9fc5b52b/it.baeyens.arduino.monitor/src/it/baeyens/arduino/monitor/views/ScopeListener.java][internalExtractAndProcessScopeData][1] = -> LOOP { -> IF { -> bytestoRead=myReceivedScopeData.getShort(scannnedDataPointer,)@scannnedDataPointer<myEndPosition-6 && myReceivedScopeData.getShort(scannnedDataPointer,)==ArduinoConst.SCOPE_START_DATA } ELSE { -> IF { -> myNumDataSetsToReceive=myReceivedScopeData.getShort(scannnedDataPointer,)/2+0@scannnedDataPointer<myEndPosition-6 && bytestoRead+2+scannnedDataPointer<myEndPosition && myReceivedScopeData.getShort(scannnedDataPointer,)==ArduinoConst.SCOPE_START_DATA -> LOOP { -> data=myReceivedScopeData.getShort(scannnedDataPointer+2+CurData*2,)@scannnedDataPointer<myEndPosition-6 && CurData<myNumDataSetsToReceive && bytestoRead+2+scannnedDataPointer<myEndPosition && myReceivedScopeData.getShort(scannnedDataPointer,)==ArduinoConst.SCOPE_START_DATA } } } } -> LOOP { -> TRY { -> myReceivedScopeData.put(curByte,myReceivedScopeData.get(curByte+lastFoundData,),)@curByte<=myEndPosition-lastFoundData } CATCH(IndexOutOfBoundsException) { -> Common.log(new Status(IStatus.WARNING,ArduinoConst.CORE_PLUGIN_ID,"buffer overflow in ScopeListener ",e,),)@ } }
results[https://github.com/metamx/druid/blob/50b6888210c432304730459731bb749ff52230f3/processing/src/main/java/io/druid/query/aggregation/hyperloglog/HyperLogLogCollector.java][toByteBuffer][1] = -> IF { -> retVal=ByteBuffer.wrap( new byte[],)@!(storageBuffer.remaining()==getNumBytesForDenseStorage()&&numNonZeroRegisters<DENSE_THRESHOLD) -> setVersion(retVal,)@!(storageBuffer.remaining()==getNumBytesForDenseStorage()&&numNonZeroRegisters<DENSE_THRESHOLD) -> setRegisterOffset(retVal,getRegisterOffset(),)@!(storageBuffer.remaining()==getNumBytesForDenseStorage()&&numNonZeroRegisters<DENSE_THRESHOLD) -> setNumNonZeroRegisters(retVal,numNonZeroRegisters,)@storageBuffer.remaining()==getNumBytesForDenseStorage()&&numNonZeroRegisters<DENSE_THRESHOLD -> setMaxOverflowValue(retVal,getMaxOverflowValue(),)@!(storageBuffer.remaining()==getNumBytesForDenseStorage()&&numNonZeroRegisters<DENSE_THRESHOLD) -> setMaxOverflowRegister(retVal,getMaxOverflowRegister(),)@!(storageBuffer.remaining()==getNumBytesForDenseStorage()&&numNonZeroRegisters<DENSE_THRESHOLD) -> retVal.position(getPayloadBytePosition(retVal,),)@!(storageBuffer.remaining()==getNumBytesForDenseStorage()&&numNonZeroRegisters<DENSE_THRESHOLD) -> LOOP { -> IF { -> retVal.putShort((short) 0xffff&i-initPosition,)@!(storageBuffer.remaining()==getNumBytesForDenseStorage()&&numNonZeroRegisters<DENSE_THRESHOLD) && storageBuffer.get(i,)!=0 && i<startPosition+NUM_BYTES_FOR_BUCKETS -> retVal.put(storageBuffer.get(i,),)@storageBuffer.remaining()==getNumBytesForDenseStorage()&&numNonZeroRegisters<DENSE_THRESHOLD && storageBuffer.get(i,)!=0 && i<startPosition+NUM_BYTES_FOR_BUCKETS } } -> retVal.rewind()@!(storageBuffer.remaining()==getNumBytesForDenseStorage()&&numNonZeroRegisters<DENSE_THRESHOLD) -> return retVal.asReadOnlyBuffer()@storageBuffer.remaining()==getNumBytesForDenseStorage()&&numNonZeroRegisters<DENSE_THRESHOLD } -> return storageBuffer.asReadOnlyBuffer()@!(storageBuffer.remaining()==getNumBytesForDenseStorage()&&numNonZeroRegisters<DENSE_THRESHOLD)
results[https://github.com/FoxyCorndog/WorkspaceOld/blob/147ec6072c24c285e9a1ac5610a9a1c4d86a951e/gafggfds/LWJGL/lwjgl-2.8.5/src/java/org/lwjgl/util/glu/MipMap.java][gluScaleImage][8] = -> IF { -> return GLU_INVALID_ENUM@components==-1 } -> dataIn.rewind()@!(components==-1) -> LOOP { -> LOOP { -> tempIn[++k]=dataIn.get(++ubptr,)&0xff@!(components==-1) } } -> dataIn.rewind()@!(components==-1) -> LOOP { -> LOOP { -> tempIn[++k]=dataIn.getFloat(fptr,)@!(components==-1) } } -> LOOP { -> LOOP { -> dataOut.put(++ubptr,(byte) tempOut[++k],)@!(components==-1) } } -> LOOP { -> LOOP { -> dataOut.putFloat(fptr,tempOut[++k],)@!(components==-1) } }
results[https://github.com/srcvirus/floodlight/blob/ba0fa0ab2d08b685686552b3bf496ba3f9a88d79/src/main/java/net/floodlightcontroller/packet/ICMP.java][serialize][3] = -> IF { -> padding=paddingMap.get(this.icmpType,)@paddingMap.containsKey(this.icmpType,) } -> IF { -> payloadData=payload.serialize()@ } -> bb=ByteBuffer.wrap(data,)@ -> bb.put(this.icmpType,)@ -> bb.put(this.icmpCode,)@ -> bb.putShort(this.checksum,)@ -> LOOP { -> bb.put((byte) 0,)@ } -> IF { -> bb.put(payloadData,)@payloadData!=null } -> IF { -> bb.rewind()@ -> LOOP { -> accumulation+=0xffff&bb.getShort()@ } -> IF { -> accumulation+=bb.get()&0xff<<8@ } -> this.checksum=(short) ~accumulation&0xffff@this.checksum==0 -> bb.putShort(2,this.checksum,)@this.checksum==0 }
results[https://github.com/concord-consortium/energy3d/blob/c8803c467439014c127ee278f8d6ca5ca8b7d1f2/src/main/java/org/concord/energy3d/model/HousePart.java][getTexture][2] = -> IF { -> color=new Color(defaultColor.getRed(),defaultColor.getGreen(),defaultColor.getBlue(),)@ -> image=texture.getImage()@ -> data=image.getData(0,)@ -> LOOP { -> LOOP { -> alpha=data.get(y*image.getWidth()+x*4+3,)@x<image.getWidth() && y<image.getHeight() -> IF { -> data.put(y*image.getWidth()+x*4,(byte) color.getRed(),)@x<image.getWidth() && y<image.getHeight() -> data.put(y*image.getWidth()+x*4+1,(byte) color.getGreen(),)@x<image.getWidth() && y<image.getHeight() -> data.put(y*image.getWidth()+x*4+2,(byte) color.getBlue(),)@x<image.getWidth() && y<image.getHeight() } } } -> texture.setImage(image,)@ }
results[https://github.com/xerial/larray/blob/8657a781260c5ac0c9cb9931cf79f4ca72a4a15f/larray-buffer/src/main/java/xerial/larray/core/WritableChannelWrap.java][write][1] = -> TRY {  -> len=(int) Math.max(src.limit()-src.position(),0,)@ -> IF { -> src.put(b.toDirectByteBuffer(cursor,len,),)@src.isDirect() } ELSE { -> IF { -> writeLen=b.readFrom(src.array(),src.position(),cursor,len,)@src.hasArray() && !(src.isDirect()) } ELSE { -> LOOP { -> unsafe.putByte(b.data()+i,src.get((int) src.position()+i,),)@!(src.hasArray()) && i<len && !(src.isDirect()) } } } -> src.position(src.position()+writeLen,)@ } CATCH(IOException) {}
results[https://github.com/warneke/stratosphere/blob/78629ebcfb672a88858094dd76b822d4fcdb129f/nephele/nephele-server/src/main/java/eu/stratosphere/nephele/io/channels/DefaultRecordDeserializer.java][ensureAvailable][1] = -> TRY {  -> IF { -> newBuf=ByteBuffer.allocate(numberOfBytes,)@this.buf.capacity()<numberOfBytes -> newBuf.put(this.buf,)@this.buf.capacity()<numberOfBytes -> newBuf.flip()@ } -> remaining=this.buf.remaining()@ -> LOOP { -> offset=this.buf.position()@!(remaining<numberOfBytes) -> IF { -> LOOP { -> this.buf.put(i,this.buf.get(offset+i,),)@!(remaining<numberOfBytes) && i<remaining && offset>0 } } -> this.buf.position(remaining,)@remaining<numberOfBytes -> this.buf.limit(this.buf.capacity(),)@!(remaining<numberOfBytes) -> read=this.readableByteChannel.read(this.buf,)@!(remaining<numberOfBytes) -> IF { -> throw new BufferUnderflowException()@remaining<numberOfBytes && read<0 } -> this.buf.flip()@!(remaining<numberOfBytes) && !(read<0) -> remaining=this.buf.remaining()@remaining<numberOfBytes && !(read<0) } } CATCH(IOException) {}
results[https://github.com/apache/mina/blob/3ea75ee84815bbb6502466b8a5b8386454bf0597/core/src/test/java/org/apache/mina/common/ByteBufferTest.java][testReadOnlyBuffer][1] = -> TRY {  -> original=ByteBuffer.allocate(16,).sweep()@ -> original.position(4,)@ -> original.limit(10,)@ -> duplicate=original.asReadOnlyBuffer()@ -> original.put(4,(byte) 127,)@ -> Assert.assertEquals(4,duplicate.position(),)@ -> Assert.assertEquals(10,duplicate.limit(),)@ -> Assert.assertEquals(16,duplicate.capacity(),)@ -> Assert.assertNotSame(original.buf(),duplicate.buf(),)@ -> Assert.assertEquals(127,duplicate.get(4,),)@ -> TRY { -> original=ByteBuffer.allocate(16,)@ -> duplicate=original.asReadOnlyBuffer()@ -> duplicate.putString("A very very very very looooooong string",Charset.forName("ISO-8859-1",).newEncoder(),)@ } } CATCH(Exception) {}
results[https://github.com/xerial/larray/blob/3cc8a6ae4325f43c47ea16616d8e097e3351e70e/larray-buffer/src/main/java/xerial/larray/buffer/WritableChannelWrap.java][write][1] = -> TRY {  -> len=(int) Math.max(src.limit()-src.position(),0,)@ -> IF { -> src.put(b.toDirectByteBuffer(cursor,len,),)@src.isDirect() } ELSE { -> IF { -> writeLen=b.readFrom(src.array(),src.position(),cursor,len,)@src.hasArray() && !(src.isDirect()) } ELSE { -> LOOP { -> unsafe.putByte(b.address()+i,src.get((int) src.position()+i,),)@!(src.hasArray()) && i<len && !(src.isDirect()) } } } -> src.position(src.position()+writeLen,)@ } CATCH(IOException) {}
results[https://github.com/chototsu/MikuMikuStudio/blob/9bd848aa884de742980627a1e1ad455fb6c0344a/engine/src/jogl2/com/jme3/renderer/jogl/JoglRenderer.java][updateShaderSourceData][1] = -> IF { -> IF { -> IF { -> throw new RendererException("Invalid ID received when trying to create shader.",)@id==-1 && id<=0 } } -> definesCodeData=source.getDefines().getBytes()@!(id==-1) -> sourceCodeData=source.getSource().getBytes()@!(id==-1) -> codeBuf=BufferUtils.createByteBuffer(versionData.length+definesCodeData.length+sourceCodeData.length,)@!(id==-1) -> codeBuf.put(versionData,)@!(id==-1) -> codeBuf.put(definesCodeData,)@!(id==-1) -> codeBuf.put(sourceCodeData,)@!(id==-1) -> codeBuf.flip()@!(id==-1) -> codeBuf.get(array,)@!(id==-1) -> IF { -> length=intBuf1.get(0,)@!(id==-1) -> IF { -> logBuf=BufferUtils.createByteBuffer(length,)@length>3 && !(id==-1) -> gl.getGL2().glGetShaderInfoLog(id,logBuf.limit(),intBuf1,logBuf,)@!(id==-1) -> logBuf.get(logBytes,0,length,)@length>3 && !(id==-1) -> infoLog=new String(logBytes,)@!(id==-1) } } }
results[https://github.com/SimonKagstrom/despotify/blob/661de7e9006322b4a23fbd9ad83fccb694197730/java/trunk/src/main/java/se/despotify/client/protocol/Protocol.java][sendInitialPacket][14] = -> TRY {  -> buffer=ByteBuffer.allocate(277+this.session.username.length,)@ -> buffer.putShort((short) 3,)@ -> buffer.putShort((short) 0,)@ -> buffer.putInt(0x00000000,)@ -> buffer.putInt(0x00030C00,)@ -> buffer.putInt(this.session.clientRevision,)@ -> buffer.putInt(0x00000000,)@ -> buffer.putInt(0x01000000,)@ -> buffer.put(this.session.clientId,)@ -> buffer.putInt(0x00000000,)@ -> buffer.put(this.session.clientRandom,)@ -> buffer.put(this.session.dhClientKeyPair.getPublicKeyBytes(),)@ -> buffer.put(this.session.rsaClientKeyPair.getPublicKeyBytes(),)@ -> buffer.put((byte) 0,)@ -> buffer.put((byte) this.session.username.length,)@ -> buffer.putShort((short) 0x0100,)@ -> buffer.put(this.session.username,)@ -> buffer.put((byte) 0x40,)@ -> buffer.putShort(2,(short) buffer.position(),)@ -> buffer.flip()@ -> buffer.get(this.session.initialClientPacket,)@ -> buffer.flip()@ -> this.send(buffer,"initial packet",)@ } CATCH(DespotifyException) {}
results[https://github.com/syapse/bigdata/blob/17be5a3c0511a811b0f72d99d73fd7bb5b20fad2/bigdata/src/test/com/bigdata/objndx/TestNodeSerializer.java][doRoundTripTest][1] = -> IF { -> buf2=clone(nodeSer.putLeaf((Leaf) expected,),)@ } ELSE { -> buf2=clone(nodeSer.putNode((Node) expected,),)@ } -> IF { -> System.err.println("buf2: "+Arrays.toString(buf2.array(),),)@ } -> assertEquals(buf.array(),buf2.array(),)@ -> IF { -> b=buf2.get(NodeSerializer.OFFSET_VERSION,)@ -> LOOP { -> randomByte=(byte) r.nextInt(255,)@ } -> buf2.put(NodeSerializer.OFFSET_VERSION,randomByte,)@ -> TRY { -> nodeSer.getNodeOrLeaf(ndx,expected.getIdentity(),buf2,)@ } CATCH(ChecksumError) { -> IF { -> System.err.println("Ignoring expected exception: "+ex,)@ } } }
results[https://github.com/tulskiy/musique/blob/500f8156562eaccd3f3a46ce1ece63dd2f191ca4/dependencies/jaudiotagger/src/main/java/org/jaudiotagger/tag/datatype/TextEncodedStringSizeTerminated.java][writeByteArray][2] = -> TRY { -> charSetName=getTextEncodingCharSet()@ -> outputBuffer=ByteBuffer.allocate(stringValue.length()+3*3,)@ -> values=splitByNullSeperator(stringValue,)@ -> checkTrailingNull(values,stringValue,)@ -> LOOP { -> next=values.get(i,)@i<values.size() -> IF { -> outputBuffer.put(writeStringUTF16LEBOM(next,i,values.size(),),)@i<values.size() } ELSE { -> outputBuffer.put(writeString(Charset.forName(charSetName,).newEncoder(),next,i,values.size(),),)@!(charSetName.equals(TextEncoding.CHARSET_UTF_16_ENCODING_FORMAT,)) && i<values.size() } } -> outputBuffer.flip()@ -> outputBuffer.rewind()@ -> outputBuffer.get(data,0,outputBuffer.limit(),)@ } CATCH(CharacterCodingException) { -> logger.severe(ce.getMessage(),)@ -> throw new RuntimeException(ce,)@ }
results[https://github.com/ChioriGreene/ChioriWebServer/blob/25af99a3457360bbb54a71b4a36ff8541ea8d58c/api/src/com/esotericsoftware/kryo/io/ByteBufferOutput.java][writeString][1] = -> TRY {  -> niobuffer.position(position,)@ -> IF { -> return @value==null } -> IF { -> return @!(value==null) && charCount==0 } -> IF { -> LOOP { -> c=value.charAt(i,)@!(value==null) && !(charCount==0) && i<charCount } } -> IF { } ELSE { -> tmp=value.getBytes()@!(value==null) && !(charCount==0) -> niobuffer.put(tmp,0,tmp.length,)@!(value==null) && !(charCount==0) -> niobuffer.put(position-1,(byte) niobuffer.get(position-1,)|0x80,)@!(value==null) && !(charCount==0) } ELSE { -> IF { -> LOOP { -> c=value.charAt(charIndex,)@!(value==null) && charIndex<charCount && !(charCount==0) -> niobuffer.put(++position,(byte) c,)@!(value==null) && capacity-position>=charCount && !(charCount==0) } -> niobuffer.position(position,)@!(value==null) && capacity-position>=charCount && !(charCount==0) } -> niobuffer.position(position,)@!(value==null) && !(charCount==0) } } CATCH(KryoException) {}
