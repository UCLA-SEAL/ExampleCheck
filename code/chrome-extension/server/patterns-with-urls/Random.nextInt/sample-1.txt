results[https://github.com/dweiss/lucene_solr/blob/5bcd63ce73182c43dfce200b7eaac9c5fb40308a/lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer.java][readChar][43] = -> TRY {  -> random.nextInt(10,)@ } CATCH(IOException) {}
results[https://github.com/ferquies/2dam/blob/ba8321d10736ac23d8fa951753f61e2d560037b9/AD/apache-tomcat-7.0.23/webapps/examples/WEB-INF/classes/jsp2/examples/simpletag/ShuffleSimpleTag.java][doTag][19] = -> TRY {  -> random.nextInt(6,)@ } CATCH(JspException,IOException) {}
results[https://github.com/uditrugman/openjdk8-jdk/blob/ac3faf88491f55369fb6b83f77fbb75557ed3bf4/test/java/nio/channels/Selector/SelectorTest.java][writeCycle][36] = -> TRY {  -> numBytesToWrite=rnd.nextInt(10,)+1@ } CATCH(Exception) {}
results[https://github.com/coderplay/h2-bitmap/blob/4f3dff2f163b116b78e7e8bc0afeb53dedeff8e7/h2/src/test/org/h2/test/synth/TestMultiThreaded.java][run][8] = -> TRY { -> LOOP { -> random.nextInt(6,)@ } }
results[https://github.com/fsteeg/hollala/blob/aa32969695a3b2b985e601f0b333e69e145d4cc7/trunk/com.quui.chat.irc/src-java/com/quui/chat/wordgame/WordGame.java][getRandomWord][2] = -> TRY {  -> n=r.nextInt(4,)@ } CATCH(JWNLException) {}
results[https://github.com/powertac/factored-customer/blob/e80fbbf1a9a301e361aa86b21fe18947f619f844/src/main/java/org/powertac/factoredcustomer/ProbabilityDistribution.java][sample][1] = -> TRY {  -> return low+random.nextInt(range,)@ } CATCH(MathException) {}
results[https://github.com/codehaus/jetty-project/blob/fc456fb2d8b1e05d4fbc824287177bbd7eeea326/jetty-server/src/test/java/org/mortbay/jetty/RandomConnector.java][doGet][19] = -> TRY {  -> lines=random.nextInt(100,)@ } CATCH(ServletException,IOException) {}
results[https://github.com/freemo/dANN-examples/blob/205aca53f74b4bed180dc27a8182618c59354658/src/main/java/com/syncleus/dann/examples/nci/BrainRunner.java][getRandomTrainingImage][1] = -> TRY {  -> return this.trainingImages[RANDOM.nextInt(this.trainingImages.length,)]@ } CATCH(IndexOutOfBoundsException) {}
results[https://github.com/DavidTPate/diablo3_builder/blob/b4285ddee467f45fc5ce2e5766a2636331e0066b/d3_android/libs/ActionBarSherlock/samples/roboguice/src/com/actionbarsherlock/sample/roboguice/activity/FightForcesOfEvilActivity.java][call][58] = -> TRY {  -> Thread.sleep(random.nextInt(5*1000,),)@ } CATCH(Exception) {}
results[https://github.com/ebollens/ccnmp/blob/44ef033538bd9c9fc4404ca0129d14c3eae551b8/Java_CCN/org/ccnx/ccn/test/io/CCNFileStreamTestRepo.java][setUpBeforeClass][2] = -> TRY {  -> baseName=ContentName.fromNative("/test/CCNFileStreamTestRepo-"+random.nextInt(10000,),)@ } CATCH(Exception) {}
results[https://github.com/Netflix/ribbon/blob/b40cbc0a67c0109f9ccabcc224e08ff9832ad723/ribbon-httpasyncclient/src/test/java/com/netflix/httpasyncclient/HttpAsyncClienTest.java][init][18] = -> TRY {  -> port=new Random().nextInt(1000,)+4000@ } CATCH(Exception) {}
results[https://github.com/jeffmaury/mina/blob/c6998fd4c565af8cf0ef516be0428ad5f15b5cde/core/src/test/java/org/apache/mina/filter/StreamWriteFilterTest.java][read][2] = -> TRY {  -> b=(byte) random.nextInt(255,)@ -> digest.update(b,)@ } CATCH(IOException) {}
results[https://github.com/laivizhu/laivizhu.github.io/blob/030b8a79b33dd30f50f8734e648598e0c1e25050/MyPorject/src/com/janlu/project/concurrent/TaskPortion.java][doWork][20] = -> TRY {  -> TimeUnit.MILLISECONDS.sleep(rand.nextInt(2000,),)@ } CATCH(InterruptedException) {}
results[https://github.com/dongjinleekr/guava-boosted/blob/dc16b01b6d5321a31076f39e7331db6b1cd2c532/guava-tests/test/com/google/common/io/RandomAmountInputStream.java][read][12] = -> TRY {  -> return super.read(b,off,random.nextInt(len,)+1,)@ } CATCH(IOException) {}
results[https://github.com/usm-data-analysis/CLAS12-EC-Reconstruction/blob/6cd997e7f0b438dcaa6a0cf5a54e8fdc4f56f6c6/src/org/jlab/clas12/maputil/CalDB.java][getCalDB][3] = -> LOOP { -> TRY { -> time=500+randomGenerator.nextInt(10,)*500@ -> wait(time,)@ } }
results[https://github.com/simonAllier/diversify-statements/blob/30b04acd2e6c48ad80d33686d6c790a31249b5a4/src/main/java/fr/inria/diversify/javassist/ByteCodeTransformationQuery.java][getTransformation][15] = -> TRY {  -> r=new Random()@ -> i=r.nextInt(3,)@ } CATCH(Exception) {}
results[https://github.com/Hellblazer/Jackal/blob/e9ec7503a4a13a304fc0ab86e2ea78a19d7d64a0/src/main/java/org/smartfrog/services/anubis/locator/Locator.java][partitionNotificationImpl][1] = -> IF { -> TRY { -> wait(random.nextInt(1000,),)@ } }
results[https://github.com/imatix/zguide/blob/ae06df1623b080dab0b2625bb96527cc4fcccb5c/examples/Java/rtreq.java][run][27] = -> LOOP { -> TRY { -> Thread.sleep(rand.nextInt(500,)+1,)@ } }
results[https://github.com/spring-projects/spring-integration-samples/blob/e98088824969b9fbf8c8d4374ff5d15cf226b28f/cookbooks/async-gateway/src/main/java/org/springframework/integration/samples/async/gateway/MathService.java][multiplyByTwo][3] = -> TRY {  -> sleep=random.nextInt(10,)*500@ -> Thread.sleep(sleep,)@ } CATCH(Exception) {}
results[https://github.com/cloudtm/infinispan-5.0.0.SERIALIZABLE/blob/7b93ba314d6ca0dc5825a4535c45d5095263f3a6/core/src/test/java/org/infinispan/distribution/rehash/RehashTestBase.java][run][4] = -> LOOP { -> TRY { -> TestingUtil.sleepThread(r.nextInt(10,)*10,)@ } }
results[https://github.com/quchunguang/test/blob/5326b1372c4ab1e3aaf3f0d16a07a6342b20d84d/testjava/TIJ4-code/gui/ColorBoxes.java][run][3] = -> TRY { -> LOOP { -> color=new Color(rand.nextInt(0xFFFFFF,),)@ } }
results[https://github.com/ashwinraghav/mynotify/blob/8f904a65d41d2e6c867f767ead58924399dbc38a/src/watch/PoolManager.java][registerFileToRandomPool][1] = -> TRY {  -> index=randomGenerator.nextInt(this.poolSize,)@ -> td=pools.get(index,)@ } CATCH(IOException) {}
results[https://github.com/ncats/bard/blob/b3409ad25e7834427cb5c0e452d53b9e3da3308d/src/gov/nih/ncgc/bard/tools/SearchDoS.java][call][1] = -> TRY { -> s.top=100+rand.nextInt(500,)@ } CATCH(Exception) { -> ex.printStackTrace()@ }
results[https://github.com/lihaosky/shard/blob/36c94ca6d60fe75a0b465bb8105d7ff14487f92a/simulator/client/ycsb/src/com/yahoo/ycsb/memcached/MemcachedClient.java][run][5] = -> TRY { -> IF { -> sleep(random.nextInt((int) 1.0/_target,),)@_target>0&&_target<=1.0 } }
results[https://github.com/winterstein/JTwitter/blob/48672bc08eefc45b93d7bebc2e0630fa37afee2e/test/winterwell/jtwitter/TwitterTest.java][testGetSetFavorite][6] = -> TRY {  -> salt=new Random().nextInt(100,)@ } CATCH(InterruptedException) {}
results[https://github.com/nremond/Joker/blob/327294f8106b804e4f881e81ef5f2159cc35cdd5/injector/src/main/java/cl/own/usi/injector/main/BasicInjectorMain.java][main][1] = -> TRY {  -> Thread.sleep(QUESTIONTIMEFRAME+SYNCHROTIME*1000+r.nextInt(QUESTIONTIMEFRAME+SYNCHROTIME+1*1000,),)@ } CATCH(IOException,InterruptedException,ExecutionException) {}
results[https://github.com/Lathanael/FunCommands/blob/d795711ebcf5118ae6f9b7cceecc6e3d5c4d3c51/src/main/de/Lathanael/FC/Commands/Slap.java][execute][1] = -> TRY {  -> random=new Random()@ -> random.nextInt(10,)@ } CATCH(PlayerNotFound,ActionNotPermitedException) {}
results[https://github.com/steveloughran/hadoop-trunk/blob/2f1a075a9a2161c7e92c1b51e76299e264ac8946/src/contrib/hdfsproxy/src/test/org/apache/hadoop/hdfsproxy/FindFreePort.java][findFreePortRandom][21] = -> TRY {  -> return findFreePort(MIN_AVAILABLE_PORT+random.nextInt(MAX_AVAILABLE_PORT-MIN_AVAILABLE_PORT+1,),)@ } CATCH(IOException) {}
results[https://github.com/sammacbeth/LPG--Game/blob/29f84591e4b410e0fa9162b86775d9f699a59e21/src/main/java/uk/ac/imperial/lpgdash/LPGPlayer.java][createCluster][1] = -> TRY { -> pick=rnd.nextInt(methods.length,)@ } CATCH(ActionHandlingException) { -> logger.warn("Failed to create cluster",e,)@ }
results[https://github.com/dustin/snippets/blob/1ffefd2873fcb601b6b4c91b722903d7e69dc68f/java/java/spytools/tests/net/spy/test/PoolTest.java][poolOp][1] = -> TRY {  -> Thread.sleep(r.nextInt(100,),)@ } CATCH(InterruptedException,PoolException) {}
results[https://github.com/ludovicc/testng-debian/blob/658afc290b3fd6210d19c17e32ce5c30fa7cf0c0/test/v4/src/test/distributed/DistributedTest.java][startSlaves][6] = -> TRY {  -> port=new Random().nextInt(50000,)+2000@ } CATCH(IOException) {}
results[https://github.com/chenatu/ccnx-underlay/blob/493267acc2ebbcfbacf50aff2f8657c39fce8ac0/javasrc/src/org/ccnx/ccn/test/security/crypto/CCNMerkleTreeTest.java][testTree][4] = -> TRY {  -> version=_rand.nextInt(1000,)@ -> theName=VersioningProfile.addVersion(theName,version,)@ } CATCH(Exception) {}
results[https://github.com/chipster/chipster/blob/3ea8827064b155d21e6c5ded650fd147818eb41a/src/main/java/fi/csc/microarray/frontend/FileBrokerConfig.java][generateUrlToSomeFileBroker][1] = -> TRY {  -> i=randGenerator.nextInt(FILESERVER_URLS.length,)@ -> return new URL(FILESERVER_URLS[i]+filename,)@ } CATCH(MalformedURLException) {}
results[https://github.com/chenatu/ccnx-underlay/blob/493267acc2ebbcfbacf50aff2f8657c39fce8ac0/javasrc/src/org/ccnx/ccn/test/profiles/security/access/group/MLACTestRepo.java][createMixedGroup][2] = -> TRY {  -> firstGroupName="group-"+rnd.nextInt(10000,)@ -> mixedGroup=_gm0.createGroup(firstGroupName,groupMembers,0,)@ } CATCH(Exception) {}
results[https://github.com/treasure-data/td-import-java/blob/157770d267248136b5c0b1ff358bb8bbfbaf60f9/src/test/java/com/treasure_data/td_import/model/TestColumnSampling.java][createResources][1] = -> TRY {  -> numRows=rand.nextInt(100,)+1@ -> sampling=new ColumnSampling(numRows,)@ } CATCH(Exception) {}
results[https://github.com/madiator/HadoopUSC/blob/205614a2a9393d036ef68387b707680bb053cc1d/trunk/src/test/org/apache/hadoop/hdfs/TestTotalFiles.java][concatFiles][2] = -> TRY {  -> index=random.nextInt(files.length-1,)@ -> srcs=Arrays.copyOfRange(files,index+1,files.length,)@ } CATCH(Exception) {}
results[https://github.com/dancres/blitzjavaspaces/blob/6f12762f513b31206fd029f397c06f3436d32cf4/src/main/java/org/dancres/blitz/oid/AllocatorImpl.java][getNextId][2] = -> TRY {  -> myAllocator=theAllocators[theAllocatorChooser.nextInt(theMaxZones,)]@ -> myID=myAllocator.newOID()@ } CATCH(IOException) {}
results[https://github.com/MrBambule/viergewinnt_gruppe3/blob/e3865850847cb3fe76c55c92d9532ba181a7556c/src/logic/KI.java][randomMove][1] = -> TRY {  -> generator=new Random()@ -> newValue=generator.nextInt(6,)@ } CATCH(IOException) {}
results[https://github.com/tfreese/misc/blob/4ed69a90fdf15a98393a04ed2ade3ffe4f2605c6/sonstiges/src/main/java/de/freese/sonstiges/particle/ParticleApplet.java][run][6] = -> TRY { -> LOOP { -> Thread.sleep(ParticleApplet.this.rng.nextInt(100,),)@ } }
results[https://github.com/oxhead/decoupled-hadoop/blob/d4d1db5f4e194fa57f4c89838283b2a1b17e44ed/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestRetryCache.java][call][5] = -> TRY {  -> randomPause=(pause==0)?pause:r.nextInt(pause,)@ -> return testServer.echo(input,failureOutput,randomPause,success,)@ } CATCH(Exception) {}
results[https://github.com/poulter7/spudplayer/blob/2b81151661b8fddf8ad3e9080a707126b92dcd11/src_cust/shef/strategies/uct/tree/Tree.java][expandNodeAndReturnRandom][2] = -> TRY {  -> moveCount=legalMoves.size()@ -> randomIndex=random.nextInt(moveCount,)@ } CATCH(MoveDefinitionException,TransitionDefinitionException) {}
results[https://github.com/GrizzlyNIO/grizzly-mirror/blob/244ea26b859a24a8b4bbc1ea69b3707bcdaef16a/modules/grizzly/src/main/java/org/glassfish/grizzly/AbstractBindingHandler.java][bind][1] = -> TRY {  -> range=portRange.getUpper()-lower+1@ -> offset=RANDOM.nextInt(range,)@ } CATCH(IOException) {}
results[https://github.com/undera/jmeter-plugins/blob/365543b6e361684dcc79c066bc6a999523efaba6/standard/src/kg/apc/jmeter/functions/ChooseRandom.java][execute][1] = -> TRY {  -> index=random.nextInt(values.length-1,)@ -> choice=(CompoundVariable) values[index].execute()@ } CATCH(InvalidVariableException) {}
results[https://github.com/clafonta/Mockey/blob/e027e74bcb1ca3b2d8bc02c28f8c67af2881d1ec/src/java/com/mockey/ui/JsonSchemaLoadSamplesServlet.java][doGet][1] = -> TRY {  -> index=RND.nextInt(SAMPLE_DATA_SIZE,)@ -> ret=SAMPLE_DATA.get(index,)@ } CATCH(ServletException,IOException) {}
results[https://github.com/idega/com.idega.content/blob/eced5891a7cef65dc6b407e2df203e32539e9095/src/java/com/idega/content/themes/helpers/business/impl/ThemesHelperImpl.java][getRandomNumber][1] = -> TRY { -> number=numberGenerator.nextInt(maxValue,)@ } CATCH(IllegalArgumentException) { -> e.printStackTrace()@ }
results[https://github.com/xxiaozaichu/xutils/blob/5f091427660ce2e14f843d5d014732fe837d99f0/xutils/src/test/java/zcu/xutil/sql/TestMiniDataSource.java][pauseRandom][1] = -> TRY {  -> return pause(random.nextInt(maxPauseTime,),)@ } CATCH(Exception) {}
results[https://github.com/mockito/mockito/blob/2dc43ad2082ec3f543131d2bb5250ac30229ba36/test/org/mockitousage/serialization/ParallelSerializationTest.java][randomCallOn][1] = -> TRY {  -> random=new Random().nextInt(10,)@ } CATCH(CharacterCodingException) {}
results[https://github.com/burris/dwr/blob/53d2ca81db6bdafb029750c37b3322426b56eb5f/ui/gi/demo/java/org/getahead/dwrdemo/ticketcenter/CallCenter.java][run][2] = -> TRY { -> random.nextInt(5,)@ } CATCH(Exception) { -> log.warn("Random event failure",ex,)@ }
results[https://github.com/nschlimm/playground/blob/493833a817b6915df5cf5187064176ca4877f9bb/projectLibrary/src/bb/io/ParseReader.java][doArrayUnRead][2] = -> TRY {  -> numberAvailable=readStorage.length()@ -> sizeUnreadArray=random.nextInt(numberAvailable,)@!(numberAvailable==0) } CATCH(IOException) {}
results[https://github.com/lowka/overseer/blob/701a9af9dc0bd8c9ac2a9e27a11017c0a043b3e3/src/test/java/overseer/internal/dispatch/DispatcherMultithreadingTest.java][receive][3] = -> IF { -> TRY { -> TimeUnit.MILLISECONDS.sleep(random.nextInt(1,),)@random.nextInt(100,)>90 } }
results[https://github.com/madiator/HadoopUSC/blob/a02dd094e1b13bf15a6409f0cd287febe1ba0212/src/test/org/apache/hadoop/hdfs/server/namenode/TestPersistTxId.java][testMultipleNameNodeCrashWithCheckpoint][2] = -> TRY {  -> restarts=random.nextInt(10,)@ -> System.out.println("Number of restarts : "+restarts,)@ } CATCH(Exception) {}
results[https://github.com/AOKP/packages_apps_Bluetooth/blob/9f4efa3846bb04430c44ff340aadf5c42b772a63/src/com/android/bluetooth/map/BluetoothMapbMessageMmsEmail.java][encodeEmail][2] = -> TRY {  -> randomGenerator=new Random()@ -> randomInt=randomGenerator.nextInt(1000,)@ } CATCH(UnsupportedEncodingException) {}
results[https://github.com/ottomata/flume-ng/blob/d3a90d463b149f964a8ec4607dbb1110536f394a/src/java/com/cloudera/flume/handlers/debug/SynthSourceRndSize.java][next][5] = -> TRY {  -> size=this.minBodySize+(range>0)?this.rand.nextInt(range,):0@ -> rand.nextBytes(data,)@ } CATCH(IOException) {}
results[https://github.com/calpaterson/TAberystwyth/blob/f2e535fd70dd7cfd629a7f972aae5355a53fc75c/src/taberystwyth/db/Generator.java][genSpeaker][2] = -> TRY {  -> institution=institutions[gen.nextInt(institutions.length,)]@ -> p.setString(2,institution,)@ } CATCH(SQLException) {}
results[https://github.com/Unidata/sruth/blob/f44ea308e6d1c4f97ed0054018d7f7c740173554/src/test/java/edu/ucar/unidata/sruth/PubSubTest.java][publishFile][1] = -> TRY {  -> size=random.nextInt(MAX_SIZE,)@ -> random.nextBytes(bytes,)@ } CATCH(IOException,FileInfoMismatchException) {}
results[https://github.com/e-ucm/eadventure-legacy/blob/b53dca5c74f0d98579c7ce9c854a642b2eb5a893/E-Adventure/src/es/eucm/eadventure/common/data/chapter/Trajectory.java][clone][2] = -> TRY {  -> n.id="node"+new Random().nextInt(10000,)@ } CATCH(CloneNotSupportedException) {}
results[https://github.com/madiator/HadoopUSC/blob/a02dd094e1b13bf15a6409f0cd287febe1ba0212/src/test/org/apache/hadoop/hdfs/server/namenode/TestPersistTxId.java][testMultipleRestarts][4] = -> TRY {  -> restarts=random.nextInt(10,)@ -> System.out.println("Number of restarts : "+restarts,)@ } CATCH(IOException) {}
results[https://github.com/Comcast/cmb/blob/ae11e8d1dc19eae41f461672f9674df3ce5dc8ea/src/com/comcast/plaxo/cmb/common/persistence/CassandraPersistence.java][getTimeLong][2] = -> TRY {  -> newTime=timeMillis*1000000000+System.nanoTime()%1000000*1000+random.nextInt(999999,)@ } CATCH(InterruptedException) {}
results[https://github.com/rzymek/vassal-src/blob/91f7e66d469cecf7b0fe1398aa1e01478d887ef7/src/VASSAL/tools/io/ObfuscatingOutputStream.java][<init>][1] = -> TRY {  -> <init>(out,(byte) rand.nextInt(256,),)@ } CATCH(IOException) {}
results[https://github.com/hsr/oscars/blob/4976c4b9f3292e5349dee25290eae60e4605cd21/eomplsPSS/src/main/java/net/es/oscars/pss/eompls/junos/MXConfigGen.java][getLSPSetup][1] = -> TRY {  -> rand=new Random()@ -> randInt=30000+rand.nextInt(35500,)@ } CATCH(PSSException) {}
results[https://github.com/rolandschulz/PTP/blob/ba30e66ef56a2a54c2cf08b788a38039340b6948/rdt/org.eclipse.ptp.rdt.sync.core.tests/src/org/eclipse/ptp/rdt/sync/core/tests/TemporaryGitRemoteSyncConnection.java][create][2] = -> TRY {  -> n=random.nextInt(1000000,)@ -> fRemoteConnection=connMgr.newConnection("test_connection"+n,)@ } CATCH(Exception) {}
results[https://github.com/f-breidenstein/rock-paper-scissors/blob/2030991e0d0fb909d63b713dea1bb62b6a3f325e/src/rps/client/ai/TournamentAi.java][provideInitialAssignment][3] = -> TRY {  -> random=new Random()@ -> randomFlagPosition=28+random.nextInt(7,)@ } CATCH(RemoteException) {}
results[https://github.com/ryuhyoseok/HYOSEOKTAJO/blob/035fbc2d68d188023fad45cbe949058af932a903/core/src/test/java/tajo/engine/planner/physical/TestBSTIndexExec.java][testEqual][2] = -> TRY {  -> this.rndKey=rnd.nextInt(250,)@ -> tupleCount=this.randomValues.get(rndKey,)@ } CATCH(Exception) {}
results[https://github.com/openGDA/gda-core/blob/a8aaaba210c4071949f0839052e4587da69548ce/uk.ac.gda.core.test/src/gda/data/metadata/NXMetaDataProviderTest.java][testRemove][2] = -> TRY {  -> randomIntForTestKey=rand.nextInt(181081,)@ -> randomPostfixForTestKey=Integer.toString(randomIntForTestKey,)@ } CATCH(InterruptedException,Exception) {}
results[https://github.com/lenik/jazz/blob/dfa95827eb06ed4f1f90a5b8ea31b7b9f75bb793/bas/layer-2/bas-typer-impl/src/main/java/net/bodz/bas/c/java/util/LocaleTypers.java][newSample][1] = -> TRY {  -> prng=options.get(Random.class,random,)@ -> randomIndex=prng.nextInt(availableLocales.length,)@ } CATCH(CreateException) {}
results[https://github.com/genericworkflownodes/GenericKnimeNodes/blob/423d84ac4e4be1c33e067c70c0a0cba991426f4e/com.genericworkflownodes.knime/src/com/genericworkflownodes/util/FileStash.java][getFile][1] = -> TRY {  -> num=RANDOM_NUMBER_GENERATOR.nextInt(Integer.MAX_VALUE,)@ -> basename=String.format("%s-%06d",basename,num,)@ } CATCH(IOException) {}
results[https://github.com/tejdas/dovemq-amqp/blob/9cd6baa2ee61ee3592027c95dc64fd1bdb0b0a02/functional-test/src/main/java/net/dovemq/transport/connection/ConnectionSysTestMTClient.java][main][1] = -> TRY {  -> Thread.sleep(500+r.nextInt(500,),)@ } CATCH(IOException,InterruptedException) {}
results[https://github.com/simonchengjmj/data-reporting-platform/blob/b0227b23d02f484af8f97398a9c3ff8cc9d53960/reporting-ui/src/java/com/where/rpt/api/cache/MemcachedCache.java][getCacheClient][1] = -> TRY { -> c=clients[random.nextInt(numClients,)]@ } CATCH(Exception) { -> this.logger.error("unable to get memcached client from clients list!",e,)@ }
results[https://github.com/SiantyX/JAVAMEDFREDRIK/blob/e05271c73dc0eb24032fa98b678535dd77278d72/Orbitual remake/src/game/RandomFunkyMap.java][<init>][1] = -> TRY {  -> rand=new Random()@ -> numAnc=rand.nextInt(24,)+12@ } CATCH(SlickException) {}
results[https://github.com/thihy/lucene/blob/dc8a260388e7e481bc8bf6b12a34e4d7aba8473d/lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper.java][openInput][1] = -> TRY {  -> delegateInput=delegate.openInput(name,LuceneTestCase.newIOContext(randomState,context,),)@!(openFilesForWrite.contains(name,)&&!(name.startsWith("segments",))) && !(!(delegate.fileExists(name,))) -> randomInt=randomState.nextInt(500,)@!(openFilesForWrite.contains(name,)&&!(name.startsWith("segments",))) && !(!(delegate.fileExists(name,))) } CATCH(IOException) {}
results[https://github.com/mdaniel/svn-caucho-com-resin/blob/8abd0d8acfb25a82f80d74379fa886d47d14f89f/doc/soa/tutorial/php-queue-receive/WEB-INF/classes/example/AdProducer.java][onMessage][1] = -> TRY { -> ad=_ads[_random.nextInt(_ads.length,)]@ -> outgoingMessage.setText(ad,)@ } CATCH(JMSException) { -> _messageDrivenContext.setRollbackOnly()@ }
results[https://github.com/lalithsuresh/Scaling-HDFS-NameNode/blob/8722103f2a49eba19e59435e9346a17c440a2347/src/test/mapred/org/apache/hadoop/tools/TestDistCh.java][<init>][6] = -> TRY {  -> LOOP { -> num_files=RANDOM.nextInt(3,)@ } } CATCH(IOException) {}
results[https://github.com/bcopeland/hbase-thrift/blob/34825d8145abd49b15267a33c49b274ae1a9801d/src/test/java/org/apache/hadoop/hbase/TestAcidGuarantees.java][doAnAction][2] = -> TRY {  -> targetRow=targetRows[rand.nextInt(targetRows.length,)]@ -> p=new Put(targetRow,)@ -> rand.nextBytes(data,)@ } CATCH(Exception) {}
results[https://github.com/cmccabe/hadoop/blob/6f36e99d6043fcf4a2e7e7b70b682ced545d92af/hadoop-mapreduce-project/src/contrib/gridmix/src/test/org/apache/hadoop/mapred/gridmix/TestRecordFactory.java][testZero][6] = -> TRY {  -> r=new Random()@ -> targetBytes=r.nextInt(1<<20,)@ -> testFactory(targetBytes,0,)@ } CATCH(Exception) {}
results[https://github.com/hibernate/hibernate-orm/blob/ddd1d72e5ab6e9db32e0bfea3362fa8791a4a039/cache-infinispan/src/test/java/org/hibernate/test/cache/infinispan/functional/ConcurrentWriteTest.java][thinkRandomTime][4] = -> TRY { -> Thread.sleep(random.nextInt(THINK_TIME_MILLIS,),)@ } CATCH(InterruptedException) { -> throw new RuntimeException("sleep interrupted",ex,)@ }
results[https://github.com/cuckoo03/repository/blob/a3252356c8fa67a984f5be417bdbd21a43d980f9/multithread-pattern/src/main/java/com/thread/ch8_list8_1/Request.java][execute][4] = -> TRY { -> Thread.sleep(random.nextInt(1000,),)@ } CATCH(InterruptedException) { -> e.printStackTrace()@ }
results[https://github.com/apache/derby/blob/ec6fcf1f3b93d7b9d350071632731d67cfe04508/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java][getRandomValue][1] = -> TRY {  -> return new ReadOnceByteArrayInputStream(randomBinary(r,r.nextInt(precision,),),)@ } CATCH(IOException) {}
results[https://github.com/apache/manifoldcf-integration-solr-3.x/blob/7a650fe603e7e482cab2529a507f497fb2aec3b4/solr/src/test/org/apache/solr/BaseDistributedSearchTestCase.java][query][1] = -> TRY {  -> which=r.nextInt(clients.size(),)@ -> client=clients.get(which,)@ } CATCH(Exception) {}
results[https://github.com/fcrepo/fcrepo-before33/blob/e8418509bbbae9dedbc4281a816158a70610971a/repository/src/test/java/fedora/test/integration/TestLargeDatastreams.java][read][2] = -> TRY {  -> IF { -> return generator.nextInt(100,)@ } } CATCH(IOException) {}
results[https://github.com/cbeust/testng/blob/de8283b64714f954dfcea174f2b8a1307321afb8/src/test/java/test/thread/TrueParallelSampleTest.java][log][1] = -> TRY { -> Thread.sleep(random.nextInt(10,),)@ } CATCH(InterruptedException) { -> Thread.yield()@ }
results[https://github.com/wolfgang/tdg/blob/6ee8088e66e0c94af5949eb99ca43b89e6d1ffa3/eta/src/unittests/enemy/EnemyGeneratorTest.java][generate_maxEnemies_1_random_0_chooseFirstInPool][3] = -> TRY {  -> when(random.nextInt(2,),).thenReturn(0,)@ } CATCH(Exception) {}
results[https://github.com/threerings/narya/blob/f32e7aa322ed7d97b89138ed339e11c841a91bd6/src/test/java/com/threerings/bureau/server/RegistryTester.java][runTestThread][1] = -> _rng2=new Random(seed,)@ -> LOOP { -> TRY { -> sleep=_minDelay+_rng2.nextInt(sleep,)@ -> Thread.sleep(sleep,)@ } }
results[https://github.com/seratch/junithelper/blob/5bf8a4f175ce283948ad94a2b316af0299bae597/core/src/test/java/org/junithelper/core/generator/SourceCodeAppenderTest.java][appendTabs_A$StringBuilder$int_intIsRandom][1] = -> TRY {  -> times=new Random().nextInt(10,)@ -> target.appendTabs(buf,times,)@ } CATCH(Exception) {}
results[https://github.com/linoor/saper/blob/75564294b51e3d8f82fe99ba8c4a5ebd07aa4a10/SaperTestTest/src/io/saper/test/TimerTest.java][testTimer][1] = -> TRY {  -> rand=new Random()@ -> nr=rand.nextInt(81,)@ -> solo.clickOnButton(nr,)@ } CATCH(InterruptedException) {}
results[https://github.com/linoor/saper/blob/11a7ef0b4d5d9d161185de65c07a753bd130082e/SaperTestTest/src/io/saper/test/FlagTimerTest1.java][testTimer][1] = -> TRY {  -> rand=new Random()@ -> nr=rand.nextInt(81,)@ -> block=(Block) solo.getButton(nr,)@ } CATCH(InterruptedException) {}
results[https://github.com/amikryukov/newJagger/blob/042568e9963d8ce97820e8223d7df09a770c4b54/test/test-target/src/main/java/com/griddynamics/jagger/test/target/SleepService.java][delayRandom][1] = -> TRY {  -> delay=delayMin+rnd.nextInt(delayMax-delayMin,)@ -> Thread.sleep(delay,)@ -> return "OK: targetDelay=["+delay+"], actualDelay=["+System.currentTimeMillis()-startTime+"]"@ } CATCH(InterruptedException) {}
results[https://github.com/freenet/plugin-Library-official/blob/1263a6bed63036935e72d10afb051052c1b51334/test/plugins/Interdex/index/BIndexTest.java][fullInflate][1] = -> TRY {  -> LOOP { -> n=rand.nextInt(16,)+16@ } } CATCH(TaskAbortException) {}
results[https://github.com/Omertron/api-themoviedb/blob/88f120923e3f321716173f2080b8b4e5647c8730/src/test/java/com/omertron/themoviedbapi/TheMovieDbApiTest.java][testMovieLists][1] = -> TRY {  -> name="test list "+new Random().nextInt(100,)@ -> listId=tmdb.createList(SESSION_ID_APITESTS,name,"api testing only",)@ } CATCH(Exception) {}
results[https://github.com/biomart/biomart-rc7/blob/a2fb1ab64cf4f2e714c900cdd5e81777fab4c3ab/src/org/biomart/oauth/provider/core/SimpleOAuthValidator.java][generateVerifier][1] = -> TRY {  -> verifier=String.format("%08d",RANDOM_NUMBER.nextInt(99999999,),)@ -> VERIFIERS.put(key,verifier,)@ } CATCH(IOException) {}
results[https://github.com/adinauer/fhbay/blob/fd50df0e269afffbbb44c19742b785e82d406c84/fhbay-server/src/main/java/at/dinauer/fhbay/beans/ArticleProcessorBean.java][onMessage][1] = -> TRY { -> Thread.sleep(5000+random.nextInt(3000,),)@ } CATCH(Exception) { -> throw new EJBException(e,)@ }
results[https://github.com/magmax/master-java/blob/641608e455f6376b04681c745ed8c99f68d9c817/practicas/practica3/src/org/magmax/masterjava/practica3/persistence/Persistence.java][getRandomTitle][1] = -> TRY {  -> strings=load()@ -> random=new Random()@ -> return strings[random.nextInt(strings.length,)]@ } CATCH(IOException) {}
results[https://github.com/avshabanov/java-maven-tests/blob/d8a17c49f55fe594e2d929080c196a6e1b2fede4/src/web-jdo/lang-samples/mem-lock-eval/src/main/java/com/alexshabanov/memlock/App.java][testFooAlloc][1] = -> TRY {  -> random=new SecureRandom()@ -> randFoo=fooChunk[random.nextInt(ARR_SIZE,)]@ -> System.out.println("randFoo = "+randFoo,)@ } CATCH(IOException) {}
results[https://github.com/SeqWare/seqware/blob/33d18fbf73d0e41b221ca7d96071ed31aacf4e38/seqware-webservice/src/main/java/net/sourceforge/seqware/webservice/resources/filters/WorkflowRunsFilter.java][saveFile][1] = -> TRY {  -> filename="/tmp/"+new Random().nextInt(Integer.MAX_VALUE,)+".ini"@ -> out=new FileOutputStream(filename,)@ } CATCH(FileNotFoundException,IOException) {}
results[https://github.com/phamtuanchip/mtech/blob/ef7809f8385a339054614b17eb6a31d1fcae7a4b/js/lab/src/lab7/Consumer.java][run][1] = -> random=new Random()@ -> LOOP { -> TRY { -> Thread.sleep(random.nextInt(5000,),)@ } }
results[https://github.com/nourlcn/hadoop-1.0/blob/3556b466de0677b1dfa15daf42dd34b115e9ed99/src/test/org/apache/hadoop/dfs/TestDatanodeBlockScanner.java][blockCorruptionRecoveryPolicy][1] = -> TRY {  -> random=new Random()@ -> rand=random.nextInt(numDataNodes,)@ -> cluster=new MiniDFSCluster(conf,numDataNodes,true,null,)@ } CATCH(IOException) {}
results[https://github.com/digitalabs/IBPMiddleware/blob/37e107c7d68d30de5b14cfc246742074491274aa/src/test/java/org/generationcp/middleware/manager/test/TestOntologyDataManagerImpl.java][testFindMethodById][2] = -> TRY {  -> name="Test Method "+new Random().nextInt(10000,)@ -> term=manager.addMethod(name,definition,)@ } CATCH(Exception) {}
results[https://github.com/ebollens/ccnmp/blob/af5dd1c5b9a633139880ca1c15d2aafda37b0ffd/javasrc/src/org/ccnx/ccn/test/profiles/security/access/group/KeyDirectoryTestRepo.java][testGetUnwrappedKeySuperseded][1] = -> TRY {  -> supersededKeyDirectoryName=ContentName.fromNative(keyDirectoryBase+rand.nextInt(10000,)+"/superseded",)@ -> versionSupersededKeyDirectoryName=VersioningProfile.addVersion(supersededKeyDirectoryName,)@ } CATCH(Exception) {}
results[https://github.com/Hellblazer/Jackal/blob/fe5b720dc6a492d90077e27eb4cc5e20490e6466/load-test/src/main/java/org/smartfrog/services/anubis/load/Sender.java][run][1] = -> random=new Random(666,)@ -> LOOP { -> TRY { -> Thread.sleep(random.nextInt(waitTime,),)@ } }
results[https://github.com/stratosphere/stratosphere/blob/7922332797406d982a19288f22ea55fcf746f8e5/pact/pact-runtime/src/test/java/eu/stratosphere/pact/runtime/iterative/concurrent/SuperstepBarrierTest.java][run][1] = -> TRY { -> Thread.sleep(random.nextInt(10,),)@ } CATCH(Exception) { -> throw new RuntimeException(e,)@ }
results[https://github.com/guiwuu/guiwuu/blob/ffb51dbe33925bf2938627dce3b1e8dace809003/jworkshop/concurrent/src/test/java/com/guiwuu/concurrent/cache/ComputingCacheTest.java][setUpClass][1] = -> TRY {  -> LOOP { -> inputs[i]=random.nextInt(25,)@i<inputs.length } } CATCH(Exception) {}
