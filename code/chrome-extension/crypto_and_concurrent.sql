/* Crypto APIs */
insert into patterns (class, method, pattern, support, description) values ('Cipher', 'getOutputSize', 'try {; getOutputSize(1)@true; }; catch {; }', 0, 'Handle the potential IllegalState Exception thrown by Cipher.getOutputSize with the try-catch block.');
insert into patterns (class, method, pattern, support, description) values ('Cipher', 'getOutputSize', 'init(2)@true; getOutputSize(1)@true;', 0, 'Make sure the Cipher object has been initialized to prevent an IllegalStateException from being thrown by Cipher.getOutputSize.'); 
insert into patterns (class, method, pattern, support, description) values ('Cipher', 'wrap', 'try {; wrap(1)@true; }; catch {; }', 0, 'Handle the potential IllegalStateException, IllegalBlockSizeException, and InvalidKeyException thrown by Cipher.wrap with a try-catch block.'); 
insert into patterns (class, method, pattern, support, description) values ('Cipher', 'wrap', 'init(2)@true; wrap(1)@true;', 0, 'Make sure the Cipher object has been initialized to prevent an IllegalStateException from being thrown by Cipher.wrap.'); 
insert into patterns (class, method, pattern, support, description) values ('Cipher', 'unwrap', 'try {; unwrap(3)@true; }; catch {; }', 0, 'Handle the potential IllegalStateException, NoSuchAlgorithmException, and InvalidKeyException thrown by Cipher.unwrap with a try-catch block.'); 
insert into patterns (class, method, pattern, support, description) values ('Cipher', 'unwrap', 'init(2)@true; unwrap(3)@true;', 0, 'Make sure the Cipher object has been initialized to prevent an IllegalStateException from being thrown by Cipher.unwrap'); 
insert into patterns (class, method, pattern, support, description) values ('Cipher', 'getMaxAllowedKeyLength', 'try {; getMaxAllowedKeyLength(1)@true; }; catch {; }', 0, 'Handle the potential NullPointerExceptiohn and NoSuchAlgorithmException thrown by Cipher.getMaxAllowedKeyLength with a try-catch block.'); 
insert into patterns (class, method, pattern, support, description) values ('Cipher', 'getMaxAllowedKeyLength', 'getMaxAllowedKeyLength(1)@arg0!=null;', 0, 'Check if transformation (the argument for Cipher.getMaxAllowedKeyLength) is null.'); 
insert into patterns (class, method, pattern, support, description) values ('Cipher', 'getMaxAllowedParameterSpec', 'try {; getMaxAllowedParameterSpec(1)@true; }; catch {; }', 0, 'Handle the potential NullPointerExceptiohn and NoSuchAlgorithmException thrown by Cipher.getMaxAllowedKeyLength with a try-catch block.'); 
insert into patterns (class, method, pattern, support, description) values ('Cipher', 'getMaxAllowedParameterSpec', 'getMaxAllowedParameterSpec(1)@arg0!=null;', 0, 'Check if transformation (the argument for Cipher.getMaxAllowedParameterSpec) is null.'); 
insert into patterns (class, method, pattern, support, description) values ('CipherInputStream', 'skip', 'try {; skip(1)@true; }; catch {; }', 0, 'Handle the potential IOException thrown by CipherInputStream.skip with the try-catch block.');
insert into patterns (class, method, pattern, support, description) values ('CipherInputStream', 'available', 'try {; available(0)@true; }; catch {; }', 0, 'Handle the potential IOException thrown by CipherInputStream.available with the try-catch block.');
insert into patterns (class, method, pattern, support, description) values ('CipherInputStream', 'close', 'try {; close(0)@true; }; catch {; }', 0, 'Handle the potential IOException thrown by CipherInputStream.close with the try-catch block.');
insert into patterns (class, method, pattern, support, description) values ('CipherOutputStream', 'close', 'try {; close(0)@true; }; catch {; }', 0, 'Handle the potential IOException thrown by CipherOutputStream.close with the try-catch block.');
insert into patterns (class, method, pattern, support, description) values ('CipherOutputStream', 'flush', 'try {; flush(0)@true; }; catch {; }', 0, 'Handle the potential IOException thrown by CipherOutputStream.flush with the try-catch block.');
insert into patterns (class, method, pattern, support, description) values ('ExemptionMechanism', 'isCryptoAllowed', 'try {; isCryptoAllowed(1)@true; }; catch {; }', 0, 'Handle the potential ExemptionMechanismException thrown by ExceptionMechanism.isCryptoAllowed with a try-catch block.');
insert into patterns (class, method, pattern, support, description) values ('ExemptionMechanism', 'getOutputSize', 'try {; getOutputSize(1)@true; }; catch {; }', 0, 'Handle the potential IllegalStateException thrown by ExceptionMechanism.getOutputSize with a try-catch block.');

/* Concurrent APIs */
insert into patterns (class, method, pattern, support, description) values ('ConcurrentHashMap', 'put', 'get(1)@rcv==null; if {; put(2)@true; } ==>> get(1)@ret==null if {; putIfAbsent(2)@ret!=null; }', 0, 'Use ConcurrentHashMap.putIfAbsent instead of a put-if-absent structure with ConcurrentHashMap.put, to avoid synchronocity issues.');
insert into patterns (class, method, pattern, support, description) values ('ConcurrentHashMap', 'putIfAbsent', 'get(1)@ret==null if {; putIfAbsent(2)@true; } ==>> get(1)@ret==null if {; putIfAbsent(2)@ret!=null; }', 0, 'Make sure that ConcurrentHashMap.putIfAbsent does not return null before using its return value, to prevent a NullPointerException.');
insert into patterns (class, method, pattern, support, description) values ('ConcurrentHashMap', 'addIfAbsent', 'get(1)@ret==null if {; addIfAbsent(2)@true; } ==>> get(1)@ret==null if {; addIfAbsent(2)@ret!=null; }', 0, 'Make sure that ConcurrentHashMap.addIfAbsent does not return null before using its return value, to prevent a NullPointerException.');
insert into patterns (class, method, pattern, support, description) values ('ConcurrentHashMap', 'get', 'get(1)@containsKey(1); ==>> get(1)@ret!=null if {; }', 0, 'Make sure that ConcurrentHashMap.get does not return null before using its return value, to prevent a NullPointerException.');
/* Classes that implement BlockingQueue */
insert into patterns (class, method, pattern, support, description) values ('ArrayBlockingQueue', 'poll', 'loop {; poll(2); } ==>> loop {; poll(2)@ret!=null; }', 0, 'Make sure that ArrayBlockingQueue.poll does not return null before using its return value, to prevent a NullPointerException.');
insert into patterns (class, method, pattern, support, description) values ('DelayQueue', 'poll', 'loop {; poll(2); } ==>> loop {; poll(2)@ret!=null; }', 0, 'DelayQueue.poll does not return null before using its return value, to prevent a NullPointerException.');
insert into patterns (class, method, pattern, support, description) values ('LinkedBlockingDeque', 'poll', 'loop {; poll(2); } ==>> loop {; poll(2)@ret!=null; }', 0, 'Make sure that LinkedBlockingDeque.poll does not return null before using its return value, to prevent a NullPointerException.');
insert into patterns (class, method, pattern, support, description) values ('LinkedBlockingQueue', 'poll', 'loop {; poll(2); } ==>> loop {; poll(2)@ret!=null; }', 0, 'Make sure that LinkedBlockingQueue.poll does not return null before using its return value, to prevent a NullPointerException.');
insert into patterns (class, method, pattern, support, description) values ('LinkedTransferQueue', 'poll', 'loop {; poll(2); } ==>> loop {; poll(2)@ret!=null; }', 0, 'Make sure that LinkedTransferQueue.poll does not return null before using its return value, to prevent a NullPointerException.');
insert into patterns (class, method, pattern, support, description) values ('PriorityBlockingQueue', 'poll', 'loop {; poll(2); } ==>> loop {; poll(2)@ret!=null; }', 0, 'Make sure that PriorityBlockingQueue.poll does not return null before using its return value, to prevent a NullPointerException.');
insert into patterns (class, method, pattern, support, description) values ('SynchronousQueue', 'poll', 'loop {; poll(2); } ==>> loop {; poll(2)@ret!=null; }', 0, 'Make sure that SynchronousQueue.poll does not return null before using its return value, to prevent a NullPointerException.');
insert into patterns (class, method, pattern, support, description) values ('ArrayBlockingQueue', 'remove', 'loop {; remove(1); } ==>> loop {; remove(1)@ret!=null; }', 0, 'Make sure that ArrayBlockingQueue.poll does not return null before using its return value, to prevent a NullPointerException.');
insert into patterns (class, method, pattern, support, description) values ('DelayQueue', 'remove', 'loop {; remove(1); } ==>> loop {; remove(1)@ret!=null; }',0, 'DelayQueue.poll does not return null before using its return value, to prevent a NullPointerException.');
insert into patterns (class, method, pattern, support, description) values ('LinkedBlockingDeque', 'remove', 'loop {; remove(1); } ==>> loop {; remove(1)@ret!=null; }', 0, 'Make sure that LinkedBlockingDeque.poll does not return null before using its return value, to prevent a NullPointerException.');
insert into patterns (class, method, pattern, support, description) values ('LinkedBlockingQueue', 'remove', 'loop {; remove(1); } ==>> loop {; remove(1)@ret!=null; }', 0, 'Make sure that LinkedBlockingQueue.poll does not return null before using its return value, to prevent a NullPointerException.');
insert into patterns (class, method, pattern, support, description) values ('LinkedTransferQueue', 'remove', 'loop {; remove(1); } ==>> loop {; remove(1)@ret!=null; }', 0, 'Make sure that LinkedTransferQueue.poll does not return null before using its return value, to prevent a NullPointerException.');
insert into patterns (class, method, pattern, support, description) values ('PriorityBlockingQueue', 'remove', 'loop {; remove(1); } ==>> loop {; remove(1)@ret!=null; }', 0, 'Make sure that PriorityBlockingQueue.poll does not return null before using its return value, to prevent a NullPointerException.');
insert into patterns (class, method, pattern, support, description) values ('SynchronousQueue', 'remove', 'loop {; remove(1); } ==>> loop {; remove(1)@ret!=null; }', 0, 'Make sure that SynchronousQueue.poll does not return null before using its return value, to prevent a NullPointerException.');
insert into patterns (class, method, pattern, support, description) values ('ArrayBlockingQueue', 'take', 'loop {; take(0); } ==>> loop {; take(0)@ret!=null; }', 0, 'Make sure that ArrayBlockingQueue.poll does not return null before using its return value, to prevent a NullPointerException.');
insert into patterns (class, method, pattern, support, description) values ('DelayQueue', 'take', 'loop {; take(0); } ==>> loop {; take(0)@ret!=null; }', 'DelayQueue.poll does not return null before using its return value, to prevent a NullPointerException.');
insert into patterns (class, method, pattern, support, description) values ('LinkedBlockingDeque', 'take', 'loop {; take(0); } ==>> loop {; take(0)@ret!=null; }', 0, 'Make sure that LinkedBlockingDeque.poll does not return null before using its return value, to prevent a NullPointerException.');
insert into patterns (class, method, pattern, support, description) values ('LinkedBlockingQueue', 'take', 'loop {; take(0); } ==>> loop {; take(0)@ret!=null; }', 0, 'Make sure that LinkedBlockingQueue.poll does not return null before using its return value, to prevent a NullPointerException.');
insert into patterns (class, method, pattern, support, description) values ('LinkedTransferQueue', 'take', 'loop {; take(0); } ==>> loop {; take(0)@ret!=null; }', 0, 'Make sure that LinkedTransferQueue.poll does not return null before using its return value, to prevent a NullPointerException.');
insert into patterns (class, method, pattern, support, description) values ('PriorityBlockingQueue', 'take', 'loop {; take(0); } ==>> loop {; take(0)@ret!=null; }', 0, 'Make sure that PriorityBlockingQueue.poll does not return null before using its return value, to prevent a NullPointerException.');
insert into patterns (class, method, pattern, support, description) values ('SynchronousQueue', 'take', 'loop {; take(0); } ==>> loop {; take(0)@ret!=null; }', 0, 'Make sure that SynchronousQueue.poll does not return null before using its return value, to prevent a NullPointerException.');