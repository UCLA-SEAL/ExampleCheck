results[https://github.com/f1ori/yacy!htroot/Blacklist_p.java!Blacklist_p!respond][SEQ] =  -> ListManager.switchboard=(Switchboard) env@ -> ListManager.listsPath=new File(ListManager.switchboard.getDataPath(),ListManager.switchboard.getConfig("listManager.listsPath","DATA/LISTS",),)@ -> supportedBlacklistTypes=supportedBlacklistTypesStr.split(",",)@ -> dirlist=FileUtils.getDirListing(ListManager.listsPath,Blacklist.BLACKLIST_FILENAME_FILTER,)@ -> prop=new serverObjects()@ -> prop.putHTML("blacklistEngine",Switchboard.urlBlacklist.getEngineInfo(),)@ -> IF { -> action=post.get("action","",)@post!=null -> IF { -> prop.put("testlist","1",)@!(post!=null) -> urlstring=post.get("testurl","",)@post.containsKey("testList",) && post!=null -> TRY { -> testurl=new DigestURI(urlstring,)@post.containsKey("testList",) && post!=null } CATCH { -> testurl=null@!(post!=null) } -> IF { -> prop.putHTML("testlist_url",testurl.toString(),)@post.containsKey("testList",) && post!=null && testurl!=null -> IF { -> prop.put("testlist_listedincrawler","1",)@Switchboard.urlBlacklist.isListed(Blacklist.BLACKLIST_CRAWLER,testurl,) && !(post!=null) && testurl!=null } -> IF { -> prop.put("testlist_listedindht","1",)@!(post!=null) && Switchboard.urlBlacklist.isListed(Blacklist.BLACKLIST_DHT,testurl,) && testurl!=null } -> IF { -> prop.put("testlist_listedinnews","1",)@!(post!=null) && testurl!=null && Switchboard.urlBlacklist.isListed(Blacklist.BLACKLIST_NEWS,testurl,) } -> IF { -> prop.put("testlist_listedinproxy","1",)@Switchboard.urlBlacklist.isListed(Blacklist.BLACKLIST_PROXY,testurl,) && !(post!=null) && testurl!=null } -> IF { -> prop.put("testlist_listedinsearch","1",)@!(post!=null) && Switchboard.urlBlacklist.isListed(Blacklist.BLACKLIST_SEARCH,testurl,) && testurl!=null } -> IF { -> prop.put("testlist_listedinsurftips","1",)@Switchboard.urlBlacklist.isListed(Blacklist.BLACKLIST_SURFTIPS,testurl,) && !(post!=null) && testurl!=null } } ELSE { -> prop.put("testlist_url","not valid",)@!(testurl!=null) && !(post!=null) } } -> IF { -> blacklistToUse=post.get("selectedListName",)@post.containsKey("selectList",) && post!=null } -> IF { -> blacklistToUse=post.get("newListName","",).trim()@post!=null && post.containsKey("createNewList",) -> IF { -> prop.put("LOCATION","",)@!(blacklistToUse.length()==0) && !(post!=null) && post.containsKey("createNewList",) -> return prop@blacklistToUse.length()==0 && post!=null && post.containsKey("createNewList",) } -> IF { -> prop.put("error",1,)@!(blacklistToUse.length()==0) && !(post!=null) && post.containsKey("createNewList",) -> prop.putHTML("error_name",blacklistToUse,)@!(blacklistToUse.length()==0) && !blacklistToUse.matches("^[\\p{L}\\d\\+\\-_]+[\\p{L}\\d\\+\\-_.]*(\\.black){0,1}$",) && post!=null && post.containsKey("createNewList",) } ELSE { -> IF { -> TRY { -> newFile=new File(ListManager.listsPath,blacklistToUse,)@!(blacklistToUse.length()==0) && !dirlist.contains(blacklistToUse,) && !(!blacklistToUse.matches("^[\\p{L}\\d\\+\\-_]+[\\p{L}\\d\\+\\-_.]*(\\.black){0,1}$",)) && post!=null && post.containsKey("createNewList",) -> newFile.createNewFile()@!(blacklistToUse.length()==0) && !dirlist.contains(blacklistToUse,) && !(!blacklistToUse.matches("^[\\p{L}\\d\\+\\-_]+[\\p{L}\\d\\+\\-_.]*(\\.black){0,1}$",)) && post!=null && post.containsKey("createNewList",) -> ListManager.updateListSet(BLACKLIST_SHARED,blacklistToUse,)@!(blacklistToUse.length()==0) && !dirlist.contains(blacklistToUse,) && !(!blacklistToUse.matches("^[\\p{L}\\d\\+\\-_]+[\\p{L}\\d\\+\\-_.]*(\\.black){0,1}$",)) && post!=null && post.containsKey("createNewList",) -> supportedBlacklistType@!(blacklistToUse.length()==0) && !(post!=null) && !dirlist.contains(blacklistToUse,) && !(!blacklistToUse.matches("^[\\p{L}\\d\\+\\-_]+[\\p{L}\\d\\+\\-_.]*(\\.black){0,1}$",)) && post.containsKey("createNewList",) -> LOOP { -> ListManager.updateListSet(supportedBlacklistType+".BlackLists",blacklistToUse,)@!(blacklistToUse.length()==0) && !dirlist.contains(blacklistToUse,) && !(!blacklistToUse.matches("^[\\p{L}\\d\\+\\-_]+[\\p{L}\\d\\+\\-_.]*(\\.black){0,1}$",)) && post!=null && post.containsKey("createNewList",) } } } ELSE { -> prop.put("error",2,)@!(!dirlist.contains(blacklistToUse,)) && !(blacklistToUse.length()==0) && !(post!=null) && !(!blacklistToUse.matches("^[\\p{L}\\d\\+\\-_]+[\\p{L}\\d\\+\\-_.]*(\\.black){0,1}$",)) && post.containsKey("createNewList",) -> prop.putHTML("error_name",blacklistToUse,)@!(!dirlist.contains(blacklistToUse,)) && !(blacklistToUse.length()==0) && !(!blacklistToUse.matches("^[\\p{L}\\d\\+\\-_]+[\\p{L}\\d\\+\\-_.]*(\\.black){0,1}$",)) && post!=null && post.containsKey("createNewList",) } -> dirlist=FileUtils.getDirListing(ListManager.listsPath,Blacklist.BLACKLIST_FILENAME_FILTER,)@!(blacklistToUse.length()==0) && !(!blacklistToUse.matches("^[\\p{L}\\d\\+\\-_]+[\\p{L}\\d\\+\\-_.]*(\\.black){0,1}$",)) && post!=null && post.containsKey("createNewList",) } } ELSE { -> IF { -> blacklistToUse=post.get("selectedListName",)@post!=null && !(post.containsKey("createNewList",)) && post.containsKey("deleteList",) -> IF { -> prop.put("LOCATION","",)@blacklistToUse==null||blacklistToUse.length()==0 && !(post!=null) && post.containsKey("deleteList",) && post.containsKey("createNewList",) -> return prop@blacklistToUse==null||blacklistToUse.length()==0 && post!=null && !(post.containsKey("createNewList",)) && post.containsKey("deleteList",) } -> blackListFile=new File(ListManager.listsPath,blacklistToUse,)@post!=null && !(post.containsKey("createNewList",)) && !(blacklistToUse==null||blacklistToUse.length()==0) && post.containsKey("deleteList",) -> IF { -> Log.logWarning("Blacklist","file "+blackListFile+" could not be deleted!",)@!blackListFile.delete() && post!=null && !(post.containsKey("createNewList",)) && !(blacklistToUse==null||blacklistToUse.length()==0) && post.containsKey("deleteList",) } -> LOOP { -> ListManager.removeFromListSet(supportedBlacklistType+".BlackLists",blacklistToUse,)@post!=null && !(post.containsKey("createNewList",)) && !(blacklistToUse==null||blacklistToUse.length()==0) && post.containsKey("deleteList",) } -> ListManager.removeFromListSet(BLACKLIST_SHARED,blacklistToUse,)@post!=null && !(post.containsKey("createNewList",)) && !(blacklistToUse==null||blacklistToUse.length()==0) && post.containsKey("deleteList",) -> dirlist=FileUtils.getDirListing(ListManager.listsPath,Blacklist.BLACKLIST_FILENAME_FILTER,)@post!=null && !(post.containsKey("createNewList",)) && !(blacklistToUse==null||blacklistToUse.length()==0) && post.containsKey("deleteList",) } ELSE { -> IF { -> blacklistToUse=post.get("selectedListName","",).trim()@!(post.containsKey("deleteList",)) && post.containsKey("activateList",) && post!=null && !(post.containsKey("createNewList",)) -> IF { -> prop.put("LOCATION","",)@blacklistToUse==null||blacklistToUse.length()==0 && !(post!=null) && post.containsKey("activateList",) && post.containsKey("deleteList",) && post.containsKey("createNewList",) -> return prop@!(post.containsKey("deleteList",)) && blacklistToUse==null||blacklistToUse.length()==0 && post.containsKey("activateList",) && post!=null && !(post.containsKey("createNewList",)) } -> LOOP { -> IF { -> ListManager.updateListSet(supportedBlacklistType+".BlackLists",blacklistToUse,)@!(post.containsKey("deleteList",)) && post.containsKey("activateList4"+supportedBlacklistType,) && post.containsKey("activateList",) && post!=null && !(post.containsKey("createNewList",)) && !(blacklistToUse==null||blacklistToUse.length()==0) } ELSE { -> ListManager.removeFromListSet(supportedBlacklistType+".BlackLists",blacklistToUse,)@!(post.containsKey("deleteList",)) && !(post.containsKey("activateList4"+supportedBlacklistType,)) && post.containsKey("activateList",) && post!=null && !(post.containsKey("createNewList",)) && !(blacklistToUse==null||blacklistToUse.length()==0) } } -> ListManager.reloadBlacklists()@!(post.containsKey("deleteList",)) && post.containsKey("activateList",) && post!=null && !(post.containsKey("createNewList",)) && !(blacklistToUse==null||blacklistToUse.length()==0) } ELSE { -> IF { -> blacklistToUse=post.get("selectedListName","",).trim()@!(post.containsKey("deleteList",)) && !(post.containsKey("activateList",)) && post!=null && !(post.containsKey("createNewList",)) && post.containsKey("shareList",) -> IF { -> prop.put("LOCATION","",)@blacklistToUse==null||blacklistToUse.length()==0 && !(post!=null) && post.containsKey("activateList",) && post.containsKey("deleteList",) && post.containsKey("shareList",) && post.containsKey("createNewList",) -> return prop@!(post.containsKey("deleteList",)) && blacklistToUse==null||blacklistToUse.length()==0 && !(post.containsKey("activateList",)) && post!=null && !(post.containsKey("createNewList",)) && post.containsKey("shareList",) } -> IF { -> ListManager.removeFromListSet(BLACKLIST_SHARED,blacklistToUse,)@!(post.containsKey("deleteList",)) && !(post.containsKey("activateList",)) && post!=null && ListManager.listSetContains(BLACKLIST_SHARED,blacklistToUse,) && !(post.containsKey("createNewList",)) && !(blacklistToUse==null||blacklistToUse.length()==0) && post.containsKey("shareList",) } ELSE { -> ListManager.updateListSet(BLACKLIST_SHARED,blacklistToUse,)@!(post.containsKey("deleteList",)) && !(ListManager.listSetContains(BLACKLIST_SHARED,blacklistToUse,)) && !(post.containsKey("activateList",)) && post!=null && !(post.containsKey("createNewList",)) && !(blacklistToUse==null||blacklistToUse.length()==0) && post.containsKey("shareList",) } } ELSE { -> IF { -> blacklistToUse=post.get("currentBlacklist","",).trim()@!(post.containsKey("deleteList",)) && !(post.containsKey("shareList",)) && !(post.containsKey("activateList",)) && post!=null && !(post.containsKey("createNewList",)) && "deleteBlacklistEntry".equals(action,) -> selectedBlacklistEntries=post.getAll("selectedEntry.*",)@!(post.containsKey("deleteList",)) && !(post.containsKey("shareList",)) && !(post.containsKey("activateList",)) && post!=null && !(post.c...